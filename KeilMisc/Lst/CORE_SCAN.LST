C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE CORE_SCAN
OBJECT MODULE PLACED IN Code\CORE\CORE_SCAN.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe Code\CORE\CORE_SCAN.C LA WL(1) CD OT(9,SIZE) NOAREGS OR INCDIR(.\Code\CORE\
                    -INCLUDE\;.\Code\OEM\INCLUDE\;.\Code\CHIP\INCLUDE\)

line level    source

   1          /*-----------------------------------------------------------------------------
   2           * TITLE: CORE_SCN.C - code to handle local keyboard scanning.
   3           *
   4           * Copyright (c) 1983-2007, Insyde Software Corporation. All Rights Reserved.
   5           *
   6           * You may not reproduce, distribute, publish, display, perform, modify, adapt,
   7           * transmit, broadcast, present, recite, release, license or otherwise exploit
   8           * any part of this publication in any form, by any means, without the prior
   9           * written permission of Insyde Software Corporation.
  10           *---------------------------------------------------------------------------*/
  11           
  12          #include <CORE_INCLUDE.H>
  13          #include <OEM_INCLUDE.H>
  14          
  15          void CapDelay(void)
  16          {
  17   1          WNCKR = 0x00;               // Delay 15.26 us
  18   1          //WNCKR = 0x00;               // Delay 15.26 us     
  19   1      }
  20          
  21          /* ----------------------------------------------------------------------------
  22           * FUNCTION:   scan_keys
  23           *
  24           * Scan key matrix once.
  25           *
  26           * Return: value != 0, scan activity detected, scan again later.
  27           *         value  = 0, no scan activity detected.
  28           * ------------------------------------------------------------------------- */
  29          BYTE scan_keys(void)
  30          {
  31   1              BYTE result;
  32   1              result = FALSE;
  33   1              //TF_008++>>
  34   1          /* key buffer half-full or not */
  35   1          if(check_keyscan_buffer_half_full()!=0x00)
  36   1          {
  37   2              return(0x01);
  38   2          }
  39   1          //TF_008++<<
  40   1          scan.saf_make = 0;
  41   1          scan.saf_break = 0;
  42   1          scan.saf_keys = 0;
  43   1      
  44   1              if (typematic.byte)
  45   1              {
  46   2              check_tm(typematic);    // Check typematic. 
  47   2              }
  48   1      
  49   1              if (new_keyh.byte)              // Exist Debounce key? 
  50   1              {                                               // Yes, bounding. 
  51   2              scan.saf_make = 1;      // Set debounce make bit. 
  52   2              debounce_key();
  53   2              result = TRUE;
  54   2              }
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 2   

  55   1          
  56   1          if (!result)                                // Otherwise, scan all. 
  57   1          {
  58   2              for (ITempB03=0;ITempB03<16;ITempB03++)
  59   2              {
  60   3                      Write_Strobe(ITempB03);
  61   3                              CapDelay();
  62   3                      ITempB02 = KSI;         // Read in KI 0 - 7 sense line data.  default is High
  63   3                              //-----------------------------------
  64   3                              //Label:BLD_TIPIA_20160827_005
  65   3                              if(0x0F==ITempB03)
  66   3                              {
  67   4                                      /*
  68   4                                      if(Read_Delete())
  69   4                                      {
  70   4                                              ITempB02 = ITempB02 & 0xFD;
  71   4                                      }
  72   4                                      else
  73   4                                      {
  74   4                                      */
  75   4                                              ITempB02 = ITempB02 | 0x02;
  76   4                                      //}
  77   4                              }
  78   3                              //-----------------------------------
  79   3      
  80   3                              ITempB02 = (~ITempB02) ^ bscan_matrix[ITempB03];
  81   3                  if (ITempB02 != 0)
  82   3                      {
  83   4                      check_scan(ITempB02, ITempB03); 
  84   4                      }
  85   3      
  86   3                  if (bscan_matrix[ITempB03]) 
  87   3                      {                                                       // Here, if current still active. 
  88   4                      scan.saf_keys = 1;      // Set keys active bits. Check all key release. 
  89   4                  }   
  90   3                              KSOL=0xFF;      
  91   3                              KSOH1=0xFF;
  92   3              }
  93   2                                                                              // If ghost exist, make key clear.
  94   2              if (new_keyl.field.ghost == 1)
  95   2              {  
  96   3                  new_keyl.field.ghost = 0;   // Ghost flag is set. Clear it.
  97   3                  ITempB01 = new_keyl.byte & 7;
  98   3                  if (ITempB01 == 0)
  99   3                  {  
 100   4                      ITempB01 = Byte_Mask((BYTE) (new_keyh.field.input));
 101   4                      ITempB01 = ITempB01 & diode_key; 
 102   4                  }
 103   3      
 104   3                  if (ITempB01 == 0)
 105   3                  {   
 106   4                      new_keyh.byte = 0;      // Clear new key. 
 107   4                      new_keyl.byte = 0;
 108   4                  }
 109   3              } 
 110   2          }
 111   1      
 112   1              return((BYTE) (scan.saf_make + scan.saf_break + scan.saf_keys));
 113   1      }
 114          
 115          /* ----------------------------------------------------------------------------
 116           * FUNCTION: Write_Strobe
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 3   

 117           *
 118           * Writes the scan matrix KSO[15:0] lines based on Scan Line bit number.
 119           *
 120           * KSO[15:0] will be all floats or open except for the bit corresponding to
 121           * the Scan Line number.  This bit will be low to be detected by the sense
 122           * line input port later.
 123           *
 124           * Config.Msk_Strobe_H and Config.Msk_Strobe_L specify which of the 16 bits on
 125           * the port are used for the scanner.  (1 = Scanner, 0 = Other OEM function).
 126           * This allows port pins which are not used for the scanner output lines to be
 127           * used for something else.
 128           *
 129           * Input: Scan line number.
 130           * ------------------------------------------------------------------------- */
 131          void Write_Strobe(BYTE scan_line_num) //default is High, Low effective
 132          {
 133   1              if (scan_line_num<8)
 134   1              {
 135   2              KSOL=~(0x01<<scan_line_num);
 136   2              KSOH1=0xFF;
 137   2              }
 138   1              else
 139   1              {
 140   2              KSOL=0xFF;
 141   2                      KSOH1=~(0x01<<(scan_line_num-0x08));
 142   2              } 
 143   1      
 144   1              if(ExtendMatrix)
 145   1              {
 146   2                      KSOH2 = 0xFF;
 147   2                      Hook_SetGPIOScanPinH();
 148   2              }
 149   1      }
 150          
 151          /* ----------------------------------------------------------------------------
 152           * FUNCTION: check_scan
 153           *
 154           * Input:
 155           *     changes = Any bit set indicates there is a difference in state from
 156           *         last KSI to this KSI.
 157           *     scan_address = Address of strobe line that was low when changes was
 158           *         computed.
 159           *
 160           * NOTE:  For the shift and bit test of "changes" to work, "changes" MUST be
 161           * unsigned.  (Right shifting an unsigned quantity fills vacated bits with
 162           * zeros.  Right shifting a signed quantity will fill vacated bits with sign
 163           * bits on some machines and zero bits on others.)
 164           * ------------------------------------------------------------------------- */
 165          static void check_scan(BYTE changes, BYTE scan_address)
 166          {
 167   1          BYTE flag;
 168   1          BYTE change_make_key;
 169   1          BYTE bit_num; 
 170   1           
 171   1              flag = FALSE;                                   // Simple Matrix. 
 172   1              if (new_keyl.field.ghost == 1)
 173   1              {
 174   2              flag = TRUE;
 175   2              }
 176   1              else
 177   1              {   /* Find 0 -> 1 's. */
 178   2                      change_make_key = changes & ~bscan_matrix[scan_address];
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 4   

 179   2              if (change_make_key == 0) 
 180   2                      {
 181   3                      flag = FALSE;
 182   3              }
 183   2                      else if (find_paths(change_make_key, scan_address)) 
 184   2                      {
 185   3                      flag = TRUE;    /* TRUE if ghost keys. */
 186   3              }
 187   2              }
 188   1      
 189   1              if (flag)
 190   1              {   /* Ghost exists. */
 191   2                      new_keyl.field.ghost = 1;  /* Set ghost flag. */
 192   2              /* Only look at 1 -> 0 transition & diode key always no ghost. */
 193   2              changes &= bscan_matrix[scan_address] | diode_key;
 194   2              }
 195   1      
 196   1          bit_num = 0;
 197   1          while (changes != 0)
 198   1          {   
 199   2              if (changes & 0x01)     /* Look at changes 1 bit at a time. */
 200   2                      {
 201   3                  cscfnd(bit_num, scan_address);
 202   3              }
 203   2              bit_num++;
 204   2              changes = changes >> 1; /* Shift bit out (and a zero bit in) to check next bit. */
 205   2          }
 206   1      }
 207          
 208          /* ----------------------------------------------------------------------------
 209           * FUNCTION:   cscfnd
 210           *
 211           * Find changed bit.  This subroutine is called for each bit in this KSI that
 212           * is different from last KSI.
 213           * ------------------------------------------------------------------------- */
 214          static void cscfnd(BYTE bit_num, BYTE scan_address)
 215          {
 216   1          if (bscan_matrix[scan_address] & Byte_Mask(bit_num))
 217   1          {  
 218   2              if (scan.saf_break == 0) 
 219   2                      {
 220   3                  scan.saf_break = 1;
 221   3                  setup_debounce(bit_num, scan_address, BREAK_EVENT);
 222   3              }
 223   2          }
 224   1          else
 225   1          {   
 226   2              if (scan.saf_make == 0) 
 227   2                      {
 228   3                  scan.saf_make = 1;
 229   3                  setup_debounce(bit_num, scan_address, MAKE_EVENT);
 230   3              }
 231   2          } 
 232   1      }
 233          
 234          /* ----------------------------------------------------------------------------
 235           * FUNCTION:   setup_debounce
 236           *
 237           * Input:
 238           *     scan_address = number of bit of KO.
 239           *     bit_num = number of bit that changed from last KI to this KI for KO.
 240           *     event = contact event (MAKE_EVENT or BREAK_EVENT).
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 5   

 241           * ------------------------------------------------------------------------- */
 242          static void setup_debounce(BYTE bit_num, BYTE scan_address, BYTE event)
 243          {
 244   1          new_keyh.field.output = scan_address;
 245   1          new_keyh.field.input = bit_num;
 246   1          new_keyh.field.debounce_status = 1;
 247   1          new_keyl.field.state = 0;  /* Debounce has not counted out. */
 248   1          new_keyl.field.same = 0;   /* Key activity indication. */
 249   1      
 250   1          if (event == MAKE_EVENT)
 251   1          {   /* For MAKE key (key pressed). */
 252   2              new_keyl.field.trans = 0;
 253   2              new_keyl.field.count = Ext_Cb2.field.Break_Count; /* Shouldn't this be Make_Count? */
 254   2          }
 255   1          else
 256   1          {   /* For BREAK key (key released). */
 257   2              new_keyl.field.trans = 1;
 258   2              new_keyl.field.count = Ext_Cb2.field.Make_Count; /* Shouldn't this be Break_Count? */
 259   2          }
 260   1      }
 261          
 262          /* ----------------------------------------------------------------------------
 263           * FUNCTION: find_paths
 264           *
 265           * Input:  DOWN_STATE  scan_address
 266           *         change_make_key
 267           *
 268           * Return: FALSE if no paths found, Otherwise returns TRUE.
 269           * ------------------------------------------------------------------------- */
 270          static FLAG find_paths(BYTE change_make_key, BYTE scan_address)
 271          {
 272   1          FLAG paths_found, done;
 273   1          BYTE paths, temp, bits;
 274   1          BYTE first_address;
 275   1      
 276   1          /* For the shift and bit test to work, "bits" MUST be unsigned.  (Right
 277   1             shifting an unsigned quantity fills vacated bits with zeros.  Right
 278   1             shifting a signed quantity will fill vacated bits with sign bits on some
 279   1             machines and zero bits on others.) */
 280   1          done = FALSE;
 281   1          paths_found = FALSE;
 282   1          first_address = scan_address;
 283   1      
 284   1          change_make_key &= ~(diode_key); /* Ignore diode key. */
 285   1          /* change_make_key = bKO_BITS. */
 286   1      
 287   1          if (change_make_key == 0) 
 288   1              {
 289   2              done = TRUE; /* paths_found == FALSE */
 290   2          }
 291   1      
 292   1          if (!done)
 293   1          {
 294   2              paths = bscan_matrix[scan_address] | change_make_key;
 295   2              paths &= ~(diode_key);  /* Ignore diode key. */
 296   2              /* paths = bKO_PATHS. */
 297   2              if (paths == 0) 
 298   2                      {
 299   3                  done = TRUE;  /* paths_found == FALSE */
 300   3              }
 301   2          }
 302   1      
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 6   

 303   1          while (!done)
 304   1          {
 305   2              scan_address++;
 306   2      
 307   2              if (scan_address >= MAX_SCAN_LINES)     
 308   2              //if(scan_address >= STANDARD_SCAN_LINES)
 309   2                      {
 310   3                  scan_address = 0;   /* Wrap around */
 311   3              }
 312   2      
 313   2              if (scan_address == first_address) 
 314   2                      {
 315   3                  done = TRUE;        /* No scan lines left.  paths_found == FALSE */
 316   3              }
 317   2      
 318   2              if (!done)
 319   2              {   /* Check Path */
 320   3                  temp  = bscan_matrix[scan_address]; /* Any paths? */
 321   3                  temp &= ~(diode_key);               /* Ignore diode key */
 322   3      
 323   3                  if (temp != 0) 
 324   3                              {    /* Paths found */
 325   4                      temp &= paths;  /* Do paths line up? */
 326   4                  }
 327   3      
 328   3                  if (temp != 0)
 329   3                  {   /* Paths line up */
 330   4                      if (change_make_key != temp)  /* Only 1 bit set? */
 331   4                      {   /* No, ghost exists. */
 332   5                          paths_found = TRUE;
 333   5                          done = TRUE;
 334   5                      }
 335   4      
 336   4                      if (!done)
 337   4                      {   /* The following checks if more than one bit is set to 1.
 338   5                             Because "bits" is unsigned, each shift moves the bit
 339   5                             under test out and a 0 bit in.  When the first 1 bit is
 340   5                             found, if "bits" == 0, this indicates that there is only
 341   5                             one bit set. */
 342   5                          bits = paths;  /* Only 1 bit set? */
 343   5                          temp = FALSE;
 344   5      
 345   5                          do
 346   5                          {
 347   6                              if (bits & 0x01) 
 348   6                                                      {
 349   7                                  temp = TRUE;
 350   7                              }
 351   6      
 352   6                              /* Shift bit out (and a zero bit in) to check next bit. */
 353   6                              bits = bits >> 1;
 354   6                          } while (temp == FALSE);
 355   5      
 356   5                          if (bits != 0)
 357   5                          {   /* No, more than 1 bit set. */
 358   6                              paths_found = TRUE;
 359   6                              done = TRUE;
 360   6                          }
 361   5                      } /* if (!done) */
 362   4                  } /* if (temp != 0) */
 363   3              } /* if (!done) */
 364   2          } /* while (!done) */
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 7   

 365   1      
 366   1         return (paths_found);
 367   1      }
 368          
 369          /* ----------------------------------------------------------------------------
 370           * FUNCTION: debounce_key
 371           * ------------------------------------------------------------------------- */
 372          static void debounce_key(void)
 373          {                                                       
 374   1          scan.scan_line = new_keyh.field.output;     
 375   1          Write_Strobe(scan.scan_line); 
 376   1              CapDelay();     
 377   1          ITempB01 = Read_Scan_Lines();
 378   1              //-----------------------------------
 379   1              //Label:BLD_TIPIA_20160827_005
 380   1              if(0x0F==scan.scan_line)
 381   1              {
 382   2                      /*
 383   2                      if(Read_Delete())
 384   2                      {
 385   2                              ITempB01 = ITempB01 & 0xFD;
 386   2                      }
 387   2                      else
 388   2                      {
 389   2                      */
 390   2                              ITempB01 = ITempB01 | 0x02;
 391   2                      //}
 392   2              }
 393   1              //----------------------------------- 
 394   1          ITempB01 = ~ITempB01;
 395   1      
 396   1          ITempB02 = Byte_Mask((BYTE) (new_keyh.field.input));        
 397   1          ITempB02 = ITempB02 & ITempB01;
 398   1      
 399   1          if (ITempB02 != 0)
 400   1          {  
 401   2              if (new_keyl.field.trans == 0) 
 402   2                      {
 403   3                  new_keyl.field.same = 1;    // last key detected as a MAKE,  same = 1.
 404   3              }
 405   2              else 
 406   2                      {
 407   3                  new_keyl.field.same = 0;    // last key detected as a BREAK, same = 0.
 408   3              }
 409   2          }
 410   1          else
 411   1          { 
 412   2              if (new_keyl.field.trans == 0) 
 413   2                      {
 414   3                  new_keyl.field.same = 0;    // last key detected as a MAKE,  same = 0. 
 415   3              }
 416   2              else 
 417   2                      {
 418   3                  new_keyl.field.same = 1;    // last key detected as a BREAK, same = 1. 
 419   3              }
 420   2          } 
 421   1      #if 0           // Dino 0201 change keyboard debounce time to 5ms
                  if (new_keyl.field.state == 0)
                  {  
                      if (new_keyl.field.count != 0)
                      {   
                          new_keyl.field.count--;
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 8   

                      }
                      else
                      {
                          if (new_keyl.field.same == 0)
                          {   
                              new_keyh.byte = 0;      // Debounce failed, so claer all data
                              new_keyl.byte = 0;
                          }
                          else
                          {   
                              new_keyl.field.state = 1;
                          } 
                      }
                  }
                  else
              #endif
 443   1          { 
 444   2              if (new_keyl.field.same == 0)
 445   2              {   
 446   3                  new_keyh.byte = 0;  // Debounce failed. 
 447   3                  new_keyl.byte = 0;
 448   3              }
 449   2              else
 450   2              { 
 451   3                      change_valid();         // Debounce OK 
 452   3              } 
 453   2          }
 454   1      }
 455          
 456          /* ----------------------------------------------------------------
 457           * FUNCTION: Read_Scan_Lines - Read KSI[7:0] of the scan matrix
 458           *
 459           * Return: Data from sense lines that are enabled.
 460           *         The lines that are disabled return 1s.
 461           *
 462           * C prototype: BYTE Read_Scan_Lines();
 463           * ---------------------------------------------------------------- */
 464          BYTE Read_Scan_Lines(void)
 465          {
 466   1              return (KSI);                  
 467   1      }
 468          
 469          /* ---------------------------------------------------------------
 470           * FUNCTION: change_valid
 471           * --------------------------------------------------------------- */
 472          static void change_valid(void)
 473          {
 474   1          ITempB04 = Byte_Mask((BYTE) (new_keyh.field.input)); 
 475   1          ITempB03 = bscan_matrix[new_keyh.field.output]; 
 476   1          ITempB03 = ITempB03 ^ ITempB04;
 477   1          bscan_matrix[new_keyh.field.output] = ITempB03;   // bscan_matrix[]  write only one
 478   1      
 479   1              ITempB05 = BREAK_EVENT;                 // Ready for BREAK indication. 
 480   1          if ((ITempB04 & ITempB03) != 0)  // It's not same read agin
 481   1          {                                                   
 482   2              ITempB05 = MAKE_EVENT;
 483   2              typematic.byte = new_keyh.byte; // Set New Typematic Key.
 484   2              scan.TMscale = TM_SCALE;
 485   2              bTMcount = bTMdelay;
 486   2      
 487   2                      etkeytypematic.byte = 0x00;
 488   2          }
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 9   

 489   1              
 490   1          Send_Scan2(new_keyh, ITempB05);
 491   1          new_keyh.byte = 0;
 492   1          new_keyl.byte = 0; 
 493   1      }
 494          
 495          /* ----------------------------------------------------------------------------
 496           * FUNCTION: check_tm - check typematic function.
 497           *
 498           * Input: Typematic key
 499           * ------------------------------------------------------------------------- */
 500          static void check_tm(union KEY key)
 501          {
 502   1              ITempB02 = FALSE;                                                                               
 503   1          ITempB01 = Byte_Mask((BYTE) (key.field.input)); 
 504   1          ITempB01 = ITempB01 & bscan_matrix[key.field.output];
 505   1      
 506   1          if (ITempB01 == 0)                  // Release Typematic key? 
 507   1          {   
 508   2              typematic.byte = 0;     // Clear Typematic. 
 509   2              ITempB02 = TRUE;
 510   2          }
 511   1      
 512   1          if (!ITempB02)
 513   1          {  
 514   2              scan.TMscale--;          // Count down Prescale.
 515   2              if (scan.TMscale != 0) 
 516   2                      {
 517   3                  ITempB02 = TRUE;
 518   3              }
 519   2          }
 520   1      
 521   1          if (!ITempB02)
 522   1          {
 523   2              scan.TMscale = TM_SCALE;// Reload prescale counter. 
 524   2              bTMcount--;             // Count down TMcount. 
 525   2              if (bTMcount != 0) 
 526   2                      {
 527   3                  ITempB02 = TRUE;
 528   3              }
 529   2          }
 530   1      
 531   1          if (!ITempB02)
 532   1          {
 533   2              bTMcount = bTMrepeat;   // Reload TMcount. 
 534   2              Send_Scan2(key, REPEAT_EVENT);
 535   2          }
 536   1      }
 537          
 538          /* ----------------------------------------------------------------
 539           * FUNCTION: Scan_Init - Initialize internal keyboard (scanner)
 540           * ---------------------------------------------------------------- */
 541          void Scan_Init(void)                                    // Lower all KSO lines for scan matrix
 542          {
 543   1              KSOL=0x00;  
 544   1              KSOH1=0x00;
 545   1              
 546   1              if(ExtendMatrix)                                // The function of extend keys
 547   1              {
 548   2                      KSOH2=0x00;
 549   2                      
 550   2                      Hook_SetGPIOScanPinCtrl();
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 10  

 551   2                      Hook_SetGPIOScanPinL();
 552   2              }
 553   1      }
 554          
 555          /* ----------------------------------------------------------------
 556           * FUNCTION: Enable_Any_Key_Irq
 557           *
 558           * Setup for any key from scanner to generate an interrupt.
 559           *
 560           * Lower the "strobe" lines so that when any key is pressed at least one input
 561           * line will go low.  Any bits (out of the possible 16) that are not used for
 562           * the internal keyboard (scanner) are left alone.  This is done using
 563           * Config.Msk_Strobe_H and Config.Msk_Strobe_L.
 564           *
 565           * Then, if the internal keyboard (scanner) is enabled, allow the interrupt to
 566           * occur when a key is pressed on the scanner.
 567           * -------------------------------------------------------------- */
 568          void Enable_Any_Key_Irq(void)   // Lower all KSO lines for scan matrix
 569          {
 570   1              KSOL=0x00;             
 571   1              KSOH1=0x00;
 572   1              
 573   1              if (ExtendMatrix)
 574   1              {
 575   2                      KSOH2=0x00;
 576   2                      Hook_SetGPIOScanPinL();
 577   2              }       
 578   1              SET_MASK(IER1,Int_KB);      // enable KSI interrupt
 579   1              /*
 580   1              //Label:BLD_TIPIA_20160827_005
 581   1              //Label:BLD_TIPIA_20160921_009 (Disable GPIOH0 interrupt)
 582   1              IPOLR6 = IPOLR6|Int_WKO60;   // level low triggered
 583   1              ISR6 = Int_WKO60;                  // clear interrupt
 584   1              SET_MASK(IER6,Int_WKO60);    // Enable GPIOH0 interrupt
 585   1      */
 586   1      }
 587          
 588          /* ----------------------------------------------------------------------------
 589           * FUNCTION:   Start_Scan_Transmission
 590           *
 591           * Lock out other devices so scanner can transmit data to Host, and start
 592           * Timer B with event "SEND_ENABLE".  When the "RESPONSE_TIME" has expired,
 593           * the Timer B interrupt handler will post a "SEND" service request to be
 594           * dispatched by the main service loop.  At that time the data will be sent to
 595           * the Host via the "SEND" service handler.
 596           * ------------------------------------------------------------------------- */
 597          void Start_Scan_Transmission(void)
 598          {
 599   1          //Load_Timer_B();
 600   1          //Timer_B.fbit.SEND_ENABLE = 1;
 601   1          SetServiceSendFlag();
 602   1      }
 603          
 604          /* ----------------------------------------------------------------------------
 605           * FUNCTION:   Check_Scan_Transmission
 606           *
 607           * See if the scanner keyboard data transmission (to Host) should be allowed.
 608           *
 609           * Return: Transmission status indication.  TRUE if ok to transmit.
 610           * ------------------------------------------------------------------------- */
 611          FLAG Check_Scan_Transmission(void)
 612          {
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 11  

 613   1          FLAG allow_transmission = FALSE;
 614   1      
 615   1          if ((Int_Var.Scan_Lock == 0) && (Flag.SCAN_INH == 0)) 
 616   1          {           /* Scanner transmission is locked and inhibited. */ 
 617   2          
 618   2              if (scan.kbf_head != scan.kbf_tail) 
 619   2                      {
 620   3                  allow_transmission = TRUE;  /* Allow transmission */
 621   3              }
 622   2          }    
 623   1      
 624   1          return (allow_transmission);
 625   1      }
 626          
 627          /* ----------------------------------------------------------------
 628           * FUNCTION: Get_Kbd_Type
 629           *
 630           * Returns the type of the internal keyboard.
 631           *
 632           * Returns: 0 = U.S. keyboard, 1 = Japanese keyboard.
 633           * -------------------------------------------------------------- */
 634          FLAG Get_Kbd_Type(void)
 635          {                                               // Check keyboard type here
 636   1                                                      // Returns: 0 = U.S. keyboard, 1 = Japanese keyboard.
 637   1              if(1)                           // check type here
 638   1              {
 639   2                      return(0);      // U.S. keyboard. 
 640   2              }
 641   1              else
 642   1              {
 643   2                      return(1);              // Japanese keyboard
 644   2              }
 645   1      }
 646          
 647          /* ----------------------------------------------------------------------------
 648           * FUNCTION: Lock_Scan
 649           *
 650           * Lock out the scanner via "Scan_Lock" and clear pending scanner "SEND"
 651           * events.
 652           * ------------------------------------------------------------------------- */
 653          void Lock_Scan(void)
 654          {
 655   1          Int_Var.Scan_Lock = 1;
 656   1          //Timer_B.fbit.SEND_ENABLE = 0;
 657   1      }
 658          
 659          /* ----------------------------------------------------------------------------
 660           * FUNCTION: Init_Kbd - Scanner Keyboard Initialization.
 661           * ------------------------------------------------------------------------- */
 662          void Unlock_Scan(void) 
 663          {
 664   1              Int_Var.Scan_Lock = 0;
 665   1      }
 666          
 667          void CheckKSO1617Support(void)
 668          {
 669   1              ExtendScanPin = 0x00;
 670   1      
 671   1              if((KSO16CtrlReg&0xFB)==0x00)
 672   1              {
 673   2                      ExtendScanPin++;
 674   2              }
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 12  

 675   1      
 676   1              if((KSO17CtrlReg&0xFB)==0x00)
 677   1              {
 678   2                      ExtendScanPin++;
 679   2              }
 680   1              
 681   1              if(ExtendScanPin!=0x00)
 682   1              {
 683   2                      ExtendMatrix = 1;
 684   2              } 
 685   1              else
 686   1              {
 687   2                      ExtendMatrix = 0;
 688   2              }
 689   1      }
 690          
 691          /* ----------------------------------------------------------------------------
 692           * FUNCTION: Init_Kbd - Scanner Keyboard Initialization.
 693           * ------------------------------------------------------------------------- */
 694          void Init_Kbd(void)
 695          {
 696   1              CheckKSO1617Support();
 697   1      
 698   1              Scan_Init();  
 699   1      
 700   1              Hook_Setup_Scanner_Pntr();
 701   1          Setup_Diode_Key();
 702   1      
 703   1          new_keyh.byte = 0;
 704   1          new_keyl.byte = 0;
 705   1      
 706   1              ClearExtendKeys();      // for extend keys
 707   1      
 708   1          Clear_Fn_Keys();
 709   1          Clear_Key();        /* Clear key matrix/buffer */
 710   1          Clear_Typematic();
 711   1      
 712   1              Enable_Any_Key_Irq();
 713   1      
 714   1          FN_Key_Break = 0x00;        // Clear FN_Key_Break
 715   1          FN_Key_Break_HS = 0x00;
 716   1          table_entry_bk = 0x00;
 717   1          
 718   1          #if KB_FnStickKey
                  FnStickKey = 0;
                  #endif
 721   1      }
 722          
 723          /* ----------------------------------------------------------------------------
 724           * FUNCTION:   Setup_Diode_Key
 725           * ------------------------------------------------------------------------- */
 726          void Setup_Diode_Key(void)
 727          {
 728   1              if(1)
 729   1              {   
 730   2              //if (Ext_Cb3_DISABLE_NKEY) { /* Simple matrix (NO diodes) */
 731   2              diode_key = 0x00;
 732   2          }
 733   1          else 
 734   1              {                      /* N-key (diodes in keyboard) */
 735   2              diode_key = 0xFF;
 736   2          }
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 13  

 737   1      }
 738          
 739          
 740          /* ----------------------------------------------------------------------------
 741           * FUNCTION: Clear_Key - Clear local keyboard buffer and related variables.
 742           * ------------------------------------------------------------------------- */
 743          void Clear_Key(void)
 744          {
 745   1          BYTE i;
 746   1          //WORD msk_strobe;
 747   1      
 748   1          for(i = 0; i < MAX_SCAN_LINES; i++) // Clear scan matrix.
 749   1              {
 750   2              bscan_matrix[i] = 0;
 751   2          }
 752   1      
 753   1          for(i = 0; i < KBF_SIZE; i++)               // Clear key buffer.
 754   1              {
 755   2              bKEY_BUFF[i] = 0;
 756   2          }
 757   1      
 758   1          scan.kbf_head = 0;
 759   1          scan.kbf_tail = 0;
 760   1          typematic.byte = 0;
 761   1          scan.saf_make = 0;
 762   1          scan.saf_break = 0;
 763   1          scan.saf_keys = 0;
 764   1              scan.scan_line = 0;
 765   1      }
 766          
 767          
 768          /* ----------------------------------------------------------------------------
 769           * FUNCTION: Clear_Typematic - Set default typematic delay and clear type-matic action.
 770           * ------------------------------------------------------------------------- */
 771          void Clear_Typematic(void)
 772          {
 773   1          typematic.byte = 0;
 774   1          bTMdelay = TM_DELAY;
 775   1          bTMrepeat = TM_REPEAT;
 776   1      }
 777          
 778          /* ----------------------------------------------------------------------------
 779           * FUNCTION: Set_Typematic - Set the typematic rate.
 780           *
 781           * Input: typematic rate
 782           *        Bit[4:0] Typematic repeat interval
 783           *        Bit[6:5] Delay time
 784           * ------------------------------------------------------------------------- */
 785          //const BYTE code repeat_tbl[] =
 786          //{
 787          //     3,  4,  4,  5,  5,  6,  6,  7,  7,  8,  9, 10, 11, 12, 13, 14,
 788          //    15, 16, 18, 20, 22, 24, 25, 27, 30, 33, 37, 41, 44, 48, 52, 55
 789          //};
 790          //const BYTE code delay_tbl[] = {27, 55, 83, 111};
 791          
 792          const BYTE code repeat_tbl[] =
 793          {
 794               3,  4,  4,  5,  5,  5,  6,  6,  7,  7,  8, 9, 10, 11, 11, 12,
 795              13, 15, 16, 18, 20, 21, 23, 25, 27, 30, 33, 37, 40, 43, 47, 50
 796          };
 797          const BYTE code delay_tbl[] = {25, 50, 75, 100};
 798          
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 14  

 799          void Set_Typematic(WORD type_rate)
 800          {
 801   1          Save_Typematic = type_rate;   /* Save for suspend/resume. */
 802   1      
 803   1          /* Bit 4 - 0 typematic repeat interval index. */
 804   1          bTMrepeat = repeat_tbl[type_rate & 0x1F];
 805   1      
 806   1          /* Bit 6 - 5 delay time index. */
 807   1          bTMdelay = delay_tbl[(type_rate >> 5) & 0x03];
 808   1      }
 809          
 810          
 811          /* ----------------------------------------------------------------------------
 812           * FUNCTION: Handle_Scan - Service the local keyboard in response to a key press.
 813           * ------------------------------------------------------------------------- */
 814          void service_scan(void)
 815          {
 816   1              BYTE scan_activity;
 817   1      
 818   1          if (Timer_A.fbit.TMR_SCAN == 0)
 819   1          {
 820   2              Timer_A.fbit.TMR_SCAN = 1;      // Activate scan timer.
 821   2          }
 822   1              
 823   1              if(ExtendMatrix)//---------------- extend keys, matrix is 18*8
 824   1              {
 825   2                      scan_activity = scan_keys()|bScanExtendKeys();
 826   2              }
 827   1              else //-----------------------------matrix is 16*8
 828   1              {
 829   2                      scan_activity = scan_keys();// Scan keyboard matrix one time.
 830   2              }
 831   1      
 832   1              
 833   1          if(!scan_activity)                     // No scan activity
 834   1          {   
 835   2              Timer_A.fbit.TMR_SCAN = 0;    // Disable the scan timer. 
 836   2              F_Service_KEY = 0;          // Clear any pending service request.  
 837   2              Enable_Any_Key_Irq();      // Enable Any Key interrupt.
 838   2              FN_Key_Break = 0x00;       // Clear FN_Key_Break
 839   2              FN_Key_Break_HS = 0x00;
 840   2              table_entry_bk = 0x00;
 841   2              }
 842   1      
 843   1          if (Timer_B.fbit.SEND_ENABLE == 0)  // 1 = Device send request (Request already set)
 844   1          {
 845   2                      if (Check_Scan_Transmission())  // Data available
 846   2                      {   
 847   3                      Start_Scan_Transmission();      // Start new transmission
 848   3              }
 849   2          }
 850   1      }
 851          
 852          
 853          /*****************************************************************************/
 854          /********** SCANNER KEY BUFFER ROUTINES **************************************/
 855          /*****************************************************************************/
 856          
 857          /* ----------------------------------------------------------------------------
 858           * FUNCTION:   Get_Buffer
 859           *
 860           * Get data byte from keyboard buffer (if not empty) and update "scan.kbf_head"
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 15  

 861           * with new index into keyboard buffer.
 862           *
 863           * Return: Data from buffer (WORD of all 1's if buffer is empty).
 864           * ------------------------------------------------------------------------- */
 865          //WORD Get_Buffer(void)
 866          BYTE Get_Buffer(void)
 867          {
 868   1          //WORD buffer_data;
 869   1          BYTE buffer_data;
 870   1      
 871   1          if (scan.kbf_head != scan.kbf_tail)
 872   1          {
 873   2              //buffer_data = (WORD) bKEY_BUFF[scan.kbf_head++];
 874   2                      buffer_data = bKEY_BUFF[scan.kbf_head++];
 875   2              if (scan.kbf_head >= KBF_SIZE) 
 876   2                      {
 877   3                  scan.kbf_head = 0;
 878   3              }
 879   2          }
 880   1          else
 881   1          {   /* Buffer is empty. */
 882   2              buffer_data = 0xFF;
 883   2          }
 884   1          return (buffer_data);
 885   1      }
 886          
 887          /* ----------------------------------------------------------------------------
 888           * FUNCTION:   Buffer_Mark - Mark local keyboard buffer tail.
 889           * ------------------------------------------------------------------------- */
 890          void Buffer_Mark(void)
 891          {
 892   1          scan.kbf_mark = scan.kbf_tail;   /* Copy scan.kbf_tail to scan.kbf_mark. */
 893   1      }
 894          
 895          /* ----------------------------------------------------------------------------
 896           * FUNCTION:   Buffer_Key
 897           *
 898           * Input:  Row/Column (0iii,oooo) to put in buffer.
 899           * Return: TRUE operation successful, FALSE unsuccessful.
 900           * ------------------------------------------------------------------------- */
 901          FLAG Buffer_Key(BYTE row_column)
 902          {
 903   1          FLAG ready = TRUE;  /* Ready for successful operation */
 904   1      
 905   1          bKEY_BUFF[scan.kbf_tail] = row_column;  /* Store Data to Buffer Tail */
 906   1          scan.kbf_tail++;                        /* Increment Buffer Tail (pointer) */
 907   1      
 908   1          if (scan.kbf_tail >= KBF_SIZE) 
 909   1              {
 910   2              scan.kbf_tail = 0;  /* Wrap pointer if too large. */
 911   2          }
 912   1      
 913   1          /* Check Overflow */
 914   1          if (scan.kbf_tail == scan.kbf_head)
 915   1          {   /* Overflow */
 916   2              scan.kbf_tail = scan.kbf_mark;  /* Restore buffer marker. */
 917   2              bKEY_BUFF[scan.kbf_tail] = 0;   /* Set OverFlow Mark. */
 918   2              ready = FALSE;                  /* Overflow Indication !!! */
 919   2          }
 920   1      
 921   1          return (ready);
 922   1      }
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 16  

 923          
 924          
 925          /* ----------------------------------------------------------------------------
 926           * FUNCTION:   Buffer_String
 927           *
 928           * Places a string in the local keyboard buffer (without a terminating NULL).
 929           * Call Buffer_Key to place data in key buffer.
 930           *
 931           * Input:  Pointer to null terminated string.
 932           * Return: 0x80 if buffer overflow error, else 0.
 933           * ------------------------------------------------------------------------- */
 934          BYTE Buffer_String(const BYTE *pntr)
 935          {
 936   1          register BYTE error = 0;
 937   1      
 938   1          while ((*pntr != 0) && (error == 0))
 939   1          {
 940   2              if (Buffer_Key(*pntr++) == 0) {
 941   3                  error = 0x80;   /* Indicate Overflow */
 942   3              }
 943   2          }
 944   1      
 945   1          return (error);
 946   1      }
 947          
 948          //*****************************************************************
 949          // The functions of extend keys
 950          //*****************************************************************
 951          //-----------------------------------------------------------------
 952          // The function of Scaning extend keys
 953          //-----------------------------------------------------------------
 954          BYTE bScanExtendKeys(void)
 955          {
 956   1              ITempB06 = FALSE;
 957   1              //TF_008++>>
 958   1          /* buffer half-full */
 959   1          if(check_keyscan_buffer_half_full()!=0x00)
 960   1          {
 961   2              return(0x01);
 962   2          }
 963   1          //TF_008++<<
 964   1              extendscan.saf_break = 0;
 965   1              extendscan.saf_make= 0;
 966   1              extendscan.saf_keys= 0;
 967   1      
 968   1              if (etkeytypematic.byte) 
 969   1              {
 970   2              CheckEtKeystm(etkeytypematic);  // Check typematic. 
 971   2              }
 972   1      
 973   1              if (new_extendkey.byte)                 
 974   1              {                                                               // Yes, bounding.
 975   2              extendscan.saf_make = 1;  
 976   2              DebounceExtendkey();
 977   2              ITempB06 = TRUE;
 978   2              }
 979   1      
 980   1              if(ITempB06 == FALSE)
 981   1              {
 982   2              for (ITempB01=0;ITempB01<ExtendScanPin;ITempB01++)
 983   2              {
 984   3                              SetExtendScanLines(ITempB01);
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 17  

 985   3                              ITempB02 = KSI;
 986   3                              ITempB02 = (~ITempB02)^bscan_matrix[ITempB01+STANDARD_SCAN_LINES];
 987   3                  if (ITempB02 != 0) 
 988   3                      {
 989   4                                      CheckExtendKeys(ITempB02,(ITempB01+STANDARD_SCAN_LINES));
 990   4                      }
 991   3      
 992   3                  if (bscan_matrix[ITempB01+STANDARD_SCAN_LINES]) 
 993   3                      {                                                               // Here, if current still active.
 994   4                      extendscan.saf_keys = 1;        // Set keys active bits. Check all key release.
 995   4                  }   
 996   3              }
 997   2              }
 998   1      
 999   1              if (extendstatus.field.ghost == 1)
1000   1              {  
1001   2              extendstatus.field.ghost = 0;   // Ghost flag is set.
1002   2              ITempB01 = extendstatus.byte & 7;
1003   2                      if (ITempB01 == 0)
1004   2              {  
1005   3                      ITempB01 = Byte_Mask((BYTE)(new_extendkey.field.input));
1006   3                      ITempB01 = ITempB01 & diode_key; 
1007   3                      }
1008   2              if (ITempB01 == 0)
1009   2              {   
1010   3                      new_extendkey.byte = 0;         // Clear new key. 
1011   3                      extendstatus.byte = 0;
1012   3              }
1013   2              } 
1014   1              
1015   1              return((BYTE) (extendscan.saf_make + extendscan.saf_break + extendscan.saf_keys));
1016   1      }
1017          
1018          //-----------------------------------------------------------------
1019          // The function of Setting extend scan lines
1020          //-----------------------------------------------------------------
1021          void SetExtendScanLines(BYTE scan_line)
1022          {
1023   1              if(scan_line<0x02)
1024   1              {
1025   2                      KSOL = 0xFF;
1026   2                      KSOH1 = 0xFF;
1027   2                      KSOH2 = ~(0x01<<scan_line);
1028   2                      Hook_SetGPIOScanPinH();
1029   2              }
1030   1              else 
1031   1              {
1032   2                      KSOL = 0xFF;
1033   2                      KSOH1 = 0xFF;
1034   2                      KSOH2 = 0xFF;
1035   2                      Hook_SetGPIOScanPinL();
1036   2              }
1037   1      }
1038          
1039          //-----------------------------------------------------------------
1040          // The function of Setting extend scan lines
1041          //-----------------------------------------------------------------
1042          void CheckExtendKeys(KSI_bit_num, scan_address)
1043          {
1044   1          BYTE flag;
1045   1          BYTE change_make_key;
1046   1             
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 18  

1047   1              flag = FALSE;                           
1048   1              if (extendstatus.field.ghost == 1)
1049   1              {
1050   2              flag = TRUE;
1051   2              }
1052   1              else
1053   1              {                                                       // Find 0 -> 1 's.
1054   2                      change_make_key = KSI_bit_num & ~bscan_matrix[scan_address];
1055   2              if (change_make_key == 0) 
1056   2                      {
1057   3                      flag = FALSE;
1058   3              }
1059   2              else if (find_paths(change_make_key, scan_address)) 
1060   2                      {
1061   3                      flag = TRUE;                            // TRUE if ghost keys.
1062   3              }
1063   2              }
1064   1      
1065   1              if (flag)
1066   1              {                                                               // Ghost exists. 
1067   2              extendstatus.field.ghost = 1;   // Set ghost flag.
1068   2              KSI_bit_num &= bscan_matrix[scan_address] | diode_key;
1069   2              }
1070   1      
1071   1              ITempB03 = 0x00;
1072   1          while (KSI_bit_num != 0)
1073   1          {   
1074   2              if (KSI_bit_num & 0x01)         
1075   2                      {
1076   3                      if (bscan_matrix[scan_address] & Byte_Mask(ITempB03))
1077   3                              {  
1078   4                              if (extendscan.saf_break == 0) 
1079   4                                      {
1080   5                              extendscan.saf_break = 1;
1081   5                                              ExtendKeyDebounce(ITempB03, scan_address, BREAK_EVENT);
1082   5                              }
1083   4                      }
1084   3                      else
1085   3                      {
1086   4                              if (extendscan.saf_make == 0) 
1087   4                                      {
1088   5                              extendscan.saf_make = 1;
1089   5                                              ExtendKeyDebounce(ITempB03, scan_address, MAKE_EVENT);
1090   5                              }
1091   4                      } 
1092   3              }
1093   2              ITempB03++;
1094   2              KSI_bit_num = KSI_bit_num >> 1; /* Shift bit out (and a zero bit in) to check next bit. */
1095   2          }
1096   1      }
1097          
1098          //-----------------------------------------------------------------
1099          // The function of extend keys debounce
1100          //-----------------------------------------------------------------
1101          void ExtendKeyDebounce(BYTE KSI_bit_num, BYTE scan_address, BYTE event)
1102          {
1103   1          new_extendkey.field.output = scan_address-STANDARD_SCAN_LINES;
1104   1          new_extendkey.field.input = KSI_bit_num;
1105   1          new_extendkey.field.debounce_status = 1;
1106   1          extendstatus.field.state = 0;  // Debounce has not counted out. */
1107   1          extendstatus.field.same = 0;   // Key activity indication. */
1108   1      
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 19  

1109   1          if (event == MAKE_EVENT)
1110   1          { 
1111   2              extendstatus.field.trans = 0;
1112   2              extendstatus.field.count = 1;//Ext_Cb2.field.Break_Count; 
1113   2          }
1114   1          else
1115   1          {  
1116   2              extendstatus.field.trans = 1;
1117   2              extendstatus.field.count = 1;//Ext_Cb2.field.Make_Count; 
1118   2          }
1119   1      }
1120          
1121          
1122          void DebounceExtendkey(void)
1123          {
1124   1              SetExtendScanLines(new_extendkey.field.output);
1125   1              ITempB04 = Read_Scan_Lines();
1126   1              ITempB04 = ~ITempB04;
1127   1              ITempB05 = Byte_Mask((BYTE)(new_extendkey.field.input)); 
1128   1              ITempB05 = ITempB05 & ITempB04;
1129   1      
1130   1              if (ITempB05 != 0)
1131   1          {  
1132   2              if (extendstatus.field.trans == 0)      // key make
1133   2                      {
1134   3                  extendstatus.field.same = 1;        // last key detected as a MAKE, same = 1.
1135   3              }
1136   2              else 
1137   2                      {
1138   3                  extendstatus.field.same = 0;    // last key detected as a BREAK, same = 0.
1139   3              }
1140   2          }
1141   1          else
1142   1          { 
1143   2              if (extendstatus.field.trans == 0) 
1144   2                      {
1145   3                  extendstatus.field.same = 0;    // last key detected as a MAKE, same = 0. 
1146   3              }
1147   2              else 
1148   2                      {
1149   3                  extendstatus.field.same = 1;    // last key detected as a BREAK, same = 1. 
1150   3              }
1151   2          } 
1152   1      
1153   1          if (extendstatus.field.state == 0)  // 1 means debounce counted out.
1154   1          {  
1155   2              if (extendstatus.field.count != 0)
1156   2              {  
1157   3                  extendstatus.field.count--;
1158   3              }
1159   2              else
1160   2              {
1161   3                  if (extendstatus.field.same == 0)
1162   3                  {   
1163   4                      new_extendkey.byte = 0; // Debounce failed, so claer all data
1164   4                      extendstatus.byte = 0;
1165   4                  }
1166   3                  else
1167   3                  {  
1168   4                      extendstatus.field.state = 1;
1169   4                  } 
1170   3              } 
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 20  

1171   2          }
1172   1          else
1173   1          { 
1174   2              if (extendstatus.field.same == 0)
1175   2              {   
1176   3                  new_extendkey.byte = 0;     /* Debounce failed. */
1177   3                  extendstatus.byte = 0;
1178   3              }
1179   2              else
1180   2              {   
1181   3                      CheckExtendKeyValid();
1182   3              } 
1183   2          }
1184   1      }
1185          
1186          
1187          //-----------------------------------------------------------------
1188          // The function of checking extend key valid
1189          //-----------------------------------------------------------------
1190          void CheckExtendKeyValid(void)
1191          {
1192   1          ITempB02 = Byte_Mask((BYTE) (new_extendkey.field.input)); 
1193   1          ITempB01 = bscan_matrix[(new_extendkey.field.output + STANDARD_SCAN_LINES)];
1194   1          ITempB01 = ITempB01 ^ ITempB02;                        
1195   1          bscan_matrix[(new_extendkey.field.output + STANDARD_SCAN_LINES)] = ITempB01; 
1196   1      
1197   1              ITempB03 = BREAK_EVENT;                       
1198   1          if ((ITempB02 & ITempB01) != 0)
1199   1          {                                                   
1200   2              ITempB03 = MAKE_EVENT;                                                          
1201   2              etkeytypematic.byte = new_extendkey.byte;
1202   2              extendscan.TMscale = TM_SCALE;
1203   2              bTMcount = bTMdelay;
1204   2                      
1205   2                      typematic.byte = 0x00;
1206   2          }
1207   1              
1208   1          Send_EtScan2(new_extendkey, ITempB03);
1209   1          new_extendkey.byte = 0;
1210   1          extendstatus.byte = 0;
1211   1      }
1212          
1213          //-----------------------------------------------------------------
1214          // The function of
1215          //-----------------------------------------------------------------
1216          void Send_EtScan2(union KEY key, BYTE event)
1217          {       
1218   1              if(IS_MASK_SET(UtilityFlag,KBDebug))
1219   1              {
1220   2                      if(KeyScanACK==KU_ACK_Start)
1221   2                      {
1222   3                              if(event==MAKE_EVENT)
1223   3                              {
1224   4                                      KeyScanKSI = key.field.input;
1225   4                                      KeyScanKSO = key.field.output;
1226   4                                      KeyScanACK = KU_ACK_FullKeyboard;
1227   4                              }
1228   3                      }
1229   2              }
1230   1              else
1231   1              {
1232   2              ITempB02 = (key.field.input * 3) + key.field.output; 
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 21  

1233   2                      ITempB01 = *(Extendkey_Table_Pntr + ITempB02);
1234   2      
1235   2                      Et_Hook_keyboard(key.field.input, key.field.output);
1236   2              Send_Key(ITempB01, event);
1237   2              }
1238   1      }
1239          
1240          //-----------------------------------------------------------------
1241          // The function of clearing extend keys
1242          //-----------------------------------------------------------------
1243          void ClearExtendKeys(void)
1244          {
1245   1              new_extendkey.byte = 0;         
1246   1              extendstatus.byte = 0;
1247   1              etkeytypematic.byte = 0;
1248   1      }
1249          
1250          //-----------------------------------------------------------------
1251          // The function of checking extend keys Typematic
1252          //-----------------------------------------------------------------
1253          void CheckEtKeystm(union KEY key)
1254          {
1255   1              ITempB02 = FALSE;
1256   1          ITempB01 = Byte_Mask((BYTE) (key.field.input)); 
1257   1          ITempB01 = ITempB01 & bscan_matrix[key.field.output+STANDARD_SCAN_LINES];
1258   1      
1259   1          if (ITempB01 == 0) 
1260   1          {
1261   2              etkeytypematic.byte = 0;
1262   2              ITempB02 = TRUE;
1263   2          }
1264   1      
1265   1          if (!ITempB02)
1266   1          {
1267   2              extendscan.TMscale--;
1268   2              if (extendscan.TMscale != 0) 
1269   2                      {
1270   3                  ITempB02 = TRUE;
1271   3              }
1272   2          }
1273   1      
1274   1          if (!ITempB02)
1275   1          {
1276   2              extendscan.TMscale = TM_SCALE;
1277   2              bTMcount--;            
1278   2              if (bTMcount != 0) 
1279   2                      {
1280   3                  ITempB02 = TRUE;
1281   3              }
1282   2          }
1283   1      
1284   1          if (!ITempB02)
1285   1          {
1286   2              bTMcount = bTMrepeat;   
1287   2              Send_EtScan2(key,REPEAT_EVENT);  
1288   2          }
1289   1      }
1290          //TF_008++>>
1291          //*******************************************************
1292          /**
1293           * ****************************************************************************
1294           *
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 22  

1295           * key buffer half full or not.
1296           *
1297           * @return
1298           * 0, buffer no half-full
1299           * 1, buffer half-full
1300           *
1301           * @parameter
1302           *
1303           * ****************************************************************************
1304           */
1305          BYTE check_keyscan_buffer_half_full(void)
1306          {
1307   1          BYTE lb_pending_size;
1308   1          BYTE lb_result;
1309   1      
1310   1          /* pre-set buffer no half-full */
1311   1          lb_result = 0x00;
1312   1              
1313   1          if(scan.kbf_head > scan.kbf_tail)
1314   1          {
1315   2              lb_pending_size = (scan.kbf_tail + KBF_SIZE) - scan.kbf_head;
1316   2          }
1317   1          else
1318   1          {
1319   2              lb_pending_size = scan.kbf_tail - scan.kbf_head;
1320   2          }
1321   1      
1322   1          if(lb_pending_size >= (KBF_SIZE/2))
1323   1          {
1324   2              /* buffer half-full */
1325   2              lb_result = 0x01;
1326   2          }
1327   1      
1328   1          return(lb_result);
1329   1      }
1330          //TF_008++<<
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 23  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com00E8 (BEGIN)
0000         L?0233:
0000         L?0234:
0000 AF00        E     MOV     R7,new_keyh
0002         L?0235:
0002 EF                MOV     A,R7
0003         L?0236:
0003 5407              ANL     A,#07H
0005 FF                MOV     R7,A
0006 7401              MOV     A,#01H
0008 C8                XCH     A,R0
0009 EF                MOV     A,R7
000A C8                XCH     A,R0
000B 08                INC     R0
000C 22                RET     
000D         L?0237:
000D 7800        E     MOV     R0,#LOW ?Send_Scan2?BYTE
000F 7C00        E     MOV     R4,#HIGH ?Send_Scan2?BYTE
0011 7D01              MOV     R5,#01H
0013         L?0238:
0013 7E00              MOV     R6,#00H
0015 7F01              MOV     R7,#01H
0017 020000      E     LJMP    ?C?COPY
001A         L?0239:
001A EF                MOV     A,R7
001B C4                SWAP    A
001C 540F              ANL     A,#0FH
001E FE                MOV     R6,A
001F EF                MOV     A,R7
0020 540F              ANL     A,#0FH
0022 FF                MOV     R7,A
0023 EE                MOV     A,R6
0024 14                DEC     A
0025         L?0240:
0025 540F              ANL     A,#0FH
0027 C4                SWAP    A
0028 54F0              ANL     A,#0F0H
002A 4F                ORL     A,R7
002B 22                RET     
002C         L?0241:
002C         L?0242:
002C 900000      E     MOV     DPTR,#KSOL
002F 74FF              MOV     A,#0FFH
0031 F0                MOVX    @DPTR,A
0032 900000      E     MOV     DPTR,#KSOH1
0035 F0                MOVX    @DPTR,A
0036 22                RET     
0037         L?0243:
0037 540F              ANL     A,#0FH
0039 2400        E     ADD     A,#LOW bKEY_BUFF
003B         L?0244:
003B F582              MOV     DPL,A
003D E4                CLR     A
003E 3400        E     ADDC    A,#HIGH bKEY_BUFF
0040 F583              MOV     DPH,A
0042 22                RET     
0043         L?0245:
0043 E500        E     MOV     A,scan+02H
0045 54EF              ANL     A,#0EFH
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 24  

0047 F500        E     MOV     scan+02H,A
0049 54DF              ANL     A,#0DFH
004B F500        E     MOV     scan+02H,A
004D 54BF              ANL     A,#0BFH
004F F500        E     MOV     scan+02H,A
0051 22                RET     
0052         L?0246:
0052 AF00        E     MOV     R7,new_keyl
0054         L?0247:
0054 EF                MOV     A,R7
0055 13                RRC     A
0056 13                RRC     A
0057 13                RRC     A
0058 541F              ANL     A,#01FH
005A 22                RET     
005B         L?0248:
005B C4                SWAP    A
005C 5401              ANL     A,#01H
005E 2F                ADD     A,R7
005F FF                MOV     R7,A
0060 EE                MOV     A,R6
0061 C4                SWAP    A
0062 13                RRC     A
0063 13                RRC     A
0064 5401              ANL     A,#01H
0066 2F                ADD     A,R7
0067 FF                MOV     R7,A
0068 22                RET     
0069         L?0249:
0069 E4                CLR     A
006A 900000      E     MOV     DPTR,#FN_Key_Break
006D F0                MOVX    @DPTR,A
006E 900000      E     MOV     DPTR,#FN_Key_Break_HS
0071 F0                MOVX    @DPTR,A
0072 900000      E     MOV     DPTR,#table_entry_bk
0075 F0                MOVX    @DPTR,A
0076 22                RET     
0077         L?0250:
0077 A3                INC     DPTR
0078         L?0251:
0078 E0                MOVX    A,@DPTR
0079 FD                MOV     R5,A
007A 2400        E     ADD     A,#LOW bscan_matrix
007C F8                MOV     R0,A
007D E6                MOV     A,@R0
007E 22                RET     
007F         L?0252:
007F 2F                ADD     A,R7
0080 F8                MOV     R0,A
0081 E6                MOV     A,@R0
0082 FF                MOV     R7,A
0083 E500        E     MOV     A,ITempB02
0085 F4                CPL     A
0086 6F                XRL     A,R7
0087 F500        E     MOV     ITempB02,A
0089 E500        E     MOV     A,ITempB02
008B 22                RET     
008C         L?0253:
008C AF00        E     MOV     R7,new_keyh
008E EF                MOV     A,R7
008F         L?0254:
008F C4                SWAP    A
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 25  

0090 540F              ANL     A,#0FH
0092 2400        E     ADD     A,#LOW bscan_matrix
0094 F8                MOV     R0,A
0095 22                RET     
0096         L?0255:
0096 E4                CLR     A
0097         L?0256:
0097 900000      E     MOV     DPTR,#KSOL
009A F0                MOVX    @DPTR,A
009B 900000      E     MOV     DPTR,#KSOH1
009E 22                RET     
009F         L?0257:
009F AF00        E     MOV     R7,new_extendkey
00A1 EF                MOV     A,R7
00A2         L?0258:
00A2 C4                SWAP    A
00A3 540F              ANL     A,#0FH
00A5 2400        E     ADD     A,#LOW bscan_matrix+010H
00A7 F8                MOV     R0,A
00A8 22                RET     
00A9         L?0259:
00A9 540F              ANL     A,#0FH
00AB C4                SWAP    A
00AC 54F0              ANL     A,#0F0H
00AE FE                MOV     R6,A
00AF ED                MOV     A,R5
00B0 540F              ANL     A,#0FH
00B2 4E                ORL     A,R6
00B3 22                RET     
00B4         L?0260:
00B4         L?0261:
00B4 7401              MOV     A,#01H
00B6 C8                XCH     A,R0
00B7 EF                MOV     A,R7
00B8 C8                XCH     A,R0
00B9 08                INC     R0
00BA 22                RET     
00BB         L?0262:
00BB 900000      E     MOV     DPTR,#bTMdelay
00BE E0                MOVX    A,@DPTR
00BF 900000      E     MOV     DPTR,#bTMcount
00C2 F0                MOVX    @DPTR,A
00C3 E4                CLR     A
00C4 22                RET     
00C5         L?0263:
00C5         L?0264:
00C5 AE00        E     MOV     R6,scan
00C7 EE                MOV     A,R6
00C8 C4                SWAP    A
00C9 540F              ANL     A,#0FH
00CB 22                RET     
00CC         L?0265:
00CC         L?0266:
00CC 900000      R     MOV     DPTR,#key
00CF E0                MOVX    A,@DPTR
00D0 5407              ANL     A,#07H
00D2 22                RET     
             ; FUNCTION Com00E8 (END)

             ; FUNCTION CapDelay (BEGIN)
                                           ; SOURCE LINE # 15
                                           ; SOURCE LINE # 16
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 26  

                                           ; SOURCE LINE # 17
0000 E4                CLR     A
0001 900000      E     MOV     DPTR,#WNCKR
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 19
0005 22                RET     
             ; FUNCTION CapDelay (END)

             ; FUNCTION scan_keys (BEGIN)
                                           ; SOURCE LINE # 29
                                           ; SOURCE LINE # 30
                                           ; SOURCE LINE # 32
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#result
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 35
0005 120000      R     LCALL   check_keyscan_buffer_half_full
0008 EF                MOV     A,R7
0009 6003              JZ      ?C0002
                                           ; SOURCE LINE # 36
                                           ; SOURCE LINE # 37
000B 7F01              MOV     R7,#01H
000D 22                RET     
                                           ; SOURCE LINE # 38
000E         ?C0002:
                                           ; SOURCE LINE # 40
                                           ; SOURCE LINE # 41
                                           ; SOURCE LINE # 42
000E 120000      R     LCALL   L?0245
                                           ; SOURCE LINE # 44
0011 E500        E     MOV     A,typematic
0013 6012              JZ      ?C0004
                                           ; SOURCE LINE # 45
                                           ; SOURCE LINE # 46
0015 7800        R     MOV     R0,#LOW ?check_tm?BYTE
0017 7C00        R     MOV     R4,#HIGH ?check_tm?BYTE
0019 7D01              MOV     R5,#01H
001B 7B00              MOV     R3,#00H
001D 7A00        E     MOV     R2,#HIGH typematic
001F 7900        E     MOV     R1,#LOW typematic
0021 120000      R     LCALL   L?0238
0024 120000      R     LCALL   check_tm
                                           ; SOURCE LINE # 47
0027         ?C0004:
                                           ; SOURCE LINE # 49
0027 E500        E     MOV     A,new_keyh
0029 600F              JZ      ?C0005
                                           ; SOURCE LINE # 50
                                           ; SOURCE LINE # 51
002B E500        E     MOV     A,scan+02H
002D 4410              ORL     A,#010H
002F F500        E     MOV     scan+02H,A
                                           ; SOURCE LINE # 52
0031 120000      R     LCALL   debounce_key
                                           ; SOURCE LINE # 53
0034 900000      R     MOV     DPTR,#result
0037 7401              MOV     A,#01H
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 54
003A         ?C0005:
                                           ; SOURCE LINE # 56
003A 900000      R     MOV     DPTR,#result
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 27  

003D E0                MOVX    A,@DPTR
003E 7073              JNZ     ?C0006
                                           ; SOURCE LINE # 57
                                           ; SOURCE LINE # 58
0040 F500        E     MOV     ITempB03,A
0042         ?C0007:
                                           ; SOURCE LINE # 59
                                           ; SOURCE LINE # 60
0042 AF00        E     MOV     R7,ITempB03
0044 120000      R     LCALL   _Write_Strobe
                                           ; SOURCE LINE # 61
0047 120000      R     LCALL   CapDelay
                                           ; SOURCE LINE # 62
004A 900000      E     MOV     DPTR,#KSI
004D E0                MOVX    A,@DPTR
004E F500        E     MOV     ITempB02,A
                                           ; SOURCE LINE # 65
0050 E500        E     MOV     A,ITempB03
0052 B40F03            CJNE    A,#0FH,?C0010
                                           ; SOURCE LINE # 66
                                           ; SOURCE LINE # 75
0055 430002      E     ORL     ITempB02,#02H
                                           ; SOURCE LINE # 77
0058         ?C0010:
                                           ; SOURCE LINE # 80
0058 AF00        E     MOV     R7,ITempB03
005A 7400        E     MOV     A,#LOW bscan_matrix
                                           ; SOURCE LINE # 81
005C 120000      R     LCALL   L?0252
005F 6007              JZ      ?C0011
                                           ; SOURCE LINE # 82
                                           ; SOURCE LINE # 83
0061 AD00        E     MOV     R5,ITempB03
0063 AF00        E     MOV     R7,ITempB02
0065 120000      R     LCALL   _check_scan
                                           ; SOURCE LINE # 84
0068         ?C0011:
                                           ; SOURCE LINE # 86
0068 AF00        E     MOV     R7,ITempB03
006A 7400        E     MOV     A,#LOW bscan_matrix
006C 2F                ADD     A,R7
006D F8                MOV     R0,A
006E E6                MOV     A,@R0
006F 6006              JZ      ?C0012
                                           ; SOURCE LINE # 87
                                           ; SOURCE LINE # 88
0071 E500        E     MOV     A,scan+02H
0073 4440              ORL     A,#040H
0075 F500        E     MOV     scan+02H,A
                                           ; SOURCE LINE # 89
0077         ?C0012:
                                           ; SOURCE LINE # 90
                                           ; SOURCE LINE # 91
0077 120000      R     LCALL   L?0241
                                           ; SOURCE LINE # 92
007A 0500        E     INC     ITempB03
007C E500        E     MOV     A,ITempB03
007E C3                CLR     C
007F 9410              SUBB    A,#010H
0081 40BF              JC      ?C0007
0083         ?C0008:
                                           ; SOURCE LINE # 94
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 28  

0083 120000      R     LCALL   L?0246
0086 30E02A            JNB     ACC.0,?C0006
                                           ; SOURCE LINE # 95
                                           ; SOURCE LINE # 96
0089 AF00        E     MOV     R7,new_keyl
008B EF                MOV     A,R7
008C 54F7              ANL     A,#0F7H
008E F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 97
0090 E500        E     MOV     A,new_keyl
0092 5407              ANL     A,#07H
0094 F500        E     MOV     ITempB01,A
                                           ; SOURCE LINE # 98
0096 E500        E     MOV     A,ITempB01
0098 7011              JNZ     ?C0014
                                           ; SOURCE LINE # 99
                                           ; SOURCE LINE # 100
009A 120000      R     LCALL   L?0233
009D 8002              SJMP    ?C0194
009F         ?C0193:
009F C3                CLR     C
00A0 33                RLC     A
00A1         ?C0194:
00A1 D8FC              DJNZ    R0,?C0193
00A3 F500        E     MOV     ITempB01,A
                                           ; SOURCE LINE # 101
00A5 900000      E     MOV     DPTR,#diode_key
00A8 E0                MOVX    A,@DPTR
00A9 5200        E     ANL     ITempB01,A
                                           ; SOURCE LINE # 102
00AB         ?C0014:
                                           ; SOURCE LINE # 104
00AB E500        E     MOV     A,ITempB01
00AD 7004              JNZ     ?C0006
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 106
00AF F500        E     MOV     new_keyh,A
                                           ; SOURCE LINE # 107
00B1 F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 108
                                           ; SOURCE LINE # 109
                                           ; SOURCE LINE # 110
00B3         ?C0006:
                                           ; SOURCE LINE # 112
00B3 AF00        E     MOV     R7,scan+02H
00B5 EF                MOV     A,R7
00B6 C4                SWAP    A
00B7 13                RRC     A
00B8 5401              ANL     A,#01H
00BA FF                MOV     R7,A
00BB AE00        E     MOV     R6,scan+02H
00BD EE                MOV     A,R6
00BE AE00        E     MOV     R6,scan+02H
00C0 120000      R     LCALL   L?0248
                                           ; SOURCE LINE # 113
00C3         ?C0003:
00C3 22                RET     
             ; FUNCTION scan_keys (END)

             ; FUNCTION _Write_Strobe (BEGIN)
                                           ; SOURCE LINE # 131
;---- Variable 'scan_line_num' assigned to Register 'R7' ----
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 29  

                                           ; SOURCE LINE # 132
                                           ; SOURCE LINE # 133
0000 EF                MOV     A,R7
0001 C3                CLR     C
0002 9408              SUBB    A,#08H
0004 5012              JNC     ?C0016
                                           ; SOURCE LINE # 134
                                           ; SOURCE LINE # 135
0006 120000      R     LCALL   L?0260
0009 8002              SJMP    ?C0196
000B         ?C0195:
000B C3                CLR     C
000C 33                RLC     A
000D         ?C0196:
000D D8FC              DJNZ    R0,?C0195
000F F4                CPL     A
                                           ; SOURCE LINE # 136
0010 120000      R     LCALL   L?0256
0013 74FF              MOV     A,#0FFH
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 137
0016 8018              SJMP    ?C0017
0018         ?C0016:
                                           ; SOURCE LINE # 139
                                           ; SOURCE LINE # 140
0018 900000      E     MOV     DPTR,#KSOL
001B 74FF              MOV     A,#0FFH
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 141
001E EF                MOV     A,R7
001F 24F8              ADD     A,#0F8H
0021 FF                MOV     R7,A
0022 120000      R     LCALL   L?0260
0025 8002              SJMP    ?C0198
0027         ?C0197:
0027 C3                CLR     C
0028 33                RLC     A
0029         ?C0198:
0029 D8FC              DJNZ    R0,?C0197
002B F4                CPL     A
002C 900000      E     MOV     DPTR,#KSOH1
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 142
0030         ?C0017:
                                           ; SOURCE LINE # 144
0030 300009      E     JNB     ExtendMatrix,?C0019
                                           ; SOURCE LINE # 145
                                           ; SOURCE LINE # 146
0033 900000      E     MOV     DPTR,#KSOH2
0036 74FF              MOV     A,#0FFH
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 147
0039 120000      E     LCALL   Hook_SetGPIOScanPinH
                                           ; SOURCE LINE # 148
                                           ; SOURCE LINE # 149
003C         ?C0019:
003C 22                RET     
             ; FUNCTION _Write_Strobe (END)

             ; FUNCTION _check_scan (BEGIN)
                                           ; SOURCE LINE # 165
0000 900000      R     MOV     DPTR,#changes
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 30  

0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 166
                                           ; SOURCE LINE # 171
0008 E4                CLR     A
0009 A3                INC     DPTR
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 172
000B 120000      R     LCALL   L?0246
000E 30E002            JNB     ACC.0,?C0020
                                           ; SOURCE LINE # 173
                                           ; SOURCE LINE # 174
                                           ; SOURCE LINE # 175
0011 801F              SJMP    ?C0222
0013         ?C0020:
                                           ; SOURCE LINE # 177
                                           ; SOURCE LINE # 178
0013 900000      R     MOV     DPTR,#scan_address
0016 120000      R     LCALL   L?0251
0019 F4                CPL     A
001A FF                MOV     R7,A
001B 900000      R     MOV     DPTR,#changes
001E E0                MOVX    A,@DPTR
001F 5F                ANL     A,R7
0020 FF                MOV     R7,A
;---- Variable 'change_make_key' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 179
0021 7006              JNZ     ?C0022
                                           ; SOURCE LINE # 180
                                           ; SOURCE LINE # 181
0023 900000      R     MOV     DPTR,#flag
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 182
0027 800C              SJMP    ?C0021
0029         ?C0022:
                                           ; SOURCE LINE # 183
0029 120000      R     LCALL   _find_paths
002C EF                MOV     A,R7
002D 6006              JZ      ?C0021
                                           ; SOURCE LINE # 184
                                           ; SOURCE LINE # 185
002F 900000      R     MOV     DPTR,#flag
0032         ?C0222:
0032 7401              MOV     A,#01H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 186
                                           ; SOURCE LINE # 187
0035         ?C0021:
                                           ; SOURCE LINE # 189
0035 900000      R     MOV     DPTR,#flag
0038 E0                MOVX    A,@DPTR
0039 601F              JZ      ?C0025
                                           ; SOURCE LINE # 190
                                           ; SOURCE LINE # 191
003B AF00        E     MOV     R7,new_keyl
003D EF                MOV     A,R7
003E 4408              ORL     A,#08H
0040 F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 193
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 31  

0042 900000      R     MOV     DPTR,#changes
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 A3                INC     DPTR
0048 E0                MOVX    A,@DPTR
0049 2400        E     ADD     A,#LOW bscan_matrix
004B F8                MOV     R0,A
004C E6                MOV     A,@R0
004D FE                MOV     R6,A
004E 900000      E     MOV     DPTR,#diode_key
0051 E0                MOVX    A,@DPTR
0052 4E                ORL     A,R6
0053 FE                MOV     R6,A
0054 EF                MOV     A,R7
0055 5E                ANL     A,R6
0056 900000      R     MOV     DPTR,#changes
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 194
005A         ?C0025:
                                           ; SOURCE LINE # 196
005A E4                CLR     A
005B 900000      R     MOV     DPTR,#bit_num
005E F0                MOVX    @DPTR,A
005F         ?C0026:
                                           ; SOURCE LINE # 197
005F 900000      R     MOV     DPTR,#changes
0062 E0                MOVX    A,@DPTR
0063 601F              JZ      ?C0029
                                           ; SOURCE LINE # 198
                                           ; SOURCE LINE # 199
0065 30E00D            JNB     ACC.0,?C0028
                                           ; SOURCE LINE # 200
                                           ; SOURCE LINE # 201
0068 900000      R     MOV     DPTR,#bit_num
006B E0                MOVX    A,@DPTR
006C FF                MOV     R7,A
006D 900000      R     MOV     DPTR,#scan_address
0070 E0                MOVX    A,@DPTR
0071 FD                MOV     R5,A
0072 120000      R     LCALL   _cscfnd
                                           ; SOURCE LINE # 202
0075         ?C0028:
                                           ; SOURCE LINE # 203
0075 900000      R     MOV     DPTR,#bit_num
0078 E0                MOVX    A,@DPTR
0079 04                INC     A
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
007B 900000      R     MOV     DPTR,#changes
007E E0                MOVX    A,@DPTR
007F C3                CLR     C
0080 13                RRC     A
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 205
0082 80DB              SJMP    ?C0026
                                           ; SOURCE LINE # 206
0084         ?C0029:
0084 22                RET     
             ; FUNCTION _check_scan (END)

             ; FUNCTION _cscfnd (BEGIN)
                                           ; SOURCE LINE # 214
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 32  

0000 900000      R     MOV     DPTR,#bit_num
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
0008 120000      R     LCALL   L?0251
000B FB                MOV     R3,A
000C 7A00              MOV     R2,#00H
000E 900000      R     MOV     DPTR,#bit_num
0011 E0                MOVX    A,@DPTR
0012 FC                MOV     R4,A
0013 7401              MOV     A,#01H
0015 7E00              MOV     R6,#00H
0017 C8                XCH     A,R0
0018 EC                MOV     A,R4
0019 C8                XCH     A,R0
001A 08                INC     R0
001B 8005              SJMP    ?C0200
001D         ?C0199:
001D C3                CLR     C
001E 33                RLC     A
001F CE                XCH     A,R6
0020 33                RLC     A
0021 CE                XCH     A,R6
0022         ?C0200:
0022 D8F9              DJNZ    R0,?C0199
0024 FF                MOV     R7,A
0025 EE                MOV     A,R6
0026 5A                ANL     A,R2
0027 FE                MOV     R6,A
0028 EF                MOV     A,R7
0029 5B                ANL     A,R3
002A 4E                ORL     A,R6
002B 6016              JZ      ?C0030
                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 218
002D AF00        E     MOV     R7,scan+02H
002F EF                MOV     A,R7
0030 C4                SWAP    A
0031 13                RRC     A
0032 5407              ANL     A,#07H
0034 20E027            JB      ACC.0,?C0034
                                           ; SOURCE LINE # 219
                                           ; SOURCE LINE # 220
0037 EF                MOV     A,R7
0038 4420              ORL     A,#020H
003A F500        E     MOV     scan+02H,A
                                           ; SOURCE LINE # 221
003C CF                XCH     A,R7
003D EC                MOV     A,R4
003E CF                XCH     A,R7
003F 7B01              MOV     R3,#01H
                                           ; SOURCE LINE # 222
                                           ; SOURCE LINE # 223
0041 8018              SJMP    ?C0223
0043         ?C0030:
                                           ; SOURCE LINE # 225
                                           ; SOURCE LINE # 226
0043 AF00        E     MOV     R7,scan+02H
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 33  

0045 EF                MOV     A,R7
0046 C4                SWAP    A
0047 540F              ANL     A,#0FH
0049 20E012            JB      ACC.0,?C0034
                                           ; SOURCE LINE # 227
                                           ; SOURCE LINE # 228
004C EF                MOV     A,R7
004D 4410              ORL     A,#010H
004F F500        E     MOV     scan+02H,A
                                           ; SOURCE LINE # 229
0051 900000      R     MOV     DPTR,#bit_num
0054 E0                MOVX    A,@DPTR
0055 FF                MOV     R7,A
0056 A3                INC     DPTR
0057 E0                MOVX    A,@DPTR
0058 FD                MOV     R5,A
0059 E4                CLR     A
005A FB                MOV     R3,A
005B         ?C0223:
005B 120000      R     LCALL   _setup_debounce
                                           ; SOURCE LINE # 230
                                           ; SOURCE LINE # 231
                                           ; SOURCE LINE # 232
005E         ?C0034:
005E 22                RET     
             ; FUNCTION _cscfnd (END)

             ; FUNCTION _setup_debounce (BEGIN)
                                           ; SOURCE LINE # 242
;---- Variable 'bit_num' assigned to Register 'R7' ----
;---- Variable 'event' assigned to Register 'R3' ----
;---- Variable 'scan_address' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 243
                                           ; SOURCE LINE # 244
0000 ED                MOV     A,R5
0001 AD00        E     MOV     R5,new_keyh
0003 120000      R     LCALL   L?0259
0006 F500        E     MOV     new_keyh,A
                                           ; SOURCE LINE # 245
0008 EF                MOV     A,R7
0009 5407              ANL     A,#07H
000B FF                MOV     R7,A
000C AE00        E     MOV     R6,new_keyh
000E EE                MOV     A,R6
000F 54F8              ANL     A,#0F8H
0011 4F                ORL     A,R7
0012 F500        E     MOV     new_keyh,A
                                           ; SOURCE LINE # 246
0014 AF00        E     MOV     R7,new_keyh
0016 EF                MOV     A,R7
0017 4408              ORL     A,#08H
0019 F500        E     MOV     new_keyh,A
                                           ; SOURCE LINE # 247
001B AF00        E     MOV     R7,new_keyl
001D EF                MOV     A,R7
001E 54FE              ANL     A,#0FEH
0020 F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 248
0022 AF00        E     MOV     R7,new_keyl
0024 EF                MOV     A,R7
0025 54EF              ANL     A,#0EFH
0027 F500        E     MOV     new_keyl,A
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 34  

                                           ; SOURCE LINE # 250
0029 EB                MOV     A,R3
002A AF00        E     MOV     R7,new_keyl
002C 700F              JNZ     ?C0035
                                           ; SOURCE LINE # 251
                                           ; SOURCE LINE # 252
002E EF                MOV     A,R7
002F 54FD              ANL     A,#0FDH
0031 F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 253
0033 7800        E     MOV     R0,#LOW Ext_Cb2
0035 E6                MOV     A,@R0
0036 540E              ANL     A,#0EH
0038 C4                SWAP    A
0039 54F0              ANL     A,#0F0H
                                           ; SOURCE LINE # 254
003B 800A              SJMP    ?C0224
003D         ?C0035:
                                           ; SOURCE LINE # 256
                                           ; SOURCE LINE # 257
003D EF                MOV     A,R7
003E 4402              ORL     A,#02H
0040 F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 258
0042 7800        E     MOV     R0,#LOW Ext_Cb2
0044 E6                MOV     A,@R0
0045 54E0              ANL     A,#0E0H
0047         ?C0224:
0047 FF                MOV     R7,A
0048 AE00        E     MOV     R6,new_keyl
004A EE                MOV     A,R6
004B 541F              ANL     A,#01FH
004D 4F                ORL     A,R7
004E F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 259
                                           ; SOURCE LINE # 260
0050         ?C0037:
0050 22                RET     
             ; FUNCTION _setup_debounce (END)

             ; FUNCTION _find_paths (BEGIN)
                                           ; SOURCE LINE # 270
;---- Variable 'temp' assigned to Register 'R6' ----
;---- Variable 'paths' assigned to Register 'R4' ----
;---- Variable 'bits' assigned to Register 'R1' ----
;---- Variable 'scan_address' assigned to Register 'R5' ----
;---- Variable 'change_make_key' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 271
                                           ; SOURCE LINE # 280
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#done
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 281
0005 900000      R     MOV     DPTR,#paths_found
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 282
0009 900000      R     MOV     DPTR,#first_address
000C ED                MOV     A,R5
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 284
000E 900000      E     MOV     DPTR,#diode_key
0011 E0                MOVX    A,@DPTR
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 35  

0012 F4                CPL     A
0013 5F                ANL     A,R7
0014 FF                MOV     R7,A
                                           ; SOURCE LINE # 287
0015 7005              JNZ     ?C0038
                                           ; SOURCE LINE # 288
                                           ; SOURCE LINE # 289
0017 900000      R     MOV     DPTR,#done
001A 04                INC     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 290
001C         ?C0038:
                                           ; SOURCE LINE # 292
001C 900000      R     MOV     DPTR,#done
001F E0                MOVX    A,@DPTR
0020 7015              JNZ     ?C0041
                                           ; SOURCE LINE # 293
                                           ; SOURCE LINE # 294
0022 7400        E     MOV     A,#LOW bscan_matrix
0024 2D                ADD     A,R5
0025 F8                MOV     R0,A
0026 E6                MOV     A,@R0
0027 4F                ORL     A,R7
0028 FC                MOV     R4,A
                                           ; SOURCE LINE # 295
0029 900000      E     MOV     DPTR,#diode_key
002C E0                MOVX    A,@DPTR
002D F4                CPL     A
002E 5C                ANL     A,R4
002F FC                MOV     R4,A
                                           ; SOURCE LINE # 297
0030 7005              JNZ     ?C0041
                                           ; SOURCE LINE # 298
                                           ; SOURCE LINE # 299
0032 900000      R     MOV     DPTR,#done
0035 04                INC     A
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 300
                                           ; SOURCE LINE # 301
0037         ?C0041:
                                           ; SOURCE LINE # 303
0037 900000      R     MOV     DPTR,#done
003A E0                MOVX    A,@DPTR
003B 705E              JNZ     ?C0042
                                           ; SOURCE LINE # 304
                                           ; SOURCE LINE # 305
003D 0D                INC     R5
                                           ; SOURCE LINE # 307
003E ED                MOV     A,R5
003F C3                CLR     C
0040 9413              SUBB    A,#013H
0042 4002              JC      ?C0043
                                           ; SOURCE LINE # 309
                                           ; SOURCE LINE # 310
0044 E4                CLR     A
0045 FD                MOV     R5,A
                                           ; SOURCE LINE # 311
0046         ?C0043:
                                           ; SOURCE LINE # 313
0046 900000      R     MOV     DPTR,#first_address
0049 E0                MOVX    A,@DPTR
004A 6D                XRL     A,R5
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 36  

004B 7005              JNZ     ?C0044
                                           ; SOURCE LINE # 314
                                           ; SOURCE LINE # 315
004D 900000      R     MOV     DPTR,#done
0050 04                INC     A
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 316
0052         ?C0044:
                                           ; SOURCE LINE # 318
0052 900000      R     MOV     DPTR,#done
0055 E0                MOVX    A,@DPTR
0056 70DF              JNZ     ?C0041
                                           ; SOURCE LINE # 319
                                           ; SOURCE LINE # 320
0058 7400        E     MOV     A,#LOW bscan_matrix
005A 2D                ADD     A,R5
005B F8                MOV     R0,A
005C E6                MOV     A,@R0
005D FE                MOV     R6,A
                                           ; SOURCE LINE # 321
005E 900000      E     MOV     DPTR,#diode_key
0061 E0                MOVX    A,@DPTR
0062 F4                CPL     A
0063 5E                ANL     A,R6
0064 FE                MOV     R6,A
                                           ; SOURCE LINE # 323
0065 6002              JZ      ?C0046
                                           ; SOURCE LINE # 324
                                           ; SOURCE LINE # 325
0067 5C                ANL     A,R4
0068 FE                MOV     R6,A
                                           ; SOURCE LINE # 326
0069         ?C0046:
                                           ; SOURCE LINE # 328
0069 EE                MOV     A,R6
006A 60CB              JZ      ?C0041
                                           ; SOURCE LINE # 329
                                           ; SOURCE LINE # 330
006C 6F                XRL     A,R7
006D 6008              JZ      ?C0048
                                           ; SOURCE LINE # 331
                                           ; SOURCE LINE # 332
006F 900000      R     MOV     DPTR,#paths_found
0072 7401              MOV     A,#01H
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 333
0075 A3                INC     DPTR
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 334
0077         ?C0048:
                                           ; SOURCE LINE # 336
0077 900000      R     MOV     DPTR,#done
007A E0                MOVX    A,@DPTR
007B 70BA              JNZ     ?C0041
                                           ; SOURCE LINE # 337
                                           ; SOURCE LINE # 342
007D C9                XCH     A,R1
007E EC                MOV     A,R4
007F C9                XCH     A,R1
                                           ; SOURCE LINE # 343
0080 FE                MOV     R6,A
0081         ?C0052:
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 37  

                                           ; SOURCE LINE # 346
                                           ; SOURCE LINE # 347
0081 E9                MOV     A,R1
0082 30E002            JNB     ACC.0,?C0053
                                           ; SOURCE LINE # 348
                                           ; SOURCE LINE # 349
0085 7E01              MOV     R6,#01H
                                           ; SOURCE LINE # 350
0087         ?C0053:
                                           ; SOURCE LINE # 353
0087 E9                MOV     A,R1
0088 C3                CLR     C
0089 13                RRC     A
008A F9                MOV     R1,A
                                           ; SOURCE LINE # 354
008B EE                MOV     A,R6
008C 60F3              JZ      ?C0052
                                           ; SOURCE LINE # 356
008E E9                MOV     A,R1
008F 60A6              JZ      ?C0041
                                           ; SOURCE LINE # 357
                                           ; SOURCE LINE # 358
0091 900000      R     MOV     DPTR,#paths_found
0094 7401              MOV     A,#01H
0096 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 359
0097 A3                INC     DPTR
0098 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 360
                                           ; SOURCE LINE # 361
                                           ; SOURCE LINE # 362
                                           ; SOURCE LINE # 363
                                           ; SOURCE LINE # 364
0099 809C              SJMP    ?C0041
009B         ?C0042:
                                           ; SOURCE LINE # 366
009B 900000      R     MOV     DPTR,#paths_found
009E E0                MOVX    A,@DPTR
009F FF                MOV     R7,A
                                           ; SOURCE LINE # 367
00A0         ?C0055:
00A0 22                RET     
             ; FUNCTION _find_paths (END)

             ; FUNCTION debounce_key (BEGIN)
                                           ; SOURCE LINE # 372
                                           ; SOURCE LINE # 373
                                           ; SOURCE LINE # 374
0000 AF00        E     MOV     R7,new_keyh
0002 EF                MOV     A,R7
0003 54F0              ANL     A,#0F0H
0005 C4                SWAP    A
0006 540F              ANL     A,#0FH
0008 FF                MOV     R7,A
0009 E500        E     MOV     A,scan+02H
000B 54F0              ANL     A,#0F0H
000D 4F                ORL     A,R7
000E F500        E     MOV     scan+02H,A
                                           ; SOURCE LINE # 375
0010 540F              ANL     A,#0FH
0012 FF                MOV     R7,A
0013 120000      R     LCALL   _Write_Strobe
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 38  

                                           ; SOURCE LINE # 376
0016 120000      R     LCALL   CapDelay
                                           ; SOURCE LINE # 377
0019 120000      R     LCALL   Read_Scan_Lines
001C 8F00        E     MOV     ITempB01,R7
                                           ; SOURCE LINE # 380
001E E500        E     MOV     A,scan+02H
0020 540F              ANL     A,#0FH
0022 FF                MOV     R7,A
0023 BF0F03            CJNE    R7,#0FH,?C0056
                                           ; SOURCE LINE # 381
                                           ; SOURCE LINE # 390
0026 430002      E     ORL     ITempB01,#02H
                                           ; SOURCE LINE # 392
0029         ?C0056:
                                           ; SOURCE LINE # 394
0029 6300FF      E     XRL     ITempB01,#0FFH
                                           ; SOURCE LINE # 396
002C 120000      R     LCALL   L?0233
002F 8002              SJMP    ?C0202
0031         ?C0201:
0031 C3                CLR     C
0032 33                RLC     A
0033         ?C0202:
0033 D8FC              DJNZ    R0,?C0201
0035 F500        E     MOV     ITempB02,A
                                           ; SOURCE LINE # 397
0037 E500        E     MOV     A,ITempB01
0039 5200        E     ANL     ITempB02,A
                                           ; SOURCE LINE # 399
003B E500        E     MOV     A,ITempB02
003D 600C              JZ      ?C0057
                                           ; SOURCE LINE # 400
                                           ; SOURCE LINE # 401
003F AF00        E     MOV     R7,new_keyl
0041 EF                MOV     A,R7
0042 C3                CLR     C
0043 13                RRC     A
0044 AF00        E     MOV     R7,new_keyl
0046 20E00C            JB      ACC.0,?C0226
                                           ; SOURCE LINE # 402
                                           ; SOURCE LINE # 403
                                           ; SOURCE LINE # 404
0049 8011              SJMP    ?C0225
004B         ?C0057:
                                           ; SOURCE LINE # 411
                                           ; SOURCE LINE # 412
004B AF00        E     MOV     R7,new_keyl
004D EF                MOV     A,R7
004E C3                CLR     C
004F 13                RRC     A
0050 AF00        E     MOV     R7,new_keyl
0052 20E007            JB      ACC.0,?C0061
                                           ; SOURCE LINE # 413
                                           ; SOURCE LINE # 414
0055         ?C0226:
0055 EF                MOV     A,R7
0056 54EF              ANL     A,#0EFH
0058 F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 415
005A 8005              SJMP    ?C0060
005C         ?C0061:
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 39  

                                           ; SOURCE LINE # 417
                                           ; SOURCE LINE # 418
005C         ?C0225:
005C EF                MOV     A,R7
005D 4410              ORL     A,#010H
005F F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 419
                                           ; SOURCE LINE # 420
0061         ?C0060:
                                           ; SOURCE LINE # 443
                                           ; SOURCE LINE # 444
0061 AF00        E     MOV     R7,new_keyl
0063 EF                MOV     A,R7
0064 C4                SWAP    A
0065 540F              ANL     A,#0FH
0067 20E006            JB      ACC.0,?C0063
                                           ; SOURCE LINE # 445
                                           ; SOURCE LINE # 446
006A E4                CLR     A
006B F500        E     MOV     new_keyh,A
                                           ; SOURCE LINE # 447
006D F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 448
006F 22                RET     
0070         ?C0063:
                                           ; SOURCE LINE # 450
                                           ; SOURCE LINE # 451
0070 120000      R     LCALL   change_valid
                                           ; SOURCE LINE # 452
                                           ; SOURCE LINE # 453
                                           ; SOURCE LINE # 454
0073         ?C0065:
0073 22                RET     
             ; FUNCTION debounce_key (END)

             ; FUNCTION Read_Scan_Lines (BEGIN)
                                           ; SOURCE LINE # 464
                                           ; SOURCE LINE # 465
                                           ; SOURCE LINE # 466
0000 900000      E     MOV     DPTR,#KSI
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 467
0005         ?C0066:
0005 22                RET     
             ; FUNCTION Read_Scan_Lines (END)

             ; FUNCTION change_valid (BEGIN)
                                           ; SOURCE LINE # 472
                                           ; SOURCE LINE # 473
                                           ; SOURCE LINE # 474
0000 120000      R     LCALL   L?0234
0003 8002              SJMP    ?C0204
0005         ?C0203:
0005 C3                CLR     C
0006 33                RLC     A
0007         ?C0204:
0007 D8FC              DJNZ    R0,?C0203
0009 F500        E     MOV     ITempB04,A
                                           ; SOURCE LINE # 475
000B 120000      R     LCALL   L?0253
000E E6                MOV     A,@R0
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 40  

000F F500        E     MOV     ITempB03,A
                                           ; SOURCE LINE # 476
0011 E500        E     MOV     A,ITempB04
0013 6200        E     XRL     ITempB03,A
                                           ; SOURCE LINE # 477
0015 120000      R     LCALL   L?0253
0018 A600        E     MOV     @R0,ITempB03
                                           ; SOURCE LINE # 479
001A 750001      E     MOV     ITempB05,#01H
                                           ; SOURCE LINE # 480
001D E500        E     MOV     A,ITempB04
001F 5500        E     ANL     A,ITempB03
0021 6013              JZ      ?C0067
                                           ; SOURCE LINE # 481
                                           ; SOURCE LINE # 482
0023 E4                CLR     A
0024 F500        E     MOV     ITempB05,A
                                           ; SOURCE LINE # 483
0026 850000      E     MOV     typematic,new_keyh
                                           ; SOURCE LINE # 484
0029 E500        E     MOV     A,scan+01H
002B 540F              ANL     A,#0FH
002D 4410              ORL     A,#010H
002F F500        E     MOV     scan+01H,A
                                           ; SOURCE LINE # 485
                                           ; SOURCE LINE # 487
0031 120000      R     LCALL   L?0262
0034 F500        E     MOV     etkeytypematic,A
                                           ; SOURCE LINE # 488
0036         ?C0067:
                                           ; SOURCE LINE # 490
0036 7B00              MOV     R3,#00H
0038 7A00        E     MOV     R2,#HIGH new_keyh
003A 7900        E     MOV     R1,#LOW new_keyh
003C 120000      R     LCALL   L?0237
003F 900000      E     MOV     DPTR,#?Send_Scan2?BYTE+01H
0042 E500        E     MOV     A,ITempB05
0044 F0                MOVX    @DPTR,A
0045 120000      E     LCALL   Send_Scan2
                                           ; SOURCE LINE # 491
0048 E4                CLR     A
0049 F500        E     MOV     new_keyh,A
                                           ; SOURCE LINE # 492
004B F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 493
004D 22                RET     
             ; FUNCTION change_valid (END)

             ; FUNCTION check_tm (BEGIN)
                                           ; SOURCE LINE # 500
                                           ; SOURCE LINE # 501
                                           ; SOURCE LINE # 502
0000 E4                CLR     A
0001 F500        E     MOV     ITempB02,A
                                           ; SOURCE LINE # 503
0003 900000      R     MOV     DPTR,#key
0006 E0                MOVX    A,@DPTR
0007 120000      R     LCALL   L?0236
000A 8002              SJMP    ?C0206
000C         ?C0205:
000C C3                CLR     C
000D 33                RLC     A
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 41  

000E         ?C0206:
000E D8FC              DJNZ    R0,?C0205
0010 F500        E     MOV     ITempB01,A
                                           ; SOURCE LINE # 504
0012 900000      R     MOV     DPTR,#key
0015 E0                MOVX    A,@DPTR
0016 120000      R     LCALL   L?0254
0019 E6                MOV     A,@R0
001A 5200        E     ANL     ITempB01,A
                                           ; SOURCE LINE # 506
001C E500        E     MOV     A,ITempB01
001E 7005              JNZ     ?C0069
                                           ; SOURCE LINE # 507
                                           ; SOURCE LINE # 508
0020 F500        E     MOV     typematic,A
                                           ; SOURCE LINE # 509
0022 750001      E     MOV     ITempB02,#01H
                                           ; SOURCE LINE # 510
0025         ?C0069:
                                           ; SOURCE LINE # 512
0025 E500        E     MOV     A,ITempB02
0027 700F              JNZ     ?C0070
                                           ; SOURCE LINE # 513
                                           ; SOURCE LINE # 514
0029 AF00        E     MOV     R7,scan+01H
002B 120000      R     LCALL   L?0239
002E F500        E     MOV     scan+01H,A
                                           ; SOURCE LINE # 515
0030 C4                SWAP    A
0031 540F              ANL     A,#0FH
0033 6003              JZ      ?C0070
                                           ; SOURCE LINE # 516
                                           ; SOURCE LINE # 517
0035 750001      E     MOV     ITempB02,#01H
                                           ; SOURCE LINE # 518
                                           ; SOURCE LINE # 519
0038         ?C0070:
                                           ; SOURCE LINE # 521
0038 E500        E     MOV     A,ITempB02
003A 7014              JNZ     ?C0072
                                           ; SOURCE LINE # 522
                                           ; SOURCE LINE # 523
003C E500        E     MOV     A,scan+01H
003E 540F              ANL     A,#0FH
0040 4410              ORL     A,#010H
0042 F500        E     MOV     scan+01H,A
                                           ; SOURCE LINE # 524
0044 900000      E     MOV     DPTR,#bTMcount
0047 E0                MOVX    A,@DPTR
0048 14                DEC     A
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 525
004A E0                MOVX    A,@DPTR
004B 6003              JZ      ?C0072
                                           ; SOURCE LINE # 526
                                           ; SOURCE LINE # 527
004D 750001      E     MOV     ITempB02,#01H
                                           ; SOURCE LINE # 528
                                           ; SOURCE LINE # 529
0050         ?C0072:
                                           ; SOURCE LINE # 531
0050 E500        E     MOV     A,ITempB02
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 42  

0052 701A              JNZ     ?C0075
                                           ; SOURCE LINE # 532
                                           ; SOURCE LINE # 533
0054 900000      E     MOV     DPTR,#bTMrepeat
0057 E0                MOVX    A,@DPTR
0058 900000      E     MOV     DPTR,#bTMcount
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 534
005C 7B01              MOV     R3,#01H
005E 7A00        R     MOV     R2,#HIGH key
0060 7900        R     MOV     R1,#LOW key
0062 120000      R     LCALL   L?0237
0065 900000      E     MOV     DPTR,#?Send_Scan2?BYTE+01H
0068 7402              MOV     A,#02H
006A F0                MOVX    @DPTR,A
006B 120000      E     LCALL   Send_Scan2
                                           ; SOURCE LINE # 535
                                           ; SOURCE LINE # 536
006E         ?C0075:
006E 22                RET     
             ; FUNCTION check_tm (END)

             ; FUNCTION Scan_Init (BEGIN)
                                           ; SOURCE LINE # 541
                                           ; SOURCE LINE # 542
                                           ; SOURCE LINE # 543
                                           ; SOURCE LINE # 544
0000 120000      R     LCALL   L?0255
0003 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 546
0004 30000A      E     JNB     ExtendMatrix,?C0077
                                           ; SOURCE LINE # 547
                                           ; SOURCE LINE # 548
0007 900000      E     MOV     DPTR,#KSOH2
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 550
000B 120000      E     LCALL   Hook_SetGPIOScanPinCtrl
                                           ; SOURCE LINE # 551
000E 120000      E     LCALL   Hook_SetGPIOScanPinL
                                           ; SOURCE LINE # 552
                                           ; SOURCE LINE # 553
0011         ?C0077:
0011 22                RET     
             ; FUNCTION Scan_Init (END)

             ; FUNCTION Enable_Any_Key_Irq (BEGIN)
                                           ; SOURCE LINE # 568
                                           ; SOURCE LINE # 569
                                           ; SOURCE LINE # 570
                                           ; SOURCE LINE # 571
0000 120000      R     LCALL   L?0255
0003 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 573
0004 300007      E     JNB     ExtendMatrix,?C0078
                                           ; SOURCE LINE # 574
                                           ; SOURCE LINE # 575
0007 900000      E     MOV     DPTR,#KSOH2
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 576
000B 120000      E     LCALL   Hook_SetGPIOScanPinL
                                           ; SOURCE LINE # 577
000E         ?C0078:
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 43  

                                           ; SOURCE LINE # 578
000E 900000      E     MOV     DPTR,#IER1
0011 E0                MOVX    A,@DPTR
0012 4408              ORL     A,#08H
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 586
0015 22                RET     
             ; FUNCTION Enable_Any_Key_Irq (END)

             ; FUNCTION Start_Scan_Transmission (BEGIN)
                                           ; SOURCE LINE # 597
                                           ; SOURCE LINE # 598
                                           ; SOURCE LINE # 601
0000 020000      E     LJMP    SetServiceSendFlag
             ; FUNCTION Start_Scan_Transmission (END)

             ; FUNCTION Check_Scan_Transmission (BEGIN)
                                           ; SOURCE LINE # 611
                                           ; SOURCE LINE # 612
                                           ; SOURCE LINE # 613
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#allow_transmission
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 615
0005 7800        E     MOV     R0,#LOW Int_Var
0007 E6                MOV     A,@R0
0008 C4                SWAP    A
0009 13                RRC     A
000A 13                RRC     A
000B 13                RRC     A
000C 5401              ANL     A,#01H
000E 20E017            JB      ACC.0,?C0081
0011 7800        E     MOV     R0,#LOW Flag
0013 E6                MOV     A,@R0
0014 20E011            JB      ACC.0,?C0081
                                           ; SOURCE LINE # 616
                                           ; SOURCE LINE # 618
0017 AF00        E     MOV     R7,scan
0019 EF                MOV     A,R7
001A C4                SWAP    A
001B 540F              ANL     A,#0FH
001D FF                MOV     R7,A
001E E500        E     MOV     A,scan
0020 540F              ANL     A,#0FH
0022 6F                XRL     A,R7
0023 6003              JZ      ?C0081
                                           ; SOURCE LINE # 619
                                           ; SOURCE LINE # 620
0025 7401              MOV     A,#01H
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 621
                                           ; SOURCE LINE # 622
0028         ?C0081:
                                           ; SOURCE LINE # 624
0028 900000      R     MOV     DPTR,#allow_transmission
002B E0                MOVX    A,@DPTR
002C FF                MOV     R7,A
                                           ; SOURCE LINE # 625
002D         ?C0083:
002D 22                RET     
             ; FUNCTION Check_Scan_Transmission (END)

C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 44  

             ; FUNCTION Get_Kbd_Type (BEGIN)
                                           ; SOURCE LINE # 634
                                           ; SOURCE LINE # 635
                                           ; SOURCE LINE # 637
                                           ; SOURCE LINE # 638
                                           ; SOURCE LINE # 639
0000 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 640
                                           ; SOURCE LINE # 642
                                           ; SOURCE LINE # 643
                                           ; SOURCE LINE # 644
                                           ; SOURCE LINE # 645
0002         ?C0085:
0002 22                RET     
             ; FUNCTION Get_Kbd_Type (END)

             ; FUNCTION Lock_Scan (BEGIN)
                                           ; SOURCE LINE # 653
                                           ; SOURCE LINE # 654
                                           ; SOURCE LINE # 655
0000 7800        E     MOV     R0,#LOW Int_Var
0002 E6                MOV     A,@R0
0003 4480              ORL     A,#080H
0005 F6                MOV     @R0,A
                                           ; SOURCE LINE # 657
0006 22                RET     
             ; FUNCTION Lock_Scan (END)

             ; FUNCTION Unlock_Scan (BEGIN)
                                           ; SOURCE LINE # 662
                                           ; SOURCE LINE # 663
                                           ; SOURCE LINE # 664
0000 7800        E     MOV     R0,#LOW Int_Var
0002 E6                MOV     A,@R0
0003 547F              ANL     A,#07FH
0005 F6                MOV     @R0,A
                                           ; SOURCE LINE # 665
0006 22                RET     
             ; FUNCTION Unlock_Scan (END)

             ; FUNCTION CheckKSO1617Support (BEGIN)
                                           ; SOURCE LINE # 667
                                           ; SOURCE LINE # 668
                                           ; SOURCE LINE # 669
0000 E4                CLR     A
0001 900000      E     MOV     DPTR,#ExtendScanPin
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 671
0005 900000      E     MOV     DPTR,#GPCRC3
0008 E0                MOVX    A,@DPTR
0009 54FB              ANL     A,#0FBH
000B 7006              JNZ     ?C0089
                                           ; SOURCE LINE # 672
                                           ; SOURCE LINE # 673
000D 900000      E     MOV     DPTR,#ExtendScanPin
0010 E0                MOVX    A,@DPTR
0011 04                INC     A
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 674
0013         ?C0089:
                                           ; SOURCE LINE # 676
0013 900000      E     MOV     DPTR,#GPCRC5
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 45  

0016 E0                MOVX    A,@DPTR
0017 54FB              ANL     A,#0FBH
0019 7006              JNZ     ?C0090
                                           ; SOURCE LINE # 677
                                           ; SOURCE LINE # 678
001B 900000      E     MOV     DPTR,#ExtendScanPin
001E E0                MOVX    A,@DPTR
001F 04                INC     A
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 679
0021         ?C0090:
                                           ; SOURCE LINE # 681
0021 900000      E     MOV     DPTR,#ExtendScanPin
0024 E0                MOVX    A,@DPTR
0025 6003              JZ      ?C0091
                                           ; SOURCE LINE # 682
                                           ; SOURCE LINE # 683
0027 D200        E     SETB    ExtendMatrix
                                           ; SOURCE LINE # 684
0029 22                RET     
002A         ?C0091:
                                           ; SOURCE LINE # 686
                                           ; SOURCE LINE # 687
002A C200        E     CLR     ExtendMatrix
                                           ; SOURCE LINE # 688
                                           ; SOURCE LINE # 689
002C         ?C0093:
002C 22                RET     
             ; FUNCTION CheckKSO1617Support (END)

             ; FUNCTION Init_Kbd (BEGIN)
                                           ; SOURCE LINE # 694
                                           ; SOURCE LINE # 695
                                           ; SOURCE LINE # 696
0000 120000      R     LCALL   CheckKSO1617Support
                                           ; SOURCE LINE # 698
0003 120000      R     LCALL   Scan_Init
                                           ; SOURCE LINE # 700
0006 120000      E     LCALL   Hook_Setup_Scanner_Pntr
                                           ; SOURCE LINE # 701
0009 120000      R     LCALL   Setup_Diode_Key
                                           ; SOURCE LINE # 703
000C E4                CLR     A
000D F500        E     MOV     new_keyh,A
                                           ; SOURCE LINE # 704
000F F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 706
0011 120000      R     LCALL   ClearExtendKeys
                                           ; SOURCE LINE # 708
0014 120000      E     LCALL   Clear_Fn_Keys
                                           ; SOURCE LINE # 709
0017 120000      R     LCALL   Clear_Key
                                           ; SOURCE LINE # 710
001A 120000      R     LCALL   Clear_Typematic
                                           ; SOURCE LINE # 712
001D 120000      R     LCALL   Enable_Any_Key_Irq
                                           ; SOURCE LINE # 714
                                           ; SOURCE LINE # 715
                                           ; SOURCE LINE # 716
0020 120000      R     LCALL   L?0249
                                           ; SOURCE LINE # 721
0023 22                RET     
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 46  

             ; FUNCTION Init_Kbd (END)

             ; FUNCTION Setup_Diode_Key (BEGIN)
                                           ; SOURCE LINE # 726
                                           ; SOURCE LINE # 727
                                           ; SOURCE LINE # 728
                                           ; SOURCE LINE # 729
                                           ; SOURCE LINE # 731
0000 E4                CLR     A
0001 900000      E     MOV     DPTR,#diode_key
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 732
                                           ; SOURCE LINE # 734
                                           ; SOURCE LINE # 735
                                           ; SOURCE LINE # 736
                                           ; SOURCE LINE # 737
0005         ?C0097:
0005 22                RET     
             ; FUNCTION Setup_Diode_Key (END)

             ; FUNCTION Clear_Key (BEGIN)
                                           ; SOURCE LINE # 743
                                           ; SOURCE LINE # 744
                                           ; SOURCE LINE # 748
;---- Variable 'i' assigned to Register 'R7' ----
0000         ?C0098:
                                           ; SOURCE LINE # 749
                                           ; SOURCE LINE # 750
0000 7F13              MOV     R7,#013H
0002 7800        E     MOV     R0,#LOW bscan_matrix
0004 E4                CLR     A
0005         ?C0207:
0005 F6                MOV     @R0,A
0006 08                INC     R0
0007 DFFC              DJNZ    R7,?C0207
                                           ; SOURCE LINE # 751
0009         ?C0099:
                                           ; SOURCE LINE # 753
0009         ?C0101:
                                           ; SOURCE LINE # 754
                                           ; SOURCE LINE # 755
0009 7F10              MOV     R7,#010H
000B 900000      E     MOV     DPTR,#bKEY_BUFF
000E E4                CLR     A
000F         ?C0208:
000F F0                MOVX    @DPTR,A
0010 A3                INC     DPTR
0011 DFFC              DJNZ    R7,?C0208
                                           ; SOURCE LINE # 756
0013         ?C0102:
                                           ; SOURCE LINE # 758
0013 E500        E     MOV     A,scan
0015 54F0              ANL     A,#0F0H
0017 F500        E     MOV     scan,A
                                           ; SOURCE LINE # 759
0019 540F              ANL     A,#0FH
001B F500        E     MOV     scan,A
                                           ; SOURCE LINE # 760
001D E4                CLR     A
001E F500        E     MOV     typematic,A
                                           ; SOURCE LINE # 761
                                           ; SOURCE LINE # 762
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 47  

                                           ; SOURCE LINE # 763
0020 120000      R     LCALL   L?0245
                                           ; SOURCE LINE # 764
0023 54F0              ANL     A,#0F0H
0025 F500        E     MOV     scan+02H,A
                                           ; SOURCE LINE # 765
0027 22                RET     
             ; FUNCTION Clear_Key (END)

             ; FUNCTION Clear_Typematic (BEGIN)
                                           ; SOURCE LINE # 771
                                           ; SOURCE LINE # 772
                                           ; SOURCE LINE # 773
0000 E4                CLR     A
0001 F500        E     MOV     typematic,A
                                           ; SOURCE LINE # 774
0003 900000      E     MOV     DPTR,#bTMdelay
0006 7414              MOV     A,#014H
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 775
0009 900000      E     MOV     DPTR,#bTMrepeat
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 776
000D 22                RET     
             ; FUNCTION Clear_Typematic (END)

             ; FUNCTION _Set_Typematic (BEGIN)
                                           ; SOURCE LINE # 799
0000 900000      R     MOV     DPTR,#type_rate
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 800
                                           ; SOURCE LINE # 801
0008 900000      R     MOV     DPTR,#type_rate
000B E0                MOVX    A,@DPTR
000C A3                INC     DPTR
000D E0                MOVX    A,@DPTR
000E 7800        E     MOV     R0,#LOW Save_Typematic
0010 F6                MOV     @R0,A
                                           ; SOURCE LINE # 804
0011 7E00              MOV     R6,#00H
0013 900000      R     MOV     DPTR,#type_rate+01H
0016 E0                MOVX    A,@DPTR
0017 541F              ANL     A,#01FH
0019 2400        R     ADD     A,#LOW repeat_tbl
001B F582              MOV     DPL,A
001D EE                MOV     A,R6
001E 3400        R     ADDC    A,#HIGH repeat_tbl
0020 F583              MOV     DPH,A
0022 E4                CLR     A
0023 93                MOVC    A,@A+DPTR
0024 900000      E     MOV     DPTR,#bTMrepeat
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 807
0028 900000      R     MOV     DPTR,#type_rate
002B E0                MOVX    A,@DPTR
002C FE                MOV     R6,A
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 48  

002F 7805              MOV     R0,#05H
0031         ?C0209:
0031 CE                XCH     A,R6
0032 C3                CLR     C
0033 13                RRC     A
0034 CE                XCH     A,R6
0035 13                RRC     A
0036 D8F9              DJNZ    R0,?C0209
0038 7E00              MOV     R6,#00H
003A 5403              ANL     A,#03H
003C 2400        R     ADD     A,#LOW delay_tbl
003E F582              MOV     DPL,A
0040 EE                MOV     A,R6
0041 3400        R     ADDC    A,#HIGH delay_tbl
0043 F583              MOV     DPH,A
0045 E4                CLR     A
0046 93                MOVC    A,@A+DPTR
0047 900000      E     MOV     DPTR,#bTMdelay
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 808
004B 22                RET     
             ; FUNCTION _Set_Typematic (END)

             ; FUNCTION service_scan (BEGIN)
                                           ; SOURCE LINE # 814
                                           ; SOURCE LINE # 815
                                           ; SOURCE LINE # 818
0000 AF00        E     MOV     R7,Timer_A
0002 EF                MOV     A,R7
0003 C4                SWAP    A
0004 540F              ANL     A,#0FH
0006 20E007            JB      ACC.0,?C0107
                                           ; SOURCE LINE # 819
                                           ; SOURCE LINE # 820
0009 AF00        E     MOV     R7,Timer_A
000B EF                MOV     A,R7
000C 4410              ORL     A,#010H
000E F500        E     MOV     Timer_A,A
                                           ; SOURCE LINE # 821
0010         ?C0107:
                                           ; SOURCE LINE # 823
0010 300012      E     JNB     ExtendMatrix,?C0108
                                           ; SOURCE LINE # 824
                                           ; SOURCE LINE # 825
0013 120000      R     LCALL   bScanExtendKeys
0016 EF                MOV     A,R7
0017 C0E0              PUSH    ACC
0019 120000      R     LCALL   scan_keys
001C D0E0              POP     ACC
001E 4F                ORL     A,R7
001F 900000      R     MOV     DPTR,#scan_activity
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 826
0023 8008              SJMP    ?C0109
0025         ?C0108:
                                           ; SOURCE LINE # 828
                                           ; SOURCE LINE # 829
0025 120000      R     LCALL   scan_keys
0028 900000      R     MOV     DPTR,#scan_activity
002B EF                MOV     A,R7
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 830
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 49  

002D         ?C0109:
                                           ; SOURCE LINE # 833
002D 900000      R     MOV     DPTR,#scan_activity
0030 E0                MOVX    A,@DPTR
0031 700F              JNZ     ?C0110
                                           ; SOURCE LINE # 834
                                           ; SOURCE LINE # 835
0033 AF00        E     MOV     R7,Timer_A
0035 EF                MOV     A,R7
0036 54EF              ANL     A,#0EFH
0038 F500        E     MOV     Timer_A,A
                                           ; SOURCE LINE # 836
003A C200        E     CLR     F_Service_KEY
                                           ; SOURCE LINE # 837
003C 120000      R     LCALL   Enable_Any_Key_Irq
                                           ; SOURCE LINE # 838
                                           ; SOURCE LINE # 839
                                           ; SOURCE LINE # 840
003F 120000      R     LCALL   L?0249
                                           ; SOURCE LINE # 841
0042         ?C0110:
                                           ; SOURCE LINE # 843
0042 AF00        E     MOV     R7,Timer_B
0044 EF                MOV     A,R7
0045 C4                SWAP    A
0046 540F              ANL     A,#0FH
0048 20E009            JB      ACC.0,?C0113
                                           ; SOURCE LINE # 844
                                           ; SOURCE LINE # 845
004B 120000      R     LCALL   Check_Scan_Transmission
004E EF                MOV     A,R7
004F 6003              JZ      ?C0113
                                           ; SOURCE LINE # 846
                                           ; SOURCE LINE # 847
0051 120000      R     LCALL   Start_Scan_Transmission
                                           ; SOURCE LINE # 848
                                           ; SOURCE LINE # 849
                                           ; SOURCE LINE # 850
0054         ?C0113:
0054 22                RET     
             ; FUNCTION service_scan (END)

             ; FUNCTION Get_Buffer (BEGIN)
                                           ; SOURCE LINE # 866
;---- Variable 'buffer_data' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 867
                                           ; SOURCE LINE # 871
0000 120000      R     LCALL   L?0263
0003 FE                MOV     R6,A
0004 E500        E     MOV     A,scan
0006 540F              ANL     A,#0FH
0008 FD                MOV     R5,A
0009 6E                XRL     A,R6
000A 6025              JZ      ?C0114
                                           ; SOURCE LINE # 872
                                           ; SOURCE LINE # 874
000C E500        E     MOV     A,scan
000E 54F0              ANL     A,#0F0H
0010 FE                MOV     R6,A
0011 ED                MOV     A,R5
0012 04                INC     A
0013 540F              ANL     A,#0FH
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 50  

0015 4E                ORL     A,R6
0016 F500        E     MOV     scan,A
0018 7400        E     MOV     A,#LOW bKEY_BUFF
001A 2D                ADD     A,R5
001B 120000      R     LCALL   L?0244
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
                                           ; SOURCE LINE # 875
0020 E500        E     MOV     A,scan
0022 540F              ANL     A,#0FH
0024 C3                CLR     C
0025 9410              SUBB    A,#010H
0027 400A              JC      ?C0116
                                           ; SOURCE LINE # 876
                                           ; SOURCE LINE # 877
0029 E500        E     MOV     A,scan
002B 54F0              ANL     A,#0F0H
002D F500        E     MOV     scan,A
                                           ; SOURCE LINE # 878
                                           ; SOURCE LINE # 879
002F 8002              SJMP    ?C0116
0031         ?C0114:
                                           ; SOURCE LINE # 881
                                           ; SOURCE LINE # 882
0031 7FFF              MOV     R7,#0FFH
                                           ; SOURCE LINE # 883
0033         ?C0116:
                                           ; SOURCE LINE # 884
                                           ; SOURCE LINE # 885
0033         ?C0117:
0033 22                RET     
             ; FUNCTION Get_Buffer (END)

             ; FUNCTION Buffer_Mark (BEGIN)
                                           ; SOURCE LINE # 890
                                           ; SOURCE LINE # 891
                                           ; SOURCE LINE # 892
0000 E500        E     MOV     A,scan
0002 54F0              ANL     A,#0F0H
0004 C4                SWAP    A
0005 540F              ANL     A,#0FH
0007 FF                MOV     R7,A
0008 E500        E     MOV     A,scan+01H
000A 54F0              ANL     A,#0F0H
000C 4F                ORL     A,R7
000D F500        E     MOV     scan+01H,A
                                           ; SOURCE LINE # 893
000F 22                RET     
             ; FUNCTION Buffer_Mark (END)

             ; FUNCTION _Buffer_Key (BEGIN)
                                           ; SOURCE LINE # 901
;---- Variable 'row_column' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 902
                                           ; SOURCE LINE # 903
0000 900000      R     MOV     DPTR,#ready
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 905
0006 120000      R     LCALL   L?0263
0009 FE                MOV     R6,A
000A 120000      R     LCALL   L?0243
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 51  

000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 906
000F E500        E     MOV     A,scan
0011 540F              ANL     A,#0FH
0013 FF                MOV     R7,A
0014 EE                MOV     A,R6
0015 04                INC     A
0016 120000      R     LCALL   L?0240
0019 F500        E     MOV     scan,A
                                           ; SOURCE LINE # 908
001B C4                SWAP    A
001C 540F              ANL     A,#0FH
001E C3                CLR     C
001F 9410              SUBB    A,#010H
0021 4006              JC      ?C0119
                                           ; SOURCE LINE # 909
                                           ; SOURCE LINE # 910
0023 E500        E     MOV     A,scan
0025 540F              ANL     A,#0FH
0027 F500        E     MOV     scan,A
                                           ; SOURCE LINE # 911
0029         ?C0119:
                                           ; SOURCE LINE # 914
0029 E500        E     MOV     A,scan
002B 540F              ANL     A,#0FH
002D FF                MOV     R7,A
002E 120000      R     LCALL   L?0264
0031 6F                XRL     A,R7
0032 7019              JNZ     ?C0120
                                           ; SOURCE LINE # 915
                                           ; SOURCE LINE # 916
0034 E500        E     MOV     A,scan+01H
0036 540F              ANL     A,#0FH
0038 C4                SWAP    A
0039 54F0              ANL     A,#0F0H
003B FF                MOV     R7,A
003C E500        E     MOV     A,scan
003E 540F              ANL     A,#0FH
0040 4F                ORL     A,R7
0041 F500        E     MOV     scan,A
                                           ; SOURCE LINE # 917
0043 C4                SWAP    A
0044 120000      R     LCALL   L?0243
0047 E4                CLR     A
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 918
0049 900000      R     MOV     DPTR,#ready
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 919
004D         ?C0120:
                                           ; SOURCE LINE # 921
004D 900000      R     MOV     DPTR,#ready
0050 E0                MOVX    A,@DPTR
0051 FF                MOV     R7,A
                                           ; SOURCE LINE # 922
0052         ?C0121:
0052 22                RET     
             ; FUNCTION _Buffer_Key (END)

             ; FUNCTION _Buffer_String (BEGIN)
                                           ; SOURCE LINE # 934
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 52  

0000 900000      R     MOV     DPTR,#pntr
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 935
                                           ; SOURCE LINE # 936
;---- Variable 'error' assigned to Register 'R5' ----
0006 E4                CLR     A
0007 FD                MOV     R5,A
0008         ?C0122:
                                           ; SOURCE LINE # 938
0008 900000      R     MOV     DPTR,#pntr
000B 120000      E     LCALL   ?C?PLDXDATA
000E 120000      E     LCALL   ?C?CLDPTR
0011 601A              JZ      ?C0123
0013 ED                MOV     A,R5
0014 7017              JNZ     ?C0123
                                           ; SOURCE LINE # 939
                                           ; SOURCE LINE # 940
0016 900000      R     MOV     DPTR,#pntr
0019 75F001            MOV     B,#01H
001C 120000      E     LCALL   ?C?PLDIXDATA
001F 120000      E     LCALL   ?C?CLDPTR
0022 FF                MOV     R7,A
0023 120000      R     LCALL   _Buffer_Key
0026 EF                MOV     A,R7
0027 70DF              JNZ     ?C0122
                                           ; SOURCE LINE # 941
0029 7D80              MOV     R5,#080H
                                           ; SOURCE LINE # 942
                                           ; SOURCE LINE # 943
002B 80DB              SJMP    ?C0122
002D         ?C0123:
                                           ; SOURCE LINE # 945
002D CF                XCH     A,R7
002E ED                MOV     A,R5
002F CF                XCH     A,R7
                                           ; SOURCE LINE # 946
0030         ?C0125:
0030 22                RET     
             ; FUNCTION _Buffer_String (END)

             ; FUNCTION bScanExtendKeys (BEGIN)
                                           ; SOURCE LINE # 954
                                           ; SOURCE LINE # 955
                                           ; SOURCE LINE # 956
0000 E4                CLR     A
0001 F500        E     MOV     ITempB06,A
                                           ; SOURCE LINE # 959
0003 120000      R     LCALL   check_keyscan_buffer_half_full
0006 EF                MOV     A,R7
0007 6003              JZ      ?C0126
                                           ; SOURCE LINE # 960
                                           ; SOURCE LINE # 961
0009 7F01              MOV     R7,#01H
000B 22                RET     
                                           ; SOURCE LINE # 962
000C         ?C0126:
                                           ; SOURCE LINE # 964
000C E500        E     MOV     A,extendscan+02H
000E 54DF              ANL     A,#0DFH
0010 F500        E     MOV     extendscan+02H,A
                                           ; SOURCE LINE # 965
0012 54EF              ANL     A,#0EFH
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 53  

0014 F500        E     MOV     extendscan+02H,A
                                           ; SOURCE LINE # 966
0016 54BF              ANL     A,#0BFH
0018 F500        E     MOV     extendscan+02H,A
                                           ; SOURCE LINE # 968
001A E500        E     MOV     A,etkeytypematic
001C 6012              JZ      ?C0128
                                           ; SOURCE LINE # 969
                                           ; SOURCE LINE # 970
001E 7800        R     MOV     R0,#LOW ?CheckEtKeystm?BYTE
0020 7C00        R     MOV     R4,#HIGH ?CheckEtKeystm?BYTE
0022 7D01              MOV     R5,#01H
0024 7B00              MOV     R3,#00H
0026 7A00        E     MOV     R2,#HIGH etkeytypematic
0028 7900        E     MOV     R1,#LOW etkeytypematic
002A 120000      R     LCALL   L?0238
002D 120000      R     LCALL   CheckEtKeystm
                                           ; SOURCE LINE # 971
0030         ?C0128:
                                           ; SOURCE LINE # 973
0030 E500        E     MOV     A,new_extendkey
0032 600C              JZ      ?C0129
                                           ; SOURCE LINE # 974
                                           ; SOURCE LINE # 975
0034 E500        E     MOV     A,extendscan+02H
0036 4410              ORL     A,#010H
0038 F500        E     MOV     extendscan+02H,A
                                           ; SOURCE LINE # 976
003A 120000      R     LCALL   DebounceExtendkey
                                           ; SOURCE LINE # 977
003D 750001      E     MOV     ITempB06,#01H
                                           ; SOURCE LINE # 978
0040         ?C0129:
                                           ; SOURCE LINE # 980
0040 E500        E     MOV     A,ITempB06
0042 7044              JNZ     ?C0130
                                           ; SOURCE LINE # 981
                                           ; SOURCE LINE # 982
0044 F500        E     MOV     ITempB01,A
0046         ?C0131:
0046 900000      E     MOV     DPTR,#ExtendScanPin
0049 E0                MOVX    A,@DPTR
004A FF                MOV     R7,A
004B E500        E     MOV     A,ITempB01
004D C3                CLR     C
004E 9F                SUBB    A,R7
004F 5037              JNC     ?C0130
                                           ; SOURCE LINE # 983
                                           ; SOURCE LINE # 984
0051 AF00        E     MOV     R7,ITempB01
0053 120000      R     LCALL   _SetExtendScanLines
                                           ; SOURCE LINE # 985
0056 900000      E     MOV     DPTR,#KSI
0059 E0                MOVX    A,@DPTR
005A F500        E     MOV     ITempB02,A
                                           ; SOURCE LINE # 986
005C AF00        E     MOV     R7,ITempB01
005E 7400        E     MOV     A,#LOW bscan_matrix+010H
                                           ; SOURCE LINE # 987
0060 120000      R     LCALL   L?0252
0063 6010              JZ      ?C0134
                                           ; SOURCE LINE # 988
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 54  

                                           ; SOURCE LINE # 989
0065 AF00        E     MOV     R7,ITempB02
0067 7E00              MOV     R6,#00H
0069 AD00        E     MOV     R5,ITempB01
006B ED                MOV     A,R5
006C 2410              ADD     A,#010H
006E FD                MOV     R5,A
006F E4                CLR     A
0070 33                RLC     A
0071 FC                MOV     R4,A
0072 120000      R     LCALL   _CheckExtendKeys
                                           ; SOURCE LINE # 990
0075         ?C0134:
                                           ; SOURCE LINE # 992
0075 AF00        E     MOV     R7,ITempB01
0077 7400        E     MOV     A,#LOW bscan_matrix+010H
0079 2F                ADD     A,R7
007A F8                MOV     R0,A
007B E6                MOV     A,@R0
007C 6006              JZ      ?C0133
                                           ; SOURCE LINE # 993
                                           ; SOURCE LINE # 994
007E E500        E     MOV     A,extendscan+02H
0080 4440              ORL     A,#040H
0082 F500        E     MOV     extendscan+02H,A
                                           ; SOURCE LINE # 995
                                           ; SOURCE LINE # 996
0084         ?C0133:
0084 0500        E     INC     ITempB01
0086 80BE              SJMP    ?C0131
                                           ; SOURCE LINE # 997
0088         ?C0130:
                                           ; SOURCE LINE # 999
0088 AF00        E     MOV     R7,extendstatus
008A 120000      R     LCALL   L?0247
008D 30E02C            JNB     ACC.0,?C0136
                                           ; SOURCE LINE # 1000
                                           ; SOURCE LINE # 1001
0090 AF00        E     MOV     R7,extendstatus
0092 EF                MOV     A,R7
0093 54F7              ANL     A,#0F7H
0095 F500        E     MOV     extendstatus,A
                                           ; SOURCE LINE # 1002
0097 E500        E     MOV     A,extendstatus
0099 5407              ANL     A,#07H
009B F500        E     MOV     ITempB01,A
                                           ; SOURCE LINE # 1003
009D E500        E     MOV     A,ITempB01
009F 7013              JNZ     ?C0137
                                           ; SOURCE LINE # 1004
                                           ; SOURCE LINE # 1005
00A1 AF00        E     MOV     R7,new_extendkey
00A3 120000      R     LCALL   L?0235
00A6 8002              SJMP    ?C0211
00A8         ?C0210:
00A8 C3                CLR     C
00A9 33                RLC     A
00AA         ?C0211:
00AA D8FC              DJNZ    R0,?C0210
00AC F500        E     MOV     ITempB01,A
                                           ; SOURCE LINE # 1006
00AE 900000      E     MOV     DPTR,#diode_key
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 55  

00B1 E0                MOVX    A,@DPTR
00B2 5200        E     ANL     ITempB01,A
                                           ; SOURCE LINE # 1007
00B4         ?C0137:
                                           ; SOURCE LINE # 1008
00B4 E500        E     MOV     A,ITempB01
00B6 7004              JNZ     ?C0136
                                           ; SOURCE LINE # 1009
                                           ; SOURCE LINE # 1010
00B8 F500        E     MOV     new_extendkey,A
                                           ; SOURCE LINE # 1011
00BA F500        E     MOV     extendstatus,A
                                           ; SOURCE LINE # 1012
                                           ; SOURCE LINE # 1013
00BC         ?C0136:
                                           ; SOURCE LINE # 1015
00BC AF00        E     MOV     R7,extendscan+02H
00BE EF                MOV     A,R7
00BF C4                SWAP    A
00C0 13                RRC     A
00C1 5401              ANL     A,#01H
00C3 FF                MOV     R7,A
00C4 AE00        E     MOV     R6,extendscan+02H
00C6 EE                MOV     A,R6
00C7 AE00        E     MOV     R6,extendscan+02H
00C9 120000      R     LCALL   L?0248
                                           ; SOURCE LINE # 1016
00CC         ?C0127:
00CC 22                RET     
             ; FUNCTION bScanExtendKeys (END)

             ; FUNCTION _SetExtendScanLines (BEGIN)
                                           ; SOURCE LINE # 1021
;---- Variable 'scan_line' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1022
                                           ; SOURCE LINE # 1023
0000 EF                MOV     A,R7
0001 C3                CLR     C
0002 9402              SUBB    A,#02H
0004 5014              JNC     ?C0139
                                           ; SOURCE LINE # 1024
                                           ; SOURCE LINE # 1025
                                           ; SOURCE LINE # 1026
0006 120000      R     LCALL   L?0241
                                           ; SOURCE LINE # 1027
0009 120000      R     LCALL   L?0261
000C 8002              SJMP    ?C0213
000E         ?C0212:
000E C3                CLR     C
000F 33                RLC     A
0010         ?C0213:
0010 D8FC              DJNZ    R0,?C0212
0012 F4                CPL     A
0013 900000      E     MOV     DPTR,#KSOH2
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1028
0017 020000      E     LJMP    Hook_SetGPIOScanPinH
                                           ; SOURCE LINE # 1029
001A         ?C0139:
                                           ; SOURCE LINE # 1031
                                           ; SOURCE LINE # 1032
                                           ; SOURCE LINE # 1033
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 56  

001A 120000      R     LCALL   L?0242
                                           ; SOURCE LINE # 1034
001D 900000      E     MOV     DPTR,#KSOH2
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1035
0021 120000      E     LCALL   Hook_SetGPIOScanPinL
                                           ; SOURCE LINE # 1036
                                           ; SOURCE LINE # 1037
0024         ?C0141:
0024 22                RET     
             ; FUNCTION _SetExtendScanLines (END)

             ; FUNCTION _CheckExtendKeys (BEGIN)
                                           ; SOURCE LINE # 1042
0000 900000      R     MOV     DPTR,#KSI_bit_num
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EC                MOV     A,R4
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C ED                MOV     A,R5
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1043
                                           ; SOURCE LINE # 1047
;---- Variable 'flag' assigned to Register 'R3' ----
000E E4                CLR     A
000F FB                MOV     R3,A
                                           ; SOURCE LINE # 1048
0010 AF00        E     MOV     R7,extendstatus
0012 120000      R     LCALL   L?0247
0015 30E003            JNB     ACC.0,?C0142
                                           ; SOURCE LINE # 1049
                                           ; SOURCE LINE # 1050
0018 0B                INC     R3
                                           ; SOURCE LINE # 1051
0019 801C              SJMP    ?C0143
001B         ?C0142:
                                           ; SOURCE LINE # 1053
                                           ; SOURCE LINE # 1054
001B 900000      R     MOV     DPTR,#scan_address
001E 120000      R     LCALL   L?0250
0021 F4                CPL     A
0022 FF                MOV     R7,A
0023 900000      R     MOV     DPTR,#KSI_bit_num
0026 A3                INC     DPTR
0027 E0                MOVX    A,@DPTR
0028 5F                ANL     A,R7
0029 FF                MOV     R7,A
;---- Variable 'change_make_key' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1055
002A 7003              JNZ     ?C0144
                                           ; SOURCE LINE # 1056
                                           ; SOURCE LINE # 1057
002C FB                MOV     R3,A
                                           ; SOURCE LINE # 1058
002D 8008              SJMP    ?C0143
002F         ?C0144:
                                           ; SOURCE LINE # 1059
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 57  

002F 120000      R     LCALL   _find_paths
0032 EF                MOV     A,R7
0033 6002              JZ      ?C0143
                                           ; SOURCE LINE # 1060
                                           ; SOURCE LINE # 1061
0035 7B01              MOV     R3,#01H
                                           ; SOURCE LINE # 1062
                                           ; SOURCE LINE # 1063
0037         ?C0143:
                                           ; SOURCE LINE # 1065
0037 EB                MOV     A,R3
0038 6020              JZ      ?C0147
                                           ; SOURCE LINE # 1066
                                           ; SOURCE LINE # 1067
003A AF00        E     MOV     R7,extendstatus
003C EF                MOV     A,R7
003D 4408              ORL     A,#08H
003F F500        E     MOV     extendstatus,A
                                           ; SOURCE LINE # 1068
0041 900000      R     MOV     DPTR,#scan_address
0044 A3                INC     DPTR
0045 E0                MOVX    A,@DPTR
0046 2400        E     ADD     A,#LOW bscan_matrix
0048 F8                MOV     R0,A
0049 E6                MOV     A,@R0
004A FF                MOV     R7,A
004B 900000      E     MOV     DPTR,#diode_key
004E E0                MOVX    A,@DPTR
004F 4F                ORL     A,R7
0050 FF                MOV     R7,A
0051 900000      R     MOV     DPTR,#KSI_bit_num
0054 E4                CLR     A
0055 F0                MOVX    @DPTR,A
0056 A3                INC     DPTR
0057 E0                MOVX    A,@DPTR
0058 5F                ANL     A,R7
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1069
005A         ?C0147:
                                           ; SOURCE LINE # 1071
005A E4                CLR     A
005B F500        E     MOV     ITempB03,A
005D         ?C0148:
                                           ; SOURCE LINE # 1072
005D 900000      R     MOV     DPTR,#KSI_bit_num
0060 E0                MOVX    A,@DPTR
0061 FE                MOV     R6,A
0062 A3                INC     DPTR
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 4E                ORL     A,R6
0066 6065              JZ      ?C0155
                                           ; SOURCE LINE # 1073
                                           ; SOURCE LINE # 1074
0068 EF                MOV     A,R7
0069 30E051            JNB     ACC.0,?C0150
                                           ; SOURCE LINE # 1075
                                           ; SOURCE LINE # 1076
006C A3                INC     DPTR
006D 120000      R     LCALL   L?0250
0070 FB                MOV     R3,A
0071 7A00              MOV     R2,#00H
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 58  

0073 AF00        E     MOV     R7,ITempB03
0075 7401              MOV     A,#01H
0077 7E00              MOV     R6,#00H
0079 C8                XCH     A,R0
007A EF                MOV     A,R7
007B C8                XCH     A,R0
007C 08                INC     R0
007D 8005              SJMP    ?C0215
007F         ?C0214:
007F C3                CLR     C
0080 33                RLC     A
0081 CE                XCH     A,R6
0082 33                RLC     A
0083 CE                XCH     A,R6
0084         ?C0215:
0084 D8F9              DJNZ    R0,?C0214
0086 FF                MOV     R7,A
0087 EE                MOV     A,R6
0088 5A                ANL     A,R2
0089 FE                MOV     R6,A
008A EF                MOV     A,R7
008B 5B                ANL     A,R3
008C 4E                ORL     A,R6
008D 6013              JZ      ?C0151
                                           ; SOURCE LINE # 1077
                                           ; SOURCE LINE # 1078
008F AF00        E     MOV     R7,extendscan+02H
0091 EF                MOV     A,R7
0092 C4                SWAP    A
0093 13                RRC     A
0094 5407              ANL     A,#07H
0096 20E024            JB      ACC.0,?C0150
                                           ; SOURCE LINE # 1079
                                           ; SOURCE LINE # 1080
0099 EF                MOV     A,R7
009A 4420              ORL     A,#020H
009C F500        E     MOV     extendscan+02H,A
                                           ; SOURCE LINE # 1081
009E 7B01              MOV     R3,#01H
                                           ; SOURCE LINE # 1082
                                           ; SOURCE LINE # 1083
00A0 8016              SJMP    ?C0227
00A2         ?C0151:
                                           ; SOURCE LINE # 1085
                                           ; SOURCE LINE # 1086
00A2 AF00        E     MOV     R7,extendscan+02H
00A4 EF                MOV     A,R7
00A5 C4                SWAP    A
00A6 540F              ANL     A,#0FH
00A8 20E012            JB      ACC.0,?C0150
                                           ; SOURCE LINE # 1087
                                           ; SOURCE LINE # 1088
00AB EF                MOV     A,R7
00AC 4410              ORL     A,#010H
00AE F500        E     MOV     extendscan+02H,A
                                           ; SOURCE LINE # 1089
00B0 900000      R     MOV     DPTR,#scan_address
00B3 A3                INC     DPTR
00B4 E0                MOVX    A,@DPTR
00B5 FD                MOV     R5,A
00B6 E4                CLR     A
00B7 FB                MOV     R3,A
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 59  

00B8         ?C0227:
00B8 AF00        E     MOV     R7,ITempB03
00BA 120000      R     LCALL   _ExtendKeyDebounce
                                           ; SOURCE LINE # 1090
                                           ; SOURCE LINE # 1091
                                           ; SOURCE LINE # 1092
00BD         ?C0150:
                                           ; SOURCE LINE # 1093
00BD 0500        E     INC     ITempB03
                                           ; SOURCE LINE # 1094
00BF 900000      R     MOV     DPTR,#KSI_bit_num
00C2 E0                MOVX    A,@DPTR
00C3 A2E7              MOV     C,ACC.7
00C5 13                RRC     A
00C6 F0                MOVX    @DPTR,A
00C7 A3                INC     DPTR
00C8 E0                MOVX    A,@DPTR
00C9 13                RRC     A
00CA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1095
00CB 8090              SJMP    ?C0148
                                           ; SOURCE LINE # 1096
00CD         ?C0155:
00CD 22                RET     
             ; FUNCTION _CheckExtendKeys (END)

             ; FUNCTION _ExtendKeyDebounce (BEGIN)
                                           ; SOURCE LINE # 1101
;---- Variable 'KSI_bit_num' assigned to Register 'R7' ----
;---- Variable 'event' assigned to Register 'R3' ----
;---- Variable 'scan_address' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 1102
                                           ; SOURCE LINE # 1103
0000 ED                MOV     A,R5
0001 24F0              ADD     A,#0F0H
0003 AD00        E     MOV     R5,new_extendkey
0005 120000      R     LCALL   L?0259
0008 F500        E     MOV     new_extendkey,A
                                           ; SOURCE LINE # 1104
000A EF                MOV     A,R7
000B 5407              ANL     A,#07H
000D FF                MOV     R7,A
000E AE00        E     MOV     R6,new_extendkey
0010 EE                MOV     A,R6
0011 54F8              ANL     A,#0F8H
0013 4F                ORL     A,R7
0014 F500        E     MOV     new_extendkey,A
                                           ; SOURCE LINE # 1105
0016 AF00        E     MOV     R7,new_extendkey
0018 EF                MOV     A,R7
0019 4408              ORL     A,#08H
001B F500        E     MOV     new_extendkey,A
                                           ; SOURCE LINE # 1106
001D AF00        E     MOV     R7,extendstatus
001F EF                MOV     A,R7
0020 54FE              ANL     A,#0FEH
0022 F500        E     MOV     extendstatus,A
                                           ; SOURCE LINE # 1107
0024 AF00        E     MOV     R7,extendstatus
0026 EF                MOV     A,R7
0027 54EF              ANL     A,#0EFH
0029 F500        E     MOV     extendstatus,A
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 60  

                                           ; SOURCE LINE # 1109
002B EB                MOV     A,R3
002C AF00        E     MOV     R7,extendstatus
002E 7005              JNZ     ?C0156
                                           ; SOURCE LINE # 1110
                                           ; SOURCE LINE # 1111
0030 EF                MOV     A,R7
0031 54FD              ANL     A,#0FDH
                                           ; SOURCE LINE # 1112
                                           ; SOURCE LINE # 1113
0033 8003              SJMP    ?C0228
0035         ?C0156:
                                           ; SOURCE LINE # 1115
                                           ; SOURCE LINE # 1116
0035 EF                MOV     A,R7
0036 4402              ORL     A,#02H
0038         ?C0228:
0038 F500        E     MOV     extendstatus,A
                                           ; SOURCE LINE # 1117
003A AF00        E     MOV     R7,extendstatus
003C EF                MOV     A,R7
003D 541F              ANL     A,#01FH
003F 4420              ORL     A,#020H
0041 F500        E     MOV     extendstatus,A
                                           ; SOURCE LINE # 1118
                                           ; SOURCE LINE # 1119
0043         ?C0158:
0043 22                RET     
             ; FUNCTION _ExtendKeyDebounce (END)

             ; FUNCTION DebounceExtendkey (BEGIN)
                                           ; SOURCE LINE # 1122
                                           ; SOURCE LINE # 1123
                                           ; SOURCE LINE # 1124
0000 AF00        E     MOV     R7,new_extendkey
0002 EF                MOV     A,R7
0003 C4                SWAP    A
0004 540F              ANL     A,#0FH
0006 FF                MOV     R7,A
0007 120000      R     LCALL   _SetExtendScanLines
                                           ; SOURCE LINE # 1125
000A 120000      R     LCALL   Read_Scan_Lines
000D 8F00        E     MOV     ITempB04,R7
                                           ; SOURCE LINE # 1126
000F 6300FF      E     XRL     ITempB04,#0FFH
                                           ; SOURCE LINE # 1127
0012 AF00        E     MOV     R7,new_extendkey
0014 120000      R     LCALL   L?0235
0017 8002              SJMP    ?C0217
0019         ?C0216:
0019 C3                CLR     C
001A 33                RLC     A
001B         ?C0217:
001B D8FC              DJNZ    R0,?C0216
001D F500        E     MOV     ITempB05,A
                                           ; SOURCE LINE # 1128
001F E500        E     MOV     A,ITempB04
0021 5200        E     ANL     ITempB05,A
                                           ; SOURCE LINE # 1130
0023 E500        E     MOV     A,ITempB05
0025 600C              JZ      ?C0159
                                           ; SOURCE LINE # 1131
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 61  

                                           ; SOURCE LINE # 1132
0027 AF00        E     MOV     R7,extendstatus
0029 EF                MOV     A,R7
002A C3                CLR     C
002B 13                RRC     A
002C AF00        E     MOV     R7,extendstatus
002E 20E00C            JB      ACC.0,?C0230
                                           ; SOURCE LINE # 1133
                                           ; SOURCE LINE # 1134
                                           ; SOURCE LINE # 1135
0031 8011              SJMP    ?C0229
0033         ?C0159:
                                           ; SOURCE LINE # 1142
                                           ; SOURCE LINE # 1143
0033 AF00        E     MOV     R7,extendstatus
0035 EF                MOV     A,R7
0036 C3                CLR     C
0037 13                RRC     A
0038 AF00        E     MOV     R7,extendstatus
003A 20E007            JB      ACC.0,?C0163
                                           ; SOURCE LINE # 1144
                                           ; SOURCE LINE # 1145
003D         ?C0230:
003D EF                MOV     A,R7
003E 54EF              ANL     A,#0EFH
0040 F500        E     MOV     extendstatus,A
                                           ; SOURCE LINE # 1146
0042 8005              SJMP    ?C0162
0044         ?C0163:
                                           ; SOURCE LINE # 1148
                                           ; SOURCE LINE # 1149
0044         ?C0229:
0044 EF                MOV     A,R7
0045 4410              ORL     A,#010H
0047 F500        E     MOV     extendstatus,A
                                           ; SOURCE LINE # 1150
                                           ; SOURCE LINE # 1151
0049         ?C0162:
                                           ; SOURCE LINE # 1153
0049 AF00        E     MOV     R7,extendstatus
004B EF                MOV     A,R7
004C 20E034            JB      ACC.0,?C0165
                                           ; SOURCE LINE # 1154
                                           ; SOURCE LINE # 1155
004F AF00        E     MOV     R7,extendstatus
0051 EF                MOV     A,R7
0052 C4                SWAP    A
0053 13                RRC     A
0054 5407              ANL     A,#07H
0056 6018              JZ      ?C0166
                                           ; SOURCE LINE # 1156
                                           ; SOURCE LINE # 1157
0058 AF00        E     MOV     R7,extendstatus
005A EF                MOV     A,R7
005B C4                SWAP    A
005C 13                RRC     A
005D 5407              ANL     A,#07H
005F FE                MOV     R6,A
0060 EF                MOV     A,R7
0061 541F              ANL     A,#01FH
0063 FF                MOV     R7,A
0064 EE                MOV     A,R6
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 62  

0065 14                DEC     A
0066 5407              ANL     A,#07H
0068 C4                SWAP    A
0069 33                RLC     A
006A 54E0              ANL     A,#0E0H
006C 4F                ORL     A,R7
006D F500        E     MOV     extendstatus,A
                                           ; SOURCE LINE # 1158
006F 22                RET     
0070         ?C0166:
                                           ; SOURCE LINE # 1160
                                           ; SOURCE LINE # 1161
0070 AF00        E     MOV     R7,extendstatus
0072 EF                MOV     A,R7
0073 C4                SWAP    A
0074 540F              ANL     A,#0FH
0076 20E002            JB      ACC.0,?C0168
                                           ; SOURCE LINE # 1162
                                           ; SOURCE LINE # 1163
                                           ; SOURCE LINE # 1164
                                           ; SOURCE LINE # 1165
0079 8011              SJMP    ?C0231
007B         ?C0168:
                                           ; SOURCE LINE # 1167
                                           ; SOURCE LINE # 1168
007B AF00        E     MOV     R7,extendstatus
007D EF                MOV     A,R7
007E 4401              ORL     A,#01H
0080 F500        E     MOV     extendstatus,A
                                           ; SOURCE LINE # 1169
                                           ; SOURCE LINE # 1170
                                           ; SOURCE LINE # 1171
0082 22                RET     
0083         ?C0165:
                                           ; SOURCE LINE # 1173
                                           ; SOURCE LINE # 1174
0083 AF00        E     MOV     R7,extendstatus
0085 EF                MOV     A,R7
0086 C4                SWAP    A
0087 540F              ANL     A,#0FH
0089 20E006            JB      ACC.0,?C0171
                                           ; SOURCE LINE # 1175
                                           ; SOURCE LINE # 1176
008C         ?C0231:
008C E4                CLR     A
008D F500        E     MOV     new_extendkey,A
                                           ; SOURCE LINE # 1177
008F F500        E     MOV     extendstatus,A
                                           ; SOURCE LINE # 1178
0091 22                RET     
0092         ?C0171:
                                           ; SOURCE LINE # 1180
                                           ; SOURCE LINE # 1181
0092 120000      R     LCALL   CheckExtendKeyValid
                                           ; SOURCE LINE # 1182
                                           ; SOURCE LINE # 1183
                                           ; SOURCE LINE # 1184
0095         ?C0173:
0095 22                RET     
             ; FUNCTION DebounceExtendkey (END)

             ; FUNCTION CheckExtendKeyValid (BEGIN)
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 63  

                                           ; SOURCE LINE # 1190
                                           ; SOURCE LINE # 1191
                                           ; SOURCE LINE # 1192
0000 AF00        E     MOV     R7,new_extendkey
0002 120000      R     LCALL   L?0235
0005 8002              SJMP    ?C0219
0007         ?C0218:
0007 C3                CLR     C
0008 33                RLC     A
0009         ?C0219:
0009 D8FC              DJNZ    R0,?C0218
000B F500        E     MOV     ITempB02,A
                                           ; SOURCE LINE # 1193
000D 120000      R     LCALL   L?0257
0010 E6                MOV     A,@R0
0011 F500        E     MOV     ITempB01,A
                                           ; SOURCE LINE # 1194
0013 E500        E     MOV     A,ITempB02
0015 6200        E     XRL     ITempB01,A
                                           ; SOURCE LINE # 1195
0017 120000      R     LCALL   L?0257
001A A600        E     MOV     @R0,ITempB01
                                           ; SOURCE LINE # 1197
001C 750001      E     MOV     ITempB03,#01H
                                           ; SOURCE LINE # 1198
001F E500        E     MOV     A,ITempB02
0021 5500        E     ANL     A,ITempB01
0023 6013              JZ      ?C0174
                                           ; SOURCE LINE # 1199
                                           ; SOURCE LINE # 1200
0025 E4                CLR     A
0026 F500        E     MOV     ITempB03,A
                                           ; SOURCE LINE # 1201
0028 850000      E     MOV     etkeytypematic,new_extendkey
                                           ; SOURCE LINE # 1202
002B E500        E     MOV     A,extendscan+01H
002D 540F              ANL     A,#0FH
002F 4410              ORL     A,#010H
0031 F500        E     MOV     extendscan+01H,A
                                           ; SOURCE LINE # 1203
                                           ; SOURCE LINE # 1205
0033 120000      R     LCALL   L?0262
0036 F500        E     MOV     typematic,A
                                           ; SOURCE LINE # 1206
0038         ?C0174:
                                           ; SOURCE LINE # 1208
0038 7800        R     MOV     R0,#LOW ?Send_EtScan2?BYTE
003A 7C00        R     MOV     R4,#HIGH ?Send_EtScan2?BYTE
003C 7D01              MOV     R5,#01H
003E 7B00              MOV     R3,#00H
0040 7A00        E     MOV     R2,#HIGH new_extendkey
0042 7900        E     MOV     R1,#LOW new_extendkey
0044 120000      R     LCALL   L?0238
0047 900000      R     MOV     DPTR,#?Send_EtScan2?BYTE+01H
004A E500        E     MOV     A,ITempB03
004C F0                MOVX    @DPTR,A
004D 120000      R     LCALL   Send_EtScan2
                                           ; SOURCE LINE # 1209
0050 E4                CLR     A
0051 F500        E     MOV     new_extendkey,A
                                           ; SOURCE LINE # 1210
0053 F500        E     MOV     extendstatus,A
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 64  

                                           ; SOURCE LINE # 1211
0055 22                RET     
             ; FUNCTION CheckExtendKeyValid (END)

             ; FUNCTION Send_EtScan2 (BEGIN)
                                           ; SOURCE LINE # 1216
                                           ; SOURCE LINE # 1217
                                           ; SOURCE LINE # 1218
0000 900000      E     MOV     DPTR,#UtilityFlag
0003 E0                MOVX    A,@DPTR
0004 30E626            JNB     ACC.6,?C0176
                                           ; SOURCE LINE # 1219
                                           ; SOURCE LINE # 1220
0007 900000      E     MOV     DPTR,#KeyScanACK
000A E0                MOVX    A,@DPTR
000B F4                CPL     A
000C 7059              JNZ     ?C0180
                                           ; SOURCE LINE # 1221
                                           ; SOURCE LINE # 1222
000E 900000      R     MOV     DPTR,#event
0011 E0                MOVX    A,@DPTR
0012 7053              JNZ     ?C0180
                                           ; SOURCE LINE # 1223
                                           ; SOURCE LINE # 1224
0014 120000      R     LCALL   L?0265
0017 900000      E     MOV     DPTR,#KeyScanKSI
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1225
001B 900000      R     MOV     DPTR,#key
001E E0                MOVX    A,@DPTR
001F C4                SWAP    A
0020 540F              ANL     A,#0FH
0022 900000      E     MOV     DPTR,#KeyScanKSO
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1226
0026 900000      E     MOV     DPTR,#KeyScanACK
0029 7444              MOV     A,#044H
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1227
                                           ; SOURCE LINE # 1228
                                           ; SOURCE LINE # 1229
002C 22                RET     
002D         ?C0176:
                                           ; SOURCE LINE # 1231
                                           ; SOURCE LINE # 1232
002D 120000      R     LCALL   L?0265
0030 75F003            MOV     B,#03H
0033 A4                MUL     AB
0034 FF                MOV     R7,A
0035 E0                MOVX    A,@DPTR
0036 C4                SWAP    A
0037 540F              ANL     A,#0FH
0039 2F                ADD     A,R7
003A F500        E     MOV     ITempB02,A
                                           ; SOURCE LINE # 1233
003C AF00        E     MOV     R7,ITempB02
003E 900000      E     MOV     DPTR,#Extendkey_Table_Pntr
0041 E0                MOVX    A,@DPTR
0042 FC                MOV     R4,A
0043 A3                INC     DPTR
0044 E0                MOVX    A,@DPTR
0045 2F                ADD     A,R7
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 65  

0046 F582              MOV     DPL,A
0048 E4                CLR     A
0049 3C                ADDC    A,R4
004A F583              MOV     DPH,A
004C E4                CLR     A
004D 93                MOVC    A,@A+DPTR
004E F500        E     MOV     ITempB01,A
                                           ; SOURCE LINE # 1235
0050 120000      R     LCALL   L?0266
0053 FF                MOV     R7,A
0054 E0                MOVX    A,@DPTR
0055 FE                MOV     R6,A
0056 C4                SWAP    A
0057 540F              ANL     A,#0FH
0059 FD                MOV     R5,A
005A 120000      E     LCALL   _Et_Hook_keyboard
                                           ; SOURCE LINE # 1236
005D 900000      R     MOV     DPTR,#event
0060 E0                MOVX    A,@DPTR
0061 FD                MOV     R5,A
0062 AF00        E     MOV     R7,ITempB01
0064 120000      E     LCALL   _Send_Key
                                           ; SOURCE LINE # 1237
                                           ; SOURCE LINE # 1238
0067         ?C0180:
0067 22                RET     
             ; FUNCTION Send_EtScan2 (END)

             ; FUNCTION ClearExtendKeys (BEGIN)
                                           ; SOURCE LINE # 1243
                                           ; SOURCE LINE # 1244
                                           ; SOURCE LINE # 1245
0000 E4                CLR     A
0001 F500        E     MOV     new_extendkey,A
                                           ; SOURCE LINE # 1246
0003 F500        E     MOV     extendstatus,A
                                           ; SOURCE LINE # 1247
0005 F500        E     MOV     etkeytypematic,A
                                           ; SOURCE LINE # 1248
0007 22                RET     
             ; FUNCTION ClearExtendKeys (END)

             ; FUNCTION CheckEtKeystm (BEGIN)
                                           ; SOURCE LINE # 1253
                                           ; SOURCE LINE # 1254
                                           ; SOURCE LINE # 1255
0000 E4                CLR     A
0001 F500        E     MOV     ITempB02,A
                                           ; SOURCE LINE # 1256
0003 900000      R     MOV     DPTR,#key
0006 E0                MOVX    A,@DPTR
0007 120000      R     LCALL   L?0236
000A 8002              SJMP    ?C0221
000C         ?C0220:
000C C3                CLR     C
000D 33                RLC     A
000E         ?C0221:
000E D8FC              DJNZ    R0,?C0220
0010 F500        E     MOV     ITempB01,A
                                           ; SOURCE LINE # 1257
0012 900000      R     MOV     DPTR,#key
0015 E0                MOVX    A,@DPTR
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 66  

0016 120000      R     LCALL   L?0258
0019 E6                MOV     A,@R0
001A 5200        E     ANL     ITempB01,A
                                           ; SOURCE LINE # 1259
001C E500        E     MOV     A,ITempB01
001E 7005              JNZ     ?C0182
                                           ; SOURCE LINE # 1260
                                           ; SOURCE LINE # 1261
0020 F500        E     MOV     etkeytypematic,A
                                           ; SOURCE LINE # 1262
0022 750001      E     MOV     ITempB02,#01H
                                           ; SOURCE LINE # 1263
0025         ?C0182:
                                           ; SOURCE LINE # 1265
0025 E500        E     MOV     A,ITempB02
0027 700F              JNZ     ?C0183
                                           ; SOURCE LINE # 1266
                                           ; SOURCE LINE # 1267
0029 AF00        E     MOV     R7,extendscan+01H
002B 120000      R     LCALL   L?0239
002E F500        E     MOV     extendscan+01H,A
                                           ; SOURCE LINE # 1268
0030 C4                SWAP    A
0031 540F              ANL     A,#0FH
0033 6003              JZ      ?C0183
                                           ; SOURCE LINE # 1269
                                           ; SOURCE LINE # 1270
0035 750001      E     MOV     ITempB02,#01H
                                           ; SOURCE LINE # 1271
                                           ; SOURCE LINE # 1272
0038         ?C0183:
                                           ; SOURCE LINE # 1274
0038 E500        E     MOV     A,ITempB02
003A 7014              JNZ     ?C0185
                                           ; SOURCE LINE # 1275
                                           ; SOURCE LINE # 1276
003C E500        E     MOV     A,extendscan+01H
003E 540F              ANL     A,#0FH
0040 4410              ORL     A,#010H
0042 F500        E     MOV     extendscan+01H,A
                                           ; SOURCE LINE # 1277
0044 900000      E     MOV     DPTR,#bTMcount
0047 E0                MOVX    A,@DPTR
0048 14                DEC     A
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1278
004A E0                MOVX    A,@DPTR
004B 6003              JZ      ?C0185
                                           ; SOURCE LINE # 1279
                                           ; SOURCE LINE # 1280
004D 750001      E     MOV     ITempB02,#01H
                                           ; SOURCE LINE # 1281
                                           ; SOURCE LINE # 1282
0050         ?C0185:
                                           ; SOURCE LINE # 1284
0050 E500        E     MOV     A,ITempB02
0052 7020              JNZ     ?C0188
                                           ; SOURCE LINE # 1285
                                           ; SOURCE LINE # 1286
0054 900000      E     MOV     DPTR,#bTMrepeat
0057 E0                MOVX    A,@DPTR
0058 900000      E     MOV     DPTR,#bTMcount
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 67  

005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1287
005C 7800        R     MOV     R0,#LOW ?Send_EtScan2?BYTE
005E 7C00        R     MOV     R4,#HIGH ?Send_EtScan2?BYTE
0060 7D01              MOV     R5,#01H
0062 7B01              MOV     R3,#01H
0064 7A00        R     MOV     R2,#HIGH key
0066 7900        R     MOV     R1,#LOW key
0068 120000      R     LCALL   L?0238
006B 900000      R     MOV     DPTR,#?Send_EtScan2?BYTE+01H
006E 7402              MOV     A,#02H
0070 F0                MOVX    @DPTR,A
0071 120000      R     LCALL   Send_EtScan2
                                           ; SOURCE LINE # 1288
                                           ; SOURCE LINE # 1289
0074         ?C0188:
0074 22                RET     
             ; FUNCTION CheckEtKeystm (END)

             ; FUNCTION check_keyscan_buffer_half_full (BEGIN)
                                           ; SOURCE LINE # 1305
;---- Variable 'lb_pending_size' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1306
                                           ; SOURCE LINE # 1311
;---- Variable 'lb_result' assigned to Register 'R6' ----
0000 E4                CLR     A
0001 FE                MOV     R6,A
                                           ; SOURCE LINE # 1313
0002 AD00        E     MOV     R5,scan
0004 ED                MOV     A,R5
0005 C4                SWAP    A
0006 540F              ANL     A,#0FH
0008 FD                MOV     R5,A
0009 E500        E     MOV     A,scan
000B 540F              ANL     A,#0FH
000D FC                MOV     R4,A
000E D3                SETB    C
000F 9D                SUBB    A,R5
0010 4008              JC      ?C0189
                                           ; SOURCE LINE # 1314
                                           ; SOURCE LINE # 1315
0012 ED                MOV     A,R5
0013 2410              ADD     A,#010H
0015 C3                CLR     C
0016 9C                SUBB    A,R4
0017 FF                MOV     R7,A
                                           ; SOURCE LINE # 1316
0018 800E              SJMP    ?C0190
001A         ?C0189:
                                           ; SOURCE LINE # 1318
                                           ; SOURCE LINE # 1319
001A E500        E     MOV     A,scan
001C 540F              ANL     A,#0FH
001E FF                MOV     R7,A
001F AD00        E     MOV     R5,scan
0021 ED                MOV     A,R5
0022 C4                SWAP    A
0023 540F              ANL     A,#0FH
0025 C3                CLR     C
0026 9F                SUBB    A,R7
0027 FF                MOV     R7,A
                                           ; SOURCE LINE # 1320
C51 COMPILER V7.50   CORE_SCAN                                                             09/08/2020 15:56:19 PAGE 68  

0028         ?C0190:
                                           ; SOURCE LINE # 1322
0028 EF                MOV     A,R7
0029 C3                CLR     C
002A 9408              SUBB    A,#08H
002C 4002              JC      ?C0191
                                           ; SOURCE LINE # 1323
                                           ; SOURCE LINE # 1325
002E 7E01              MOV     R6,#01H
                                           ; SOURCE LINE # 1326
0030         ?C0191:
                                           ; SOURCE LINE # 1328
0030 CF                XCH     A,R7
0031 EE                MOV     A,R6
0032 CF                XCH     A,R7
                                           ; SOURCE LINE # 1329
0033         ?C0192:
0033 22                RET     
             ; FUNCTION check_keyscan_buffer_half_full (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2896    ----
   CONSTANT SIZE    =     36    ----
   XDATA SIZE       =   ----      26
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
