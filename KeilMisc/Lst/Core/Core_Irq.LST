C51 COMPILER V7.50   CORE_IRQ                                                              09/16/2020 21:10:02 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE CORE_IRQ
OBJECT MODULE PLACED IN Core\Core_Irq.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe Core\Core_Irq.c LA WL(1) CD OT(9,SIZE) NOAREGS OR INCDIR(.\Core\Include\;.\
                    -Oem\Include\)

line level    source

   1          /*-----------------------------------------------------------------------------
   2           * TITLE: CORE_IRQ.C - Interrupt Service Routines (ISR).
   3           *
   4           * The Interrupt Service Routines (ISR).  The actual interrupt functions are
   5           * implemented in the "CHIP_IRQ.C".
   6           *
   7           * Copyright (c) 1983-2007, Insyde Software Corporation. All Rights Reserved.
   8           *
   9           * You may not reproduce, distribute, publish, display, perform, modify, adapt,
  10           * transmit, broadcast, present, recite, release, license or otherwise exploit
  11           * any part of this publication in any form, by any means, without the prior
  12           * written permission of Insyde Software Corporation.
  13           *---------------------------------------------------------------------------*/
  14           
  15          #include "Core_Inc.h"
  16          #include "Oem_Inc.h"
  17          
  18          //----------------------------------------------------------------------------
  19          // RomString
  20          //----------------------------------------------------------------------------
  21          const unsigned char code RomString[] =  "IT873X Codebase V1.0 - Copyright ITE Tech. Inc.";
  22          
  23          //----------------------------------------------------------------------------
  24          // KBC Input Buffer Full Interrupt
  25          //----------------------------------------------------------------------------
  26          void IRQ_INT24_KBCIBF(void) using 2
  27          {
  28   1              #if SUPPORT_SWKBC
                      CLEAR_MASK(IER3,Int_KBCIBF);
                      ISR3 = Int_KBCIBF;
                      F_Service_001 = 1;       
                      #endif
  33   1      }
  34          
  35          //----------------------------------------------------------------------------
  36          // Port 62/66, 68/6C input buffer full interrupt routine
  37          //----------------------------------------------------------------------------
  38          void Irq_Ibf2(void) using 2
  39          {
  40   1      
  41   1              F_Service_000 = 1;
  42   1              
  43   1              CLEAR_MASK(IER3,Int_PMCIBF);
  44   1              ISR3 = Int_PMCIBF;
  45   1      
  46   1      }
  47          
  48          void Irq_Ibf3(void) using 2
  49          {
  50   1      
  51   1              F_Service_003 = 1;
  52   1      
  53   1              CLEAR_MASK(IER3,Int_PMC2IBF);
  54   1              ISR3 = Int_PMC2IBF;
C51 COMPILER V7.50   CORE_IRQ                                                              09/16/2020 21:10:02 PAGE 2   

  55   1      
  56   1              
  57   1      }
  58          
  59          //----------------------------------------------------------------------------
  60          // ADC interrupt routine
  61          //----------------------------------------------------------------------------
  62          void Irq_ADC(void)  using 2      
  63          {
  64   1      
  65   1      }
  66          
  67          //----------------------------------------------------------------------------
  68          // SMBus0 interrupt routine
  69          //----------------------------------------------------------------------------
  70          void Irq_SMB0(void) using 2
  71          {
  72   1              CLEAR_MASK(IER1,Int_SMBUS0);
  73   1              ISR1 = Int_SMBUS0;
  74   1              F_Service_SMBus1=SMBus_NeedService;
  75   1      
  76   1              F_Service_007 = 1;
  77   1      
  78   1      }
  79          
  80          //----------------------------------------------------------------------------
  81          // SMBus1 interrupt routine
  82          //----------------------------------------------------------------------------
  83          void Irq_SMB1(void) using 2
  84          {
  85   1              CLEAR_MASK(IER1,Int_SMBUS1);
  86   1              ISR1 = Int_SMBUS1;
  87   1              F_Service_SMBus2=SMBus_NeedService;
  88   1      
  89   1              F_Service_007 = 1;
  90   1      }
  91          
  92          //----------------------------------------------------------------------------
  93          // SMBus1 interrupt routine
  94          //----------------------------------------------------------------------------
  95          void Irq_SMB2(void) using 2
  96          {
  97   1              CLEAR_MASK(IER2,Int_SMBUS2);
  98   1              ISR2 = Int_SMBUS2;
  99   1              F_Service_SMBus3=SMBus_NeedService;     
 100   1      
 101   1              F_Service_007 = 1;
 102   1      }
 103          
 104          //----------------------------------------------------------------------------
 105          // CIR interrupt routine
 106          //----------------------------------------------------------------------------
 107          void Irq_CIR(void) using 2
 108          {
 109   1      
 110   1      #if Support_EC_CIR
                      CLEAR_MASK(IER1, Int_CIR);              // Disable INT15 CIR Interrupt
                      ISR1 = Int_CIR;         // Clear INT15 pending Status
                      F_Service_004 = 1;
              #endif
 115   1      
 116   1      }
C51 COMPILER V7.50   CORE_IRQ                                                              09/16/2020 21:10:02 PAGE 3   

 117          
 118          //----------------------------------------------------------------------------
 119          // Null function
 120          //----------------------------------------------------------------------------
 121          void IrqNull(void) using 2
 122          {
 123   1      
 124   1      }
 125          
 126          /* ----------------------------------------------------------------------------
 127           * FUNCTION:   IrqUART1
 128           * ISR for INT38 Interrupt for Serial Port - UART Process
 129           * ------------------------------------------------------------------------- */
 130          
 131          void IrqUART1(void) using 2
 132          {
 133   1              #if USE_UART1
                      CLEAR_MASK(IER4,Int_UART1);                             // Disable INT38
                      ISR4 = Int_UART1;                               // Clear INT38 interrupt flag
                      SET_MASK(IER4,Int_UART1);                               // Enable INT38
              
                      F_Service_009 = 1;              //UART1
                      #endif
 140   1      
 141   1      }
 142          
 143          /* ----------------------------------------------------------------------------
 144           * FUNCTION:   IrqUART2
 145           * ISR for INT39 Interrupt for Serial Port - UART Process
 146           * ------------------------------------------------------------------------- */
 147          
 148          void IrqUART2(void) using 2
 149          {
 150   1              #if USE_UART2
                      CLEAR_MASK(IER4,Int_UART2);                             // Disable INT39
                      ISR4 = Int_UART2;                               // Clear INT39 interrupt flag
                      SET_MASK(IER4,Int_UART2);                               // Enable INT39
              
                      F_Service_008 = 1;              //UART2
                      #endif
 157   1      
 158   1      }
 159          
 160          
 161          //----------------------------------------------------------------------------
 162          // Irq_Anykey - Direct Keyboard Scan key press interrupt handler.
 163          // Disable further key interrupts and post key service request.
 164          //----------------------------------------------------------------------------
 165          
 166          //----------------------------------------------------------------------------
 167          // FUNCTION:   Irq_HPSI
 168          // ISR for INT59 WUC Interrupt  for HSPI Process
 169          //----------------------------------------------------------------------------
 170          #ifdef HSPI
              void Irq_HSPI(void) using 2
              {
                  BackUpTR1 = TR1;            // store TR1 status
                  TR1 = 0;                    // Disable timer1
                      CLEAR_MASK(IER7,BIT3);      // Disable HSPI interrup
                  HSPI_RamCode();
                  SET_MASK(IER7,BIT3);        // Enable HSPI interrupt
                  TR1 = BackUpTR1;            // Re store TR1 status
C51 COMPILER V7.50   CORE_IRQ                                                              09/16/2020 21:10:02 PAGE 4   

              }
              #endif
 181          
 182          //----------------------------------------------------------------------------
 183          // External Timer1 INT30
 184          //----------------------------------------------------------------------------
 185          void Irq_ExtTimer1(void)  using 2        
 186          {
 187   1              CLR_BIT(IER3, 6);       //disable interrupt
 188   1              ISR3 = Int_EXTimer;             //clear INT30 ISR
 189   1              Set_ExtTimer1();
 190   1                      
 191   1      }
 192          
 193          
 194          //----------------------------------------------------------------------------
 195          // FUNCTION:   Isr_Int0
 196          // ISR for INT0 (Key Scan Interrupt).
 197          //----------------------------------------------------------------------------
 198          void Isr_Int0(void) interrupt 0 using 2
 199          {
 200   1              #if USE_LRESET_INT
                      BYTE Temp;
              
                      EX0 = 0;
                      Temp = INT0ST;
                              //Something you want to do
                              #if PECI_Busy_Workaround
                              IF_SELECT_REG = 0x44; //For IT8738
                              #endif
                      EX0 = 1;
                      #endif
 211   1              
 212   1      }
 213          
 214          //----------------------------------------------------------------------------
 215          // Isr_Tmr0
 216          // ISR for TF0 (Timer 0 Interrupt).  Timer 0 is the 1mS Timer (Timer A).
 217          //----------------------------------------------------------------------------
 218          /* ----------------------------------------------------------------------------
 219           * FUNCTION: Irq_Timer_A - Handle Timer A interrupts.
 220           *
 221           * Timer A has a time base of 1 mS.
 222           *
 223           * Input: On entry, "TIMER Timer_A" has the event(s) to handle. Valid Events:
 224           *     TMR_SCAN   -
 225           *     TMR_GENTMO - This timer is a timer that is used for timeout detection
 226           *                  of serial data transmissions to/from the auxiliary
 227           *                  keyboard/pointing devices.
 228           * ------------------------------------------------------------------------- */
 229          void Isr_Tmr0(void) interrupt 1 using 2
 230          {
 231   1              #if SUPPORT_Hook_1ms_Timer
 232   1              Load_Timer_A_1ms();     // Request 1 ms timer service.
 233   1              F_Service_002 = 1;
 234   1              #else
                      Load_Timer_A();
                      F_Service_005 = 1;   // Request 5 ms timer service.
                      #endif
 238   1      }
 239          
 240          
C51 COMPILER V7.50   CORE_IRQ                                                              09/16/2020 21:10:02 PAGE 5   

 241          /* ----------------------------------------------------------------------------
 242           * FUNCTION:   Isr_Int1
 243           * ISR for INT1 (Interrupt Source A and B Interrupts).
 244           *
 245           * Interrupt Source A:  
 246           * ------------------------------------------------------------------------- */
 247          const FUNCT_PTR_V_V code IRQ_Service[] = 
 248          {
 249              IrqNull,            //   INT0       Reserved
 250              IrqNull,            //   INT1       WUC interrupt WUI0      
 251              IrqNull,            //   INT2       KBC output buffer empty interrupt 
 252              IrqNull,            //   INT3       PMC output buffer empty interrupt 
 253              IrqNull,            //   INT4       
 254              IrqNull,            //   INT5       WUC interrupt (WU10 ~ WU15)(WU40 ~ WU47)        
 255              IrqNull,            //   INT6       WUC interrupt WUI3
 256              IrqNull,            //   INT7       PWM interrupt 
 257              
 258              Irq_ADC,                    //   INT8       ADC Interrupt   
 259              Irq_SMB0,                   //   INT9       SMB0 Interrupt 
 260              Irq_SMB1,           //   INT10      SMB1 Interrupt
 261              IrqNull,            //   INT11      Key matrix scan Int
 262              IrqNull,            //   INT12      WUC interrupt SWUC wake up
 263              IrqNull,            //   INT13      WUC interrupt KSI wake-up (WU30 ~ WU37)
 264              IrqNull,            //   INT14      WUC interrupt Power switch
 265          //    IrqNull,            //   INT15    WUC interrupt Power switch
 266              Irq_CIR,            //   INT15      CIR interrupt 
 267              
 268              Irq_SMB2,           //   INT16      SMB2 Interrupt
 269              IrqNull,            //   INT17      WUC Interrupt WUI4
 270              IrqNull,            //   INT18      PS2 P2 Interrupt
 271              IrqNull,            //   INT19      PS2 P1 Interrupt
 272              IrqNull,    //   INT20      PS2 P0 Interrupt
 273              IrqNull,            //   INT21      WUC Interrupt WUI2
 274              IrqNull,            //   INT22
 275              IrqNull,            //   INT23
 276              
 277              IRQ_INT24_KBCIBF,           //   INT24      KBC input buffer empty interrupt 
 278              Irq_Ibf2,           //   INT25      PMC input buffer empty interrupt 
 279              IrqNull,            //   INT26
 280              Irq_Ibf3,            //   INT27
 281              IrqNull,            //   INT28
 282              IrqNull,            //   INT29
 283              //IrqNull,            //   INT30    External timer interrupt 
 284              Irq_ExtTimer1, //   INT30   External timer interrupt 
 285              IrqNull,            //   INT31      WUC     interrupt WUI1
 286              
 287              IrqNull,                    //   INT32      
 288              IrqNull,                    //   INT33      
 289              IrqNull,            //   INT34
 290              IrqNull,            //   INT35
 291              IrqNull,            //   INT36
 292              IrqNull,            //   INT37
 293              IrqUART1,            //   INT38     
 294              IrqUART2,            //   INT39
 295              
 296              IrqNull,                    //   INT40      
 297              IrqNull,                    //   INT41      
 298              IrqNull,            //   INT42
 299              IrqNull,            //   INT43
 300              IrqNull,            //   INT44
 301              IrqNull,            //   INT45
 302              IrqNull,            //   INT46      
C51 COMPILER V7.50   CORE_IRQ                                                              09/16/2020 21:10:02 PAGE 6   

 303              IrqNull,            //   INT47      
 304              IrqNull,                //   INT48          
 305              IrqNull,                    //   INT49      
 306              IrqNull,            //   INT50
 307              IrqNull,            //   INT51
 308              IrqNull,            //   INT52
 309              IrqNull,            //   INT53
 310              IrqNull,            //   INT54      
 311              IrqNull,            //   INT55    
 312          
 313              IrqNull,                    //   INT56      
 314              IrqNull,            //   INT57
 315              IrqNull,            //   INT58
 316              IrqNull,            //   INT59   
 317              IrqNull,            //   INT60
 318              IrqNull,            //   INT61      
 319              IrqNull,            //   INT62   
 320              IrqNull,            //   INT63  
 321          
 322              IrqNull,                    //   INT64      
 323              IrqNull,                    //   INT65      
 324              IrqNull,            //   INT66
 325              IrqNull,           //   INT67
 326              IrqNull,            //   INT68
 327              IrqNull,            //   INT69
 328              IrqNull,            //   INT70      
 329              IrqNull,            //   INT71      
 330              
 331              IrqNull,                    //   INT72      
 332              IrqNull,                    //   INT73      
 333              IrqNull,            //   INT74
 334              IrqNull,           //   INT75
 335              IrqNull,            //   INT76
 336              IrqNull,            //   INT77
 337              IrqNull,            //   INT78      
 338              IrqNull,            //   INT79      
 339          
 340          };
 341                                                                  
 342          void Isr_Int1 (void) interrupt 2 using 2
 343          {
 344   1      
 345   1              if(IVECT_BACKUP != IVECT )
 346   1              {
 347   2                      IVECT_BACKUP = IVECT;
 348   2                      return;
 349   2              }
 350   1      
 351   1      
 352   1              if(IVECT < 0x60 )
 353   1              {
 354   2                      (IRQ_Service[(IVECT-0x10)&0x7F])();   // Dispatch to service handler.
 355   2              }
 356   1              else
 357   1              {
 358   2                      IrqNull();
 359   2              }
 360   1      
 361   1      
 362   1              IVECT_BACKUP = 0;
 363   1      
 364   1      } 
C51 COMPILER V7.50   CORE_IRQ                                                              09/16/2020 21:10:02 PAGE 7   

 365              
 366          /* ----------------------------------------------------------------------------
 367           * FUNCTION:   Isr_Tmr1
 368           * ISR for TF1 (Timer 1 Interrupt).  Timer 1 is the 600uS Timer (Timer B).
 369           * ------------------------------------------------------------------------- */
 370          void Isr_Tmr1(void) interrupt 3 using 2
 371          {
 372   1      
 373   1      }
 374          
 375          /* ----------------------------------------------------------------------------
 376           * FUNCTION:   Isr_UART
 377           * ISR for TI or RI (UART Interrupt).
 378           * ------------------------------------------------------------------------- */
 379          void Isr_UART(void) interrupt 4 using 2
 380          {
 381   1      
 382   1      }
 383          
 384          
 385          /* ----------------------------------------------------------------------------
 386           * FUNCTION:   Isr_Tmr2
 387           * ISR for TF2 or EXF2 (Timer 2 Interrupt).
 388           * ------------------------------------------------------------------------- */
 389          void Isr_Tmr2(void) interrupt 5 using 2
 390          {
 391   1      
 392   1      }
 393          
 394          //------------------------------------------------------------------------------
 395          // The function of disable all interrupts
 396          //------------------------------------------------------------------------------
 397          void DisableAllInterrupt(void)
 398          {
 399   1              EA = 0;
 400   1              _nop_();
 401   1              _nop_();
 402   1              _nop_();
 403   1              _nop_();
 404   1      }
 405          
 406          //------------------------------------------------------------------------------
 407          // The function of enable all interrupts
 408          //------------------------------------------------------------------------------
 409          void EnableAllInterrupt(void)
 410          {
 411   1              EX1 = 1 ;
 412   1              #if     USE_LRESET_INT
                              IT0 = 1;
                              EX0 = 1;
                              PFAILR= 0x04;
                      #endif
 417   1              EA = 1;
 418   1      }
C51 COMPILER V7.50   CORE_IRQ                                                              09/16/2020 21:10:02 PAGE 8   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION IRQ_INT24_KBCIBF (BEGIN)
                                           ; SOURCE LINE # 26
                                           ; SOURCE LINE # 33
0000 22                RET     
             ; FUNCTION IRQ_INT24_KBCIBF (END)

             ; FUNCTION Irq_Ibf2 (BEGIN)
                                           ; SOURCE LINE # 38
                                           ; SOURCE LINE # 41
0000 D200        E     SETB    F_Service_000
                                           ; SOURCE LINE # 43
0002 900000      E     MOV     DPTR,#IER3
0005 E0                MOVX    A,@DPTR
0006 54FD              ANL     A,#0FDH
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 44
0009 900000      E     MOV     DPTR,#ISR3
000C 7402              MOV     A,#02H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 46
000F 22                RET     
             ; FUNCTION Irq_Ibf2 (END)

             ; FUNCTION Irq_Ibf3 (BEGIN)
                                           ; SOURCE LINE # 48
                                           ; SOURCE LINE # 51
0000 D200        E     SETB    F_Service_003
                                           ; SOURCE LINE # 53
0002 900000      E     MOV     DPTR,#IER3
0005 E0                MOVX    A,@DPTR
0006 54F7              ANL     A,#0F7H
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 54
0009 900000      E     MOV     DPTR,#ISR3
000C 7408              MOV     A,#08H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 57
000F 22                RET     
             ; FUNCTION Irq_Ibf3 (END)

             ; FUNCTION Irq_ADC (BEGIN)
                                           ; SOURCE LINE # 62
                                           ; SOURCE LINE # 65
0000 22                RET     
             ; FUNCTION Irq_ADC (END)

             ; FUNCTION Irq_SMB0 (BEGIN)
                                           ; SOURCE LINE # 70
                                           ; SOURCE LINE # 72
0000 900000      E     MOV     DPTR,#IER1
0003 E0                MOVX    A,@DPTR
0004 54FD              ANL     A,#0FDH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 73
0007 900000      E     MOV     DPTR,#ISR1
000A 7402              MOV     A,#02H
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 74
000D 900000      E     MOV     DPTR,#F_Service_SMBus1
C51 COMPILER V7.50   CORE_IRQ                                                              09/16/2020 21:10:02 PAGE 9   

0010 14                DEC     A
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 76
0012 D200        E     SETB    F_Service_007
                                           ; SOURCE LINE # 78
0014 22                RET     
             ; FUNCTION Irq_SMB0 (END)

             ; FUNCTION Irq_SMB1 (BEGIN)
                                           ; SOURCE LINE # 83
                                           ; SOURCE LINE # 85
0000 900000      E     MOV     DPTR,#IER1
0003 E0                MOVX    A,@DPTR
0004 54FB              ANL     A,#0FBH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 86
0007 900000      E     MOV     DPTR,#ISR1
000A 7404              MOV     A,#04H
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 87
000D 900000      E     MOV     DPTR,#F_Service_SMBus2
0010 7401              MOV     A,#01H
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 89
0013 D200        E     SETB    F_Service_007
                                           ; SOURCE LINE # 90
0015 22                RET     
             ; FUNCTION Irq_SMB1 (END)

             ; FUNCTION Irq_SMB2 (BEGIN)
                                           ; SOURCE LINE # 95
                                           ; SOURCE LINE # 97
0000 900000      E     MOV     DPTR,#IER2
0003 E0                MOVX    A,@DPTR
0004 54FE              ANL     A,#0FEH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 98
0007 900000      E     MOV     DPTR,#ISR2
000A 7401              MOV     A,#01H
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 99
000D 900000      E     MOV     DPTR,#F_Service_SMBus3
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 101
0011 D200        E     SETB    F_Service_007
                                           ; SOURCE LINE # 102
0013 22                RET     
             ; FUNCTION Irq_SMB2 (END)

             ; FUNCTION Irq_CIR (BEGIN)
                                           ; SOURCE LINE # 107
                                           ; SOURCE LINE # 116
0000 22                RET     
             ; FUNCTION Irq_CIR (END)

             ; FUNCTION IrqNull (BEGIN)
                                           ; SOURCE LINE # 121
                                           ; SOURCE LINE # 124
0000 22                RET     
             ; FUNCTION IrqNull (END)

             ; FUNCTION IrqUART1 (BEGIN)
C51 COMPILER V7.50   CORE_IRQ                                                              09/16/2020 21:10:02 PAGE 10  

                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 141
0000 22                RET     
             ; FUNCTION IrqUART1 (END)

             ; FUNCTION IrqUART2 (BEGIN)
                                           ; SOURCE LINE # 148
                                           ; SOURCE LINE # 158
0000 22                RET     
             ; FUNCTION IrqUART2 (END)

             ; FUNCTION Irq_ExtTimer1 (BEGIN)
0000 C0D0              PUSH    PSW
0002 75D010            MOV     PSW,#010H
                                           ; SOURCE LINE # 185
                                           ; SOURCE LINE # 187
0005 900000      E     MOV     DPTR,#IER3
0008 E0                MOVX    A,@DPTR
0009 54BF              ANL     A,#0BFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 188
000C 900000      E     MOV     DPTR,#ISR3
000F 7440              MOV     A,#040H
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 189
0012 120000      E     LCALL   Set_ExtTimer1
                                           ; SOURCE LINE # 191
0015 D0D0              POP     PSW
0017 22                RET     
             ; FUNCTION Irq_ExtTimer1 (END)

             ; FUNCTION Isr_Int0 (BEGIN)
                                           ; SOURCE LINE # 198
                                           ; SOURCE LINE # 212
0000 32                RETI    
             ; FUNCTION Isr_Int0 (END)

             ; FUNCTION Isr_Tmr0 (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C0D0              PUSH    PSW
000A 75D010            MOV     PSW,#010H
                                           ; SOURCE LINE # 229
                                           ; SOURCE LINE # 232
000D 120000      E     LCALL   Load_Timer_A_1ms
                                           ; SOURCE LINE # 233
0010 D200        E     SETB    F_Service_002
                                           ; SOURCE LINE # 238
0012 D0D0              POP     PSW
0014 D082              POP     DPL
0016 D083              POP     DPH
0018 D0F0              POP     B
001A D0E0              POP     ACC
001C 32                RETI    
             ; FUNCTION Isr_Tmr0 (END)

             ; FUNCTION Isr_Int1 (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
C51 COMPILER V7.50   CORE_IRQ                                                              09/16/2020 21:10:02 PAGE 11  

0006 C082              PUSH    DPL
0008 C0D0              PUSH    PSW
000A 75D010            MOV     PSW,#010H
                                           ; SOURCE LINE # 342
                                           ; SOURCE LINE # 345
000D 900000      E     MOV     DPTR,#IVECT
0010 E0                MOVX    A,@DPTR
0011 7800        E     MOV     R0,#LOW IVECT_BACKUP
0013 66                XRL     A,@R0
0014 6004              JZ      ?C0015
                                           ; SOURCE LINE # 346
                                           ; SOURCE LINE # 347
0016 E0                MOVX    A,@DPTR
0017 F6                MOV     @R0,A
0018 802F              SJMP    ?C0016
                                           ; SOURCE LINE # 349
001A         ?C0015:
                                           ; SOURCE LINE # 352
001A 900000      E     MOV     DPTR,#IVECT
001D E0                MOVX    A,@DPTR
001E C3                CLR     C
001F 9460              SUBB    A,#060H
0021 501F              JNC     ?C0017
                                           ; SOURCE LINE # 353
                                           ; SOURCE LINE # 354
0023 E0                MOVX    A,@DPTR
0024 24F0              ADD     A,#0F0H
0026 547F              ANL     A,#07FH
0028 25E0              ADD     A,ACC
002A 2400        R     ADD     A,#LOW IRQ_Service
002C F582              MOV     DPL,A
002E E4                CLR     A
002F 3400        R     ADDC    A,#HIGH IRQ_Service
0031 F583              MOV     DPH,A
0033 E4                CLR     A
0034 93                MOVC    A,@A+DPTR
0035 FE                MOV     R6,A
0036 7401              MOV     A,#01H
0038 93                MOVC    A,@A+DPTR
0039 CA                XCH     A,R2
003A EE                MOV     A,R6
003B CA                XCH     A,R2
003C F9                MOV     R1,A
003D 120000      E     LCALL   ?C?ICALL
                                           ; SOURCE LINE # 355
0040 8003              SJMP    ?C0018
0042         ?C0017:
                                           ; SOURCE LINE # 357
                                           ; SOURCE LINE # 358
0042 120000      R     LCALL   IrqNull
                                           ; SOURCE LINE # 359
0045         ?C0018:
                                           ; SOURCE LINE # 362
0045 7800        E     MOV     R0,#LOW IVECT_BACKUP
0047 7600              MOV     @R0,#00H
                                           ; SOURCE LINE # 364
0049         ?C0016:
0049 D0D0              POP     PSW
004B D082              POP     DPL
004D D083              POP     DPH
004F D0F0              POP     B
0051 D0E0              POP     ACC
C51 COMPILER V7.50   CORE_IRQ                                                              09/16/2020 21:10:02 PAGE 12  

0053 32                RETI    
             ; FUNCTION Isr_Int1 (END)

             ; FUNCTION Isr_Tmr1 (BEGIN)
                                           ; SOURCE LINE # 370
                                           ; SOURCE LINE # 373
0000 32                RETI    
             ; FUNCTION Isr_Tmr1 (END)

             ; FUNCTION Isr_UART (BEGIN)
                                           ; SOURCE LINE # 379
                                           ; SOURCE LINE # 382
0000 32                RETI    
             ; FUNCTION Isr_UART (END)

             ; FUNCTION Isr_Tmr2 (BEGIN)
                                           ; SOURCE LINE # 389
                                           ; SOURCE LINE # 392
0000 32                RETI    
             ; FUNCTION Isr_Tmr2 (END)

             ; FUNCTION DisableAllInterrupt (BEGIN)
                                           ; SOURCE LINE # 397
                                           ; SOURCE LINE # 398
                                           ; SOURCE LINE # 399
0000 C2AF              CLR     EA
                                           ; SOURCE LINE # 400
0002 00                NOP     
                                           ; SOURCE LINE # 401
0003 00                NOP     
                                           ; SOURCE LINE # 402
0004 00                NOP     
                                           ; SOURCE LINE # 403
0005 00                NOP     
                                           ; SOURCE LINE # 404
0006 22                RET     
             ; FUNCTION DisableAllInterrupt (END)

             ; FUNCTION EnableAllInterrupt (BEGIN)
                                           ; SOURCE LINE # 409
                                           ; SOURCE LINE # 410
                                           ; SOURCE LINE # 411
0000 D2AA              SETB    EX1
                                           ; SOURCE LINE # 417
0002 D2AF              SETB    EA
                                           ; SOURCE LINE # 418
0004 22                RET     
             ; FUNCTION EnableAllInterrupt (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    254    ----
   CONSTANT SIZE    =    208    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
