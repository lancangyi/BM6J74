C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE CORE_SMBUS
OBJECT MODULE PLACED IN Core\Core_smbus.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe Core\Core_smbus.c LA WL(1) CD OT(9,SIZE) NOAREGS OR INCDIR(.\Core\Include\;
                    -.\Oem\Include\)

line level    source

   1          /*-----------------------------------------------------------------------------
   2           * Filename: CORE_SMBUS.C
   3           * Function: System Management SMBus Protocol drivers.
   4           *
   5           * Copyright (c) 2006-2009, ITE Tech. Inc. All Rights Reserved.
   6           *---------------------------------------------------------------------------*/
   7          #include "CORE_INC.H"
   8          #include "OEM_INC.H"
   9          
  10          /*-----------------------------------------------------------------------------
  11           * Local Parameter Definition
  12           *---------------------------------------------------------------------------*/
  13          #define SUPPORT_SMBUS_EEPROM        0
  14          
  15          //=============================================================================
  16          // Channel: [SMBusChA] [SMBusChB] [SMBusChC] [SMBusChD]
  17          // Protocol:[SMBusWQ]  -Write Quick command [SMBusRQ]  -Read Quick command
  18          //          [SMBusSBC] -Send Byte command   [SMBusRBC] -Receive Byte command
  19          //          [SMBusWB]  -Write byte command  [SMBusRB]  -Read byte command
  20          //          [SMBusWW]  -Write word command  [SMBusRW]  -Read word command
  21          //          [SMBusWBK] -Write block command [SMBusRBK] -Read block command
  22          //
  23          //=============================================================================
  24          
  25          
  26          //=============================================================================
  27          //Port V14.1 SMB
  28          const sSMBus code asSMBus[]=
  29          {
  30                  { &HOCTL_A, &TRASLA_A, &HOCMD_A, &HOSTA_A, &D0REG_A, &D1REG_A,  &HOBDB_A,       &IER1,  &ISR1,  Int_SMBUS0,   &PE
             -CERC_A},
  31                  { &HOCTL_B, &TRASLA_B, &HOCMD_B, &HOSTA_B, &D0REG_B, &D1REG_B,  &HOBDB_B,       &IER1,  &ISR1,  Int_SMBUS1,   &PE
             -CERC_B},
  32                  { &HOCTL_C, &TRASLA_C, &HOCMD_C, &HOSTA_C, &D0REG_C, &D1REG_C,  &HOBDB_C,       &IER2,  &ISR2,  Int_SMBUS2,   &PEC
             -ERC_C},
  33          };
  34          
  35          
  36          const sResetSMBusS code asResetSMBusS[]=
  37          {
  38                  { &HOSTA_A, &HOCTL2_A, &SMBPCTL_A,  &GPIO_8x,   (BIT5+BIT6),   &SMBus1RecoverCunt },
  39                  { &HOSTA_B, &HOCTL2_B, &SMBPCTL_B,  &GPIO_1x,   (BIT0+BIT0),   &SMBus2RecoverCunt },    //GPIO Reg, no use
  40                  { &HOSTA_C, &HOCTL2_C, &SMBPCTL_C,   &GPIO_4x,  (BIT6+BIT7),   &SMBus3RecoverCunt }
  41          }; 
  42          
  43          //-----------------------------------------------------------------------------
  44          //*****************************************************************************
  45          // SMBus Read/write byte or word function
  46          //
  47          // Channel: [SMBusChA] [SMBusChB] [SMBusChC] [SMBusChD]
  48          // Protocol:[SMBusWB]0x88-Write byte command [SMBusRB]0x08-Read byte command
  49          //          [SMBusWW]0x8C-Write word command [SMBusRW]0x0C-Read word command
  50          //
  51          // Note: bit7 is set for PEC_ENABLE
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 2   

  52          // Addr:    device address
  53          // Comd:    access command
  54          // *Var:    Point to data Low Byte and *Var++ is high High Byte
  55          // Return:  A byte in SMBUS_STATUS with [TRUE]:Ok. [FALSE] Failed.
  56          //*****************************************************************************
  57          //-----------------------------------------------------------------------------
  58          
  59          
  60          //=============================================================
  61          //
  62          //
  63          //V14 core_smbus
  64          //=============================================================
  65          //----------------------------------------------------------------------------
  66          //      
  67          //----------------------------------------------------------------------------
  68          void DelayInact(void) 
  69          {
  70   1          BYTE index;
  71   1          BYTE counter;
  72   1         for(index=0;index<200;index++)
  73   1         {
  74   2              counter++;
  75   2         }
  76   1      }
  77          
  78          //----------------------------------------------------------------------------
  79          // The function of reseting SMbus       
  80          //----------------------------------------------------------------------------
  81          void ResetSMBus(BYTE Channel)
  82          {
  83   1      
  84   1              SET_MASK(*asSMBus[Channel].SMBusCTL,HOCTL_KILL);
  85   1              CLEAR_MASK(*asSMBus[Channel].SMBusCTL,HOCTL_KILL);
  86   1              RSTC3=0x06;                                                 // Reset all SMBus module
  87   1              *asResetSMBusS[Channel].SMBusSTA = 0xFE;        // clear bits
  88   1      
  89   1              if( Channel == SMBusChA )
  90   1              {
  91   2                      //Set ChannelA  to GPIO
  92   2                      Index_07H = 0x19;       // LDN 19h for SMBus configurations
  93   2                      Index_30H = 0x01;       // Activation
  94   2                      CLR_BIT(Index_76H, 1);  //Disable       SMBUS channel A CLK0/DAT0
  95   2                      
  96   2                      DelayInact();
  97   2      
  98   2                      Index_07H = 0x07;
  99   2                      //GP85
 100   2                      SET_BIT(GPIO_8x, 5);    //Set GP85      Set High
 101   2                      SET_BIT(Index_CFH, 5);  //Set GP85      OUTPUT
 102   2                      //GP86
 103   2                      SET_BIT(GPIO_8x, 6);    //Set GP86      Set High
 104   2                      SET_BIT(Index_CFH, 6);  //Set GP86      OUTPUT
 105   2      
 106   2                      DelayInact();
 107   2      
 108   2                      Index_07H = 0x19;       // LDN 19h for SMBus configurations
 109   2                      Index_30H = 0x01;       // Activation
 110   2                      SET_BIT(Index_76H, 1);  //Enable        SMBUS channel A CLK0/DAT0
 111   2      
 112   2              }
 113   1              else if( Channel == SMBusChC )
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 3   

 114   1              {
 115   2                      //Set ChannelC  to GPIO
 116   2                      Index_07H = 0x19;       // LDN 19h for SMBus configurations
 117   2                      Index_30H = 0x01;       // Activation
 118   2                      CLR_BIT(Index_76H, 0);  //Disable       SMBUS channel C CLK2/DAT2
 119   2                      
 120   2                      DelayInact();
 121   2      
 122   2      
 123   2                      Index_07H = 0x07;
 124   2                      //GP46
 125   2                      SET_BIT(Index_C3H, 6);  //Set GP46      simple IO function
 126   2                      SET_BIT(Index_CBH, 6);  //Set GP46      OUTPUT
 127   2                      SET_BIT(GPIO_4x, 6);    //Set GP46      Set High
 128   2                      SET_BIT(Index_28H, 6);  //Set GP46      
 129   2      
 130   2                      //GP47
 131   2                      SET_BIT(Index_C3H, 7);  //Set GP47      simple IO function
 132   2                      SET_BIT(Index_CBH, 7);  //Set GP47      OUTPUT
 133   2                      SET_BIT(GPIO_4x, 7);    //Set GP47      Set High
 134   2                      SET_BIT(Index_28H, 7);  //Set GP47      
 135   2                                      
 136   2      
 137   2                      DelayInact();
 138   2      
 139   2      
 140   2                      Index_07H = 0x07;
 141   2                      //GP46
 142   2                      CLR_BIT(Index_C3H, 6);  //Set GP46      simple IO function
 143   2                      CLR_BIT(Index_28H, 6);  //Set GP46      
 144   2      
 145   2                      //GP47
 146   2                      CLR_BIT(Index_C3H, 7);  //Set GP47      simple IO function
 147   2                      CLR_BIT(Index_28H, 7);  //Set GP47      
 148   2      
 149   2      
 150   2      
 151   2                      Index_07H = 0x19;       // LDN 19h for SMBus configurations
 152   2                      Index_30H = 0x01;       // Activation
 153   2                      SET_BIT(Index_76H, 1);  //Enable        SMBUS channel A CLK2/DAT2
 154   2      
 155   2              }
 156   1              
 157   1              *asResetSMBusS[Channel].SMBusCTL2 = 0x02;
 158   1              *asResetSMBusS[Channel].SMBusPinCTL = 0x03;
 159   1              DelayInact();
 160   1              *asResetSMBusS[Channel].SMBusPinCTL = 0x07;
 161   1              *asResetSMBusS[Channel].SMBusCTL2 = 0x01;
 162   1      
 163   1              #if SMBusServiceCenterFunc
                      *asSSC[Channel].inusing=0x00;
                      CLEAR_MASK(*asSMBus[Channel].SMBusIER, asSMBus[Channel].IERFlag);
                      *asSMBus[Channel].SMBusISR = asSMBus[Channel].IERFlag;
                      *asSSC[Channel].serviceflag=0x00;
              
                      
                      if(DB_SMBusAck1==ACK_Start)     // For SMBus utility
                      {
                              DB_SMBusAddr=0x00;
                              if(Channel==0x00)
                              {
                                  DB_SMBusFlag1=0x00;         
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 4   

                              }
                              else if(Channel==0x01)
                              {
                                  DB_SMBusFlag2=0x00;
                              }
                              else if(Channel==0x02)
                              {
                                  DB_SMBusFlag3=0x00; 
                              }                               
                                              
                              DB_SMBusAck1 = ACK_Error;   // For SMBus utility error ACK.
                      }
                      #endif
 189   1      }
 190          
 191          
 192          
 193          //----------------------------------------------------------------------------
 194          // V14.1 SMbus read byte/word and write byte/word function      
 195          //----------------------------------------------------------------------------
 196          BYTE bRWSMBus(BYTE Channel,BYTE Protocol,BYTE Addr,BYTE Comd,XBYTE *Var,BYTE PECSupport)
 197          {       
 198   1              BYTE counter;
 199   1              BYTE error;
 200   1              BYTE status;
 201   1              BYTE resutl;
 202   1      
 203   1              if(CheckSMBusInterfaceCanbeUse(Channel, SMBus_AccessType_Fucn)==SMBus_CanNotUse)
 204   1              {
 205   2                      resutl = FALSE;                             // SMBus interface can't be used.
 206   2              }
 207   1              else
 208   1              {
 209   2                      error = 0xEE;                               // Pre-set error
 210   2                      resutl = FALSE;                             // Pre-set result is fail
 211   2          
 212   2                      SMBCRC8_A=0x00;                             // Clear CRC variable
 213   2      
 214   2                      if (Protocol&0x80)                              // Write byte function
 215   2                      {       
 216   3                              if(PECSupport)    
 217   3                              {   
 218   4                                      CalcCRC8(Addr);                     // To calculate crc8
 219   4                              }
 220   3                              *asSMBus[Channel].SMBusADR = Addr;      // set address with writing bit
 221   3                              
 222   3                              if(PECSupport)    
 223   3                              {   
 224   4                                      CalcCRC8(Comd);                     // To calculate crc8
 225   4                              }
 226   3                              *asSMBus[Channel].SMBusCMD=Comd;            // Set command
 227   3                              Protocol&=(~0x80);
 228   3                              if(PECSupport)    
 229   3                              {   
 230   4                                      CalcCRC8(*Var);                     // To calculate crc8
 231   4                              }
 232   3                              *asSMBus[Channel].SMBusData0 = *Var;    // set data1
 233   3                              
 234   3                              if(Protocol==SMbusRW)                       // write word function
 235   3                              {
 236   4                                      if(PECSupport)    
 237   4                                      {   
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 5   

 238   5                                              CalcCRC8(*(Var+0x01));          // To calculate crc8
 239   5                                      }
 240   4                                      *asSMBus[Channel].SMBusData1 = *(Var+0x01);
 241   4                              }                                                               // set data2
 242   3                      }       
 243   2                      else                                                            // Read function
 244   2                      {       
 245   3                              *asSMBus[Channel].SMBusADR=Addr|0x01;   
 246   3                              *asSMBus[Channel].SMBusCMD=Comd;            // Set command
 247   3                      }                                                                       // set address with reading bit
 248   2      
 249   2                      *asSMBus[Channel].SMBusSTA=0xFE;                    // clear bits
 250   2                      if(PECSupport)
 251   2                      {
 252   3                              *asSMBus[Channel].SMBusPEC=SMBCRC8_A;
 253   3                              *asSMBus[Channel].SMBusCTL=(Protocol|HOCTL_SRT|HOCTL_PEC_EN);   // Start transaction
 254   3                      }
 255   2                      else
 256   2                      {
 257   3                              *asSMBus[Channel].SMBusCTL=(Protocol|HOCTL_SRT);        // Start transaction
 258   3                      }
 259   2      
 260   2                      TR1 = 0;                                                // disable timer1
 261   2                      ET1 = 0;                                        // Disable timer1 interrupt
 262   2                      _nop_();
 263   2                      _nop_();
 264   2                      _nop_();
 265   2                      _nop_();
 266   2                      TH1 = T_Timer_26ms>>8;                        // Set timer1 counter 26ms
 267   2                      TL1 = T_Timer_26ms;                           // Set timer1 counter 26ms
 268   2                      TF1 = 0;                                        // Clear overflow flag
 269   2                      TR1 = 1;                                        // Enable timer1
 270   2      
 271   2                      while (!TF1)
 272   2                      {
 273   3                              status = *asSMBus[Channel].SMBusSTA;    // Read SMBus Host Status
 274   3                              if(IS_MASK_SET(status, (HOSTA_FINTR+HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE )))
 275   3                              {
 276   4                                      TR1=0;
 277   4                                      TF1=0;
 278   4                                      ET1=1;                                  // Enable timer1 interrupt
 279   4                                      break;
 280   4                              }
 281   3                      }
 282   2              
 283   2                      if(TF1)                                     // 26ms time-out and no any status bit is set.
 284   2                      {
 285   3                              TR1=0;
 286   3                              TF1=0;
 287   3                              ET1=1;                                  // Enable timer1 interrupt
 288   3                              ResetSMBus(Channel);
 289   3                              error = 0xEE;
 290   3                      }
 291   2                      else
 292   2                      {
 293   3                              if(IS_MASK_SET(status, (HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE)))
 294   3                              {
 295   4                                      if(IS_MASK_SET(status, (HOSTA_BSER+HOSTA_FAIL)))
 296   4                                      {
 297   5                                              ResetSMBus(Channel);
 298   5                                      }
 299   4                                      error = 0xEE;
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 6   

 300   4                              }
 301   3                              else                                    // Only Finish Interrupt bit is set.
 302   3                              {
 303   4                                      error = 0x00;
 304   4                              }
 305   3                      }
 306   2                                                          
 307   2                      if(error == 0xEE)                           // Fail
 308   2                      {
 309   3                              resutl = FALSE;
 310   3                      }
 311   2                      else                                        // OK
 312   2                      {
 313   3                              if ((*asSMBus[Channel].SMBusADR & 0x01 != 0x00)) 
 314   3                              {
 315   4                                      *Var = *asSMBus[Channel].SMBusData0;    // read data1
 316   4                                      if(Protocol==SMbusRW)
 317   4                                      {
 318   5                                              *(Var+0x01) = *asSMBus[Channel].SMBusData1;
 319   5                                      }                                                                   // read data2
 320   4                              }
 321   3                              resutl = TRUE;
 322   3                      }
 323   2      
 324   2                      *asSMBus[Channel].SMBusSTA=0xFE;                    // clear bits
 325   2              }
 326   1      
 327   1              return(resutl);
 328   1      }
 329          
 330          
 331          //----------------------------------------------------------------------------
 332          // V14.1 Read SMbus block function      
 333          //----------------------------------------------------------------------------
 334          BYTE bRSMBusBlock(BYTE Channel,BYTE Protocol,BYTE Addr,BYTE Comd,XBYTE *Var)
 335          {
 336   1              BYTE ack;
 337   1              BYTE bcount;
 338   1              BYTE status;
 339   1      
 340   1              if(CheckSMBusInterfaceCanbeUse(Channel, SMBus_AccessType_Fucn)==SMBus_CanNotUse)
 341   1              {
 342   2                      ack = FALSE;                            // SMBus interface can't be used.
 343   2              }
 344   1              else
 345   1              {
 346   2                      ack = FALSE;                                            // pr-set flag
 347   2                      bcount = 0x00;                                  // clear byte counter
 348   2              
 349   2                      *asSMBus[Channel].SMBusADR=Addr|0x01;   // set address with reading bit 
 350   2                      *asSMBus[Channel].SMBusCMD=Comd;            // Set command
 351   2                      *asSMBus[Channel].SMBusSTA=0xFE;            // clear bits
 352   2                      *asSMBus[Channel].SMBusCTL=(Protocol|HOCTL_SRT);    // Start transaction
 353   2      
 354   2                      TR1 = 0;                                            // disable timer1
 355   2                      ET1 = 0;                                    // Disable timer1 interrupt
 356   2                      _nop_();
 357   2                      _nop_();
 358   2                      _nop_();
 359   2                      _nop_();
 360   2                      TH1 = T_Timer_26ms>>8;                    // Set timer1 counter 26ms
 361   2                      TL1 = T_Timer_26ms;                       // Set timer1 counter 26ms
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 7   

 362   2                      TF1 = 0;                                    // Clear overflow flag
 363   2                      TR1 = 1;                                    // Enable timer1
 364   2      
 365   2                      while(!TF1)                             // Not time out
 366   2                      {
 367   3                              status = *asSMBus[Channel].SMBusSTA;    // Read SMBus Host Status
 368   3                              if(IS_MASK_SET(status, (HOSTA_BDS+HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE )))
 369   3                              {
 370   4                                      if(IS_MASK_SET(status, (HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE)))
 371   4                                      {
 372   5                                              if(IS_MASK_SET(status, (HOSTA_BSER+HOSTA_FAIL)))
 373   5                                              {
 374   6                                                      ResetSMBus(Channel);
 375   6                                              }
 376   5                                              TR1 = 0;                                // disable timer1
 377   5                                              TF1 = 0;                                // clear overflow flag
 378   5                                              ET1 = 1;                                // Enable timer1 interrupt
 379   5                                              ack = FALSE;
 380   5                                              break;
 381   5                                      }
 382   4                                      else                            // Only Byte Done Status bit is set.
 383   4                                      {
 384   5                                              *Var = *asSMBus[Channel].SMBusBData;    // get first data
 385   5                                              if(bcount ==0x00)
 386   5                                              {
 387   6                                                      bcount = *asSMBus[Channel].SMBusData0; // get the data of byte count 
 388   6                                                      Hook_GetSMBusReadBlockByteCount(bcount);
 389   6                                                      //SMB_BCNT = bcount;      // For ACPI SMBus EC SMB1 Block Count register
 390   6                                              }       
 391   5                  
 392   5                                              bcount--;
 393   5                                              Var++;
 394   5          
 395   5                                              if(bcount == 0x01)
 396   5                                              {                                                   // set last byte flag
 397   6                                                      SET_MASK(*asSMBus[Channel].SMBusCTL,HOCTL_LABY);
 398   6                                              }
 399   5          
 400   5                                              *asSMBus[Channel].SMBusSTA=0xFE;    // clear bits
 401   5      
 402   5                                              if(bcount == 0x00)
 403   5                                              {
 404   6                                                      TR1 = 0;                            // disable timer1
 405   6                                                      TF1 = 0;                            // clear overflow flag
 406   6                                                      ET1 = 1;                            // Enable timer1 interrupt
 407   6                                                      ack = TRUE;
 408   6                                                      break;                  // SMBus read block done.
 409   6                                              }
 410   5                                      }
 411   4                              }
 412   3                      }
 413   2      
 414   2                      if(TF1)                                 // time-out
 415   2                      {
 416   3                              TR1 = 0;                                        // disable timer1
 417   3                              TF1 = 0;                                        // clear overflow flag
 418   3                              ET1 = 1;                                        // Enable timer1 interrupt
 419   3                              ResetSMBus(Channel);
 420   3                              ack = FALSE;
 421   3                      }
 422   2      
 423   2                      CLEAR_MASK(*asSMBus[Channel].SMBusCTL,HOCTL_LABY);    // clear last byte flag
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 8   

 424   2                      *asSMBus[Channel].SMBusSTA=0xFE;        // clear bits
 425   2              }
 426   1          
 427   1              return(ack);    
 428   1      }
 429          
 430          
 431          //----------------------------------------------------------------------------
 432          // V14.1 Write SMbus block function     
 433          //----------------------------------------------------------------------------
 434          BYTE bWSMBusBlock(BYTE Channel,BYTE Protocol,BYTE Addr,BYTE Comd,XBYTE *Var,BYTE ByteCont,BYTE PECsupport)
 435          {       
 436   1              BYTE ack;
 437   1              BYTE BCTemp;
 438   1              BYTE status;
 439   1      
 440   1              if(CheckSMBusInterfaceCanbeUse(Channel, SMBus_AccessType_Fucn)==SMBus_CanNotUse)
 441   1              {
 442   2                      ack = FALSE;                            // SMBus interface can't be used.
 443   2              }
 444   1              else
 445   1              {
 446   2                      ack = FALSE;                                            // pre-set flag
 447   2                      BCTemp = 0x00;                                  // clear byte count
 448   2      
 449   2                      if(PECsupport)
 450   2                      {   
 451   3                              SMBCRC8_A=0x00;
 452   3                              CalcCRC8(Addr);
 453   3                              CalcCRC8(Comd);
 454   3                              CalcCRC8(ByteCont);
 455   3                              CalcCRC8(*Var);
 456   3                      }
 457   2          
 458   2                      Protocol&=(~0x80);                      
 459   2                      *asSMBus[Channel].SMBusADR=Addr;            // set address with writing flag
 460   2                      *asSMBus[Channel].SMBusCMD=Comd;            // Set command
 461   2                      *asSMBus[Channel].SMBusData0=ByteCont;  // set byte count
 462   2                      BCTemp=ByteCont;                            // sync byte count 
 463   2                      *asSMBus[Channel].SMBusBData=*Var;          // set first data
 464   2                      *asSMBus[Channel].SMBusSTA=0xFE;            // clear bits
 465   2                      if(PECsupport)
 466   2                      {   
 467   3                              *asSMBus[Channel].SMBusCTL=(Protocol|HOCTL_SRT|HOCTL_PEC_EN);// Start transaction
 468   3                      }
 469   2                      else
 470   2                      {
 471   3                              *asSMBus[Channel].SMBusCTL=(Protocol|HOCTL_SRT);// Start transaction
 472   3                      }
 473   2      
 474   2                      TR1 = 0;                                            // disable timer1
 475   2                      ET1 = 0;                                    // Disable timer1 interrupt
 476   2                      _nop_();
 477   2                      _nop_();
 478   2                      _nop_();
 479   2                      _nop_();
 480   2                      TH1 = T_Timer_26ms>>8;                    // Set timer1 counter 26ms
 481   2                      TL1 = T_Timer_26ms;                       // Set timer1 counter 26ms
 482   2                      TF1 = 0;                                    // Clear overflow flag
 483   2                      TR1 = 1;                                    // Enable timer1
 484   2      
 485   2                      while(!TF1)                             // Not time out
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 9   

 486   2                      {
 487   3                              status = *asSMBus[Channel].SMBusSTA;    // Read SMBus Host Status
 488   3                              if(IS_MASK_SET(status, (HOSTA_BDS+HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE )))
 489   3                              {
 490   4                                      if(IS_MASK_SET(status, (HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE)))
 491   4                                      {
 492   5                                              if(IS_MASK_SET(status, (HOSTA_BSER+HOSTA_FAIL)))
 493   5                                              {
 494   6                                                      ResetSMBus(Channel);
 495   6                                              }
 496   5                                              TR1 = 0;                                // disable timer1
 497   5                                              TF1 = 0;                                // clear overflow flag
 498   5                                              ET1 = 1;                                // Enable timer1 interrupt
 499   5                                              ack = FALSE;
 500   5                                              break;
 501   5                                      }
 502   4                                      else                            // Only Byte Done Status bit is set.
 503   4                                      {
 504   5                                              BCTemp--;
 505   5                                              Var++;                                      // point to next address of variable
 506   5      
 507   5                                              if(BCTemp != 0x00)
 508   5                                              {
 509   6                                                      if(PECsupport)
 510   6                                                      {
 511   7                                                              *asSMBus[Channel].SMBusBData=*Var;
 512   7                                                              CalcCRC8(*Var);
 513   7                                                              if(BCTemp==0x01)    // last byte of byte count
 514   7                                                              {
 515   8                                                                      *asSMBus[Channel].SMBusPEC = SMBCRC8_A;
 516   8                                                              }
 517   7                                                      }
 518   6                                                      else
 519   6                                                      {
 520   7                                                              *asSMBus[Channel].SMBusBData=*Var;
 521   7                                                      }
 522   6                                                      *asSMBus[Channel].SMBusSTA=0xFE;    // clear bits
 523   6                                              }
 524   5                                              else                        // write block transaction done
 525   5                                              {
 526   6                                                      TR1 = 0;                            // disable timer1
 527   6                                                      TF1 = 0;                            // clear overflow flag
 528   6                                                      ET1 = 1;                            // Enable timer1 interrupt
 529   6                                                      ack = TRUE;
 530   6                                                      break;
 531   6                                              }
 532   5                                      }
 533   4                              }
 534   3                      }
 535   2              
 536   2                      if(TF1)                                 // time-out
 537   2                      {
 538   3                              TR1 = 0;                                        // disable timer1
 539   3                              TF1 = 0;                                        // clear overflow flag
 540   3                              ET1 = 1;                                        // Enable timer1 interrupt
 541   3                              ResetSMBus(Channel);
 542   3                              ack = FALSE;
 543   3                      }
 544   2              
 545   2                      *asSMBus[Channel].SMBusSTA=0xFE;        // clear bits
 546   2              }
 547   1          
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 10  

 548   1              return(ack);
 549   1      } 
 550          
 551          //----------------------------------------------------------------------------
 552          //
 553          //----------------------------------------------------------------------------
 554          void CalcCRC8(BYTE sourcebyte)
 555          {
 556   1          BYTE temp;
 557   1              SMBCRC8_A ^=sourcebyte;
 558   1          temp = SMBCRC8_A;
 559   1      
 560   1          if(IS_MASK_CLEAR(temp, BIT7))
 561   1          {
 562   2              temp = temp<<1;
 563   2              SMBCRC8_A ^= temp;
 564   2          }
 565   1          else
 566   1          {
 567   2              temp = temp<<1;
 568   2              SMBCRC8_A ^= 0x09;
 569   2              SMBCRC8_A ^= temp;
 570   2          }
 571   1          
 572   1          if(IS_MASK_CLEAR(temp, BIT7))
 573   1          {
 574   2              temp = temp<<1;
 575   2              SMBCRC8_A ^= temp;
 576   2          }
 577   1          else
 578   1          {
 579   2              temp = temp<<1;
 580   2              SMBCRC8_A ^= 0x07;
 581   2              SMBCRC8_A ^= temp;
 582   2          }
 583   1      }
 584          
 585          //----------------------------------------------------------------------------
 586          // The function of Checking SMbus clock and data pins are both high     
 587          //----------------------------------------------------------------------------
 588          BYTE CheckSMBusFree(BYTE channel)
 589          {
 590   1          BYTE pinstatus;
 591   1      
 592   1          pinstatus = *asResetSMBusS[channel].SMBusPinCTL;
 593   1      
 594   1          if((pinstatus&=0x03)==0x03) // Check BIT0 and BIT1
 595   1          {
 596   2              return(SMBus_Free);
 597   2          }
 598   1          else
 599   1          {
 600   2              return(SMBus_Busy);
 601   2          }
 602   1      }
 603          
 604          //----------------------------------------------------------------------------
 605          // The function of Checking SMbus pins are all alt
 606          //----------------------------------------------------------------------------
 607          BYTE CheckSMBusInterfaceCanbeUse(BYTE channel, BYTE accesstype)
 608          {
 609   1              BYTE checksmbus;
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 11  

 610   1      
 611   1              checksmbus = SMBus_CanUse;                  // Pre-set smbus interface can be used
 612   1          
 613   1              if(accesstype==SMBus_AccessType_Fucn)
 614   1              {
 615   2                  #if SMBusServiceCenterFunc
                          WatiSMBusCHxFree(channel);          // Check smbus is in used or not.
                          #endif
 618   2              }
 619   1      
 620   1              if(CheckSMBusFree(channel)==SMBus_Busy)
 621   1              {
 622   2                  checksmbus = SMBus_CanNotUse;       // Interface can't be used
 623   2                  if( (*asResetSMBusS[channel].recoverCunt)++ >SMBus_BusyRecover)
 624   2                  {
 625   3                      ResetSMBus(channel);
 626   3                  }
 627   2              }
 628   1              else
 629   1              {
 630   2                  *asResetSMBusS[channel].recoverCunt=0x00;
 631   2                  checksmbus = SMBus_CanUse;          // smbus interface can be used
 632   2              }
 633   1      
 634   1      
 635   1          return(checksmbus);                         // return result
 636   1      }
 637          
 638          //----------------------------------------------------------------------------
 639          // The function of SMbus send byte      V14.1
 640          //----------------------------------------------------------------------------
 641          BYTE bSMBusSendByte(BYTE Channel,BYTE Addr,BYTE SData)
 642          {
 643   1              BYTE error;
 644   1              BYTE result;
 645   1              BYTE status;
 646   1      
 647   1              if(CheckSMBusInterfaceCanbeUse(Channel, SMBus_AccessType_Fucn)==SMBus_CanNotUse)
 648   1              {
 649   2                  result = FALSE;                             // SMBus interface can't be used.
 650   2              }
 651   1              else
 652   1              {
 653   2                      error = 0xEE;                               // Pre-set error
 654   2                      result = FALSE;                             // Pre-set result is fail
 655   2              
 656   2                      *asSMBus[Channel].SMBusADR = Addr;              // set address with writing bit
 657   2                      *asSMBus[Channel].SMBusCMD = SData;             // Set command
 658   2                      *asSMBus[Channel].SMBusSTA = 0xFE;              // clear bits
 659   2                      *asSMBus[Channel].SMBusCTL = (0x04|HOCTL_SRT);  // Start transaction
 660   2      
 661   2                      TR1 = 0;                                    // Disable timer1
 662   2                      ET1 = 0;                                        // Disable timer1 interrupt
 663   2                      _nop_();
 664   2                      _nop_();
 665   2                      _nop_();
 666   2                      _nop_();
 667   2                      TH1 = T_Timer_26ms>>8;                        // Set timer1 counter 26ms
 668   2                      TL1 = T_Timer_26ms;                           // Set timer1 counter 26ms
 669   2                      TF1 = 0;                                        // Clear overflow flag
 670   2                      TR1 = 1;                                        // Enable timer1
 671   2      
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 12  

 672   2                      while (!TF1)
 673   2                      { 
 674   3                              status = *asSMBus[Channel].SMBusSTA;    // Read SMBus Host Status
 675   3                              if(IS_MASK_SET(status, (HOSTA_FINTR+HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE )))
 676   3                              {
 677   4                                      TR1=0;                              // Disable timer1
 678   4                                      TF1=0;                              // Clear overflow flag
 679   4                                      ET1=1;                                  // Enable timer1 interrupt
 680   4                                      break;
 681   4                              }
 682   3                      }
 683   2              
 684   2                      if(TF1)                                     // 26ms time-out and no any status bit is set.
 685   2                      {
 686   3                              TR1=0;
 687   3                              TF1=0;
 688   3                              ET1=1;                                  // Enable timer1 interrupt
 689   3                              ResetSMBus(Channel);
 690   3                              error = 0xEE;
 691   3                      }
 692   2                      else
 693   2                      {
 694   3                              if(IS_MASK_SET(status, (HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE)))
 695   3                              {
 696   4                                      if(IS_MASK_SET(status, (HOSTA_BSER+HOSTA_FAIL)))
 697   4                                      {
 698   5                                              ResetSMBus(Channel);
 699   5                                      }
 700   4                                      error = 0xEE;
 701   4                              }
 702   3                              else                                    // Only Finish Interrupt bit is set.
 703   3                              {
 704   4                                      error = 0x00;
 705   4                              }
 706   3                      }
 707   2          
 708   2                      if(error == 0xEE)
 709   2                      {
 710   3                              result = FALSE;
 711   3                      }
 712   2                      else
 713   2                      {
 714   3                              result = TRUE;
 715   3                      }
 716   2                      *asSMBus[Channel].SMBusSTA=0xFE;        // clear bits
 717   2              }
 718   1          
 719   1              return(result);
 720   1      }
 721          
 722          
 723          //----------------------------------------------------------------------------
 724          // The function of SMbus receive byte   
 725          //----------------------------------------------------------------------------
 726          BYTE bSMBusReceiveByte(BYTE Channel,BYTE Addr,XBYTE *Var)
 727          {
 728   1              BYTE error;
 729   1              BYTE result;
 730   1              BYTE status;
 731   1      
 732   1              if(CheckSMBusInterfaceCanbeUse(Channel, SMBus_AccessType_Fucn)==SMBus_CanNotUse)
 733   1              {
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 13  

 734   2                      result = FALSE;                             // SMBus interface can't be used.
 735   2              }
 736   1              else
 737   1              {
 738   2                      error = 0xEE;                               // Pre-set error
 739   2                      result = FALSE;                             // Pre-set result is fail
 740   2      
 741   2                      *asSMBus[Channel].SMBusADR = (Addr|0x01);   // set address with writing bit
 742   2                      *asSMBus[Channel].SMBusSTA = 0xFE;                  // clear bits
 743   2                      *asSMBus[Channel].SMBusCTL = (0x04|HOCTL_SRT);  // Start transaction
 744   2      
 745   2                      TR1 = 0;                                                // disable timer1
 746   2                      ET1 = 0;                                        // Disable timer1 interrupt
 747   2                      _nop_();
 748   2                      _nop_();
 749   2                      _nop_();
 750   2                      _nop_();
 751   2                      TH1 = T_Timer_26ms>>8;                        // Set timer1 counter 26ms
 752   2                      TL1 = T_Timer_26ms;                           // Set timer1 counter 26ms
 753   2                      TF1 = 0;                                        // Clear overflow flag
 754   2                      TR1 = 1;                                        // Enable timer1
 755   2      
 756   2                      while (!TF1)
 757   2                      { 
 758   3                              status = *asSMBus[Channel].SMBusSTA;    // Read SMBus Host Status
 759   3                              if(IS_MASK_SET(status, (HOSTA_FINTR+HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE )))
 760   3                              {
 761   4                                      TR1=0;
 762   4                                      TF1=0;
 763   4                                      ET1=1;                                  // Enable timer1 interrupt
 764   4                                      break;
 765   4                              }
 766   3                      }
 767   2              
 768   2                      if(TF1)                                     // 26ms time-out and no any status bit is set.
 769   2                      {
 770   3                              TR1=0;
 771   3                              TF1=0;
 772   3                              ET1=1;                                  // Enable timer1 interrupt
 773   3                              ResetSMBus(Channel);
 774   3                              error = 0xEE;
 775   3                      }
 776   2                      else
 777   2                      {
 778   3                              if(IS_MASK_SET(status, (HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE)))
 779   3                              {
 780   4                                      if(IS_MASK_SET(status, (HOSTA_BSER+HOSTA_FAIL)))
 781   4                                      {
 782   5                                              ResetSMBus(Channel);
 783   5                                      }
 784   4                                      error = 0xEE;
 785   4                              }
 786   3                              else                                    // Only Finish Interrupt bit is set.
 787   3                              {
 788   4                                      error = 0x00;
 789   4                              }
 790   3                      }
 791   2               
 792   2                      if(error == 0xEE)
 793   2                      {
 794   3                              result = FALSE; 
 795   3                      }       
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 14  

 796   2                      else
 797   2                      {
 798   3                              *Var = *asSMBus[Channel].SMBusData0;    // read data
 799   3                              result = TRUE; 
 800   3                      }
 801   2                      *asSMBus[Channel].SMBusSTA=0xFE;            // clear bits
 802   2              }
 803   1          
 804   1              return(result);
 805   1      }
 806          
 807          
 808          //----------------------------------------------------------------------------
 809          // To init. SMBus setting
 810          //----------------------------------------------------------------------------
 811          void Core_Init_SMBus(void)
 812          {
 813   1          SMBus_BusyRecover = 20;         // Reset SMBus interface if bus clock pin or data pin is low greater t
             -han SMBus_BusyRecover times.
 814   1      }
 815          
 816          
 817          
 818          //==============================================================================
 819          //      I2C master control table
 820          //==============================================================================
 821          
 822          const tsI2cControlReg code conI2cControlReg[] =
 823          {       // bCtrl , bCtrl2   , bSlaveAddr,bStatus , bI2cdata
 824                  {&HOCTL_A, &HOCTL2_A, &TRASLA_A, &HOSTA_A, &HOBDB_A},
 825                  {&HOCTL_B, &HOCTL2_B, &TRASLA_B, &HOSTA_B, &HOBDB_B},
 826                  {&HOCTL_C, &HOCTL2_C, &TRASLA_C, &HOSTA_C, &HOBDB_C},
 827          };
 828          
 829          //==============================================================================
 830          // Name: bI2cMasterRead
 831          // Input:       bChannel = 0-3
 832          //                      bSlaveAddress = Slave address
 833          //                      bDataLength = Max 256
 834          //                      *Var = Data buffer
 835          // Return: 0 = Fail, 1 = Correct Pass
 836          //==============================================================================
 837          BYTE bI2cMasterRead(BYTE bChannel, BYTE bSlaveAddress, BYTE bDataLength, XBYTE *Var)
 838          {
 839   1              BYTE    bIndex, bFinishFlag;
 840   1      
 841   1              bFinishFlag = 1;
 842   1              bIndex = 0;
 843   1              *conI2cControlReg[bChannel].bCtrl2 = 0x03;                              // Enable SMBus and compatible I2C
 844   1              *conI2cControlReg[bChannel].bSlaveAddr = (bSlaveAddress|0x01);  // Set slave address
 845   1              *conI2cControlReg[bChannel].bStatus |= 0xFE;                                    // Clear error flag
 846   1      
 847   1              if (bDataLength == 1) {
 848   2                      *conI2cControlReg[bChannel].bCtrl = 0x7C;                                       // Set last byte
 849   2                      
 850   2              }
 851   1              else
 852   1              {
 853   2                      *conI2cControlReg[bChannel].bCtrl = 0x5C;                                               // Start send (None interrupt)
 854   2              }
 855   1      
 856   1              
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 15  

 857   1              do {
 858   2      
 859   2                      //Set Timer1
 860   2                      Set_T1_Timeout(T_Timer_26ms);   //Reset TF1
 861   2                      
 862   2                      while ( (!(*conI2cControlReg[bChannel].bStatus & 0xFE)) )               // Wait byte done
 863   2                      {
 864   3                              if(TF1 == 1)    //Timeout
 865   3                              {
 866   4                                      bFinishFlag = 0;
 867   4      
 868   4                                      
 869   4                                      //---Reset SMBUS
 870   4                                      SET_MASK(*conI2cControlReg[bChannel].bCtrl,HOCTL_KILL);
 871   4                                      *conI2cControlReg[bChannel].bStatus = 0xFE;     // clear bits
 872   4                                      //---
 873   4      
 874   4                                      return bFinishFlag;
 875   4                              }
 876   3                      }
 877   2                      
 878   2                      bDataLength--;
 879   2                      if (*conI2cControlReg[bChannel].bStatus & 0x7C) {
 880   3                              *conI2cControlReg[bChannel].bCtrl |= 0x02;
 881   3                              _nop_();
 882   3                              *conI2cControlReg[bChannel].bCtrl &= ~0x02;
 883   3                              
 884   3                              //---Reset SMBUS
 885   3                              SET_MASK(*conI2cControlReg[bChannel].bCtrl,HOCTL_KILL);
 886   3                              *conI2cControlReg[bChannel].bStatus = 0xFE;     // clear bits
 887   3                              //---
 888   3                              
 889   3                              bFinishFlag = 0;
 890   3                              break;
 891   3                      }
 892   2      
 893   2                      *(Var+bIndex) = *conI2cControlReg[bChannel].bI2cdata;           // Store data
 894   2                      bIndex++;
 895   2      
 896   2                      if (bDataLength == 1) {
 897   3                              *conI2cControlReg[bChannel].bCtrl |= 0x20;                              // Set last byte
 898   3                      }
 899   2                      else if (bDataLength == 0) {
 900   3                              *conI2cControlReg[bChannel].bCtrl2 &= 0xFD;                             // Disable I2C_EN for stop
 901   3                      }
 902   2                      *conI2cControlReg[bChannel].bStatus |= 0x80;                            // Clear byte done
 903   2              } while (bDataLength);
 904   1      
 905   1              return bFinishFlag;
 906   1      }
 907          
 908          //==============================================================================
 909          // Name: bI2cMasterWrite
 910          // Input:       bChannel = 0-3
 911          //                      bSlaveAddress = Slave address
 912          //                      bDataLength = Max 256
 913          //                      *Var = Data buffer
 914          // Return: 0 = Fail, 1 = Correct Pass
 915          //==============================================================================
 916          bit bI2cMasterWrite(BYTE bChannel, BYTE bSlaveAddress, BYTE bDataLength, XBYTE *Var)
 917          {
 918   1              BYTE    bIndex, bFinishFlag;
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 16  

 919   1      
 920   1              bFinishFlag = 1;
 921   1              bIndex = 0;
 922   1              
 923   1              *conI2cControlReg[bChannel].bCtrl2 = 0x03;                              // Enable SMBus and compatible I2C      
 924   1              *conI2cControlReg[bChannel].bStatus |= 0xFE;                                    // Clear error flag
 925   1              
 926   1              *conI2cControlReg[bChannel].bSlaveAddr = (bSlaveAddress&0xFE);  // Set slave address
 927   1              *conI2cControlReg[bChannel].bStatus |= 0xFE;                                    // Clear error flag
 928   1              *conI2cControlReg[bChannel].bI2cdata = *Var;                                    // Set first byte
 929   1              *conI2cControlReg[bChannel].bCtrl = 0x5C;                                               // Start send (None interrupt)
 930   1      
 931   1              do {
 932   2                      //Set Timer1
 933   2                      Set_T1_Timeout(T_Timer_26ms);   //Reset TF1
 934   2      
 935   2                      while (!(*conI2cControlReg[bChannel].bStatus & 0xFE))           // Wait byte done
 936   2                      {
 937   3      
 938   3                              if(TF1 == 1)    //Timeout
 939   3                              {
 940   4                                      bFinishFlag = 0;
 941   4                              
 942   4                                      //---Reset SMBUS
 943   4                                      SET_MASK(*conI2cControlReg[bChannel].bCtrl,HOCTL_KILL);
 944   4                                      *conI2cControlReg[bChannel].bStatus = 0xFE;     // clear bits
 945   4                                      //---
 946   4      
 947   4                                      return bFinishFlag;
 948   4                              }
 949   3                      }
 950   2      
 951   2                      
 952   2                      bDataLength--;
 953   2                      if (*conI2cControlReg[bChannel].bStatus & 0x7C) {
 954   3                              bFinishFlag = 0;
 955   3                              
 956   3                              //---Reset SMBUS
 957   3                              SET_MASK(*conI2cControlReg[bChannel].bCtrl,HOCTL_KILL);
 958   3                              *conI2cControlReg[bChannel].bStatus = 0xFE;     // clear bits
 959   3                              //---
 960   3                              
 961   3                              break;
 962   3                      }
 963   2                      else if (bDataLength) {         //*** Send data ***//
 964   3                              bIndex++;
 965   3                              *conI2cControlReg[bChannel].bI2cdata = *(Var+bIndex);   // Next byte
 966   3                              *conI2cControlReg[bChannel].bStatus |= 0x80;                    // Clear byte done
 967   3                      }
 968   2              }
 969   1              while ( bDataLength);
 970   1      
 971   1              *conI2cControlReg[bChannel].bCtrl2 &= 0xFD;                                             // Disable I2C_EN for stop
 972   1              *conI2cControlReg[bChannel].bStatus |= 0x80;                                    // Clear byte done
 973   1              return (bFinishFlag);
 974   1      
 975   1      
 976   1      }
 977          
 978          
 979          //==============================================================================
 980          // Name: bI2cMasterWriteToRead
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 17  

 981          // Input:       bChannel = 0-3
 982          //                      bSlaveAddress = Slave address
 983          //                      Offset = Offset
 984          //                      bDataLength = Max 256
 985          //                      *Var = Data buffer
 986          // Return: 0 = Fail, 1 = Correct Pass
 987          // Descript: Start - Slave address - Offset - Restart - Slave address - Data0 ... DataN - Stop
 988          //==============================================================================
 989          BYTE bI2cMasterWriteToRead(BYTE bChannel, BYTE bSlaveAddress, BYTE Offset, BYTE bDataLength, XBYTE *Var)
 990          {
 991   1              BYTE    bIndex, bFinishFlag;
 992   1      
 993   1              bFinishFlag = 1;
 994   1              bIndex = 0;
 995   1              *conI2cControlReg[bChannel].bCtrl2 = 0x03;                              // Enable SMBus and compatible I2C
 996   1              *conI2cControlReg[bChannel].bSlaveAddr = (bSlaveAddress&0xFE);  // Set slave address
 997   1              *conI2cControlReg[bChannel].bStatus |= 0xFE;                                    // Clear error flag
 998   1      
 999   1              //*** Write offset ***//
1000   1              *conI2cControlReg[bChannel].bI2cdata = Offset;                                  // Set first byte
1001   1              *conI2cControlReg[bChannel].bCtrl = 0x5C;                                               // Start send (None interrupt)
1002   1              Set_T1_Timeout(T_Timer_26ms);   //Reset TF1
1003   1              while (!(*conI2cControlReg[bChannel].bStatus & 0xFE))           // Wait byte done
1004   1              {
1005   2                      if(TF1 == 1)    //Timeout
1006   2                      {
1007   3                              bFinishFlag = 0;
1008   3                              
1009   3                              //---Reset SMBUS
1010   3                              SET_MASK(*conI2cControlReg[bChannel].bCtrl,HOCTL_KILL);
1011   3                              *conI2cControlReg[bChannel].bStatus = 0xFE;     // clear bits
1012   3                              //---
1013   3                                      return bFinishFlag;
1014   3                      }
1015   2              }
1016   1              if (*conI2cControlReg[bChannel].bStatus & 0x7C) {
1017   2                      *conI2cControlReg[bChannel].bCtrl |= 0x02;
1018   2                      _nop_();
1019   2                      *conI2cControlReg[bChannel].bCtrl &= ~0x02;
1020   2                      bFinishFlag = 0;
1021   2                      *conI2cControlReg[bChannel].bCtrl2 &= 0xFD;                                             // Disable I2C_EN for stop
1022   2                      *conI2cControlReg[bChannel].bStatus |= 0x80;                                    // Clear byte done
1023   2                      return bFinishFlag;
1024   2              }
1025   1      
1026   1              //*** Wait direction switch ***//
1027   1              *conI2cControlReg[bChannel].bCtrl2 |= 0x0C;                             // Set I2C direction switch wait
1028   1              *conI2cControlReg[bChannel].bStatus |= 0x80;                                    // Clear byte done
1029   1              *conI2cControlReg[bChannel].bCtrl2 &= 0xFB;                                             // Release I2C switch wait
1030   1      
1031   1              //*** Read data ***//
1032   1              do {
1033   2                      Set_T1_Timeout(T_Timer_26ms);   //Reset TF1
1034   2                      while (!(*conI2cControlReg[bChannel].bStatus & 0xFE))           // Wait byte done
1035   2                      {
1036   3                              if(TF1 == 1)    //Timeout
1037   3                              {
1038   4                                      bFinishFlag = 0;
1039   4                              
1040   4                                      //---Reset SMBUS
1041   4                                      SET_MASK(*conI2cControlReg[bChannel].bCtrl,HOCTL_KILL);
1042   4                                      *conI2cControlReg[bChannel].bStatus = 0xFE;     // clear bits
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 18  

1043   4                                      //---
1044   4      
1045   4                                      return bFinishFlag;
1046   4                              }
1047   3                      }
1048   2                      bDataLength--;
1049   2                      if (*conI2cControlReg[bChannel].bStatus & 0x7C) {
1050   3                              *conI2cControlReg[bChannel].bCtrl |= 0x02;
1051   3                              _nop_();
1052   3                              *conI2cControlReg[bChannel].bCtrl &= ~0x02;
1053   3                              bFinishFlag = 0;
1054   3      
1055   3                              //---Reset SMBUS
1056   3                              SET_MASK(*conI2cControlReg[bChannel].bCtrl,HOCTL_KILL);
1057   3                              *conI2cControlReg[bChannel].bStatus = 0xFE;     // clear bits
1058   3                              //---
1059   3                              
1060   3                              break;
1061   3                      }
1062   2      
1063   2                      *(Var+bIndex) = *conI2cControlReg[bChannel].bI2cdata;           // Store data
1064   2                      bIndex++;
1065   2      
1066   2                      if (bDataLength == 1) {
1067   3                              *conI2cControlReg[bChannel].bCtrl |= 0x20;                              // Set last byte
1068   3                      }
1069   2                      else if (bDataLength == 0) {
1070   3                              *conI2cControlReg[bChannel].bCtrl2 &= 0xFD;                             // Disable I2C_EN for stop
1071   3                      }
1072   2                      *conI2cControlReg[bChannel].bStatus |= 0x80;                            // Clear byte done
1073   2              } while ( bDataLength);
1074   1      
1075   1              *conI2cControlReg[bChannel].bCtrl2 &= 0xFD;                                             // Disable I2C_EN for stop
1076   1              *conI2cControlReg[bChannel].bStatus |= 0x80;                                    // Clear byte done
1077   1              return bFinishFlag;
1078   1      }
1079          /*-----------------------------------------------------------------------------
1080           * End
1081           *---------------------------------------------------------------------------*/
1082          
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 19  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0098 (BEGIN)
0000         L?0153:
0000 900000      R     MOV     DPTR,#Channel
0003         L?0154:
0003 E0                MOVX    A,@DPTR
0004         L?0155:
0004 75F015            MOV     B,#015H
0007 A4                MUL     AB
0008 2400        R     ADD     A,#LOW asSMBus+06H
000A F582              MOV     DPL,A
000C E4                CLR     A
000D 3400        R     ADDC    A,#HIGH asSMBus+06H
000F         L?0156:
000F F583              MOV     DPH,A
0011 E4                CLR     A
0012 93                MOVC    A,@A+DPTR
0013 FE                MOV     R6,A
0014 7401              MOV     A,#01H
0016 93                MOVC    A,@A+DPTR
0017 F582              MOV     DPL,A
0019 8E83              MOV     DPH,R6
001B 22                RET     
001C         L?0157:
001C         L?0158:
001C 900000      R     MOV     DPTR,#bChannel
001F         L?0159:
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021         L?0160:
0021 75F00A            MOV     B,#0AH
0024 A4                MUL     AB
0025 2400        R     ADD     A,#LOW conI2cControlReg+06H
0027 F582              MOV     DPL,A
0029 E4                CLR     A
002A 3400        R     ADDC    A,#HIGH conI2cControlReg+06H
002C         L?0161:
002C F583              MOV     DPH,A
002E E4                CLR     A
002F 93                MOVC    A,@A+DPTR
0030 FC                MOV     R4,A
0031 7401              MOV     A,#01H
0033 93                MOVC    A,@A+DPTR
0034 F582              MOV     DPL,A
0036 8C83              MOV     DPH,R4
0038 22                RET     
0039         L?0162:
0039 900000      R     MOV     DPTR,#bFinishFlag
003C         L?0163:
003C F0                MOVX    @DPTR,A
003D         L?0164:
003D EF                MOV     A,R7
003E         L?0165:
003E 75F00A            MOV     B,#0AH
0041 A4                MUL     AB
0042 2400        R     ADD     A,#LOW conI2cControlReg
0044 F582              MOV     DPL,A
0046 E4                CLR     A
0047 3400        R     ADDC    A,#HIGH conI2cControlReg
0049 22                RET     
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 20  

004A         L?0166:
004A 900000      R     MOV     DPTR,#bChannel
004D         L?0167:
004D E0                MOVX    A,@DPTR
004E FF                MOV     R7,A
004F 75F00A            MOV     B,#0AH
0052 A4                MUL     AB
0053 2400        R     ADD     A,#LOW conI2cControlReg+06H
0055 F582              MOV     DPL,A
0057 E4                CLR     A
0058 3400        R     ADDC    A,#HIGH conI2cControlReg+06H
005A         L?0168:
005A F583              MOV     DPH,A
005C E4                CLR     A
005D 93                MOVC    A,@A+DPTR
005E FC                MOV     R4,A
005F 7401              MOV     A,#01H
0061 93                MOVC    A,@A+DPTR
0062 FD                MOV     R5,A
0063 F582              MOV     DPL,A
0065 8C83              MOV     DPH,R4
0067 E0                MOVX    A,@DPTR
0068 22                RET     
0069         L?0169:
0069         L?0170:
0069 900000      R     MOV     DPTR,#bChannel
006C         L?0171:
006C E0                MOVX    A,@DPTR
006D FF                MOV     R7,A
006E         L?0172:
006E 75F00A            MOV     B,#0AH
0071 A4                MUL     AB
0072 2400        R     ADD     A,#LOW conI2cControlReg+02H
0074 F582              MOV     DPL,A
0076 E4                CLR     A
0077 3400        R     ADDC    A,#HIGH conI2cControlReg+02H
0079 22                RET     
007A         L?0173:
007A         L?0174:
007A F583              MOV     DPH,A
007C E4                CLR     A
007D 93                MOVC    A,@A+DPTR
007E FA                MOV     R2,A
007F 7401              MOV     A,#01H
0081 93                MOVC    A,@A+DPTR
0082 F582              MOV     DPL,A
0084 8A83              MOV     DPH,R2
0086 22                RET     
0087         L?0175:
0087 900000      R     MOV     DPTR,#Channel
008A         L?0176:
008A E0                MOVX    A,@DPTR
008B         L?0177:
008B 75F015            MOV     B,#015H
008E A4                MUL     AB
008F 2400        R     ADD     A,#LOW asSMBus
0091 F582              MOV     DPL,A
0093 E4                CLR     A
0094 3400        R     ADDC    A,#HIGH asSMBus
0096 22                RET     
0097         L?0178:
0097 900000      R     MOV     DPTR,#bChannel
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 21  

009A         L?0179:
009A E0                MOVX    A,@DPTR
009B         L?0180:
009B 75F00A            MOV     B,#0AH
009E A4                MUL     AB
009F 2400        R     ADD     A,#LOW conI2cControlReg+06H
00A1 F582              MOV     DPL,A
00A3 E4                CLR     A
00A4 3400        R     ADDC    A,#HIGH conI2cControlReg+06H
00A6 22                RET     
00A7         L?0181:
00A7 4401              ORL     A,#01H
00A9 FF                MOV     R7,A
00AA         L?0182:
00AA E0                MOVX    A,@DPTR
00AB FE                MOV     R6,A
00AC         L?0183:
00AC 75F015            MOV     B,#015H
00AF A4                MUL     AB
00B0 2400        R     ADD     A,#LOW asSMBus+02H
00B2 F582              MOV     DPL,A
00B4 E4                CLR     A
00B5 3400        R     ADDC    A,#HIGH asSMBus+02H
00B7 22                RET     
00B8         L?0184:
00B8         L?0185:
00B8 E0                MOVX    A,@DPTR
00B9 FF                MOV     R7,A
00BA EE                MOV     A,R6
00BB         L?0186:
00BB 75F015            MOV     B,#015H
00BE A4                MUL     AB
00BF 2400        R     ADD     A,#LOW asSMBus+04H
00C1 F582              MOV     DPL,A
00C3 E4                CLR     A
00C4 3400        R     ADDC    A,#HIGH asSMBus+04H
00C6 22                RET     
00C7         L?0187:
00C7         L?0188:
00C7 900000      R     MOV     DPTR,#Var
00CA         L?0189:
00CA E0                MOVX    A,@DPTR
00CB FE                MOV     R6,A
00CC A3                INC     DPTR
00CD E0                MOVX    A,@DPTR
00CE F582              MOV     DPL,A
00D0 8E83              MOV     DPH,R6
00D2 E0                MOVX    A,@DPTR
00D3 FF                MOV     R7,A
00D4 22                RET     
00D5         L?0190:
00D5 E0                MOVX    A,@DPTR
00D6 FF                MOV     R7,A
00D7         L?0191:
00D7 75F00A            MOV     B,#0AH
00DA A4                MUL     AB
00DB 2400        R     ADD     A,#LOW conI2cControlReg+08H
00DD F582              MOV     DPL,A
00DF E4                CLR     A
00E0 3400        R     ADDC    A,#HIGH conI2cControlReg+08H
00E2 22                RET     
00E3         L?0192:
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 22  

00E3         L?0193:
00E3 C28E              CLR     TR1
00E5 C28F              CLR     TF1
00E7 D2AB              SETB    ET1
00E9 22                RET     
00EA         L?0194:
00EA EF                MOV     A,R7
00EB         L?0195:
00EB 75F015            MOV     B,#015H
00EE A4                MUL     AB
00EF 2400        R     ADD     A,#LOW asSMBus+08H
00F1 F582              MOV     DPL,A
00F3 E4                CLR     A
00F4 3400        R     ADDC    A,#HIGH asSMBus+08H
00F6 22                RET     
00F7         L?0196:
00F7         L?0197:
00F7 E0                MOVX    A,@DPTR
00F8 FF                MOV     R7,A
00F9         L?0198:
00F9 75F015            MOV     B,#015H
00FC A4                MUL     AB
00FD 2400        R     ADD     A,#LOW asSMBus+06H
00FF F582              MOV     DPL,A
0101 E4                CLR     A
0102 3400        R     ADDC    A,#HIGH asSMBus+06H
0104 22                RET     
0105         L?0199:
0105         L?0200:
0105 758DB2            MOV     TH1,#0B2H
0108 758B19            MOV     TL1,#019H
010B C28F              CLR     TF1
010D D28E              SETB    TR1
010F 22                RET     
0110         L?0201:
0110 900000      R     MOV     DPTR,#Channel
0113 E0                MOVX    A,@DPTR
0114         L?0202:
0114 75F015            MOV     B,#015H
0117 A4                MUL     AB
0118 2400        R     ADD     A,#LOW asSMBus+0CH
011A F582              MOV     DPL,A
011C E4                CLR     A
011D 3400        R     ADDC    A,#HIGH asSMBus+0CH
011F 22                RET     
0120         L?0203:
0120         L?0204:
0120 900000      E     MOV     DPTR,#Index_07H
0123 7419              MOV     A,#019H
0125 F0                MOVX    @DPTR,A
0126 900000      E     MOV     DPTR,#Index_30H
0129 7401              MOV     A,#01H
012B F0                MOVX    @DPTR,A
012C 900000      E     MOV     DPTR,#Index_76H
012F E0                MOVX    A,@DPTR
0130 22                RET     
0131         L?0205:
0131         L?0206:
0131 E0                MOVX    A,@DPTR
0132 4402              ORL     A,#02H
0134 F0                MOVX    @DPTR,A
0135 8D82              MOV     DPL,R5
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 23  

0137 8C83              MOV     DPH,R4
0139 74FE              MOV     A,#0FEH
013B 22                RET     
013C         L?0207:
013C         L?0208:
013C F583              MOV     DPH,A
013E E4                CLR     A
013F 93                MOVC    A,@A+DPTR
0140 F8                MOV     R0,A
0141 7401              MOV     A,#01H
0143 93                MOVC    A,@A+DPTR
0144 F582              MOV     DPL,A
0146 8883              MOV     DPH,R0
0148 22                RET     
0149         L?0209:
0149 FE                MOV     R6,A
014A EF                MOV     A,R7
014B         L?0210:
014B 75F00A            MOV     B,#0AH
014E A4                MUL     AB
014F 2400        R     ADD     A,#LOW conI2cControlReg+04H
0151 F582              MOV     DPL,A
0153 E4                CLR     A
0154 3400        R     ADDC    A,#HIGH conI2cControlReg+04H
0156 22                RET     
0157         L?0211:
0157 EE                MOV     A,R6
0158         L?0212:
0158 75F00B            MOV     B,#0BH
015B A4                MUL     AB
015C 2400        R     ADD     A,#LOW asResetSMBusS+04H
015E F582              MOV     DPL,A
0160 E4                CLR     A
0161 3400        R     ADDC    A,#HIGH asResetSMBusS+04H
0163 22                RET     
0164         L?0214:
0164 900000      R     MOV     DPTR,#Channel
0167 E0                MOVX    A,@DPTR
0168 75F015            MOV     B,#015H
016B A4                MUL     AB
016C 2400        R     ADD     A,#LOW asSMBus+0AH
016E F582              MOV     DPL,A
0170 E4                CLR     A
0171 3400        R     ADDC    A,#HIGH asSMBus+0AH
0173 22                RET     
0174         L?0215:
0174 FD                MOV     R5,A
0175 E0                MOVX    A,@DPTR
0176 FA                MOV     R2,A
0177 A3                INC     DPTR
0178 E0                MOVX    A,@DPTR
0179 2D                ADD     A,R5
017A F582              MOV     DPL,A
017C E4                CLR     A
017D 3A                ADDC    A,R2
017E F583              MOV     DPH,A
0180 EE                MOV     A,R6
0181 F0                MOVX    @DPTR,A
0182 22                RET     
0183         L?0216:
0183 E0                MOVX    A,@DPTR
0184 FE                MOV     R6,A
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 24  

0185 A3                INC     DPTR
0186 E0                MOVX    A,@DPTR
0187         L?0217:
0187 FF                MOV     R7,A
0188 F582              MOV     DPL,A
018A 8E83              MOV     DPH,R6
018C E0                MOVX    A,@DPTR
018D 22                RET     
018E         L?0218:
018E EE                MOV     A,R6
018F 75F00B            MOV     B,#0BH
0192 A4                MUL     AB
0193 2400        R     ADD     A,#LOW asResetSMBusS+02H
0195 F582              MOV     DPL,A
0197 E4                CLR     A
0198 3400        R     ADDC    A,#HIGH asResetSMBusS+02H
019A 22                RET     
019B         L?0219:
019B ED                MOV     A,R5
019C         L?0220:
019C 25E0              ADD     A,ACC
019E FD                MOV     R5,A
019F 900000      E     MOV     DPTR,#SMBCRC8_A
01A2 E0                MOVX    A,@DPTR
01A3 22                RET     
01A4         L?0221:
01A4 EC                MOV     A,R4
01A5 75F00B            MOV     B,#0BH
01A8 A4                MUL     AB
01A9 2400        R     ADD     A,#LOW asResetSMBusS+09H
01AB F582              MOV     DPL,A
01AD E4                CLR     A
01AE 3400        R     ADDC    A,#HIGH asResetSMBusS+09H
01B0 22                RET     
01B1         L?0222:
01B1 75F015            MOV     B,#015H
01B4 A4                MUL     AB
01B5 2400        R     ADD     A,#LOW asSMBus+013H
01B7 F582              MOV     DPL,A
01B9 E4                CLR     A
01BA 3400        R     ADDC    A,#HIGH asSMBus+013H
01BC 22                RET     
             ; FUNCTION Com0098 (END)

             ; FUNCTION DelayInact (BEGIN)
                                           ; SOURCE LINE # 68
                                           ; SOURCE LINE # 69
                                           ; SOURCE LINE # 72
;---- Variable 'index' assigned to Register 'R7' ----
0000 E4                CLR     A
0001 FF                MOV     R7,A
0002         ?C0001:
                                           ; SOURCE LINE # 73
                                           ; SOURCE LINE # 74
0002 900000      R     MOV     DPTR,#counter
0005 E0                MOVX    A,@DPTR
0006 04                INC     A
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 75
0008 0F                INC     R7
0009 EF                MOV     A,R7
000A B4C8F5            CJNE    A,#0C8H,?C0001
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 25  

                                           ; SOURCE LINE # 76
000D         ?C0004:
000D 22                RET     
             ; FUNCTION DelayInact (END)

             ; FUNCTION _ResetSMBus (BEGIN)
                                           ; SOURCE LINE # 81
;---- Variable 'Channel' assigned to Register 'R6' ----
0000 CE                XCH     A,R6
0001 EF                MOV     A,R7
0002 CE                XCH     A,R6
                                           ; SOURCE LINE # 82
                                           ; SOURCE LINE # 84
0003 EE                MOV     A,R6
0004 120000      R     LCALL   L?0177
0007 120000      R     LCALL   L?0161
000A E0                MOVX    A,@DPTR
000B 4402              ORL     A,#02H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 85
000E E0                MOVX    A,@DPTR
000F 54FD              ANL     A,#0FDH
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 86
0012 900000      E     MOV     DPTR,#RSTC3
0015 7406              MOV     A,#06H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 87
0018 EE                MOV     A,R6
0019 75F00B            MOV     B,#0BH
001C A4                MUL     AB
001D 2400        R     ADD     A,#LOW asResetSMBusS
001F F582              MOV     DPL,A
0021 E4                CLR     A
0022 3400        R     ADDC    A,#HIGH asResetSMBusS
0024 120000      R     LCALL   L?0161
0027 74FE              MOV     A,#0FEH
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 89
002A EE                MOV     A,R6
002B 702A              JNZ     ?C0005
                                           ; SOURCE LINE # 90
                                           ; SOURCE LINE # 92
                                           ; SOURCE LINE # 93
                                           ; SOURCE LINE # 94
002D 120000      R     LCALL   L?0203
0030 54FD              ANL     A,#0FDH
                                           ; SOURCE LINE # 96
                                           ; SOURCE LINE # 98
0032 120000      R     LCALL   L?0213
                                           ; SOURCE LINE # 100
0035 900000      E     MOV     DPTR,#GPIO_8x
0038 E0                MOVX    A,@DPTR
0039 4420              ORL     A,#020H
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 101
003C 900000      E     MOV     DPTR,#Index_CFH
003F E0                MOVX    A,@DPTR
0040 4420              ORL     A,#020H
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 103
0043 900000      E     MOV     DPTR,#GPIO_8x
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 26  

0046 E0                MOVX    A,@DPTR
0047 4440              ORL     A,#040H
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 104
004A 900000      E     MOV     DPTR,#Index_CFH
004D E0                MOVX    A,@DPTR
004E 4440              ORL     A,#040H
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 106
0051 120000      R     LCALL   DelayInact
                                           ; SOURCE LINE # 108
                                           ; SOURCE LINE # 109
                                           ; SOURCE LINE # 110
                                           ; SOURCE LINE # 112
0054 020000      R     LJMP    ?C0142
0057         ?C0005:
                                           ; SOURCE LINE # 113
0057 EE                MOV     A,R6
0058 6402              XRL     A,#02H
005A 706B              JNZ     ?C0006
                                           ; SOURCE LINE # 114
                                           ; SOURCE LINE # 116
                                           ; SOURCE LINE # 117
                                           ; SOURCE LINE # 118
005C 120000      R     LCALL   L?0203
005F 54FE              ANL     A,#0FEH
                                           ; SOURCE LINE # 120
                                           ; SOURCE LINE # 123
0061 120000      R     LCALL   L?0213
                                           ; SOURCE LINE # 125
0064 900000      E     MOV     DPTR,#Index_C3H
0067 E0                MOVX    A,@DPTR
0068 4440              ORL     A,#040H
006A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 126
006B 900000      E     MOV     DPTR,#Index_CBH
006E E0                MOVX    A,@DPTR
006F 4440              ORL     A,#040H
0071 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 127
0072 900000      E     MOV     DPTR,#GPIO_4x
0075 E0                MOVX    A,@DPTR
0076 4440              ORL     A,#040H
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 128
0079 900000      E     MOV     DPTR,#Index_28H
007C E0                MOVX    A,@DPTR
007D 4440              ORL     A,#040H
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 131
0080 900000      E     MOV     DPTR,#Index_C3H
0083 E0                MOVX    A,@DPTR
0084 4480              ORL     A,#080H
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 132
0087 900000      E     MOV     DPTR,#Index_CBH
008A E0                MOVX    A,@DPTR
008B 4480              ORL     A,#080H
008D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 133
008E 900000      E     MOV     DPTR,#GPIO_4x
0091 E0                MOVX    A,@DPTR
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 27  

0092 4480              ORL     A,#080H
0094 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 134
0095 900000      E     MOV     DPTR,#Index_28H
0098 E0                MOVX    A,@DPTR
0099 4480              ORL     A,#080H
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 137
009C 120000      R     LCALL   DelayInact
                                           ; SOURCE LINE # 140
009F 900000      E     MOV     DPTR,#Index_07H
00A2 7407              MOV     A,#07H
00A4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 142
00A5 900000      E     MOV     DPTR,#Index_C3H
00A8 E0                MOVX    A,@DPTR
00A9 54BF              ANL     A,#0BFH
00AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 143
00AC 900000      E     MOV     DPTR,#Index_28H
00AF E0                MOVX    A,@DPTR
00B0 54BF              ANL     A,#0BFH
00B2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 146
00B3 900000      E     MOV     DPTR,#Index_C3H
00B6 E0                MOVX    A,@DPTR
00B7 547F              ANL     A,#07FH
00B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 147
00BA 900000      E     MOV     DPTR,#Index_28H
00BD E0                MOVX    A,@DPTR
00BE 547F              ANL     A,#07FH
00C0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 151
00C1         ?C0142:
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 153
00C1 120000      R     LCALL   L?0204
00C4 4402              ORL     A,#02H
00C6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 155
00C7         ?C0006:
                                           ; SOURCE LINE # 157
00C7 120000      R     LCALL   L?0218
00CA 120000      R     LCALL   L?0161
00CD 7402              MOV     A,#02H
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 158
00D0 120000      R     LCALL   L?0211
00D3 120000      R     LCALL   L?0161
00D6 7403              MOV     A,#03H
00D8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 159
00D9 120000      R     LCALL   DelayInact
                                           ; SOURCE LINE # 160
00DC 120000      R     LCALL   L?0211
00DF 120000      R     LCALL   L?0161
00E2 7407              MOV     A,#07H
00E4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 161
00E5 120000      R     LCALL   L?0218
00E8 120000      R     LCALL   L?0156
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 28  

00EB 7401              MOV     A,#01H
00ED F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 189
00EE 22                RET     
00EF         L?0213:
00EF F0                MOVX    @DPTR,A
00F0 120000      R     LCALL   DelayInact
00F3 900000      E     MOV     DPTR,#Index_07H
00F6 7407              MOV     A,#07H
00F8 F0                MOVX    @DPTR,A
00F9 22                RET     
             ; FUNCTION _ResetSMBus (END)

             ; FUNCTION _bRWSMBus (BEGIN)
                                           ; SOURCE LINE # 196
0000 900000      R     MOV     DPTR,#Protocol
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EB                MOV     A,R3
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#Channel
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 197
                                           ; SOURCE LINE # 203
000D 7D01              MOV     R5,#01H
000F 120000      R     LCALL   _CheckSMBusInterfaceCanbeUse
0012 EF                MOV     A,R7
0013 7007              JNZ     ?C0009
                                           ; SOURCE LINE # 204
                                           ; SOURCE LINE # 205
0015 900000      R     MOV     DPTR,#resutl
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 206
0019 020000      R     LJMP    ?C0010
001C         ?C0009:
                                           ; SOURCE LINE # 208
                                           ; SOURCE LINE # 209
001C 900000      R     MOV     DPTR,#error
001F 74EE              MOV     A,#0EEH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 210
0022 E4                CLR     A
0023 900000      R     MOV     DPTR,#resutl
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 212
0027 900000      E     MOV     DPTR,#SMBCRC8_A
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 214
002B 900000      R     MOV     DPTR,#Protocol
002E E0                MOVX    A,@DPTR
002F 20E703            JB      ACC.7,$ + 6H
0032 020000      R     LJMP    ?C0011
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
0035 900000      R     MOV     DPTR,#PECSupport
0038 E0                MOVX    A,@DPTR
0039 6008              JZ      ?C0012
                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 218
003B 900000      R     MOV     DPTR,#Addr
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 29  

003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 120000      R     LCALL   _CalcCRC8
                                           ; SOURCE LINE # 219
0043         ?C0012:
                                           ; SOURCE LINE # 220
0043 900000      R     MOV     DPTR,#Addr
0046 E0                MOVX    A,@DPTR
0047 FF                MOV     R7,A
0048 900000      R     MOV     DPTR,#Channel
004B E0                MOVX    A,@DPTR
004C 120000      R     LCALL   L?0183
004F 120000      R     LCALL   L?0161
0052 EF                MOV     A,R7
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 222
0054 900000      R     MOV     DPTR,#PECSupport
0057 E0                MOVX    A,@DPTR
0058 6008              JZ      ?C0013
                                           ; SOURCE LINE # 223
                                           ; SOURCE LINE # 224
005A 900000      R     MOV     DPTR,#Comd
005D E0                MOVX    A,@DPTR
005E FF                MOV     R7,A
005F 120000      R     LCALL   _CalcCRC8
                                           ; SOURCE LINE # 225
0062         ?C0013:
                                           ; SOURCE LINE # 226
0062 900000      R     MOV     DPTR,#Comd
0065 E0                MOVX    A,@DPTR
0066 FF                MOV     R7,A
0067 900000      R     MOV     DPTR,#Channel
006A E0                MOVX    A,@DPTR
006B 120000      R     LCALL   L?0186
006E 120000      R     LCALL   L?0161
0071 EF                MOV     A,R7
0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 227
0073 900000      R     MOV     DPTR,#Protocol
0076 E0                MOVX    A,@DPTR
0077 547F              ANL     A,#07FH
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 228
007A 900000      R     MOV     DPTR,#PECSupport
007D E0                MOVX    A,@DPTR
007E 6009              JZ      ?C0014
                                           ; SOURCE LINE # 229
                                           ; SOURCE LINE # 230
0080 900000      R     MOV     DPTR,#Var
0083 120000      R     LCALL   L?0189
0086 120000      R     LCALL   _CalcCRC8
                                           ; SOURCE LINE # 231
0089         ?C0014:
                                           ; SOURCE LINE # 232
0089 900000      R     MOV     DPTR,#Var
008C 120000      R     LCALL   L?0216
008F FD                MOV     R5,A
0090 900000      R     MOV     DPTR,#Channel
0093 E0                MOVX    A,@DPTR
0094 120000      R     LCALL   L?0195
0097 120000      R     LCALL   L?0173
009A ED                MOV     A,R5
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 30  

009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 234
009C 900000      R     MOV     DPTR,#Protocol
009F E0                MOVX    A,@DPTR
00A0 640C              XRL     A,#0CH
00A2 7042              JNZ     ?C0017
                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 236
00A4 900000      R     MOV     DPTR,#PECSupport
00A7 E0                MOVX    A,@DPTR
00A8 600A              JZ      ?C0016
                                           ; SOURCE LINE # 237
                                           ; SOURCE LINE # 238
00AA 8F82              MOV     DPL,R7
00AC 8E83              MOV     DPH,R6
00AE A3                INC     DPTR
00AF E0                MOVX    A,@DPTR
00B0 FF                MOV     R7,A
00B1 120000      R     LCALL   _CalcCRC8
                                           ; SOURCE LINE # 239
00B4         ?C0016:
                                           ; SOURCE LINE # 240
00B4 900000      R     MOV     DPTR,#Var
00B7 E0                MOVX    A,@DPTR
00B8 FE                MOV     R6,A
00B9 A3                INC     DPTR
00BA E0                MOVX    A,@DPTR
00BB F582              MOV     DPL,A
00BD 8E83              MOV     DPH,R6
00BF A3                INC     DPTR
00C0 E0                MOVX    A,@DPTR
00C1 FF                MOV     R7,A
00C2 120000      R     LCALL   L?0214
00C5 120000      R     LCALL   L?0161
00C8 EF                MOV     A,R7
00C9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 241
                                           ; SOURCE LINE # 242
00CA 801A              SJMP    ?C0017
00CC         ?C0011:
                                           ; SOURCE LINE # 244
                                           ; SOURCE LINE # 245
00CC 900000      R     MOV     DPTR,#Addr
00CF E0                MOVX    A,@DPTR
00D0 900000      R     MOV     DPTR,#Channel
00D3 120000      R     LCALL   L?0181
00D6 120000      R     LCALL   L?0161
00D9 EF                MOV     A,R7
00DA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 246
00DB 900000      R     MOV     DPTR,#Comd
00DE 120000      R     LCALL   L?0184
00E1 120000      R     LCALL   L?0161
00E4 EF                MOV     A,R7
00E5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 247
00E6         ?C0017:
                                           ; SOURCE LINE # 249
00E6 900000      R     MOV     DPTR,#Channel
00E9 120000      R     LCALL   L?0196
00EC 120000      R     LCALL   L?0161
00EF 74FE              MOV     A,#0FEH
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 31  

00F1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 250
00F2 900000      R     MOV     DPTR,#PECSupport
00F5 E0                MOVX    A,@DPTR
00F6 601C              JZ      ?C0018
                                           ; SOURCE LINE # 251
                                           ; SOURCE LINE # 252
00F8 900000      E     MOV     DPTR,#SMBCRC8_A
00FB E0                MOVX    A,@DPTR
00FC FE                MOV     R6,A
00FD 900000      R     MOV     DPTR,#Channel
0100 E0                MOVX    A,@DPTR
0101 FD                MOV     R5,A
0102 120000      R     LCALL   L?0222
0105 120000      R     LCALL   L?0173
0108 EE                MOV     A,R6
0109 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 253
010A 900000      R     MOV     DPTR,#Protocol
010D E0                MOVX    A,@DPTR
010E 44C0              ORL     A,#0C0H
0110 FE                MOV     R6,A
0111 ED                MOV     A,R5
                                           ; SOURCE LINE # 254
0112 8008              SJMP    ?C0143
0114         ?C0018:
                                           ; SOURCE LINE # 256
                                           ; SOURCE LINE # 257
0114 900000      R     MOV     DPTR,#Protocol
0117 E0                MOVX    A,@DPTR
0118 4440              ORL     A,#040H
011A FE                MOV     R6,A
011B EF                MOV     A,R7
011C         ?C0143:
011C 120000      R     LCALL   L?0177
011F 120000      R     LCALL   L?0161
0122 EE                MOV     A,R6
0123 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 258
0124         ?C0019:
                                           ; SOURCE LINE # 260
0124 C28E              CLR     TR1
                                           ; SOURCE LINE # 261
0126 C2AB              CLR     ET1
                                           ; SOURCE LINE # 262
0128 00                NOP     
                                           ; SOURCE LINE # 263
0129 00                NOP     
                                           ; SOURCE LINE # 264
012A 00                NOP     
                                           ; SOURCE LINE # 265
012B 00                NOP     
                                           ; SOURCE LINE # 266
                                           ; SOURCE LINE # 267
                                           ; SOURCE LINE # 268
                                           ; SOURCE LINE # 269
012C 120000      R     LCALL   L?0199
012F         ?C0020:
                                           ; SOURCE LINE # 271
012F 208F10            JB      TF1,?C0021
                                           ; SOURCE LINE # 272
                                           ; SOURCE LINE # 273
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 32  

0132 120000      R     LCALL   L?0153
0135 E0                MOVX    A,@DPTR
0136 900000      R     MOV     DPTR,#status
0139 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 274
013A E0                MOVX    A,@DPTR
013B 547E              ANL     A,#07EH
013D 60F0              JZ      ?C0020
                                           ; SOURCE LINE # 275
                                           ; SOURCE LINE # 276
                                           ; SOURCE LINE # 277
                                           ; SOURCE LINE # 278
013F 120000      R     LCALL   L?0192
                                           ; SOURCE LINE # 279
                                           ; SOURCE LINE # 280
                                           ; SOURCE LINE # 281
0142         ?C0021:
                                           ; SOURCE LINE # 283
0142 308F0D            JNB     TF1,?C0023
                                           ; SOURCE LINE # 284
                                           ; SOURCE LINE # 285
                                           ; SOURCE LINE # 286
                                           ; SOURCE LINE # 287
0145 120000      R     LCALL   L?0192
                                           ; SOURCE LINE # 288
0148 900000      R     MOV     DPTR,#Channel
014B E0                MOVX    A,@DPTR
014C FF                MOV     R7,A
014D 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 289
                                           ; SOURCE LINE # 290
0150 8016              SJMP    ?C0144
0152         ?C0023:
                                           ; SOURCE LINE # 292
                                           ; SOURCE LINE # 293
0152 900000      R     MOV     DPTR,#status
0155 E0                MOVX    A,@DPTR
0156 FF                MOV     R7,A
0157 547C              ANL     A,#07CH
0159 6015              JZ      ?C0025
                                           ; SOURCE LINE # 294
                                           ; SOURCE LINE # 295
015B EF                MOV     A,R7
015C 5418              ANL     A,#018H
015E 6008              JZ      ?C0026
                                           ; SOURCE LINE # 296
                                           ; SOURCE LINE # 297
0160 900000      R     MOV     DPTR,#Channel
0163 E0                MOVX    A,@DPTR
0164 FF                MOV     R7,A
0165 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 298
0168         ?C0026:
                                           ; SOURCE LINE # 299
0168         ?C0144:
0168 900000      R     MOV     DPTR,#error
016B 74EE              MOV     A,#0EEH
016D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 300
016E 8005              SJMP    ?C0024
0170         ?C0025:
                                           ; SOURCE LINE # 302
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 33  

                                           ; SOURCE LINE # 303
0170 E4                CLR     A
0171 900000      R     MOV     DPTR,#error
0174 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 304
                                           ; SOURCE LINE # 305
0175         ?C0024:
                                           ; SOURCE LINE # 307
0175 900000      R     MOV     DPTR,#error
0178 E0                MOVX    A,@DPTR
0179 B4EE07            CJNE    A,#0EEH,?C0028
                                           ; SOURCE LINE # 308
                                           ; SOURCE LINE # 309
017C E4                CLR     A
017D 900000      R     MOV     DPTR,#resutl
0180 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 310
0181 803F              SJMP    ?C0029
0183         ?C0028:
                                           ; SOURCE LINE # 312
                                           ; SOURCE LINE # 313
0183 900000      R     MOV     DPTR,#Channel
0186 E0                MOVX    A,@DPTR
0187 FF                MOV     R7,A
0188 120000      R     LCALL   L?0183
018B 120000      R     LCALL   L?0161
018E E0                MOVX    A,@DPTR
018F 30E02A            JNB     ACC.0,?C0030
                                           ; SOURCE LINE # 314
                                           ; SOURCE LINE # 315
0192 120000      R     LCALL   L?0194
0195 120000      R     LCALL   L?0156
0198 E0                MOVX    A,@DPTR
0199 FF                MOV     R7,A
019A 900000      R     MOV     DPTR,#Var
019D E0                MOVX    A,@DPTR
019E FC                MOV     R4,A
019F A3                INC     DPTR
01A0 E0                MOVX    A,@DPTR
01A1 FD                MOV     R5,A
01A2 F582              MOV     DPL,A
01A4 8C83              MOV     DPH,R4
01A6 EF                MOV     A,R7
01A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 316
01A8 900000      R     MOV     DPTR,#Protocol
01AB E0                MOVX    A,@DPTR
01AC B40C0D            CJNE    A,#0CH,?C0030
                                           ; SOURCE LINE # 317
                                           ; SOURCE LINE # 318
01AF 120000      R     LCALL   L?0214
01B2 120000      R     LCALL   L?0156
01B5 E0                MOVX    A,@DPTR
01B6 8D82              MOV     DPL,R5
01B8 8C83              MOV     DPH,R4
01BA A3                INC     DPTR
01BB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 319
                                           ; SOURCE LINE # 320
01BC         ?C0030:
                                           ; SOURCE LINE # 321
01BC 900000      R     MOV     DPTR,#resutl
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 34  

01BF 7401              MOV     A,#01H
01C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 322
01C2         ?C0029:
                                           ; SOURCE LINE # 324
01C2 120000      R     LCALL   L?0153
01C5 74FE              MOV     A,#0FEH
01C7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 325
01C8         ?C0010:
                                           ; SOURCE LINE # 327
01C8 900000      R     MOV     DPTR,#resutl
01CB E0                MOVX    A,@DPTR
01CC FF                MOV     R7,A
                                           ; SOURCE LINE # 328
01CD         ?C0032:
01CD 22                RET     
             ; FUNCTION _bRWSMBus (END)

             ; FUNCTION _bRSMBusBlock (BEGIN)
                                           ; SOURCE LINE # 334
0000 900000      R     MOV     DPTR,#Protocol
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EB                MOV     A,R3
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#Channel
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 335
                                           ; SOURCE LINE # 340
000D 7D01              MOV     R5,#01H
000F 120000      R     LCALL   _CheckSMBusInterfaceCanbeUse
0012 EF                MOV     A,R7
0013 7007              JNZ     ?C0033
                                           ; SOURCE LINE # 341
                                           ; SOURCE LINE # 342
0015 900000      R     MOV     DPTR,#ack
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 343
0019 020000      R     LJMP    ?C0034
001C         ?C0033:
                                           ; SOURCE LINE # 345
                                           ; SOURCE LINE # 346
001C E4                CLR     A
001D 900000      R     MOV     DPTR,#ack
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 347
0021 A3                INC     DPTR
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 349
0023 900000      R     MOV     DPTR,#Addr
0026 E0                MOVX    A,@DPTR
0027 900000      R     MOV     DPTR,#Channel
002A 120000      R     LCALL   L?0181
002D 120000      R     LCALL   L?0161
0030 EF                MOV     A,R7
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 350
0032 900000      R     MOV     DPTR,#Comd
0035 120000      R     LCALL   L?0184
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 35  

0038 120000      R     LCALL   L?0161
003B EF                MOV     A,R7
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 351
003D EE                MOV     A,R6
003E 120000      R     LCALL   L?0155
0041 74FE              MOV     A,#0FEH
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 352
0044 900000      R     MOV     DPTR,#Protocol
0047 E0                MOVX    A,@DPTR
0048 4440              ORL     A,#040H
004A FF                MOV     R7,A
004B 120000      R     LCALL   L?0175
004E 120000      R     LCALL   L?0161
0051 EF                MOV     A,R7
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 354
0053 C28E              CLR     TR1
                                           ; SOURCE LINE # 355
0055 C2AB              CLR     ET1
                                           ; SOURCE LINE # 356
0057 00                NOP     
                                           ; SOURCE LINE # 357
0058 00                NOP     
                                           ; SOURCE LINE # 358
0059 00                NOP     
                                           ; SOURCE LINE # 359
005A 00                NOP     
                                           ; SOURCE LINE # 360
                                           ; SOURCE LINE # 361
                                           ; SOURCE LINE # 362
                                           ; SOURCE LINE # 363
005B 120000      R     LCALL   L?0199
005E         ?C0035:
                                           ; SOURCE LINE # 365
005E 308F03            JNB     TF1,$ + 6H
0061 020000      R     LJMP    ?C0036
                                           ; SOURCE LINE # 366
                                           ; SOURCE LINE # 367
0064 900000      R     MOV     DPTR,#Channel
0067 120000      R     LCALL   L?0196
006A 120000      R     LCALL   L?0161
006D E0                MOVX    A,@DPTR
006E FE                MOV     R6,A
;---- Variable 'status' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 368
006F 54FC              ANL     A,#0FCH
0071 60EB              JZ      ?C0035
                                           ; SOURCE LINE # 369
                                           ; SOURCE LINE # 370
0073 EE                MOV     A,R6
0074 547C              ANL     A,#07CH
0076 6013              JZ      ?C0038
                                           ; SOURCE LINE # 371
                                           ; SOURCE LINE # 372
0078 EE                MOV     A,R6
0079 5418              ANL     A,#018H
007B 6003              JZ      ?C0039
                                           ; SOURCE LINE # 373
                                           ; SOURCE LINE # 374
007D 120000      R     LCALL   _ResetSMBus
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 36  

                                           ; SOURCE LINE # 375
0080         ?C0039:
                                           ; SOURCE LINE # 376
                                           ; SOURCE LINE # 377
                                           ; SOURCE LINE # 378
0080 120000      R     LCALL   L?0193
                                           ; SOURCE LINE # 379
0083 E4                CLR     A
0084 900000      R     MOV     DPTR,#ack
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 380
0088 020000      R     LJMP    ?C0036
                                           ; SOURCE LINE # 381
008B         ?C0038:
                                           ; SOURCE LINE # 383
                                           ; SOURCE LINE # 384
008B 900000      R     MOV     DPTR,#Channel
008E E0                MOVX    A,@DPTR
008F FF                MOV     R7,A
0090 120000      R     LCALL   L?0202
0093 120000      R     LCALL   L?0161
0096 E0                MOVX    A,@DPTR
0097 FE                MOV     R6,A
0098 900000      R     MOV     DPTR,#Var
009B E0                MOVX    A,@DPTR
009C FC                MOV     R4,A
009D A3                INC     DPTR
009E E0                MOVX    A,@DPTR
009F F582              MOV     DPL,A
00A1 8C83              MOV     DPH,R4
00A3 EE                MOV     A,R6
00A4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 385
00A5 900000      R     MOV     DPTR,#bcount
00A8 E0                MOVX    A,@DPTR
00A9 7010              JNZ     ?C0041
                                           ; SOURCE LINE # 386
                                           ; SOURCE LINE # 387
00AB 120000      R     LCALL   L?0194
00AE 120000      R     LCALL   L?0156
00B1 E0                MOVX    A,@DPTR
00B2 900000      R     MOV     DPTR,#bcount
00B5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 388
00B6 E0                MOVX    A,@DPTR
00B7 FF                MOV     R7,A
00B8 120000      E     LCALL   _Hook_GetSMBusReadBlockByteCount
                                           ; SOURCE LINE # 390
00BB         ?C0041:
                                           ; SOURCE LINE # 392
00BB 900000      R     MOV     DPTR,#bcount
00BE E0                MOVX    A,@DPTR
00BF 14                DEC     A
00C0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 393
00C1 900000      R     MOV     DPTR,#Var
00C4 E4                CLR     A
00C5 75F001            MOV     B,#01H
00C8 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 395
00CB 900000      R     MOV     DPTR,#bcount
00CE E0                MOVX    A,@DPTR
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 37  

00CF FF                MOV     R7,A
00D0 B4010A            CJNE    A,#01H,?C0042
                                           ; SOURCE LINE # 396
                                           ; SOURCE LINE # 397
00D3 120000      R     LCALL   L?0175
00D6 120000      R     LCALL   L?0161
00D9 E0                MOVX    A,@DPTR
00DA 4420              ORL     A,#020H
00DC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 398
00DD         ?C0042:
                                           ; SOURCE LINE # 400
00DD 900000      R     MOV     DPTR,#Channel
00E0 E0                MOVX    A,@DPTR
00E1 120000      R     LCALL   L?0198
00E4 120000      R     LCALL   L?0161
00E7 74FE              MOV     A,#0FEH
00E9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 402
00EA EF                MOV     A,R7
00EB 6003              JZ      $ + 5H
00ED 020000      R     LJMP    ?C0035
                                           ; SOURCE LINE # 403
                                           ; SOURCE LINE # 404
                                           ; SOURCE LINE # 405
                                           ; SOURCE LINE # 406
00F0 120000      R     LCALL   L?0193
                                           ; SOURCE LINE # 407
00F3 900000      R     MOV     DPTR,#ack
00F6 04                INC     A
00F7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 408
                                           ; SOURCE LINE # 409
                                           ; SOURCE LINE # 410
                                           ; SOURCE LINE # 411
                                           ; SOURCE LINE # 412
00F8         ?C0036:
                                           ; SOURCE LINE # 414
00F8 308F10            JNB     TF1,?C0044
                                           ; SOURCE LINE # 415
                                           ; SOURCE LINE # 416
                                           ; SOURCE LINE # 417
                                           ; SOURCE LINE # 418
00FB 120000      R     LCALL   L?0193
                                           ; SOURCE LINE # 419
00FE 900000      R     MOV     DPTR,#Channel
0101 E0                MOVX    A,@DPTR
0102 FF                MOV     R7,A
0103 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 420
0106 E4                CLR     A
0107 900000      R     MOV     DPTR,#ack
010A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 421
010B         ?C0044:
                                           ; SOURCE LINE # 423
010B 900000      R     MOV     DPTR,#Channel
010E E0                MOVX    A,@DPTR
010F FF                MOV     R7,A
0110 120000      R     LCALL   L?0177
0113 120000      R     LCALL   L?0161
0116 E0                MOVX    A,@DPTR
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 38  

0117 54DF              ANL     A,#0DFH
0119 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 424
011A EF                MOV     A,R7
011B 120000      R     LCALL   L?0155
011E 74FE              MOV     A,#0FEH
0120 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 425
0121         ?C0034:
                                           ; SOURCE LINE # 427
0121 900000      R     MOV     DPTR,#ack
0124 E0                MOVX    A,@DPTR
0125 FF                MOV     R7,A
                                           ; SOURCE LINE # 428
0126         ?C0045:
0126 22                RET     
             ; FUNCTION _bRSMBusBlock (END)

             ; FUNCTION _bWSMBusBlock (BEGIN)
                                           ; SOURCE LINE # 434
0000 900000      R     MOV     DPTR,#Protocol
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EB                MOV     A,R3
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#Channel
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 435
                                           ; SOURCE LINE # 440
000D 7D01              MOV     R5,#01H
000F 120000      R     LCALL   _CheckSMBusInterfaceCanbeUse
0012 EF                MOV     A,R7
0013 7007              JNZ     ?C0046
                                           ; SOURCE LINE # 441
                                           ; SOURCE LINE # 442
0015 900000      R     MOV     DPTR,#ack
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 443
0019 020000      R     LJMP    ?C0047
001C         ?C0046:
                                           ; SOURCE LINE # 445
                                           ; SOURCE LINE # 446
001C E4                CLR     A
001D 900000      R     MOV     DPTR,#ack
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 447
0021 A3                INC     DPTR
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 449
0023 900000      R     MOV     DPTR,#PECsupport
0026 E0                MOVX    A,@DPTR
0027 6023              JZ      ?C0048
                                           ; SOURCE LINE # 450
                                           ; SOURCE LINE # 451
0029 E4                CLR     A
002A 900000      E     MOV     DPTR,#SMBCRC8_A
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 452
002E 900000      R     MOV     DPTR,#Addr
0031 E0                MOVX    A,@DPTR
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 39  

0032 FF                MOV     R7,A
0033 120000      R     LCALL   _CalcCRC8
                                           ; SOURCE LINE # 453
0036 900000      R     MOV     DPTR,#Comd
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B 120000      R     LCALL   _CalcCRC8
                                           ; SOURCE LINE # 454
003E 900000      R     MOV     DPTR,#ByteCont
0041 E0                MOVX    A,@DPTR
0042 FF                MOV     R7,A
0043 120000      R     LCALL   _CalcCRC8
                                           ; SOURCE LINE # 455
0046 120000      R     LCALL   L?0187
0049 120000      R     LCALL   _CalcCRC8
                                           ; SOURCE LINE # 456
004C         ?C0048:
                                           ; SOURCE LINE # 458
004C 900000      R     MOV     DPTR,#Protocol
004F E0                MOVX    A,@DPTR
0050 547F              ANL     A,#07FH
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 459
0053 A3                INC     DPTR
0054 E0                MOVX    A,@DPTR
0055 FF                MOV     R7,A
0056 900000      R     MOV     DPTR,#Channel
0059 120000      R     LCALL   L?0182
005C 120000      R     LCALL   L?0161
005F EF                MOV     A,R7
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 460
0061 900000      R     MOV     DPTR,#Comd
0064 120000      R     LCALL   L?0185
0067 120000      R     LCALL   L?0161
006A EF                MOV     A,R7
006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 461
006C 900000      R     MOV     DPTR,#ByteCont
006F E0                MOVX    A,@DPTR
0070 FF                MOV     R7,A
0071 EE                MOV     A,R6
0072 120000      R     LCALL   L?0195
0075 120000      R     LCALL   L?0161
0078 EF                MOV     A,R7
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 462
007A 900000      R     MOV     DPTR,#BCTemp
007D EF                MOV     A,R7
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 463
007F 120000      R     LCALL   L?0187
0082 900000      R     MOV     DPTR,#Channel
0085 E0                MOVX    A,@DPTR
0086 FE                MOV     R6,A
0087 120000      R     LCALL   L?0202
008A 120000      R     LCALL   L?0161
008D EF                MOV     A,R7
008E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 464
008F EE                MOV     A,R6
0090 120000      R     LCALL   L?0155
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 40  

0093 74FE              MOV     A,#0FEH
0095 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 465
0096 900000      R     MOV     DPTR,#PECsupport
0099 E0                MOVX    A,@DPTR
009A 900000      R     MOV     DPTR,#Protocol
009D 6005              JZ      ?C0049
                                           ; SOURCE LINE # 466
                                           ; SOURCE LINE # 467
009F E0                MOVX    A,@DPTR
00A0 44C0              ORL     A,#0C0H
                                           ; SOURCE LINE # 468
00A2 8003              SJMP    ?C0145
00A4         ?C0049:
                                           ; SOURCE LINE # 470
                                           ; SOURCE LINE # 471
00A4 E0                MOVX    A,@DPTR
00A5 4440              ORL     A,#040H
00A7         ?C0145:
00A7 FF                MOV     R7,A
00A8 900000      R     MOV     DPTR,#Channel
00AB 120000      R     LCALL   L?0176
00AE 120000      R     LCALL   L?0161
00B1 EF                MOV     A,R7
00B2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 472
00B3         ?C0050:
                                           ; SOURCE LINE # 474
00B3 C28E              CLR     TR1
                                           ; SOURCE LINE # 475
00B5 C2AB              CLR     ET1
                                           ; SOURCE LINE # 476
00B7 00                NOP     
                                           ; SOURCE LINE # 477
00B8 00                NOP     
                                           ; SOURCE LINE # 478
00B9 00                NOP     
                                           ; SOURCE LINE # 479
00BA 00                NOP     
                                           ; SOURCE LINE # 480
                                           ; SOURCE LINE # 481
                                           ; SOURCE LINE # 482
                                           ; SOURCE LINE # 483
00BB 120000      R     LCALL   L?0200
00BE         ?C0051:
                                           ; SOURCE LINE # 485
00BE 308F03            JNB     TF1,$ + 6H
00C1 020000      R     LJMP    ?C0052
                                           ; SOURCE LINE # 486
                                           ; SOURCE LINE # 487
00C4 900000      R     MOV     DPTR,#Channel
00C7 120000      R     LCALL   L?0197
00CA 120000      R     LCALL   L?0161
00CD E0                MOVX    A,@DPTR
00CE FE                MOV     R6,A
;---- Variable 'status' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 488
00CF 54FC              ANL     A,#0FCH
00D1 60EB              JZ      ?C0051
                                           ; SOURCE LINE # 489
                                           ; SOURCE LINE # 490
00D3 EE                MOV     A,R6
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 41  

00D4 547C              ANL     A,#07CH
00D6 6013              JZ      ?C0054
                                           ; SOURCE LINE # 491
                                           ; SOURCE LINE # 492
00D8 EE                MOV     A,R6
00D9 5418              ANL     A,#018H
00DB 6003              JZ      ?C0055
                                           ; SOURCE LINE # 493
                                           ; SOURCE LINE # 494
00DD 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 495
00E0         ?C0055:
                                           ; SOURCE LINE # 496
                                           ; SOURCE LINE # 497
                                           ; SOURCE LINE # 498
00E0 120000      R     LCALL   L?0193
                                           ; SOURCE LINE # 499
00E3 E4                CLR     A
00E4 900000      R     MOV     DPTR,#ack
00E7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 500
00E8 020000      R     LJMP    ?C0052
                                           ; SOURCE LINE # 501
00EB         ?C0054:
                                           ; SOURCE LINE # 503
                                           ; SOURCE LINE # 504
00EB 900000      R     MOV     DPTR,#BCTemp
00EE E0                MOVX    A,@DPTR
00EF 14                DEC     A
00F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 505
00F1 900000      R     MOV     DPTR,#Var
00F4 E4                CLR     A
00F5 75F001            MOV     B,#01H
00F8 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 507
00FB 900000      R     MOV     DPTR,#BCTemp
00FE E0                MOVX    A,@DPTR
00FF 604B              JZ      ?C0057
                                           ; SOURCE LINE # 508
                                           ; SOURCE LINE # 509
0101 900000      R     MOV     DPTR,#PECsupport
0104 E0                MOVX    A,@DPTR
0105 602E              JZ      ?C0058
                                           ; SOURCE LINE # 510
                                           ; SOURCE LINE # 511
0107 900000      R     MOV     DPTR,#Var
010A 120000      R     LCALL   L?0216
010D FD                MOV     R5,A
010E 120000      R     LCALL   L?0201
0111 120000      R     LCALL   L?0174
0114 ED                MOV     A,R5
0115 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 512
0116 8F82              MOV     DPL,R7
0118 8E83              MOV     DPH,R6
011A E0                MOVX    A,@DPTR
011B FF                MOV     R7,A
011C 120000      R     LCALL   _CalcCRC8
                                           ; SOURCE LINE # 513
011F 900000      R     MOV     DPTR,#BCTemp
0122 E0                MOVX    A,@DPTR
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 42  

0123 6401              XRL     A,#01H
0125 7019              JNZ     ?C0060
                                           ; SOURCE LINE # 514
                                           ; SOURCE LINE # 515
0127 900000      E     MOV     DPTR,#SMBCRC8_A
012A E0                MOVX    A,@DPTR
012B FF                MOV     R7,A
012C 900000      R     MOV     DPTR,#Channel
012F E0                MOVX    A,@DPTR
0130 120000      R     LCALL   L?0222
                                           ; SOURCE LINE # 516
                                           ; SOURCE LINE # 517
0133 8006              SJMP    ?C0146
0135         ?C0058:
                                           ; SOURCE LINE # 519
                                           ; SOURCE LINE # 520
0135 120000      R     LCALL   L?0188
0138 120000      R     LCALL   L?0201
013B         ?C0146:
013B 120000      R     LCALL   L?0161
013E EF                MOV     A,R7
013F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 521
0140         ?C0060:
                                           ; SOURCE LINE # 522
0140 900000      R     MOV     DPTR,#Channel
0143 120000      R     LCALL   L?0154
0146 74FE              MOV     A,#0FEH
0148 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 523
0149 020000      R     LJMP    ?C0051
014C         ?C0057:
                                           ; SOURCE LINE # 525
                                           ; SOURCE LINE # 526
                                           ; SOURCE LINE # 527
                                           ; SOURCE LINE # 528
014C 120000      R     LCALL   L?0193
                                           ; SOURCE LINE # 529
014F 900000      R     MOV     DPTR,#ack
0152 7401              MOV     A,#01H
0154 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 530
                                           ; SOURCE LINE # 531
                                           ; SOURCE LINE # 532
                                           ; SOURCE LINE # 533
                                           ; SOURCE LINE # 534
0155         ?C0052:
                                           ; SOURCE LINE # 536
0155 308F10            JNB     TF1,?C0062
                                           ; SOURCE LINE # 537
                                           ; SOURCE LINE # 538
                                           ; SOURCE LINE # 539
                                           ; SOURCE LINE # 540
0158 120000      R     LCALL   L?0193
                                           ; SOURCE LINE # 541
015B 900000      R     MOV     DPTR,#Channel
015E E0                MOVX    A,@DPTR
015F FF                MOV     R7,A
0160 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 542
0163 E4                CLR     A
0164 900000      R     MOV     DPTR,#ack
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 43  

0167 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 543
0168         ?C0062:
                                           ; SOURCE LINE # 545
0168 900000      R     MOV     DPTR,#Channel
016B 120000      R     LCALL   L?0154
016E 74FE              MOV     A,#0FEH
0170 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 546
0171         ?C0047:
                                           ; SOURCE LINE # 548
0171 900000      R     MOV     DPTR,#ack
0174 E0                MOVX    A,@DPTR
0175 FF                MOV     R7,A
                                           ; SOURCE LINE # 549
0176         ?C0063:
0176 22                RET     
             ; FUNCTION _bWSMBusBlock (END)

             ; FUNCTION _CalcCRC8 (BEGIN)
                                           ; SOURCE LINE # 554
;---- Variable 'sourcebyte' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 555
                                           ; SOURCE LINE # 557
0000 900000      E     MOV     DPTR,#SMBCRC8_A
0003 E0                MOVX    A,@DPTR
0004 6F                XRL     A,R7
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 558
0006 E0                MOVX    A,@DPTR
;---- Variable 'temp' assigned to Register 'R5' ----
0007 FD                MOV     R5,A
                                           ; SOURCE LINE # 560
0008 20E70C            JB      ACC.7,?C0064
                                           ; SOURCE LINE # 561
                                           ; SOURCE LINE # 562
000B FF                MOV     R7,A
000C 25E0              ADD     A,ACC
000E FD                MOV     R5,A
                                           ; SOURCE LINE # 563
000F E0                MOVX    A,@DPTR
0010 CF                XCH     A,R7
0011 ED                MOV     A,R5
0012 CF                XCH     A,R7
0013 6D                XRL     A,R5
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 564
0015 8009              SJMP    ?C0065
0017         ?C0064:
                                           ; SOURCE LINE # 566
                                           ; SOURCE LINE # 567
                                           ; SOURCE LINE # 568
0017 120000      R     LCALL   L?0219
001A 6409              XRL     A,#09H
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 569
001D E0                MOVX    A,@DPTR
001E 6D                XRL     A,R5
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 570
0020         ?C0065:
                                           ; SOURCE LINE # 572
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 44  

0020 ED                MOV     A,R5
0021 20E706            JB      ACC.7,?C0066
                                           ; SOURCE LINE # 573
                                           ; SOURCE LINE # 574
                                           ; SOURCE LINE # 575
0024 120000      R     LCALL   L?0220
0027 6D                XRL     A,R5
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 576
0029 22                RET     
002A         ?C0066:
                                           ; SOURCE LINE # 578
                                           ; SOURCE LINE # 579
                                           ; SOURCE LINE # 580
002A 120000      R     LCALL   L?0219
002D 6407              XRL     A,#07H
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 581
0030 E0                MOVX    A,@DPTR
0031 CE                XCH     A,R6
0032 ED                MOV     A,R5
0033 CE                XCH     A,R6
0034 6E                XRL     A,R6
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 582
                                           ; SOURCE LINE # 583
0036         ?C0068:
0036 22                RET     
             ; FUNCTION _CalcCRC8 (END)

             ; FUNCTION _CheckSMBusFree (BEGIN)
                                           ; SOURCE LINE # 588
;---- Variable 'channel' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 589
                                           ; SOURCE LINE # 592
0000 EF                MOV     A,R7
0001 120000      R     LCALL   L?0212
0004 120000      R     LCALL   L?0156
0007 E0                MOVX    A,@DPTR
;---- Variable 'pinstatus' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 594
0008 5403              ANL     A,#03H
000A FE                MOV     R6,A
000B BE0303            CJNE    R6,#03H,?C0069
                                           ; SOURCE LINE # 595
                                           ; SOURCE LINE # 596
000E 7F00              MOV     R7,#00H
0010 22                RET     
                                           ; SOURCE LINE # 597
0011         ?C0069:
                                           ; SOURCE LINE # 599
                                           ; SOURCE LINE # 600
0011 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 601
                                           ; SOURCE LINE # 602
0013         ?C0070:
0013 22                RET     
             ; FUNCTION _CheckSMBusFree (END)

             ; FUNCTION _CheckSMBusInterfaceCanbeUse (BEGIN)
                                           ; SOURCE LINE # 607
0000 900000      R     MOV     DPTR,#accesstype
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 45  

0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
;---- Variable 'channel' assigned to Register 'R4' ----
0005 CC                XCH     A,R4
0006 EF                MOV     A,R7
0007 CC                XCH     A,R4
                                           ; SOURCE LINE # 608
                                           ; SOURCE LINE # 611
;---- Variable 'checksmbus' assigned to Register 'R5' ----
0008 7D01              MOV     R5,#01H
                                           ; SOURCE LINE # 613
                                           ; SOURCE LINE # 614
                                           ; SOURCE LINE # 618
000A         ?C0072:
                                           ; SOURCE LINE # 620
000A CF                XCH     A,R7
000B EC                MOV     A,R4
000C CF                XCH     A,R7
000D 120000      R     LCALL   _CheckSMBusFree
0010 EF                MOV     A,R7
0011 6401              XRL     A,#01H
0013 701D              JNZ     ?C0073
                                           ; SOURCE LINE # 621
                                           ; SOURCE LINE # 622
0015 FD                MOV     R5,A
                                           ; SOURCE LINE # 623
0016 120000      R     LCALL   L?0221
0019 120000      R     LCALL   L?0156
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E 04                INC     A
001F F0                MOVX    @DPTR,A
0020 900000      E     MOV     DPTR,#SMBus_BusyRecover
0023 E0                MOVX    A,@DPTR
0024 FE                MOV     R6,A
0025 EF                MOV     A,R7
0026 D3                SETB    C
0027 9E                SUBB    A,R6
0028 4012              JC      ?C0075
                                           ; SOURCE LINE # 624
                                           ; SOURCE LINE # 625
002A CF                XCH     A,R7
002B EC                MOV     A,R4
002C CF                XCH     A,R7
002D 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 626
                                           ; SOURCE LINE # 627
0030 800A              SJMP    ?C0075
0032         ?C0073:
                                           ; SOURCE LINE # 629
                                           ; SOURCE LINE # 630
0032 120000      R     LCALL   L?0221
0035 120000      R     LCALL   L?0156
0038 E4                CLR     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 631
003A 7D01              MOV     R5,#01H
                                           ; SOURCE LINE # 632
003C         ?C0075:
                                           ; SOURCE LINE # 635
003C CF                XCH     A,R7
003D ED                MOV     A,R5
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 46  

003E CF                XCH     A,R7
                                           ; SOURCE LINE # 636
003F         ?C0076:
003F 22                RET     
             ; FUNCTION _CheckSMBusInterfaceCanbeUse (END)

             ; FUNCTION _bSMBusSendByte (BEGIN)
                                           ; SOURCE LINE # 641
;---- Variable 'result' assigned to Register 'R1' ----
0000 900000      R     MOV     DPTR,#Addr
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EB                MOV     A,R3
0007 F0                MOVX    @DPTR,A
;---- Variable 'Channel' assigned to Register 'R2' ----
0008 CA                XCH     A,R2
0009 EF                MOV     A,R7
000A CA                XCH     A,R2
                                           ; SOURCE LINE # 642
                                           ; SOURCE LINE # 647
000B 7D01              MOV     R5,#01H
000D 120000      R     LCALL   _CheckSMBusInterfaceCanbeUse
0010 EF                MOV     A,R7
0011 7004              JNZ     ?C0077
                                           ; SOURCE LINE # 648
                                           ; SOURCE LINE # 649
0013 F9                MOV     R1,A
                                           ; SOURCE LINE # 650
0014 020000      R     LJMP    ?C0078
0017         ?C0077:
                                           ; SOURCE LINE # 652
                                           ; SOURCE LINE # 653
;---- Variable 'error' assigned to Register 'R5' ----
0017 7DEE              MOV     R5,#0EEH
                                           ; SOURCE LINE # 654
0019 E4                CLR     A
001A F9                MOV     R1,A
                                           ; SOURCE LINE # 656
001B 900000      R     MOV     DPTR,#Addr
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EA                MOV     A,R2
0021 120000      R     LCALL   L?0183
0024 120000      R     LCALL   L?0207
0027 EF                MOV     A,R7
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 657
0029 900000      R     MOV     DPTR,#SData
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E EA                MOV     A,R2
002F 120000      R     LCALL   L?0186
0032 120000      R     LCALL   L?0207
0035 EF                MOV     A,R7
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 658
0037 EA                MOV     A,R2
0038 120000      R     LCALL   L?0155
003B 74FE              MOV     A,#0FEH
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 659
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 47  

003E EA                MOV     A,R2
003F 120000      R     LCALL   L?0177
0042 120000      R     LCALL   L?0156
0045 7444              MOV     A,#044H
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 661
0048 C28E              CLR     TR1
                                           ; SOURCE LINE # 662
004A C2AB              CLR     ET1
                                           ; SOURCE LINE # 663
004C 00                NOP     
                                           ; SOURCE LINE # 664
004D 00                NOP     
                                           ; SOURCE LINE # 665
004E 00                NOP     
                                           ; SOURCE LINE # 666
004F 00                NOP     
                                           ; SOURCE LINE # 667
                                           ; SOURCE LINE # 668
                                           ; SOURCE LINE # 669
                                           ; SOURCE LINE # 670
0050 120000      R     LCALL   L?0200
0053         ?C0079:
                                           ; SOURCE LINE # 672
0053 208F11            JB      TF1,?C0080
                                           ; SOURCE LINE # 673
                                           ; SOURCE LINE # 674
0056 EA                MOV     A,R2
0057 120000      R     LCALL   L?0155
005A E0                MOVX    A,@DPTR
005B 900000      R     MOV     DPTR,#status
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 675
005F E0                MOVX    A,@DPTR
0060 547E              ANL     A,#07EH
0062 60EF              JZ      ?C0079
                                           ; SOURCE LINE # 676
                                           ; SOURCE LINE # 677
                                           ; SOURCE LINE # 678
                                           ; SOURCE LINE # 679
0064 120000      R     LCALL   L?0193
                                           ; SOURCE LINE # 680
                                           ; SOURCE LINE # 681
                                           ; SOURCE LINE # 682
0067         ?C0080:
                                           ; SOURCE LINE # 684
0067 308F0D            JNB     TF1,?C0082
                                           ; SOURCE LINE # 685
                                           ; SOURCE LINE # 686
                                           ; SOURCE LINE # 687
                                           ; SOURCE LINE # 688
006A 120000      R     LCALL   L?0193
                                           ; SOURCE LINE # 689
006D CF                XCH     A,R7
006E EA                MOV     A,R2
006F CF                XCH     A,R7
0070 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 690
0073 7DEE              MOV     R5,#0EEH
                                           ; SOURCE LINE # 691
0075 801A              SJMP    ?C0083
0077         ?C0082:
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 48  

                                           ; SOURCE LINE # 693
                                           ; SOURCE LINE # 694
0077 900000      R     MOV     DPTR,#status
007A E0                MOVX    A,@DPTR
007B FF                MOV     R7,A
007C 547C              ANL     A,#07CH
007E 600F              JZ      ?C0084
                                           ; SOURCE LINE # 695
                                           ; SOURCE LINE # 696
0080 EF                MOV     A,R7
0081 5418              ANL     A,#018H
0083 6006              JZ      ?C0085
                                           ; SOURCE LINE # 697
                                           ; SOURCE LINE # 698
0085 CF                XCH     A,R7
0086 EA                MOV     A,R2
0087 CF                XCH     A,R7
0088 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 699
008B         ?C0085:
                                           ; SOURCE LINE # 700
008B 7DEE              MOV     R5,#0EEH
                                           ; SOURCE LINE # 701
008D 8002              SJMP    ?C0083
008F         ?C0084:
                                           ; SOURCE LINE # 703
                                           ; SOURCE LINE # 704
008F E4                CLR     A
0090 FD                MOV     R5,A
                                           ; SOURCE LINE # 705
                                           ; SOURCE LINE # 706
0091         ?C0083:
                                           ; SOURCE LINE # 708
0091 ED                MOV     A,R5
0092 B4EE04            CJNE    A,#0EEH,?C0087
                                           ; SOURCE LINE # 709
                                           ; SOURCE LINE # 710
0095 E4                CLR     A
0096 F9                MOV     R1,A
                                           ; SOURCE LINE # 711
0097 8002              SJMP    ?C0088
0099         ?C0087:
                                           ; SOURCE LINE # 713
                                           ; SOURCE LINE # 714
0099 7901              MOV     R1,#01H
                                           ; SOURCE LINE # 715
009B         ?C0088:
                                           ; SOURCE LINE # 716
009B EA                MOV     A,R2
009C 120000      R     LCALL   L?0155
009F 74FE              MOV     A,#0FEH
00A1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 717
00A2         ?C0078:
                                           ; SOURCE LINE # 719
00A2 CF                XCH     A,R7
00A3 E9                MOV     A,R1
00A4 CF                XCH     A,R7
                                           ; SOURCE LINE # 720
00A5         ?C0089:
00A5 22                RET     
             ; FUNCTION _bSMBusSendByte (END)
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 49  


             ; FUNCTION _bSMBusReceiveByte (BEGIN)
                                           ; SOURCE LINE # 726
0000 900000      R     MOV     DPTR,#Addr
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EB                MOV     A,R3
000A F0                MOVX    @DPTR,A
;---- Variable 'Channel' assigned to Register 'R1' ----
000B C9                XCH     A,R1
000C EF                MOV     A,R7
000D C9                XCH     A,R1
                                           ; SOURCE LINE # 727
                                           ; SOURCE LINE # 732
000E 7D01              MOV     R5,#01H
0010 120000      R     LCALL   _CheckSMBusInterfaceCanbeUse
0013 EF                MOV     A,R7
0014 7007              JNZ     ?C0090
                                           ; SOURCE LINE # 733
                                           ; SOURCE LINE # 734
0016 900000      R     MOV     DPTR,#result
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 735
001A 020000      R     LJMP    ?C0091
001D         ?C0090:
                                           ; SOURCE LINE # 737
                                           ; SOURCE LINE # 738
;---- Variable 'error' assigned to Register 'R5' ----
001D 7DEE              MOV     R5,#0EEH
                                           ; SOURCE LINE # 739
001F E4                CLR     A
0020 900000      R     MOV     DPTR,#result
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 741
0024 900000      R     MOV     DPTR,#Addr
0027 E0                MOVX    A,@DPTR
0028 4401              ORL     A,#01H
002A FF                MOV     R7,A
002B E9                MOV     A,R1
002C 120000      R     LCALL   L?0183
002F 120000      R     LCALL   L?0174
0032 EF                MOV     A,R7
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 742
0034 E9                MOV     A,R1
0035 120000      R     LCALL   L?0155
0038 74FE              MOV     A,#0FEH
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 743
003B E9                MOV     A,R1
003C 120000      R     LCALL   L?0177
003F 120000      R     LCALL   L?0156
0042 7444              MOV     A,#044H
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 745
0045 C28E              CLR     TR1
                                           ; SOURCE LINE # 746
0047 C2AB              CLR     ET1
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 50  

                                           ; SOURCE LINE # 747
0049 00                NOP     
                                           ; SOURCE LINE # 748
004A 00                NOP     
                                           ; SOURCE LINE # 749
004B 00                NOP     
                                           ; SOURCE LINE # 750
004C 00                NOP     
                                           ; SOURCE LINE # 751
                                           ; SOURCE LINE # 752
                                           ; SOURCE LINE # 753
                                           ; SOURCE LINE # 754
004D 120000      R     LCALL   L?0200
0050         ?C0092:
                                           ; SOURCE LINE # 756
0050 208F11            JB      TF1,?C0093
                                           ; SOURCE LINE # 757
                                           ; SOURCE LINE # 758
0053 E9                MOV     A,R1
0054 120000      R     LCALL   L?0155
0057 E0                MOVX    A,@DPTR
0058 900000      R     MOV     DPTR,#status
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 759
005C E0                MOVX    A,@DPTR
005D 547E              ANL     A,#07EH
005F 60EF              JZ      ?C0092
                                           ; SOURCE LINE # 760
                                           ; SOURCE LINE # 761
                                           ; SOURCE LINE # 762
                                           ; SOURCE LINE # 763
0061 120000      R     LCALL   L?0193
                                           ; SOURCE LINE # 764
                                           ; SOURCE LINE # 765
                                           ; SOURCE LINE # 766
0064         ?C0093:
                                           ; SOURCE LINE # 768
0064 308F0D            JNB     TF1,?C0095
                                           ; SOURCE LINE # 769
                                           ; SOURCE LINE # 770
                                           ; SOURCE LINE # 771
                                           ; SOURCE LINE # 772
0067 120000      R     LCALL   L?0193
                                           ; SOURCE LINE # 773
006A CF                XCH     A,R7
006B E9                MOV     A,R1
006C CF                XCH     A,R7
006D 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 774
0070 7DEE              MOV     R5,#0EEH
                                           ; SOURCE LINE # 775
0072 801A              SJMP    ?C0096
0074         ?C0095:
                                           ; SOURCE LINE # 777
                                           ; SOURCE LINE # 778
0074 900000      R     MOV     DPTR,#status
0077 E0                MOVX    A,@DPTR
0078 FF                MOV     R7,A
0079 547C              ANL     A,#07CH
007B 600F              JZ      ?C0097
                                           ; SOURCE LINE # 779
                                           ; SOURCE LINE # 780
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 51  

007D EF                MOV     A,R7
007E 5418              ANL     A,#018H
0080 6006              JZ      ?C0098
                                           ; SOURCE LINE # 781
                                           ; SOURCE LINE # 782
0082 CF                XCH     A,R7
0083 E9                MOV     A,R1
0084 CF                XCH     A,R7
0085 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 783
0088         ?C0098:
                                           ; SOURCE LINE # 784
0088 7DEE              MOV     R5,#0EEH
                                           ; SOURCE LINE # 785
008A 8002              SJMP    ?C0096
008C         ?C0097:
                                           ; SOURCE LINE # 787
                                           ; SOURCE LINE # 788
008C E4                CLR     A
008D FD                MOV     R5,A
                                           ; SOURCE LINE # 789
                                           ; SOURCE LINE # 790
008E         ?C0096:
                                           ; SOURCE LINE # 792
008E ED                MOV     A,R5
008F B4EE07            CJNE    A,#0EEH,?C0100
                                           ; SOURCE LINE # 793
                                           ; SOURCE LINE # 794
0092 E4                CLR     A
0093 900000      R     MOV     DPTR,#result
0096 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 795
0097 801C              SJMP    ?C0101
0099         ?C0100:
                                           ; SOURCE LINE # 797
                                           ; SOURCE LINE # 798
0099 E9                MOV     A,R1
009A 120000      R     LCALL   L?0195
009D 120000      R     LCALL   L?0156
00A0 E0                MOVX    A,@DPTR
00A1 FF                MOV     R7,A
00A2 900000      R     MOV     DPTR,#Var
00A5 E0                MOVX    A,@DPTR
00A6 FC                MOV     R4,A
00A7 A3                INC     DPTR
00A8 E0                MOVX    A,@DPTR
00A9 F582              MOV     DPL,A
00AB 8C83              MOV     DPH,R4
00AD EF                MOV     A,R7
00AE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 799
00AF 900000      R     MOV     DPTR,#result
00B2 7401              MOV     A,#01H
00B4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 800
00B5         ?C0101:
                                           ; SOURCE LINE # 801
00B5 E9                MOV     A,R1
00B6 120000      R     LCALL   L?0155
00B9 74FE              MOV     A,#0FEH
00BB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 802
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 52  

00BC         ?C0091:
                                           ; SOURCE LINE # 804
00BC 900000      R     MOV     DPTR,#result
00BF E0                MOVX    A,@DPTR
00C0 FF                MOV     R7,A
                                           ; SOURCE LINE # 805
00C1         ?C0102:
00C1 22                RET     
             ; FUNCTION _bSMBusReceiveByte (END)

             ; FUNCTION Core_Init_SMBus (BEGIN)
                                           ; SOURCE LINE # 811
                                           ; SOURCE LINE # 812
                                           ; SOURCE LINE # 813
0000 900000      E     MOV     DPTR,#SMBus_BusyRecover
0003 7414              MOV     A,#014H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 814
0006 22                RET     
             ; FUNCTION Core_Init_SMBus (END)

             ; FUNCTION _bI2cMasterRead (BEGIN)
                                           ; SOURCE LINE # 837
0000 900000      R     MOV     DPTR,#bChannel
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#bDataLength
0008 EB                MOV     A,R3
0009 F0                MOVX    @DPTR,A
;---- Variable 'bSlaveAddress' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 838
                                           ; SOURCE LINE # 841
000A 900000      R     MOV     DPTR,#bFinishFlag
000D 7401              MOV     A,#01H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 842
0010 E4                CLR     A
0011 900000      R     MOV     DPTR,#bIndex
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 843
0015 900000      R     MOV     DPTR,#bChannel
0018 120000      R     LCALL   L?0171
001B 120000      R     LCALL   L?0174
001E 7403              MOV     A,#03H
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 844
0021 ED                MOV     A,R5
0022 4401              ORL     A,#01H
0024 120000      R     LCALL   L?0209
0027 120000      R     LCALL   L?0161
002A EE                MOV     A,R6
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 845
002C 900000      R     MOV     DPTR,#bChannel
002F 120000      R     LCALL   L?0159
0032 E0                MOVX    A,@DPTR
0033 44FE              ORL     A,#0FEH
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 847
0036 900000      R     MOV     DPTR,#bDataLength
0039 E0                MOVX    A,@DPTR
003A B4010B            CJNE    A,#01H,?C0104
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 53  

                                           ; SOURCE LINE # 848
003D 120000      R     LCALL   L?0164
0040 120000      R     LCALL   L?0156
0043 747C              MOV     A,#07CH
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 850
0046 800D              SJMP    ?C0108
0048         ?C0104:
                                           ; SOURCE LINE # 852
                                           ; SOURCE LINE # 853
0048 900000      R     MOV     DPTR,#bChannel
004B E0                MOVX    A,@DPTR
004C 120000      R     LCALL   L?0165
004F 120000      R     LCALL   L?0156
0052 745C              MOV     A,#05CH
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 854
0055         ?C0108:
                                           ; SOURCE LINE # 857
                                           ; SOURCE LINE # 860
0055 7F19              MOV     R7,#019H
0057 7EB2              MOV     R6,#0B2H
0059 120000      E     LCALL   _Set_T1_Timeout
005C         ?C0109:
                                           ; SOURCE LINE # 862
005C 900000      R     MOV     DPTR,#bChannel
005F 120000      R     LCALL   L?0167
0062 54FE              ANL     A,#0FEH
0064 7013              JNZ     ?C0110
                                           ; SOURCE LINE # 863
                                           ; SOURCE LINE # 864
0066 308FF3            JNB     TF1,?C0109
                                           ; SOURCE LINE # 865
                                           ; SOURCE LINE # 866
0069 900000      R     MOV     DPTR,#bFinishFlag
                                           ; SOURCE LINE # 870
006C 120000      R     LCALL   L?0163
006F 120000      R     LCALL   L?0156
                                           ; SOURCE LINE # 871
0072 120000      R     LCALL   L?0205
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 874
0076 020000      R     LJMP    ?C0147
                                           ; SOURCE LINE # 875
                                           ; SOURCE LINE # 876
0079         ?C0110:
                                           ; SOURCE LINE # 878
0079 900000      R     MOV     DPTR,#bDataLength
007C E0                MOVX    A,@DPTR
007D 14                DEC     A
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 879
007F 900000      R     MOV     DPTR,#bChannel
0082 120000      R     LCALL   L?0159
0085 E0                MOVX    A,@DPTR
0086 547C              ANL     A,#07CH
0088 602A              JZ      ?C0113
                                           ; SOURCE LINE # 880
008A 120000      R     LCALL   L?0164
008D 120000      R     LCALL   L?0161
0090 E0                MOVX    A,@DPTR
0091 4402              ORL     A,#02H
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 54  

0093 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 881
0094 00                NOP     
                                           ; SOURCE LINE # 882
0095 E0                MOVX    A,@DPTR
0096 54FD              ANL     A,#0FDH
0098 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 885
0099 120000      R     LCALL   L?0164
009C 120000      R     LCALL   L?0156
009F E0                MOVX    A,@DPTR
00A0 4402              ORL     A,#02H
00A2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 886
00A3 120000      R     LCALL   L?0178
00A6 120000      R     LCALL   L?0156
00A9 74FE              MOV     A,#0FEH
00AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 889
00AC E4                CLR     A
00AD 900000      R     MOV     DPTR,#bFinishFlag
00B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 890
00B1 020000      R     LJMP    ?C0107
                                           ; SOURCE LINE # 891
00B4         ?C0113:
                                           ; SOURCE LINE # 893
00B4 900000      R     MOV     DPTR,#bChannel
00B7 120000      R     LCALL   L?0190
00BA 120000      R     LCALL   L?0161
00BD E0                MOVX    A,@DPTR
00BE FE                MOV     R6,A
00BF 900000      R     MOV     DPTR,#bIndex
00C2 E0                MOVX    A,@DPTR
00C3 900000      R     MOV     DPTR,#Var
00C6 120000      R     LCALL   L?0215
                                           ; SOURCE LINE # 894
00C9 900000      R     MOV     DPTR,#bIndex
00CC E0                MOVX    A,@DPTR
00CD 04                INC     A
00CE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 896
00CF 900000      R     MOV     DPTR,#bDataLength
00D2 E0                MOVX    A,@DPTR
00D3 FE                MOV     R6,A
00D4 B4010C            CJNE    A,#01H,?C0114
                                           ; SOURCE LINE # 897
00D7 120000      R     LCALL   L?0164
00DA 120000      R     LCALL   L?0161
00DD E0                MOVX    A,@DPTR
00DE 4420              ORL     A,#020H
00E0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 898
00E1 8011              SJMP    ?C0115
00E3         ?C0114:
                                           ; SOURCE LINE # 899
00E3 EE                MOV     A,R6
00E4 700E              JNZ     ?C0115
                                           ; SOURCE LINE # 900
00E6 900000      R     MOV     DPTR,#bChannel
00E9 E0                MOVX    A,@DPTR
00EA 120000      R     LCALL   L?0172
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 55  

00ED 120000      R     LCALL   L?0156
00F0 E0                MOVX    A,@DPTR
00F1 54FD              ANL     A,#0FDH
00F3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 901
00F4         ?C0115:
                                           ; SOURCE LINE # 902
00F4 120000      R     LCALL   L?0178
00F7 120000      R     LCALL   L?0156
00FA E0                MOVX    A,@DPTR
00FB 4480              ORL     A,#080H
00FD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 903
00FE 900000      R     MOV     DPTR,#bDataLength
0101 E0                MOVX    A,@DPTR
0102 6003              JZ      $ + 5H
0104 020000      R     LJMP    ?C0108
0107         ?C0107:
                                           ; SOURCE LINE # 905
0107         ?C0147:
0107 900000      R     MOV     DPTR,#bFinishFlag
010A E0                MOVX    A,@DPTR
010B FF                MOV     R7,A
                                           ; SOURCE LINE # 906
010C         ?C0112:
010C 22                RET     
             ; FUNCTION _bI2cMasterRead (END)

             ; FUNCTION _bI2cMasterWrite (BEGIN)
                                           ; SOURCE LINE # 916
0000 900000      R     MOV     DPTR,#bChannel
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#bDataLength
0008 EB                MOV     A,R3
0009 F0                MOVX    @DPTR,A
;---- Variable 'bSlaveAddress' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 917
                                           ; SOURCE LINE # 920
000A 900000      R     MOV     DPTR,#bFinishFlag
000D 7401              MOV     A,#01H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 921
0010 E4                CLR     A
0011 900000      R     MOV     DPTR,#bIndex
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 923
0015 900000      R     MOV     DPTR,#bChannel
0018 120000      R     LCALL   L?0171
001B 120000      R     LCALL   L?0174
001E 7403              MOV     A,#03H
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 924
0021 EF                MOV     A,R7
0022 120000      R     LCALL   L?0180
0025 F583              MOV     DPH,A
0027 E4                CLR     A
0028 93                MOVC    A,@A+DPTR
0029 FE                MOV     R6,A
002A 7401              MOV     A,#01H
002C 93                MOVC    A,@A+DPTR
002D 120000      R     LCALL   L?0217
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 56  

0030 44FE              ORL     A,#0FEH
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 926
0033 ED                MOV     A,R5
0034 54FE              ANL     A,#0FEH
0036 FD                MOV     R5,A
0037 900000      R     MOV     DPTR,#bChannel
003A E0                MOVX    A,@DPTR
003B F9                MOV     R1,A
003C 120000      R     LCALL   L?0210
003F 120000      R     LCALL   L?0174
0042 ED                MOV     A,R5
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 927
0044 8F82              MOV     DPL,R7
0046 8E83              MOV     DPH,R6
0048 E0                MOVX    A,@DPTR
0049 44FE              ORL     A,#0FEH
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 928
004C 900000      R     MOV     DPTR,#Var
004F 120000      R     LCALL   L?0189
0052 E9                MOV     A,R1
0053 120000      R     LCALL   L?0191
0056 120000      R     LCALL   L?0161
0059 EF                MOV     A,R7
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 929
005B E9                MOV     A,R1
005C 120000      R     LCALL   L?0165
005F 120000      R     LCALL   L?0156
0062 745C              MOV     A,#05CH
0064 F0                MOVX    @DPTR,A
0065         ?C0119:
                                           ; SOURCE LINE # 931
                                           ; SOURCE LINE # 933
0065 7F19              MOV     R7,#019H
0067 7EB2              MOV     R6,#0B2H
0069 120000      E     LCALL   _Set_T1_Timeout
006C         ?C0120:
                                           ; SOURCE LINE # 935
006C 120000      R     LCALL   L?0166
006F 54FE              ANL     A,#0FEH
0071 700F              JNZ     ?C0121
                                           ; SOURCE LINE # 936
                                           ; SOURCE LINE # 938
0073 308FF6            JNB     TF1,?C0120
                                           ; SOURCE LINE # 939
                                           ; SOURCE LINE # 940
                                           ; SOURCE LINE # 943
0076 120000      R     LCALL   L?0162
0079 120000      R     LCALL   L?0156
                                           ; SOURCE LINE # 944
007C 120000      R     LCALL   L?0205
                                           ; SOURCE LINE # 947
007F 020000      R     LJMP    ?C0148
                                           ; SOURCE LINE # 948
                                           ; SOURCE LINE # 949
0082         ?C0121:
                                           ; SOURCE LINE # 952
0082 900000      R     MOV     DPTR,#bDataLength
0085 E0                MOVX    A,@DPTR
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 57  

0086 14                DEC     A
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 953
0088 120000      R     LCALL   L?0166
008B 547C              ANL     A,#07CH
008D 600D              JZ      ?C0124
                                           ; SOURCE LINE # 954
008F E4                CLR     A
                                           ; SOURCE LINE # 957
0090 120000      R     LCALL   L?0162
0093 120000      R     LCALL   L?0156
                                           ; SOURCE LINE # 958
0096 120000      R     LCALL   L?0206
0099 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 961
009A 8037              SJMP    ?C0118
                                           ; SOURCE LINE # 962
009C         ?C0124:
                                           ; SOURCE LINE # 963
009C 900000      R     MOV     DPTR,#bDataLength
009F E0                MOVX    A,@DPTR
00A0 FF                MOV     R7,A
00A1 602D              JZ      ?C0117
                                           ; SOURCE LINE # 964
00A3 900000      R     MOV     DPTR,#bIndex
00A6 E0                MOVX    A,@DPTR
00A7 04                INC     A
00A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 965
00A9 E0                MOVX    A,@DPTR
00AA FE                MOV     R6,A
00AB 900000      R     MOV     DPTR,#Var
00AE E0                MOVX    A,@DPTR
00AF FC                MOV     R4,A
00B0 A3                INC     DPTR
00B1 E0                MOVX    A,@DPTR
00B2 2E                ADD     A,R6
00B3 F582              MOV     DPL,A
00B5 E4                CLR     A
00B6 3C                ADDC    A,R4
00B7 F583              MOV     DPH,A
00B9 E0                MOVX    A,@DPTR
00BA FE                MOV     R6,A
00BB 900000      R     MOV     DPTR,#bChannel
00BE E0                MOVX    A,@DPTR
00BF FD                MOV     R5,A
00C0 120000      R     LCALL   L?0191
00C3 120000      R     LCALL   L?0174
00C6 EE                MOV     A,R6
00C7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 966
00C8 ED                MOV     A,R5
00C9 120000      R     LCALL   L?0160
00CC E0                MOVX    A,@DPTR
00CD 4480              ORL     A,#080H
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 967
                                           ; SOURCE LINE # 968
00D0         ?C0117:
                                           ; SOURCE LINE # 969
00D0 EF                MOV     A,R7
00D1 7092              JNZ     ?C0119
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 58  

00D3         ?C0118:
                                           ; SOURCE LINE # 971
00D3 900000      R     MOV     DPTR,#bChannel
00D6 120000      R     LCALL   L?0171
00D9 120000      R     LCALL   L?0161
00DC E0                MOVX    A,@DPTR
00DD 54FD              ANL     A,#0FDH
00DF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 972
00E0 EF                MOV     A,R7
00E1 120000      R     LCALL   L?0180
00E4 120000      R     LCALL   L?0156
00E7 E0                MOVX    A,@DPTR
00E8 4480              ORL     A,#080H
00EA         ?C0148:
00EA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 973
00EB 900000      R     MOV     DPTR,#bFinishFlag
00EE E0                MOVX    A,@DPTR
00EF 24FF              ADD     A,#0FFH
                                           ; SOURCE LINE # 976
00F1         ?C0123:
00F1 22                RET     
             ; FUNCTION _bI2cMasterWrite (END)

             ; FUNCTION _bI2cMasterWriteToRead (BEGIN)
                                           ; SOURCE LINE # 989
0000 900000      R     MOV     DPTR,#bChannel
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
;---- Variable 'Offset' assigned to Register 'R3' ----
;---- Variable 'bSlaveAddress' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 990
                                           ; SOURCE LINE # 993
0005 900000      R     MOV     DPTR,#bFinishFlag
0008 7401              MOV     A,#01H
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 994
000B E4                CLR     A
000C 900000      R     MOV     DPTR,#bIndex
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 995
0010 120000      R     LCALL   L?0169
0013 120000      R     LCALL   L?0208
0016 7403              MOV     A,#03H
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 996
0019 ED                MOV     A,R5
001A 54FE              ANL     A,#0FEH
001C 120000      R     LCALL   L?0209
001F 120000      R     LCALL   L?0161
0022 EE                MOV     A,R6
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 997
0024 120000      R     LCALL   L?0157
0027 E0                MOVX    A,@DPTR
0028 44FE              ORL     A,#0FEH
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1000
002B EF                MOV     A,R7
002C 120000      R     LCALL   L?0191
002F 120000      R     LCALL   L?0161
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 59  

0032 EB                MOV     A,R3
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1001
0034 900000      R     MOV     DPTR,#bChannel
0037 E0                MOVX    A,@DPTR
0038 120000      R     LCALL   L?0165
003B 120000      R     LCALL   L?0156
003E 745C              MOV     A,#05CH
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1002
0041 7F19              MOV     R7,#019H
0043 7EB2              MOV     R6,#0B2H
0045 120000      E     LCALL   _Set_T1_Timeout
0048         ?C0127:
                                           ; SOURCE LINE # 1003
0048 900000      R     MOV     DPTR,#bChannel
004B 120000      R     LCALL   L?0167
004E 54FE              ANL     A,#0FEH
0050 7006              JNZ     ?C0128
                                           ; SOURCE LINE # 1004
                                           ; SOURCE LINE # 1005
0052 308FF3            JNB     TF1,?C0127
                                           ; SOURCE LINE # 1006
                                           ; SOURCE LINE # 1007
                                           ; SOURCE LINE # 1010
                                           ; SOURCE LINE # 1011
                                           ; SOURCE LINE # 1013
0055 020000      R     LJMP    ?C0149
                                           ; SOURCE LINE # 1014
                                           ; SOURCE LINE # 1015
0058         ?C0128:
                                           ; SOURCE LINE # 1016
0058 120000      R     LCALL   L?0157
005B E0                MOVX    A,@DPTR
005C 547C              ANL     A,#07CH
005E 6026              JZ      ?C0131
                                           ; SOURCE LINE # 1017
0060 120000      R     LCALL   L?0164
0063 120000      R     LCALL   L?0161
0066 E0                MOVX    A,@DPTR
0067 4402              ORL     A,#02H
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1018
006A 00                NOP     
                                           ; SOURCE LINE # 1019
006B E0                MOVX    A,@DPTR
006C 54FD              ANL     A,#0FDH
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1020
006F E4                CLR     A
0070 900000      R     MOV     DPTR,#bFinishFlag
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1021
0074 EF                MOV     A,R7
0075 120000      R     LCALL   L?0172
0078 120000      R     LCALL   L?0156
007B E0                MOVX    A,@DPTR
007C 54FD              ANL     A,#0FDH
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1022
007F 900000      R     MOV     DPTR,#bChannel
0082 E0                MOVX    A,@DPTR
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 60  

                                           ; SOURCE LINE # 1023
0083 020000      R     LJMP    ?C0150
                                           ; SOURCE LINE # 1024
0086         ?C0131:
                                           ; SOURCE LINE # 1027
0086 120000      R     LCALL   L?0169
0089 120000      R     LCALL   L?0168
008C 440C              ORL     A,#0CH
008E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1028
008F EF                MOV     A,R7
0090 120000      R     LCALL   L?0180
0093 120000      R     LCALL   L?0156
0096 E0                MOVX    A,@DPTR
0097 4480              ORL     A,#080H
0099 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1029
009A 8D82              MOV     DPL,R5
009C 8C83              MOV     DPH,R4
009E E0                MOVX    A,@DPTR
009F 54FB              ANL     A,#0FBH
00A1 F0                MOVX    @DPTR,A
00A2         ?C0134:
                                           ; SOURCE LINE # 1032
                                           ; SOURCE LINE # 1033
00A2 7F19              MOV     R7,#019H
00A4 7EB2              MOV     R6,#0B2H
00A6 120000      E     LCALL   _Set_T1_Timeout
00A9         ?C0135:
                                           ; SOURCE LINE # 1034
00A9 900000      R     MOV     DPTR,#bChannel
00AC 120000      R     LCALL   L?0167
00AF 54FE              ANL     A,#0FEH
00B1 7012              JNZ     ?C0136
                                           ; SOURCE LINE # 1035
                                           ; SOURCE LINE # 1036
00B3 308FF3            JNB     TF1,?C0135
                                           ; SOURCE LINE # 1037
                                           ; SOURCE LINE # 1038
00B6         ?C0149:
00B6 900000      R     MOV     DPTR,#bFinishFlag
                                           ; SOURCE LINE # 1041
00B9 120000      R     LCALL   L?0163
00BC 120000      R     LCALL   L?0156
                                           ; SOURCE LINE # 1042
00BF 120000      R     LCALL   L?0206
                                           ; SOURCE LINE # 1045
00C2 020000      R     LJMP    ?C0151
                                           ; SOURCE LINE # 1046
                                           ; SOURCE LINE # 1047
00C5         ?C0136:
                                           ; SOURCE LINE # 1048
00C5 900000      R     MOV     DPTR,#bDataLength
00C8 E0                MOVX    A,@DPTR
00C9 14                DEC     A
00CA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1049
00CB 120000      R     LCALL   L?0158
00CE E0                MOVX    A,@DPTR
00CF 547C              ANL     A,#07CH
00D1 602C              JZ      ?C0138
                                           ; SOURCE LINE # 1050
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 61  

00D3 120000      R     LCALL   L?0164
00D6 120000      R     LCALL   L?0161
00D9 E0                MOVX    A,@DPTR
00DA 4402              ORL     A,#02H
00DC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1051
00DD 00                NOP     
                                           ; SOURCE LINE # 1052
00DE E0                MOVX    A,@DPTR
00DF 54FD              ANL     A,#0FDH
00E1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1053
00E2 E4                CLR     A
00E3 900000      R     MOV     DPTR,#bFinishFlag
                                           ; SOURCE LINE # 1056
00E6 120000      R     LCALL   L?0163
00E9 120000      R     LCALL   L?0156
00EC E0                MOVX    A,@DPTR
00ED 4402              ORL     A,#02H
00EF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1057
00F0 900000      R     MOV     DPTR,#bChannel
00F3 120000      R     LCALL   L?0179
00F6 120000      R     LCALL   L?0156
00F9 74FE              MOV     A,#0FEH
00FB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1060
00FC 020000      R     LJMP    ?C0133
                                           ; SOURCE LINE # 1061
00FF         ?C0138:
                                           ; SOURCE LINE # 1063
00FF 900000      R     MOV     DPTR,#bChannel
0102 120000      R     LCALL   L?0190
0105 120000      R     LCALL   L?0161
0108 E0                MOVX    A,@DPTR
0109 FE                MOV     R6,A
010A 900000      R     MOV     DPTR,#bIndex
010D E0                MOVX    A,@DPTR
010E 900000      R     MOV     DPTR,#Var
0111 120000      R     LCALL   L?0215
                                           ; SOURCE LINE # 1064
0114 900000      R     MOV     DPTR,#bIndex
0117 E0                MOVX    A,@DPTR
0118 04                INC     A
0119 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1066
011A 900000      R     MOV     DPTR,#bDataLength
011D E0                MOVX    A,@DPTR
011E FE                MOV     R6,A
011F B4010C            CJNE    A,#01H,?C0139
                                           ; SOURCE LINE # 1067
0122 120000      R     LCALL   L?0164
0125 120000      R     LCALL   L?0161
0128 E0                MOVX    A,@DPTR
0129 4420              ORL     A,#020H
012B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1068
012C 8011              SJMP    ?C0140
012E         ?C0139:
                                           ; SOURCE LINE # 1069
012E EE                MOV     A,R6
012F 700E              JNZ     ?C0140
C51 COMPILER V7.50   CORE_SMBUS                                                            09/17/2020 21:06:52 PAGE 62  

                                           ; SOURCE LINE # 1070
0131 900000      R     MOV     DPTR,#bChannel
0134 E0                MOVX    A,@DPTR
0135 120000      R     LCALL   L?0172
0138 120000      R     LCALL   L?0156
013B E0                MOVX    A,@DPTR
013C 54FD              ANL     A,#0FDH
013E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1071
013F         ?C0140:
                                           ; SOURCE LINE # 1072
013F 900000      R     MOV     DPTR,#bChannel
0142 120000      R     LCALL   L?0179
0145 120000      R     LCALL   L?0156
0148 E0                MOVX    A,@DPTR
0149 4480              ORL     A,#080H
014B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1073
014C 900000      R     MOV     DPTR,#bDataLength
014F E0                MOVX    A,@DPTR
0150 6003              JZ      $ + 5H
0152 020000      R     LJMP    ?C0134
0155         ?C0133:
                                           ; SOURCE LINE # 1075
0155 120000      R     LCALL   L?0170
0158 120000      R     LCALL   L?0161
015B E0                MOVX    A,@DPTR
015C 54FD              ANL     A,#0FDH
015E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1076
015F EF                MOV     A,R7
0160         ?C0150:
0160 120000      R     LCALL   L?0180
0163 120000      R     LCALL   L?0156
0166 E0                MOVX    A,@DPTR
0167 4480              ORL     A,#080H
0169         ?C0151:
0169 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1077
016A 900000      R     MOV     DPTR,#bFinishFlag
016D E0                MOVX    A,@DPTR
016E FF                MOV     R7,A
                                           ; SOURCE LINE # 1078
016F         ?C0130:
016F 22                RET     
             ; FUNCTION _bI2cMasterWriteToRead (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3226    ----
   CONSTANT SIZE    =    126    ----
   XDATA SIZE       =   ----      61
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
