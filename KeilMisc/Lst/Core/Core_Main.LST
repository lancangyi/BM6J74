C51 COMPILER V7.50   CORE_MAIN                                                             09/17/2020 21:06:51 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE CORE_MAIN
OBJECT MODULE PLACED IN Core\Core_Main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe Core\Core_Main.c LA WL(1) CD OT(9,SIZE) NOAREGS OR INCDIR(.\Core\Include\;.
                    -\Oem\Include\)

line level    source

   1          /*-----------------------------------------------------------------------------
   2           * TITLE: CORE_MAIN.C - Main Program for KBC firmware.
   3           *
   4           * Main processing loop (interrupt driven) for the keyboard controller/scanner.
   5           *
   6           * Copyright (c) 1983-2007, Insyde Software Corporation. All Rights Reserved.
   7           *
   8           * You may not reproduce, distribute, publish, display, perform, modify, adapt,
   9           * transmit, broadcast, present, recite, release, license or otherwise exploit
  10           * any part of this publication in any form, by any means, without the prior
  11           * written permission of Insyde Software Corporation.
  12           *---------------------------------------------------------------------------*/
  13          
  14          #include "Core_Inc.h"
  15          #include "Oem_Inc.h"
  16          
  17          
  18          //==================================================
  19          // Name:        Main
  20          // Descript:
  21          // Input:
  22          // Return:
  23          //==================================================
  24          void main(void)
  25          {
  26   1      
  27   1              DisableAllInterrupt() ;
  28   1              SP = 0xD0 ; 
  29   1          
  30   1      
  31   1              #if     COMPARE_CHECKSUM
                              ROM_Checksum = Get_Checksum();
                              CacheDma(3, CalculateChecksum );
                              CalculateChecksum();
                              if(ROM_Checksum == Calc_Checksum)
                              {
                                      Checksum_compare = 1;           //compare success
                              }
                              else
                              {
                                      Checksum_compare = 2;           //compare Fail
                              }
                              SCAR4H = 0x01;  //Disable CacheDMA
                              ClearSRamF();   //Clear 0xF00-0xFFF
                      #endif
  46   1              
  47   1      
  48   1              if(ExitRamCodeCommand == 0xAA)
  49   1              {
  50   2                      CLEAR_MASK(FBCFG,SSMC); // disable scatch ROM
  51   2                      _nop_();
  52   2                      MPREFC = 0x01;
  53   2                      _nop_();
  54   2                      MPREFC = 0x01;
C51 COMPILER V7.50   CORE_MAIN                                                             09/17/2020 21:06:51 PAGE 2   

  55   2                      _nop_(); 
  56   2                      MPREFC = 0x01;
  57   2                      _nop_();
  58   2                      MPREFC = 0x01;
  59   2                      _nop_();
  60   2                      _nop_();
  61   2                      ExitRamCodeCommand = 0x00;
  62   2              }
  63   1              else
  64   1              {
  65   2      
  66   2              
  67   2                      #if SUPPORT_SHARE_ROM
                                  HCTRL2 = 0x80;  //For Share ROM
                                  FMSSR = 0x0F;       //For Share ROM
                              #endif
  71   2      
  72   2                      Reset_Initialization();
  73   2                      
  74   2                      EnableAllInterrupt();
  75   2      
  76   2                      //----------------------
  77   2                      //Enable PMC interrupt
  78   2                      //PMC1
  79   2                      Index_07H = 0x11;
  80   2                      Index_30H = 0x01;
  81   2                      Index_07H = 0x00;
  82   2                      SET_MASK(IER3, Int_PMCIBF);
  83   2                      ISR3 = Int_PMCIBF;
  84   2                      SET_BIT(PM1CTL, 0);
  85   2      
  86   2      
  87   2      
  88   2                      //PMC2  
  89   2                      Index_07H = 0x12;
  90   2                      Index_30H = 0x01;
  91   2                      Index_07H = 0x00;
  92   2                      SET_MASK(IER3, Int_PMC2IBF);
  93   2                      ISR3 = Int_PMC2IBF;
  94   2                      SET_BIT(PM2CTL, 0);
  95   2                      //----------------------
  96   2              
  97   2      
  98   2                      //----------------------
  99   2                      //init SW KBC
 100   2                      //----------------------
 101   2                      #if SUPPORT_SWKBC
                              Init_SWKBC();
                              #endif
 104   2              
 105   2              }
 106   1      
 107   1      
 108   1              
 109   1      
 110   1              //===========================================
 111   1              //init CIR
 112   1              //===========================================
 113   1              #if Support_EC_CIR
                      EN_EC_CIR();
              
                              #if CIRRX_mapping_to_Pin84
C51 COMPILER V7.50   CORE_MAIN                                                             09/17/2020 21:06:51 PAGE 3   

                              //-----------------------------------------------
                              //SET CIRRX mapping to Pin84(GP10)
                              Index_07H = 0x04;
                              SET_BIT(Index_F2H, 0);  // 1 : ping84,  0: ping85(default)
                              //------------------------------------------------
                              #endif
              
                      #endif
 125   1              //===========================================
 126   1              
 127   1      
 128   1      
 129   1              //===========================================
 130   1              //init SMBUS
 131   1              //===========================================
 132   1              InitSMBus();
 133   1              //===========================================
 134   1              
 135   1      
 136   1      
 137   1              //----------------------
 138   1              //Set EC FW version
 139   1              //----------------------
 140   1              Code_Version = OEM_Version_MSB;         ////Main version
 141   1              Code_Beta_Version = OEM_Version_LSB;    //Beta 00
 142   1              //----------------------
 143   1              
 144   1              
 145   1              //Default standy on G3->S5
 146   1              SysPowState = _PowrUp_S5;
 147   1      
 148   1              //Set DeepSleepCountDown = 2 * 50ms
 149   1              DeepSleepCountDown = 2;
 150   1      
 151   1      
 152   1              //----------------------
 153   1              //Enable UART (EC side)
 154   1              //----------------------
 155   1              #if USE_UART2
                      Init_UART2();
                      #endif
 158   1      
 159   1              #if USE_UART1
                      Init_UART1();
                      #endif
 162   1              //----------------------
 163   1      
 164   1      
 165   1              //--------------------------------
 166   1              //Set EC side PWM (PWMOUT / pin 18)
 167   1              //--------------------------------
 168   1              #if Support_EC_PWMOUT
                      Init_EC_PWM();
                      DCR = PWM_Duty_75percent;
                      SET_BIT(PWMCTL, PCCE);          //Enable PWMOUT
                      #endif
 173   1              //--------------------------------
 174   1      
 175   1              #if LENOVO_80PORT
                      {
                              BYTE Original_PLLFreq_Setting;
                              //========Change FSPI CLK To 48MHz Start================
C51 COMPILER V7.50   CORE_MAIN                                                             09/17/2020 21:06:51 PAGE 4   

                              Original_PLLFreq_Setting = EC_1E06;
                              //RamDebug(Original_PLLFreq_Setting);
              
                              if(Original_PLLFreq_Setting!=0x05)
                              {
                                      EC_1E06 = 0x05; //Select 48.XMHz as PLL frequency.
                                                                                                       //0011b: Select 32.3MHz as PLL frequency. (Default)
                                                                                                       //0101b: Select 46.0MHz as PLL frequency.
                                                                                                       //0111b: Select 64.5MHz as PLL frequency.
                                      EC_1E03 = 0x01;
              
                                      EA = 0 ;
              
                                      PCON |= 0x02;  // Enter Sleep mode
                                      _nop_();
                                      _nop_();
                                      _nop_();
                                      _nop_();
                                      _nop_();
                                      _nop_();
                                      _nop_();
                                      _nop_();
                                      _nop_();
                                      _nop_();
                                      _nop_();
              
                                      EnableAllInterrupt();
                              }
                              //========Change FSPI CLK To 48MHz End================
                      }
                      #endif
 210   1              
 211   1              while(1)
 212   1              {
 213   2                                      
 214   2                      #if SUPPORT_MAIN_SERVICE
 215   2                      main_service();
 216   2                      #endif
 217   2      
 218   2                      #if SUPPORT_SWKBC        
                              service_send();
                              #endif 
 221   2      
 222   2                      #if SUPPORT_MAIN_SERVICE
 223   2                      SET_BIT(IER3, 1);
 224   2                      SET_BIT(IER3, 3);
 225   2                      EnableAllInterrupt();
 226   2                      _nop_();
 227   2                      _nop_();
 228   2                      _nop_();
 229   2                      _nop_();
 230   2      
 231   2                      #endif
 232   2                      
 233   2      
 234   2                      //*** for EC Deep sleep mode ***//
 235   2                      
 236   2                      #if SMBusServiceCenterFunc
                              if((Service==0x00)&&(Service1==0x00)&&( CheckSMBusNeedService()==SMBus_ClearService))
                              #else
 239   2                      if (  (Service==0x00) && (Service1==0x00) )
 240   2                      #endif
C51 COMPILER V7.50   CORE_MAIN                                                             09/17/2020 21:06:51 PAGE 5   

 241   2                      {
 242   3                              //if( (!DeepSleepCountDown) && (SysPowState == _SYSTEM_S5) )    //
 243   3                              if(0)           //do not sleep
 244   3                              {
 245   4                                      InitEnterDeepSleep();
 246   4                                      EnableAllInterrupt();   // enable global interrupt
 247   4                                      EC_1E03 = 0x01;
 248   4                                      PCON   = 0x02;         /* Enter Deep Sleep mode.  */
 249   4                                      _nop_();                /* Wake-up delay.  */
 250   4                                      _nop_();
 251   4                                      _nop_();
 252   4                                      _nop_();
 253   4                                      _nop_();
 254   4                                      _nop_();
 255   4                                      _nop_();
 256   4                                      _nop_();
 257   4                                      _nop_();
 258   4                                      InitWakeFromDeepSleep();
 259   4                                      _nop_();
 260   4                      
 261   4                              }
 262   3                              else
 263   3                              {
 264   4                                      PCON=1;                 // enter idle mode
 265   4                                      _nop_();
 266   4                                      _nop_();
 267   4                                      _nop_();
 268   4                                      _nop_();
 269   4                                      _nop_();
 270   4                                      _nop_();
 271   4                                      _nop_();
 272   4                                      _nop_();
 273   4                              }
 274   3                      }
 275   2                      //*** END ***//
 276   2                      
 277   2              }// End while(1)
 278   1      
 279   1      
 280   1      }
 281          
 282          
 283          #if SUPPORT_MAIN_SERVICE
 284          /* ----------------------------------------------------------------------------
 285           * FUNCTION: main_service - Check for new/more service requests.
 286           *
 287           * Check for a request flag.  The check is done according to priority.  If a
 288           * request flag is set, handle the request and loop back to get the flags
 289           * again.  Do not follow through to check the next flag.  The flags are to be
 290           * checked in order.
 291           * ------------------------------------------------------------------------- */
 292          const FUNCT_PTR_V_V code service_table[16] =
 293          {
 294                          service_000,       // Service ACPI
 295                          service_001,            // Service CIR
 296                          service_002,    // 1 millisecond timer service
 297                          service_003,       // PMC2 68h/6Ch port pairs
 298                          service_004,    // reserve
 299                          service_005,    // 1 millisecond timer service
 300                          service_006,        // reserve
 301                          service_007,    // For SMBUS scan center
 302          
C51 COMPILER V7.50   CORE_MAIN                                                             09/17/2020 21:06:51 PAGE 6   

 303                          service_008,    // UART2
 304                          service_009,            // UART1
 305                          service_00A,            // reserve
 306                          service_00B,            // reserve
 307                          service_00C,    // reserve
 308                          service_00D,       // reserve
 309                          service_00E,    // reserve
 310                          service_00F,      // reserve
 311          };
 312          
 313          
 314          void main_service(void) 
 315          {
 316   1              _W1 = (((WORD)Service1 << 8) | Service);  
 317   1              while(_W1 != 0)
 318   1              {
 319   2                      _R6 = 0;
 320   2                      while((_W1 & 1) == 0) 
 321   2                      {
 322   3                              _W1 >>= 1;
 323   3                              _R6++;
 324   3                      }
 325   2      
 326   2                      if (_R6 < 0x08) 
 327   2                      {
 328   3                              Service &= Cpl_Byte_Mask(_R6 & 0x07);  /* Clear service request. */
 329   3                      }
 330   2                      else 
 331   2                      {
 332   3                              Service1 &= Cpl_Byte_Mask(_R6& 0x07);  /* Clear service request. */
 333   3                      }
 334   2      
 335   2                      (service_table[_R6])();   /* Dispatch to service handler. */
 336   2      
 337   2                      if(IsFlag1(PM1STS, IBF1) )                      {       F_Service_000 = 1;      }
 338   2                      else if(IsFlag1(PM2STS, IBF1))          {       F_Service_003 = 1;      }
 339   2                      else if(IsFlag1(KBHISR, IBF))           {       F_Service_001 = 1;      }
 340   2                      
 341   2                       _W1 = ( ( (WORD)Service1 << 8 ) | Service );    /* Re-Load Service */
 342   2                       
 343   2              }
 344   1      
 345   1              //Reserve (Test&Debug)
 346   1              #if SMBusServiceCenterFunc
                      if( CheckSMBusNeedService()==SMBus_NeedService )
                      {
                              ServiceSMBus();
                      }
                      #endif
 352   1      }
 353          
 354          #endif
 355          
 356          
 357          
 358          
 359          void service_000(void) 
 360          {
 361   1              // Runtime Service 000 -- ACPI
 362   1              Service_PCI2();
 363   1              
 364   1      }
C51 COMPILER V7.50   CORE_MAIN                                                             09/17/2020 21:06:51 PAGE 7   

 365          
 366          void service_001(void)
 367          {
 368   1              // Runtime Service 001  -- KBC
 369   1              #if SUPPORT_SWKBC    
                      F_Service_001=0;
                      service_pci1();
                      #endif   
 373   1              
 374   1      }
 375          
 376          void service_002(void)
 377          {
 378   1      
 379   1              // Runtime Service 002
 380   1              #if SUPPORT_Hook_1ms_Timer
 381   1              Oem_Hook_1MS_Event();
 382   1              Timer1msCnt++;
 383   1              if(Timer1msCnt == 5)
 384   1              {
 385   2                      F_Service_005 = 1;
 386   2                      Timer1msCnt = 0;
 387   2              }
 388   1              #endif
 389   1      
 390   1      }
 391          
 392          
 393          void service_003(void)
 394          {
 395   1              // Runtime Service 003 for 68h/6Ch port pairs
 396   1              Service_PCI3() ;
 397   1      
 398   1      }
 399          
 400          
 401          void service_004(void)
 402          {
 403   1              #if Support_EC_CIR
                      // Runtime Service 004--CIR
                      Service_CIR();
                      #endif
 407   1      }
 408          
 409          
 410          void service_005(void)
 411          {
 412   1              // Runtime Service 005
 413   1              Oem_Hook_5MS_Event() ;
 414   1              Timer5msCnt++;
 415   1              Timer125msCnt++;
 416   1              if( Timer125msCnt >= 25 )
 417   1              {
 418   2                      Timer125msCnt = 0;
 419   2                      Oem_Hook_125MS_Event();
 420   2              }
 421   1              if ( Timer5msCnt & 1 )  // 10ms events
 422   1              {
 423   2                      Oem_Hook_10MS_Event();
 424   2                      Timer250msCnt++;
 425   2                      if( Timer250msCnt >= 25 )
 426   2                      {
C51 COMPILER V7.50   CORE_MAIN                                                             09/17/2020 21:06:51 PAGE 8   

 427   3                              Timer250msCnt = 0;
 428   3                              Oem_Hook_250MS_Event();
 429   3                      }
 430   2              }
 431   1              else
 432   1              {
 433   2                      switch( Timer5msCnt )   // Share Loading Branch Control
 434   2                      {
 435   3                              case 2: Oem_Hook_50MS_EventA();
 436   3                                      break;
 437   3                              case 4: Oem_Hook_50MS_EventB();
 438   3                                      break;
 439   3                              case 6: Oem_Hook_50MS_EventC();
 440   3                                      break;
 441   3                              case 8: Timer100msCntB++;
 442   3                                      if ( Timer100msCntB & 1 )
 443   3                                      {
 444   4                                              Oem_Hook_100MS_EventA();
 445   4                                      }
 446   3                                      else
 447   3                                      {
 448   4                                              Oem_Hook_100MS_EventB();
 449   4                                      }
 450   3                                      break;
 451   3      
 452   3                              default:    Timer5msCnt=0;
 453   3                                      break;
 454   3                      }
 455   2      
 456   2                      if ( Timer5msCnt == 0x00 )
 457   2                      {   // 50msec
 458   3                              Timer100msCnt ++;
 459   3                              if ( Timer100msCnt & 1 )
 460   3                              {
 461   4                                      Oem_Hook_100MS_EventC();
 462   4                              }
 463   3                              else
 464   3                              {   // 100msec
 465   4                                      switch( Timer100msCnt )
 466   4                                      {
 467   5                                              case 2:     Oem_Hook_500MS_EventA();
 468   5                                                      break;
 469   5                                              case 4:     Oem_Hook_500MS_EventB();
 470   5                                                      break;
 471   5                                              case 6:     Oem_Hook_500MS_EventC();
 472   5                                                      break;
 473   5                                              case 8:     Oem_Hook_1S_EventA();
 474   5                                                      break;
 475   5                                              case 10:    Oem_Hook_1S_EventB();
 476   5                                                      break;
 477   5                                              case 12:    Oem_Hook_500MS_EventA();
 478   5                                                      break;
 479   5                                              case 14:    Oem_Hook_500MS_EventB();
 480   5                                                      break;
 481   5                                              case 16:    Oem_Hook_500MS_EventC();
 482   5                                                      break;
 483   5                                              case 18:    Oem_Hook_1S_EventC();
 484   5                                                      break;
 485   5                                              default:    // 1 Sec
 486   5                                                              Timer100msCnt = 0;
 487   5                                                              Timer1SecCnt ++;
 488   5                                                              if ( Timer1SecCnt == 10 )
C51 COMPILER V7.50   CORE_MAIN                                                             09/17/2020 21:06:51 PAGE 9   

 489   5                                                              {
 490   6                                                                      Oem_Hook_1Min_Event();
 491   6                                                                      Timer1SecCnt=0;
 492   6                                                              }
 493   5                                                              break;
 494   5      
 495   5                                      }
 496   4                              }
 497   3                      }
 498   2              }
 499   1      }
 500          
 501          
 502          void service_006(void)
 503          {
 504   1              // Runtime Service 006
 505   1      }
 506          
 507          
 508          void service_007(void)
 509          {
 510   1              // Runtime Service 007
 511   1               //-----------------------------------
 512   1              // process SMBus interface data
 513   1              //-----------------------------------
 514   1              #if SMBusServiceCenterFunc
                      ServiceSMBus();
                      
                      if( CheckSMBusNeedService()==SMBus_ClearService )
                      F_Service_007 = 0;
              
                      #endif
 521   1      
 522   1      }
 523          
 524          void service_008(void)
 525          {
 526   1              // Runtime Service 008
 527   1      
 528   1              #if USE_UART2
              
                      UART_R_IIR      = UART2_IIR;
                      UART_R_LSR = UART2_LSR;
              
                      if( (UART_R_LSR & 0x8C) != 0)   //Error
                      {
                              //Need reset
                              UART2_FCR |= 0x02;                              // Reset Rx FIFO
                              return;
                              
                      }
              
                      if( IS_BIT_CLEAR(UART_R_LSR, 0) )       //Data not ready
                      {
              
                              return;
                      }
                      else
                      {
              
                              //To Modify RxIndex count as you want
                              for (UART_RxIndex=0 ; UART_RxIndex<4 ; UART_RxIndex++) {
C51 COMPILER V7.50   CORE_MAIN                                                             09/17/2020 21:06:51 PAGE 10  

                                      UART_RxBuff[UART_RxIndex] = UART2_RBR;                  // Store Rx to buffer array
                                      }
                              
                              
                                      UART2_FCR |= 0x02;                              // Reset Rx FIFO
                                      UART2_Data_Handler();
                              
                      }
              
              
                      #endif
 562   1      }
 563          
 564          
 565          void service_009(void)
 566          {
 567   1              // Runtime Service 009
 568   1              #if USE_UART1
              
                      UART_R_IIR      = UART1_IIR;
                      UART_R_LSR = UART1_LSR;
              
                      if( (UART_R_LSR & 0x8C) != 0)   //Error
                      {
                              //Need reset
                              UART1_FCR |= 0x02;                              // Reset Rx FIFO
                              return;
                              
                      }
              
                      if( IS_BIT_CLEAR(UART_R_LSR, 0) )       //Data not ready
                      {
              
                              return;
                      }
                      else
                      {
              
                              //To Modify RxIndex count as you want
                              for (UART_RxIndex=0 ; UART_RxIndex<4 ; UART_RxIndex++) {
                                      UART_RxBuff[UART_RxIndex] = UART1_RBR;                  // Store Rx to buffer array
                                      }
                              
                              
                              UART1_FCR |= 0x02;                              // Reset Rx FIFO
                              UART1_Data_Handler();
                              
                      }
              
                      #endif
 601   1      }
 602          
 603          void service_00A(void)
 604          {
 605   1              // Runtime Service 00A
 606   1      }
 607          
 608          
 609          void service_00B(void)
 610          {
 611   1              // Runtime Service 00B
 612   1      }
C51 COMPILER V7.50   CORE_MAIN                                                             09/17/2020 21:06:51 PAGE 11  

 613          
 614          
 615          void service_00C(void)
 616          {
 617   1              //Runtime Service 00C
 618   1      }
 619          
 620          
 621          void service_00D(void)
 622          {
 623   1              // Runtime Service 00D
 624   1      }
 625          
 626          
 627          void service_00E(void)
 628          {
 629   1              // Runtime Service 00E
 630   1      }
 631          
 632          
 633          void service_00F(void)
 634          {
 635   1              // Runtime Service 00F
 636   1      }
 637          
 638          
 639          
 640          #if SUPPORT_SWKBC
              /* ----------------------------------------------------------------------------
               * FUNCTION: service_send
               *
               * 
               * 
               * ------------------------------------------------------------------------- */
              void service_send(void)
              {
                  BYTE bTmp;
              
                  if(IS_MASK_SET(KBHISR,IBF))
                  {   
                      //RamDebug(0xE0);
                      //bTmp = KBHIDIR;
                      return;
                  }
                      
                  if(IS_MASK_SET(KBHISR,OBF))
                  {
                      //RamDebug(0xE2);
                      return;
                  }
              
                  ///SCCTRL = 0x00;
                  //RamDebug(0xE2);
                  bTmp = Get_KB_Buffer();
              
                  if(bTmp != 0xFF)
                  {   
                      Data_To_Host(bTmp);
                  }    
              }
              
              #endif
C51 COMPILER V7.50   CORE_MAIN                                                             09/17/2020 21:06:51 PAGE 12  

 675          
 676          
C51 COMPILER V7.50   CORE_MAIN                                                             09/17/2020 21:06:51 PAGE 13  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0049 (BEGIN)
0000         L?0074:
0000 900000      E     MOV     DPTR,#Index_07H
0003 F0                MOVX    @DPTR,A
0004 900000      E     MOV     DPTR,#Index_30H
0007 7401              MOV     A,#01H
0009 F0                MOVX    @DPTR,A
000A E4                CLR     A
000B 900000      E     MOV     DPTR,#Index_07H
000E F0                MOVX    @DPTR,A
000F 900000      E     MOV     DPTR,#IER3
0012 E0                MOVX    A,@DPTR
0013 22                RET     
0014         L?0075:
0014 E500        E     MOV     A,_R6
0016 5407              ANL     A,#07H
0018 FF                MOV     R7,A
0019 7401              MOV     A,#01H
001B C8                XCH     A,R0
001C EF                MOV     A,R7
001D C8                XCH     A,R0
001E 08                INC     R0
001F 22                RET     
             ; FUNCTION Com0049 (END)

             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 24
                                           ; SOURCE LINE # 25
                                           ; SOURCE LINE # 27
0000 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 28
0003 7581D0            MOV     SP,#0D0H
                                           ; SOURCE LINE # 48
0006 E500        E     MOV     A,ExitRamCodeCommand
0008 64AA              XRL     A,#0AAH
000A 701E              JNZ     ?C0001
                                           ; SOURCE LINE # 49
                                           ; SOURCE LINE # 50
000C 900000      E     MOV     DPTR,#FBCFG
000F E0                MOVX    A,@DPTR
0010 547F              ANL     A,#07FH
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 51
0013 00                NOP     
                                           ; SOURCE LINE # 52
0014 75F701            MOV     MPREFC,#01H
                                           ; SOURCE LINE # 53
0017 00                NOP     
                                           ; SOURCE LINE # 54
0018 75F701            MOV     MPREFC,#01H
                                           ; SOURCE LINE # 55
001B 00                NOP     
                                           ; SOURCE LINE # 56
001C 75F701            MOV     MPREFC,#01H
                                           ; SOURCE LINE # 57
001F 00                NOP     
                                           ; SOURCE LINE # 58
0020 75F701            MOV     MPREFC,#01H
                                           ; SOURCE LINE # 59
C51 COMPILER V7.50   CORE_MAIN                                                             09/17/2020 21:06:51 PAGE 14  

0023 00                NOP     
                                           ; SOURCE LINE # 60
0024 00                NOP     
                                           ; SOURCE LINE # 61
0025 E4                CLR     A
0026 F500        E     MOV     ExitRamCodeCommand,A
                                           ; SOURCE LINE # 62
0028 8030              SJMP    ?C0002
002A         ?C0001:
                                           ; SOURCE LINE # 64
                                           ; SOURCE LINE # 72
002A 120000      E     LCALL   Reset_Initialization
                                           ; SOURCE LINE # 74
002D 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 79
0030 7411              MOV     A,#011H
                                           ; SOURCE LINE # 80
                                           ; SOURCE LINE # 81
                                           ; SOURCE LINE # 82
0032 120000      R     LCALL   L?0074
0035 4402              ORL     A,#02H
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 83
0038 900000      E     MOV     DPTR,#ISR3
003B 7402              MOV     A,#02H
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 84
003E 900000      E     MOV     DPTR,#PM1CTL
0041 E0                MOVX    A,@DPTR
0042 4401              ORL     A,#01H
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 89
0045 7412              MOV     A,#012H
                                           ; SOURCE LINE # 90
                                           ; SOURCE LINE # 91
                                           ; SOURCE LINE # 92
0047 120000      R     LCALL   L?0074
004A 4408              ORL     A,#08H
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 93
004D 900000      E     MOV     DPTR,#ISR3
0050 7408              MOV     A,#08H
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 94
0053 900000      E     MOV     DPTR,#PM2CTL
0056 E0                MOVX    A,@DPTR
0057 4401              ORL     A,#01H
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 105
005A         ?C0002:
                                           ; SOURCE LINE # 132
005A 120000      E     LCALL   InitSMBus
                                           ; SOURCE LINE # 140
005D 900000      E     MOV     DPTR,#Code_Version
0060 7406              MOV     A,#06H
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 141
0063 E4                CLR     A
0064 900000      E     MOV     DPTR,#Code_Beta_Version
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 146
0068 900000      E     MOV     DPTR,#SysPowState
C51 COMPILER V7.50   CORE_MAIN                                                             09/17/2020 21:06:51 PAGE 15  

006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 149
006C 900000      E     MOV     DPTR,#DeepSleepCountDown
006F 7402              MOV     A,#02H
0071 F0                MOVX    @DPTR,A
0072         ?C0003:
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 212
                                           ; SOURCE LINE # 215
0072 120000      R     LCALL   main_service
                                           ; SOURCE LINE # 223
0075 900000      E     MOV     DPTR,#IER3
0078 E0                MOVX    A,@DPTR
0079 4402              ORL     A,#02H
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 224
007C E0                MOVX    A,@DPTR
007D 4408              ORL     A,#08H
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 225
0080 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 226
0083 00                NOP     
                                           ; SOURCE LINE # 227
0084 00                NOP     
                                           ; SOURCE LINE # 228
0085 00                NOP     
                                           ; SOURCE LINE # 229
0086 00                NOP     
                                           ; SOURCE LINE # 239
0087 E500        E     MOV     A,Service
0089 70E7              JNZ     ?C0003
008B E500        E     MOV     A,Service1
008D 70E3              JNZ     ?C0003
                                           ; SOURCE LINE # 241
                                           ; SOURCE LINE # 243
                                           ; SOURCE LINE # 244
                                           ; SOURCE LINE # 245
                                           ; SOURCE LINE # 246
                                           ; SOURCE LINE # 247
                                           ; SOURCE LINE # 248
                                           ; SOURCE LINE # 249
                                           ; SOURCE LINE # 250
                                           ; SOURCE LINE # 251
                                           ; SOURCE LINE # 252
                                           ; SOURCE LINE # 253
                                           ; SOURCE LINE # 254
                                           ; SOURCE LINE # 255
                                           ; SOURCE LINE # 256
                                           ; SOURCE LINE # 257
                                           ; SOURCE LINE # 258
                                           ; SOURCE LINE # 259
                                           ; SOURCE LINE # 261
008F         ?C0006:
                                           ; SOURCE LINE # 263
                                           ; SOURCE LINE # 264
008F 758701            MOV     PCON,#01H
                                           ; SOURCE LINE # 265
0092 00                NOP     
                                           ; SOURCE LINE # 266
0093 00                NOP     
                                           ; SOURCE LINE # 267
C51 COMPILER V7.50   CORE_MAIN                                                             09/17/2020 21:06:51 PAGE 16  

0094 00                NOP     
                                           ; SOURCE LINE # 268
0095 00                NOP     
                                           ; SOURCE LINE # 269
0096 00                NOP     
                                           ; SOURCE LINE # 270
0097 00                NOP     
                                           ; SOURCE LINE # 271
0098 00                NOP     
                                           ; SOURCE LINE # 272
0099 00                NOP     
                                           ; SOURCE LINE # 273
                                           ; SOURCE LINE # 274
                                           ; SOURCE LINE # 277
009A 80D6              SJMP    ?C0003
             ; FUNCTION main (END)

             ; FUNCTION main_service (BEGIN)
                                           ; SOURCE LINE # 314
                                           ; SOURCE LINE # 315
                                           ; SOURCE LINE # 316
0000 020000      R     LJMP    ?C0069
0003         ?C0009:
                                           ; SOURCE LINE # 317
0003 E500        E     MOV     A,_W1+01H
0005 4500        E     ORL     A,_W1
0007 7003              JNZ     $ + 5H
0009 020000      R     LJMP    ?C0020
                                           ; SOURCE LINE # 318
                                           ; SOURCE LINE # 319
000C E4                CLR     A
000D F500        E     MOV     _R6,A
000F         ?C0011:
                                           ; SOURCE LINE # 320
000F E500        E     MOV     A,_W1+01H
0011 20E00F            JB      ACC.0,?C0012
                                           ; SOURCE LINE # 321
                                           ; SOURCE LINE # 322
0014 E500        E     MOV     A,_W1
0016 C3                CLR     C
0017 13                RRC     A
0018 F500        E     MOV     _W1,A
001A E500        E     MOV     A,_W1+01H
001C 13                RRC     A
001D F500        E     MOV     _W1+01H,A
                                           ; SOURCE LINE # 323
001F 0500        E     INC     _R6
                                           ; SOURCE LINE # 324
0021 80EC              SJMP    ?C0011
0023         ?C0012:
                                           ; SOURCE LINE # 326
0023 E500        E     MOV     A,_R6
0025 C3                CLR     C
0026 9408              SUBB    A,#08H
0028 500E              JNC     ?C0013
                                           ; SOURCE LINE # 327
                                           ; SOURCE LINE # 328
002A 120000      R     LCALL   L?0075
002D 8002              SJMP    ?C0066
002F         ?C0065:
002F C3                CLR     C
0030 33                RLC     A
C51 COMPILER V7.50   CORE_MAIN                                                             09/17/2020 21:06:51 PAGE 17  

0031         ?C0066:
0031 D8FC              DJNZ    R0,?C0065
0033 F4                CPL     A
0034 5200        E     ANL     Service,A
                                           ; SOURCE LINE # 329
0036 800C              SJMP    ?C0014
0038         ?C0013:
                                           ; SOURCE LINE # 331
                                           ; SOURCE LINE # 332
0038 120000      R     LCALL   L?0075
003B 8002              SJMP    ?C0068
003D         ?C0067:
003D C3                CLR     C
003E 33                RLC     A
003F         ?C0068:
003F D8FC              DJNZ    R0,?C0067
0041 F4                CPL     A
0042 5200        E     ANL     Service1,A
                                           ; SOURCE LINE # 333
0044         ?C0014:
                                           ; SOURCE LINE # 335
0044 AF00        E     MOV     R7,_R6
0046 EF                MOV     A,R7
0047 25E0              ADD     A,ACC
0049 2400        R     ADD     A,#LOW service_table
004B F582              MOV     DPL,A
004D E4                CLR     A
004E 3400        R     ADDC    A,#HIGH service_table
0050 F583              MOV     DPH,A
0052 E4                CLR     A
0053 93                MOVC    A,@A+DPTR
0054 FE                MOV     R6,A
0055 7401              MOV     A,#01H
0057 93                MOVC    A,@A+DPTR
0058 CA                XCH     A,R2
0059 EE                MOV     A,R6
005A CA                XCH     A,R2
005B F9                MOV     R1,A
005C 120000      E     LCALL   ?C?ICALL
                                           ; SOURCE LINE # 337
005F 900000      E     MOV     DPTR,#PM1STS
0062 E0                MOVX    A,@DPTR
0063 30E104            JNB     ACC.1,?C0015
0066 D200        E     SETB    F_Service_000
0068 8014              SJMP    ?C0016
006A         ?C0015:
                                           ; SOURCE LINE # 338
006A 900000      E     MOV     DPTR,#PM2STS
006D E0                MOVX    A,@DPTR
006E 30E104            JNB     ACC.1,?C0017
0071 D200        E     SETB    F_Service_003
0073 8009              SJMP    ?C0016
0075         ?C0017:
                                           ; SOURCE LINE # 339
0075 900000      E     MOV     DPTR,#KBHISR
0078 E0                MOVX    A,@DPTR
0079 30E102            JNB     ACC.1,?C0016
007C D200        E     SETB    F_Service_001
007E         ?C0016:
                                           ; SOURCE LINE # 341
007E         ?C0069:
007E AF00        E     MOV     R7,Service1
C51 COMPILER V7.50   CORE_MAIN                                                             09/17/2020 21:06:51 PAGE 18  

0080 EF                MOV     A,R7
0081 AD00        E     MOV     R5,Service
0083 F500        E     MOV     _W1,A
0085 ED                MOV     A,R5
0086 F500        E     MOV     _W1+01H,A
                                           ; SOURCE LINE # 343
0088 020000      R     LJMP    ?C0009
                                           ; SOURCE LINE # 352
008B         ?C0020:
008B 22                RET     
             ; FUNCTION main_service (END)

             ; FUNCTION service_000 (BEGIN)
                                           ; SOURCE LINE # 359
                                           ; SOURCE LINE # 360
                                           ; SOURCE LINE # 362
0000 020000      E     LJMP    Service_PCI2
             ; FUNCTION service_000 (END)

             ; FUNCTION service_001 (BEGIN)
                                           ; SOURCE LINE # 366
                                           ; SOURCE LINE # 367
                                           ; SOURCE LINE # 374
0000 22                RET     
             ; FUNCTION service_001 (END)

             ; FUNCTION service_002 (BEGIN)
                                           ; SOURCE LINE # 376
                                           ; SOURCE LINE # 377
                                           ; SOURCE LINE # 381
0000 120000      E     LCALL   Oem_Hook_1MS_Event
                                           ; SOURCE LINE # 382
0003 900000      E     MOV     DPTR,#Timer1msCnt
0006 E0                MOVX    A,@DPTR
0007 04                INC     A
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 383
0009 E0                MOVX    A,@DPTR
000A B40504            CJNE    A,#05H,?C0024
                                           ; SOURCE LINE # 384
                                           ; SOURCE LINE # 385
000D D200        E     SETB    F_Service_005
                                           ; SOURCE LINE # 386
000F E4                CLR     A
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 387
                                           ; SOURCE LINE # 390
0011         ?C0024:
0011 22                RET     
             ; FUNCTION service_002 (END)

             ; FUNCTION service_003 (BEGIN)
                                           ; SOURCE LINE # 393
                                           ; SOURCE LINE # 394
                                           ; SOURCE LINE # 396
0000 020000      E     LJMP    Service_PCI3
             ; FUNCTION service_003 (END)

             ; FUNCTION service_004 (BEGIN)
                                           ; SOURCE LINE # 401
                                           ; SOURCE LINE # 402
                                           ; SOURCE LINE # 407
C51 COMPILER V7.50   CORE_MAIN                                                             09/17/2020 21:06:51 PAGE 19  

0000 22                RET     
             ; FUNCTION service_004 (END)

             ; FUNCTION service_005 (BEGIN)
                                           ; SOURCE LINE # 410
                                           ; SOURCE LINE # 411
                                           ; SOURCE LINE # 413
0000 120000      E     LCALL   Oem_Hook_5MS_Event
                                           ; SOURCE LINE # 414
0003 900000      E     MOV     DPTR,#Timer5msCnt
0006 E0                MOVX    A,@DPTR
0007 04                INC     A
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 415
0009 900000      E     MOV     DPTR,#Timer125msCnt
000C E0                MOVX    A,@DPTR
000D 04                INC     A
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 416
000F E0                MOVX    A,@DPTR
0010 C3                CLR     C
0011 9419              SUBB    A,#019H
0013 4005              JC      ?C0027
                                           ; SOURCE LINE # 417
                                           ; SOURCE LINE # 418
0015 E4                CLR     A
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 419
0017 120000      E     LCALL   Oem_Hook_125MS_Event
                                           ; SOURCE LINE # 420
001A         ?C0027:
                                           ; SOURCE LINE # 421
001A 900000      E     MOV     DPTR,#Timer5msCnt
001D E0                MOVX    A,@DPTR
001E 30E017            JNB     ACC.0,?C0028
                                           ; SOURCE LINE # 422
                                           ; SOURCE LINE # 423
0021 120000      E     LCALL   Oem_Hook_10MS_Event
                                           ; SOURCE LINE # 424
0024 900000      E     MOV     DPTR,#Timer250msCnt
0027 E0                MOVX    A,@DPTR
0028 04                INC     A
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 425
002A E0                MOVX    A,@DPTR
002B C3                CLR     C
002C 9419              SUBB    A,#019H
002E 5003              JNC     $ + 5H
0030 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 426
                                           ; SOURCE LINE # 427
0033 E4                CLR     A
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 428
0035 020000      E     LJMP    Oem_Hook_250MS_Event
                                           ; SOURCE LINE # 429
                                           ; SOURCE LINE # 430
0038         ?C0028:
                                           ; SOURCE LINE # 432
                                           ; SOURCE LINE # 433
0038 900000      E     MOV     DPTR,#Timer5msCnt
003B E0                MOVX    A,@DPTR
C51 COMPILER V7.50   CORE_MAIN                                                             09/17/2020 21:06:51 PAGE 20  

003C 24FC              ADD     A,#0FCH
003E 6011              JZ      ?C0033
0040 24FE              ADD     A,#0FEH
0042 6012              JZ      ?C0034
0044 24FE              ADD     A,#0FEH
0046 6013              JZ      ?C0035
0048 2406              ADD     A,#06H
004A 7023              JNZ     ?C0038
                                           ; SOURCE LINE # 434
                                           ; SOURCE LINE # 435
004C         ?C0032:
004C 120000      E     LCALL   Oem_Hook_50MS_EventA
                                           ; SOURCE LINE # 436
004F 8023              SJMP    ?C0031
                                           ; SOURCE LINE # 437
0051         ?C0033:
0051 120000      E     LCALL   Oem_Hook_50MS_EventB
                                           ; SOURCE LINE # 438
0054 801E              SJMP    ?C0031
                                           ; SOURCE LINE # 439
0056         ?C0034:
0056 120000      E     LCALL   Oem_Hook_50MS_EventC
                                           ; SOURCE LINE # 440
0059 8019              SJMP    ?C0031
                                           ; SOURCE LINE # 441
005B         ?C0035:
005B 900000      E     MOV     DPTR,#Timer100msCntB
005E E0                MOVX    A,@DPTR
005F 04                INC     A
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 442
0061 E0                MOVX    A,@DPTR
0062 30E005            JNB     ACC.0,?C0036
                                           ; SOURCE LINE # 443
                                           ; SOURCE LINE # 444
0065 120000      E     LCALL   Oem_Hook_100MS_EventA
                                           ; SOURCE LINE # 445
0068 800A              SJMP    ?C0031
006A         ?C0036:
                                           ; SOURCE LINE # 447
                                           ; SOURCE LINE # 448
006A 120000      E     LCALL   Oem_Hook_100MS_EventB
                                           ; SOURCE LINE # 449
                                           ; SOURCE LINE # 450
006D 8005              SJMP    ?C0031
                                           ; SOURCE LINE # 452
006F         ?C0038:
006F E4                CLR     A
0070 900000      E     MOV     DPTR,#Timer5msCnt
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 453
                                           ; SOURCE LINE # 454
0074         ?C0031:
                                           ; SOURCE LINE # 456
0074 900000      E     MOV     DPTR,#Timer5msCnt
0077 E0                MOVX    A,@DPTR
0078 7062              JNZ     ?C0054
                                           ; SOURCE LINE # 457
                                           ; SOURCE LINE # 458
007A 900000      E     MOV     DPTR,#Timer100msCnt
007D E0                MOVX    A,@DPTR
007E 04                INC     A
C51 COMPILER V7.50   CORE_MAIN                                                             09/17/2020 21:06:51 PAGE 21  

007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 459
0080 E0                MOVX    A,@DPTR
0081 30E003            JNB     ACC.0,?C0040
                                           ; SOURCE LINE # 460
                                           ; SOURCE LINE # 461
0084 020000      E     LJMP    Oem_Hook_100MS_EventC
                                           ; SOURCE LINE # 462
0087         ?C0040:
                                           ; SOURCE LINE # 464
                                           ; SOURCE LINE # 465
0087 900000      E     MOV     DPTR,#Timer100msCnt
008A E0                MOVX    A,@DPTR
008B 120000      E     LCALL   ?C?CCASE
008E 0000        R     DW      ?C0043
0090 02                DB      02H
0091 0000        R     DW      ?C0044
0093 04                DB      04H
0094 0000        R     DW      ?C0045
0096 06                DB      06H
0097 0000        R     DW      ?C0046
0099 08                DB      08H
009A 0000        R     DW      ?C0047
009C 0A                DB      0AH
009D 0000        R     DW      ?C0048
009F 0C                DB      0CH
00A0 0000        R     DW      ?C0049
00A2 0E                DB      0EH
00A3 0000        R     DW      ?C0045
00A5 10                DB      010H
00A6 0000        R     DW      ?C0051
00A8 12                DB      012H
00A9 0000              DW      00H
00AB 0000        R     DW      ?C0052
                                           ; SOURCE LINE # 466
                                           ; SOURCE LINE # 467
00AD         ?C0043:
                                           ; SOURCE LINE # 468
00AD 800A              SJMP    ?C0070
                                           ; SOURCE LINE # 469
00AF         ?C0044:
                                           ; SOURCE LINE # 470
00AF 800B              SJMP    ?C0071
                                           ; SOURCE LINE # 471
00B1         ?C0045:
                                           ; SOURCE LINE # 472
00B1 800C              SJMP    ?C0072
                                           ; SOURCE LINE # 473
00B3         ?C0046:
00B3 020000      E     LJMP    Oem_Hook_1S_EventA
                                           ; SOURCE LINE # 474
                                           ; SOURCE LINE # 475
00B6         ?C0047:
00B6 020000      E     LJMP    Oem_Hook_1S_EventB
                                           ; SOURCE LINE # 476
                                           ; SOURCE LINE # 477
00B9         ?C0048:
00B9         ?C0070:
00B9 020000      E     LJMP    Oem_Hook_500MS_EventA
                                           ; SOURCE LINE # 478
                                           ; SOURCE LINE # 479
00BC         ?C0049:
C51 COMPILER V7.50   CORE_MAIN                                                             09/17/2020 21:06:51 PAGE 22  

00BC         ?C0071:
00BC 020000      E     LJMP    Oem_Hook_500MS_EventB
                                           ; SOURCE LINE # 480
                                           ; SOURCE LINE # 481
00BF         ?C0072:
00BF 020000      E     LJMP    Oem_Hook_500MS_EventC
                                           ; SOURCE LINE # 482
                                           ; SOURCE LINE # 483
00C2         ?C0051:
00C2 020000      E     LJMP    Oem_Hook_1S_EventC
                                           ; SOURCE LINE # 484
                                           ; SOURCE LINE # 485
00C5         ?C0052:
                                           ; SOURCE LINE # 486
00C5 E4                CLR     A
00C6 900000      E     MOV     DPTR,#Timer100msCnt
00C9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 487
00CA 900000      E     MOV     DPTR,#Timer1SecCnt
00CD E0                MOVX    A,@DPTR
00CE 04                INC     A
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 488
00D0 E0                MOVX    A,@DPTR
00D1 B40A08            CJNE    A,#0AH,?C0054
                                           ; SOURCE LINE # 489
                                           ; SOURCE LINE # 490
00D4 120000      E     LCALL   Oem_Hook_1Min_Event
                                           ; SOURCE LINE # 491
00D7 E4                CLR     A
00D8 900000      E     MOV     DPTR,#Timer1SecCnt
00DB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 492
                                           ; SOURCE LINE # 493
                                           ; SOURCE LINE # 495
                                           ; SOURCE LINE # 496
                                           ; SOURCE LINE # 497
                                           ; SOURCE LINE # 498
                                           ; SOURCE LINE # 499
00DC         ?C0054:
00DC 22                RET     
             ; FUNCTION service_005 (END)

             ; FUNCTION service_006 (BEGIN)
                                           ; SOURCE LINE # 502
                                           ; SOURCE LINE # 503
                                           ; SOURCE LINE # 505
0000 22                RET     
             ; FUNCTION service_006 (END)

             ; FUNCTION service_007 (BEGIN)
                                           ; SOURCE LINE # 508
                                           ; SOURCE LINE # 509
                                           ; SOURCE LINE # 522
0000 22                RET     
             ; FUNCTION service_007 (END)

             ; FUNCTION service_008 (BEGIN)
                                           ; SOURCE LINE # 524
                                           ; SOURCE LINE # 525
                                           ; SOURCE LINE # 562
0000 22                RET     
C51 COMPILER V7.50   CORE_MAIN                                                             09/17/2020 21:06:51 PAGE 23  

             ; FUNCTION service_008 (END)

             ; FUNCTION service_009 (BEGIN)
                                           ; SOURCE LINE # 565
                                           ; SOURCE LINE # 566
                                           ; SOURCE LINE # 601
0000 22                RET     
             ; FUNCTION service_009 (END)

             ; FUNCTION service_00A (BEGIN)
                                           ; SOURCE LINE # 603
                                           ; SOURCE LINE # 604
                                           ; SOURCE LINE # 606
0000 22                RET     
             ; FUNCTION service_00A (END)

             ; FUNCTION service_00B (BEGIN)
                                           ; SOURCE LINE # 609
                                           ; SOURCE LINE # 610
                                           ; SOURCE LINE # 612
0000 22                RET     
             ; FUNCTION service_00B (END)

             ; FUNCTION service_00C (BEGIN)
                                           ; SOURCE LINE # 615
                                           ; SOURCE LINE # 616
                                           ; SOURCE LINE # 618
0000 22                RET     
             ; FUNCTION service_00C (END)

             ; FUNCTION service_00D (BEGIN)
                                           ; SOURCE LINE # 621
                                           ; SOURCE LINE # 622
                                           ; SOURCE LINE # 624
0000 22                RET     
             ; FUNCTION service_00D (END)

             ; FUNCTION service_00E (BEGIN)
                                           ; SOURCE LINE # 627
                                           ; SOURCE LINE # 628
                                           ; SOURCE LINE # 630
0000 22                RET     
             ; FUNCTION service_00E (END)

             ; FUNCTION service_00F (BEGIN)
                                           ; SOURCE LINE # 633
                                           ; SOURCE LINE # 634
                                           ; SOURCE LINE # 636
0000 22                RET     
             ; FUNCTION service_00F (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    585    ----
   CONSTANT SIZE    =     32    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V7.50   CORE_MAIN                                                             09/17/2020 21:06:51 PAGE 24  


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
