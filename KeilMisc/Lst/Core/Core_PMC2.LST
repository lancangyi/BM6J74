C51 COMPILER V7.50   CORE_PMC2                                                             09/20/2020 10:56:18 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE CORE_PMC2
OBJECT MODULE PLACED IN Core\Core_PMC2.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe Core\Core_PMC2.c LA WL(1) CD OT(9,SIZE) NOAREGS OR INCDIR(.\Core\Include\;.
                    -\Oem\Include\)

line level    source

   1          /*----------------------------------------------------------------------------
   2           * TITLE: CORE_ACPI.C - ACPI Handler
   3           * FUNCTION:
   4           * SCI event generation.
   5           * ACPI SMBus transfer initiated by ACPI command.
   6           *
   7           * Copyright(c)1983-2009, Insyde Software Corporation. All Rights Reserved.
   8           *
   9           * You may not reproduce,distribute,publish,display,perform,modify,adapt,
  10           * transmit,broadcast,present,recite,release,license or otherwise exploit
  11           * any part of this publication in any form,by any means,without the prior
  12           * written permission of Insyde Software Corporation.
  13           *---------------------------------------------------------------------------*/
  14          #include "CORE_INC.H"
  15          #include "OEM_INC.H"
  16          
  17          /*-----------------------------------------------------------------------------
  18           * Local Parameter Definition
  19           *---------------------------------------------------------------------------*/
  20          #define T_PMC2_Burst_Loop        250
  21          
  22          //-----------------------------------------------------------------------------
  23          // ACPI Spec.13 ACPI Embedded Controller Interface Specification
  24          // Embedded Controller Command
  25          // Read Embedded Controller (RD_EC) 0x80
  26          // Write Embedded Controller (WR_EC) 0x81
  27          // Burst Enable Embedded Controller (BE_EC) 0x82
  28          // Burst Disable Embedded Controller (BD_EC) 0x83
  29          // Query Embedded Controller (QR_EC) 0x84
  30          // Process Command/Data received from System via the 2nd Host interface
  31          //-----------------------------------------------------------------------------
  32          void Service_PCI3(void)
  33          {
  34   1          if ( IsFlag0(PM2STS, IBF1) )  return;
  35   1          PMC2_vSetTotalBurstTime();   // Set Burst mode total time (2ms)
  36   1          Service_PCI3_Main();    // Process Command/Data
  37   1      
  38   1      }
  39          
  40          //-----------------------------------------------------------------------------
  41          // ACPI EC Command 0x80:
  42          // ACPI Spec.13.3.1 Read Embedded Controller, RD_EC (0x80)
  43          // Read Command (3 Bytes) -- First Bytes: Port 66H <-0x80
  44          // Byte #1 (Command byte Header) Interrupt on IBF=0
  45          //-----------------------------------------------------------------------------
  46          void EC686C_CMD_80(void)
  47          {
  48   1          //SCI_RESPONSE();     // Interrupt on IBF=0
  49   1          PM2Step = _PM2_STEP_1;
  50   1      
  51   1      }
  52          
  53          //-----------------------------------------------------------------------------
  54          // ACPI Spec.13.3.1 Read Embedded Controller, RD_EC (0x80)
C51 COMPILER V7.50   CORE_PMC2                                                             09/20/2020 10:56:18 PAGE 2   

  55          // Second Bytes: Port 62H -> Address Index (EC Space)
  56          // Byte #2 (Address byte to read) No Interrupt
  57          //-----------------------------------------------------------------------------
  58          void EC68_DATA_STEP1(void)
  59          {   // Byte #3 (Data read to host)
  60   1          // PM1DO = ACPI Sepc.13.2.3 Embedded Controller Data, EC_DATA (R/W)
  61   1          PM2Data1 = PMC2_Read_MapECSpace(PM2Data);
  62   1          PM2DO = PM2Data1;
  63   1      //    SCI_RESPONSE();     // Interrupt on OBF=1
  64   1          #if En_Record68
                  RamDebug(PM2Data1);
                  #endif
  67   1          PM2Step = 0;
  68   1      }
  69          
  70          //-----------------------------------------------------------------------------
  71          // ACPI EC Command 0x81:
  72          // ACPI Spec.13.3.2 Write Embedded Controller, WR_EC (0x81)
  73          // Write Command (3 Bytes) -- First Bytes: Port 66H <-0x81
  74          // Byte #1 (Command byte Header) Interrupt on IBF=0
  75          //-----------------------------------------------------------------------------
  76          void EC686C_CMD_81(void)
  77          {
  78   1      //    SCI_RESPONSE();     // Interrupt on IBF=0
  79   1          PM2Step = _PM2_STEP_2;
  80   1      
  81   1      }
  82          
  83          //-----------------------------------------------------------------------------
  84          // ACPI Spec.13.3.2 Write Embedded Controller, WR_EC (0x81)
  85          // Second Bytes: Port 62H -> Address Index (EC Space)
  86          // Byte #2 (Address byte to write) Interrupt on IBF=0
  87          //-----------------------------------------------------------------------------
  88          void EC68_DATA_STEP2(void)
  89          {
  90   1          PM2Data1=PM2Data;   //  Byte #2 Save Address Index
  91   1      //    SCI_RESPONSE();     // Interrupt on OBF=1
  92   1          PM2Step = _PM2_STEP_3;
  93   1      //AGA-Kernel>>
  94   1      
  95   1      //AGA-Kernel<<          
  96   1      }
  97          
  98          //-----------------------------------------------------------------------------
  99          // ACPI Spec.13.3.2 Write Embedded Controller, WR_EC (0x81)
 100          // Third Bytes: Port 62H -> Data Write to Address Index (EC Space)
 101          // Byte #3 (data byte to write) Interrupt on IBF=0
 102          //-----------------------------------------------------------------------------
 103          void EC68_DATA_STEP3(void)
 104          {   // Byte #3 (Data read to host)
 105   1      //    SCI_RESPONSE(); // Interrupt on OBF=1
 106   1          PMC2_Write_MapECSpace( PM2Data1,PM2Data );
 107   1          PM2Step = 0;
 108   1      }
 109          
 110          //-----------------------------------------------------------------------------
 111          // ACPI EC Command 0x82:
 112          // ACPI Spec.13.3.3 Burst Enable Embedded Controller, BE_EC (0x82)
 113          // Burst Enable Command (2 Bytes)
 114          // Byte #1 (Command byte Header) No Interrupt
 115          // The Embedded Controller sets the Burst bit of the Embedded Controller
 116          // Status Register, puts the Burst Acknowledge byte (0x90) into the SCI output
C51 COMPILER V7.50   CORE_PMC2                                                             09/20/2020 10:56:18 PAGE 3   

 117          // buffer, sets the OBF bit, and generates an SCI to signal OSPM that it is
 118          // in Burst mode.
 119          //-----------------------------------------------------------------------------
 120          void EC686C_CMD_82(void)
 121          {
 122   1          SET_BIT(PM2STS,4);  // PM1STS.4 Set Burst mode flag
 123   1          PM2DO = 0x90;       // Byte #2 (Burst acknowledge byte)
 124   1          OS_PMC2_Mode = 1;   // Auto Set ACPI Mode if Host Do ECCmd82
 125   1      //    SCI_RESPONSE();     // Interrupt on IBF=0
 126   1          #if En_Record68
                  RamDebug(0x90);
                  #endif
 129   1      
 130   1      }
 131          
 132          //-----------------------------------------------------------------------------
 133          // ACPI EC Command 0x83:
 134          // ACPI Spec.13.3.4 Burst Disable Embedded Controller, BD_EC (0x83)
 135          // Burst Disable Command (1 Byte)
 136          // Byte #1 (Command byte Header) Interrupt on IBF=0
 137          //-----------------------------------------------------------------------------
 138          void EC686C_CMD_83(void)
 139          {
 140   1          CLEAR_BIT(PM2STS,4);    /* PM1STS.4 Set Burst mode flag.        */
 141   1          /*  Clear Burst bit in secondary Host interface status register.*/
 142   1      //    SCI_RESPONSE();         /* Interrupt on IBF=0.                  */
 143   1      
 144   1      }
 145          
 146          //-----------------------------------------------------------------------------
 147          // Burst mode or normal mode
 148          //-----------------------------------------------------------------------------
 149          bit PMC2_CheckBurstMode(void)
 150          {
 151   1          WORD BurstLoopOut;
 152   1      
 153   1          BurstLoopOut = T_PMC2_Burst_Loop;
 154   1      
 155   1          while((PM2STS&0x02)==0x00)
 156   1          {
 157   2              BurstLoopOut--;
 158   2              if( TF1 || (BurstLoopOut==0) )  // Time-Out
 159   2              {
 160   3                  ClearFlag( PM2STS,BURST );
 161   3                  //SCI_RESPONSE();     // Generate Interrupt
 162   3                  TF1=0;
 163   3                  return(0);
 164   3              }
 165   2          }
 166   1          return(1);
 167   1      
 168   1      }
 169          
 170          //-----------------------------------------------------------------------------
 171          // Set Burst mode total time (1ms)
 172          //-----------------------------------------------------------------------------
 173          void PMC2_vSetTotalBurstTime(void)
 174          {
 175   1          ET1 = 0;                        // Disable timer1 interrupt
 176   1          TH1 = (T_ACPI_BurstTime)>>8;    // Set timer1 counter 2ms
 177   1          TL1 = (T_ACPI_BurstTime);       // Set timer1 counter 2ms
 178   1          TR1 = 1;                        // Enable timer1
C51 COMPILER V7.50   CORE_PMC2                                                             09/20/2020 10:56:18 PAGE 4   

 179   1          TF1 = 0;                        // Clear overflow flag
 180   1      }
 181          //-----------------------------------------------------------------------------
 182          
 183          //-----------------------------------------------------------------------------
 184          const FUNCT_PTR_V_V code EC686CCmd8X_Table[16] =
 185          {
 186              EC686C_CMD_80,          // Process ACPI command 80
 187              EC686C_CMD_81,          // Process ACPI command 81
 188              EC686C_CMD_82,          // Process ACPI command 82
 189              EC686C_CMD_83,          // Process ACPI command 83
 190              EC686C_CMD_84,          // Process ACPI command 84
 191              EC686C_CMD_85,          // Process ACPI command 85
 192              EC686C_CMD_86,          // Process ACPI command 86
 193              EC686C_CMD_87,          // Process ACPI command 87
 194              EC686C_CMD_88,          // Process ACPI command 88
 195              EC686C_CMD_89,          // Process ACPI command 89
 196              EC686C_CMD_8A,          // Process ACPI command 8A
 197              EC686C_CMD_8B,          // Process ACPI command 8B
 198              EC686C_CMD_8C,          // Process ACPI command 8C
 199              EC686C_CMD_8D,          // Process ACPI command 8D
 200              EC686C_CMD_8E,          // Process ACPI command 8E
 201              EC686C_CMD_8F           // Process ACPI command 8F
 202          };
 203          //-----------------------------------------------------------------------------
 204          void EC_PMC2_Cmd_8X(void)
 205          {
 206   1          (EC686CCmd8X_Table[PM2Cmd&0x0F])();
 207   1      }
 208          //-----------------------------------------------------------------------------
 209          // Process Command/Data received from System via the 2nd Host interface
 210          //-----------------------------------------------------------------------------
 211          const FUNCT_PTR_V_V code Port6C_Table[16] =
 212          {
 213              EC_PMC2_Cmd_0X,          // Process ACPI command 0x
 214              EC_PMC2_Cmd_1X,          // Process ACPI command 1x
 215              EC_PMC2_Cmd_2X,          // Process ACPI command 2x
 216              EC_PMC2_Cmd_3X,          // Process ACPI command 3x
 217              EC_PMC2_Cmd_4X,          // Process ACPI command 4x
 218              EC_PMC2_Cmd_5X,          // Process ACPI command 5x
 219              EC_PMC2_Cmd_6X,          // Process ACPI command 6x
 220              EC_PMC2_Cmd_7X,          // Process ACPI command 7x
 221              EC_PMC2_Cmd_8X,          // Process ACPI command 8x
 222              EC_PMC2_Cmd_9X,          // Process ACPI command 9x
 223              EC_PMC2_Cmd_AX,          // Process ACPI command Ax
 224              EC_PMC2_Cmd_BX,          // Process ACPI command Bx
 225              EC_PMC2_Cmd_CX,          // Process ACPI command Cx
 226              EC_PMC2_Cmd_DX,          // Process ACPI command Dx
 227              EC_PMC2_Cmd_EX,          // Process ACPI command Ex
 228              EC_PMC2_Cmd_FX,          // Process ACPI command Fx
 229          };
 230          //-----------------------------------------------------------------------------
 231          const FUNCT_PTR_V_V code Port68_Table[16] =
 232          {
 233              EC68_DATA_STEP0,    // PM1Step=0 Process ACPI EC data
 234              EC68_DATA_STEP1,    // PM1Step=1 Process ACPI EC data
 235              EC68_DATA_STEP2,    // PM1Step=2 Process ACPI EC data
 236              EC68_DATA_STEP3,    // PM1Step=3 Process ACPI EC data
 237              EC68_DATA_STEP4,    // PM1Step=4 Process ACPI EC data
 238              EC68_DATA_STEP5,    // PM1Step=5 Process ACPI EC data
 239              EC68_DATA_STEP6,    // PM1Step=6 Process ACPI EC data
 240              EC68_DATA_STEP7     // PM1Step=7 Process ACPI EC data
C51 COMPILER V7.50   CORE_PMC2                                                             09/20/2020 10:56:18 PAGE 5   

 241          };
 242          //-----------------------------------------------------------------------------
 243          // Service Embedded Controller Interface
 244          //-----------------------------------------------------------------------------
 245          void Service_PCI3_Main(void)
 246          {
 247   1      
 248   1          do
 249   1          {   // PM2STS = Embedded Controller Status, EC_SC (R)
 250   2              if ( PM2STS & C_D1 )  // CMD:1=Byte in data register is a command byte
 251   2              {
 252   3                  PM2Cmd  = PM2DI; // Load command from Port Buffer
 253   3                  PM2Step = 0;
 254   3      
 255   3                  #if SUPPORTED_RECORDER
                          if(En_Record6C )
                          {
                              RamDebug(0x6C); RamDebug(PM2Cmd);
                          }
                          #endif
 261   3      
 262   3                  (Port6C_Table[PM2Cmd>>4])(); // Handle command
 263   3      
 264   3              }
 265   2              else    // CMD:0=Byte in data register is a data byte
 266   2              {
 267   3                  //PM1DI,PM1DO=ACPI Sepc.13.2.3 Embedded Controller Data,EC_DATA(R/W)
 268   3                  PM2Data = PM2DI;         // Load data
 269   3                  if (PM2Step!=0x00)
 270   3                  {
 271   4                      #if SUPPORTED_RECORDER
                              if(En_Record68)
                              {
                                  RamDebug(0x68); RamDebug(PM2Data);
                              }
                              #endif
 277   4      
 278   4                      (Port68_Table[PM2Step&0x07])(); // Handle command data
 279   4      
 280   4                  }
 281   3                  else
 282   3                  {
 283   4                      while( ECUnProcessCnt2 < 0xFF )
 284   4                      {
 285   5                          ECUnProcessCnt2++;
 286   5                      }
 287   4                  }
 288   3              }
 289   2      
 290   2          }
 291   1          while( IsFlag1(PM2STS,BURST) && PMC2_CheckBurstMode() );
 292   1      
 293   1          ET1 = 1;    // Enable timer1 interrupt
 294   1      
 295   1      
 296   1      }
 297          //-----------------------------------------------------------------------------
 298          
 299          /*-----------------------------------------------------------------------------
 300           * End
 301           *---------------------------------------------------------------------------*/
C51 COMPILER V7.50   CORE_PMC2                                                             09/20/2020 10:56:18 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com001E (BEGIN)
0000         L?0031:
0000 F583              MOV     DPH,A
0002 E4                CLR     A
0003 93                MOVC    A,@A+DPTR
0004 FE                MOV     R6,A
0005 7401              MOV     A,#01H
0007 93                MOVC    A,@A+DPTR
0008 CA                XCH     A,R2
0009 EE                MOV     A,R6
000A CA                XCH     A,R2
000B F9                MOV     R1,A
000C 22                RET     
             ; FUNCTION Com001E (END)

             ; FUNCTION Service_PCI3 (BEGIN)
                                           ; SOURCE LINE # 32
                                           ; SOURCE LINE # 33
                                           ; SOURCE LINE # 34
0000 900000      E     MOV     DPTR,#PM2STS
0003 E0                MOVX    A,@DPTR
0004 30E106            JNB     ACC.1,?C0002
0007         ?C0001:
                                           ; SOURCE LINE # 35
0007 120000      R     LCALL   PMC2_vSetTotalBurstTime
                                           ; SOURCE LINE # 36
000A 120000      R     LCALL   Service_PCI3_Main
                                           ; SOURCE LINE # 38
000D         ?C0002:
000D 22                RET     
             ; FUNCTION Service_PCI3 (END)

             ; FUNCTION EC686C_CMD_80 (BEGIN)
                                           ; SOURCE LINE # 46
                                           ; SOURCE LINE # 47
                                           ; SOURCE LINE # 49
0000 750001      E     MOV     PM2Step,#01H
                                           ; SOURCE LINE # 51
0003 22                RET     
             ; FUNCTION EC686C_CMD_80 (END)

             ; FUNCTION EC68_DATA_STEP1 (BEGIN)
                                           ; SOURCE LINE # 58
                                           ; SOURCE LINE # 59
                                           ; SOURCE LINE # 61
0000 AF00        E     MOV     R7,PM2Data
0002 120000      E     LCALL   _PMC2_Read_MapECSpace
0005 8F00        E     MOV     PM2Data1,R7
                                           ; SOURCE LINE # 62
0007 900000      E     MOV     DPTR,#PM2DO
000A E500        E     MOV     A,PM2Data1
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 67
000D E4                CLR     A
000E F500        E     MOV     PM2Step,A
                                           ; SOURCE LINE # 68
0010 22                RET     
             ; FUNCTION EC68_DATA_STEP1 (END)

C51 COMPILER V7.50   CORE_PMC2                                                             09/20/2020 10:56:18 PAGE 7   

             ; FUNCTION EC686C_CMD_81 (BEGIN)
                                           ; SOURCE LINE # 76
                                           ; SOURCE LINE # 77
                                           ; SOURCE LINE # 79
0000 750002      E     MOV     PM2Step,#02H
                                           ; SOURCE LINE # 81
0003 22                RET     
             ; FUNCTION EC686C_CMD_81 (END)

             ; FUNCTION EC68_DATA_STEP2 (BEGIN)
                                           ; SOURCE LINE # 88
                                           ; SOURCE LINE # 89
                                           ; SOURCE LINE # 90
0000 850000      E     MOV     PM2Data1,PM2Data
                                           ; SOURCE LINE # 92
0003 750003      E     MOV     PM2Step,#03H
                                           ; SOURCE LINE # 96
0006 22                RET     
             ; FUNCTION EC68_DATA_STEP2 (END)

             ; FUNCTION EC68_DATA_STEP3 (BEGIN)
                                           ; SOURCE LINE # 103
                                           ; SOURCE LINE # 104
                                           ; SOURCE LINE # 106
0000 AD00        E     MOV     R5,PM2Data
0002 AF00        E     MOV     R7,PM2Data1
0004 120000      E     LCALL   _PMC2_Write_MapECSpace
                                           ; SOURCE LINE # 107
0007 E4                CLR     A
0008 F500        E     MOV     PM2Step,A
                                           ; SOURCE LINE # 108
000A 22                RET     
             ; FUNCTION EC68_DATA_STEP3 (END)

             ; FUNCTION EC686C_CMD_82 (BEGIN)
                                           ; SOURCE LINE # 120
                                           ; SOURCE LINE # 121
                                           ; SOURCE LINE # 122
0000 900000      E     MOV     DPTR,#PM2STS
0003 E0                MOVX    A,@DPTR
0004 4410              ORL     A,#010H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 123
0007 900000      E     MOV     DPTR,#PM2DO
000A 7490              MOV     A,#090H
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 124
000D 7800        E     MOV     R0,#LOW CORE_PMFLAG
000F E6                MOV     A,@R0
0010 4480              ORL     A,#080H
0012 F6                MOV     @R0,A
                                           ; SOURCE LINE # 130
0013 22                RET     
             ; FUNCTION EC686C_CMD_82 (END)

             ; FUNCTION EC686C_CMD_83 (BEGIN)
                                           ; SOURCE LINE # 138
                                           ; SOURCE LINE # 139
                                           ; SOURCE LINE # 140
0000 900000      E     MOV     DPTR,#PM2STS
0003 E0                MOVX    A,@DPTR
0004 54EF              ANL     A,#0EFH
C51 COMPILER V7.50   CORE_PMC2                                                             09/20/2020 10:56:18 PAGE 8   

0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 144
0007 22                RET     
             ; FUNCTION EC686C_CMD_83 (END)

             ; FUNCTION PMC2_CheckBurstMode (BEGIN)
                                           ; SOURCE LINE # 149
                                           ; SOURCE LINE # 150
                                           ; SOURCE LINE # 153
0000 900000      R     MOV     DPTR,#BurstLoopOut
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 74FA              MOV     A,#0FAH
0008 F0                MOVX    @DPTR,A
0009         ?C0010:
                                           ; SOURCE LINE # 155
0009 900000      E     MOV     DPTR,#PM2STS
000C E0                MOVX    A,@DPTR
000D 20E122            JB      ACC.1,?C0011
                                           ; SOURCE LINE # 156
                                           ; SOURCE LINE # 157
0010 900000      R     MOV     DPTR,#BurstLoopOut
0013 74FF              MOV     A,#0FFH
0015 F5F0              MOV     B,A
0017 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 158
001A 208F0A            JB      TF1,?C0013
001D 900000      R     MOV     DPTR,#BurstLoopOut
0020 E0                MOVX    A,@DPTR
0021 7002              JNZ     ?C0028
0023 A3                INC     DPTR
0024 E0                MOVX    A,@DPTR
0025         ?C0028:
0025 70E2              JNZ     ?C0010
0027         ?C0013:
                                           ; SOURCE LINE # 159
                                           ; SOURCE LINE # 160
0027 900000      E     MOV     DPTR,#PM2STS
002A E0                MOVX    A,@DPTR
002B 54EF              ANL     A,#0EFH
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 162
002E C28F              CLR     TF1
                                           ; SOURCE LINE # 163
0030 C3                CLR     C
0031 22                RET     
                                           ; SOURCE LINE # 164
                                           ; SOURCE LINE # 165
0032         ?C0011:
                                           ; SOURCE LINE # 166
0032 D3                SETB    C
                                           ; SOURCE LINE # 168
0033         ?C0014:
0033 22                RET     
             ; FUNCTION PMC2_CheckBurstMode (END)

             ; FUNCTION PMC2_vSetTotalBurstTime (BEGIN)
                                           ; SOURCE LINE # 173
                                           ; SOURCE LINE # 174
                                           ; SOURCE LINE # 175
0000 C2AB              CLR     ET1
C51 COMPILER V7.50   CORE_PMC2                                                             09/20/2020 10:56:18 PAGE 9   

                                           ; SOURCE LINE # 176
0002 758DFA            MOV     TH1,#0FAH
                                           ; SOURCE LINE # 177
0005 758B01            MOV     TL1,#01H
                                           ; SOURCE LINE # 178
0008 D28E              SETB    TR1
                                           ; SOURCE LINE # 179
000A C28F              CLR     TF1
                                           ; SOURCE LINE # 180
000C 22                RET     
             ; FUNCTION PMC2_vSetTotalBurstTime (END)

             ; FUNCTION EC_PMC2_Cmd_8X (BEGIN)
                                           ; SOURCE LINE # 204
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 206
0000 E500        E     MOV     A,PM2Cmd
0002 540F              ANL     A,#0FH
0004 25E0              ADD     A,ACC
0006 2400        R     ADD     A,#LOW EC686CCmd8X_Table
0008 F582              MOV     DPL,A
000A E4                CLR     A
000B 3400        R     ADDC    A,#HIGH EC686CCmd8X_Table
000D 120000      R     LCALL   L?0031
0010 020000      E     LJMP    ?C?ICALL
             ; FUNCTION EC_PMC2_Cmd_8X (END)

             ; FUNCTION Service_PCI3_Main (BEGIN)
                                           ; SOURCE LINE # 245
                                           ; SOURCE LINE # 246
0000         ?C0019:
                                           ; SOURCE LINE # 249
                                           ; SOURCE LINE # 250
0000 900000      E     MOV     DPTR,#PM2STS
0003 E0                MOVX    A,@DPTR
0004 30E319            JNB     ACC.3,?C0020
                                           ; SOURCE LINE # 251
                                           ; SOURCE LINE # 252
0007 900000      E     MOV     DPTR,#PM2DI
000A E0                MOVX    A,@DPTR
000B F500        E     MOV     PM2Cmd,A
                                           ; SOURCE LINE # 253
000D E4                CLR     A
000E F500        E     MOV     PM2Step,A
                                           ; SOURCE LINE # 262
0010 E500        E     MOV     A,PM2Cmd
0012 C4                SWAP    A
0013 540F              ANL     A,#0FH
0015 25E0              ADD     A,ACC
0017 2400        R     ADD     A,#LOW Port6C_Table
0019 F582              MOV     DPL,A
001B E4                CLR     A
001C 3400        R     ADDC    A,#HIGH Port6C_Table
                                           ; SOURCE LINE # 264
001E 8017              SJMP    ?C0029
0020         ?C0020:
                                           ; SOURCE LINE # 266
                                           ; SOURCE LINE # 268
0020 900000      E     MOV     DPTR,#PM2DI
0023 E0                MOVX    A,@DPTR
0024 F500        E     MOV     PM2Data,A
                                           ; SOURCE LINE # 269
C51 COMPILER V7.50   CORE_PMC2                                                             09/20/2020 10:56:18 PAGE 10  

0026 E500        E     MOV     A,PM2Step
0028 6015              JZ      ?C0024
                                           ; SOURCE LINE # 270
                                           ; SOURCE LINE # 278
002A E500        E     MOV     A,PM2Step
002C 5407              ANL     A,#07H
002E 25E0              ADD     A,ACC
0030 2400        R     ADD     A,#LOW Port68_Table
0032 F582              MOV     DPL,A
0034 E4                CLR     A
0035 3400        R     ADDC    A,#HIGH Port68_Table
0037         ?C0029:
0037 120000      R     LCALL   L?0031
003A 120000      E     LCALL   ?C?ICALL
                                           ; SOURCE LINE # 280
003D 800B              SJMP    ?C0017
                                           ; SOURCE LINE # 282
003F         ?C0024:
                                           ; SOURCE LINE # 283
003F E500        E     MOV     A,ECUnProcessCnt2
0041 C3                CLR     C
0042 94FF              SUBB    A,#0FFH
0044 5004              JNC     ?C0017
                                           ; SOURCE LINE # 284
                                           ; SOURCE LINE # 285
0046 0500        E     INC     ECUnProcessCnt2
                                           ; SOURCE LINE # 286
0048 80F5              SJMP    ?C0024
                                           ; SOURCE LINE # 287
                                           ; SOURCE LINE # 288
                                           ; SOURCE LINE # 290
004A         ?C0017:
                                           ; SOURCE LINE # 291
004A 900000      E     MOV     DPTR,#PM2STS
004D E0                MOVX    A,@DPTR
004E 30E405            JNB     ACC.4,?C0018
0051 120000      R     LCALL   PMC2_CheckBurstMode
0054 40AA              JC      ?C0019
0056         ?C0018:
                                           ; SOURCE LINE # 293
0056 D2AB              SETB    ET1
                                           ; SOURCE LINE # 296
0058 22                RET     
             ; FUNCTION Service_PCI3_Main (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    271    ----
   CONSTANT SIZE    =     96    ----
   XDATA SIZE       =   ----       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
