C51 COMPILER V7.50   CORE_RAM                                                              09/25/2020 15:06:31 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE CORE_RAM
OBJECT MODULE PLACED IN Core\Core_Ram.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe Core\Core_Ram.c LA WL(1) CD OT(9,SIZE) NOAREGS OR INCDIR(.\Core\Include\;.\
                    -Oem\Include\)

line level    source

   1          /*-----------------------------------------------------------------------------
   2           * Filename: CORE_MEMORY.C     For Chipset: ITE.IT85XX
   3           *
   4           * Function: Memory Definition for extern all code base reference
   5           *
   6           * [Memory Map Description]
   7           *
   8           * =Chip Internal= 0x00-0xFF
   9           * 0x00-0xFF     For Kernel and Chip Level use
  10           *
  11           ***************************************************
  12           * Chip 8500       : External ram 0x000-0x7FF
  13           * Chip Other 85XX : External ram 0x000-0xFFF
  14           ***************************************************
  15           * Memory Map :
  16           * 0x000-0x0FF   For Kernel Core/Module
  17           * 0x100-0x1FF   OEM RAM
  18           * 0x200-0x2FF   OEM RAM
  19           * 0x300-0x3FF   OEM RAM
  20           * 0x400-0x4FF   OEM RAM
  21           * 0x500-0x5FF   OEM RAM
  22           * 0x600-0x6FF   For ITE flash utility,EC SPI rom read write function, and ramdebug function.
  23           * 0x700-0x7FF   For Keil C Complier and Ram Code Space (for SPI programming).
  24           * 0x800-0x8FF   OEM RAM
  25           * 0x800-0x9FF   OEM RAM
  26           * 0xA00-0xAFF   OEM RAM
  27           * 0xB00-0xBFF   OEM RAM
  28           * 0xC00-0xCFF   OEM RAM
  29           * 0xD00-0xDFF   OEM RAM
  30           * 0xE00-0xEFF   OEM RAM
  31           * 0xF00-0xFFF   OEM RAM
  32           *
  33           * Copyright (c) 2006-2009, ITE Tech. Inc. All Rights Reserved.
  34           *---------------------------------------------------------------------------*/
  35          
  36          //-----------------------------------------------------------------------------
  37          // Common Header Include
  38          //-----------------------------------------------------------------------------
  39          #include "Core_Inc.h"
  40          #include "Oem_Inc.h"
  41          
  42          /*****************************************************************************/
  43          /* 8032 BANK REGISTER RAM AREA  (0x00 ~ 0x1F) ********************************/
  44          /*****************************************************************************/
  45          // 0x00 - 0x1F for Chip R0-R7 Bank 0-3
  46          
  47          
  48          /*****************************************************************************/
  49          /* INTERNAL BIT ADDRESS RAM AREA  (0x20 ~ 0x2F) ******************************/
  50          /*****************************************************************************/
  51          
  52          volatile unsigned char bdata Service    _at_ 0x20;
  53          sbit F_Service_000      = Service^0;
  54          sbit F_Service_001      = Service^1;
C51 COMPILER V7.50   CORE_RAM                                                              09/25/2020 15:06:31 PAGE 2   

  55          sbit F_Service_002      = Service^2;
  56          sbit F_Service_003      = Service^3;
  57          sbit F_Service_004      = Service^4;
  58          sbit F_Service_005      = Service^5;
  59          sbit F_Service_006      = Service^6;
  60          sbit F_Service_007      = Service^7;
  61          
  62          volatile unsigned char bdata Service1 _at_ 0x21;        
  63          sbit F_Service_008      = Service1^0;
  64          sbit F_Service_009      = Service1^1;
  65          sbit F_Service_00A     = Service1^2;
  66          sbit F_Service_00B     = Service1^3;
  67          sbit F_Service_00C      = Service1^4;
  68          sbit F_Service_00D      = Service1^5;
  69          sbit F_Service_00E      = Service1^6; 
  70          sbit F_Service_00F      = Service1^7;
  71          
  72          volatile unsigned char bdata SWKBCFlag _at_ 0x22;
  73          sbit KbdNeedResponseFlag        = SWKBCFlag^0;
  74          sbit ExtendMatrix                               = SWKBCFlag^1;
  75          sbit Isr_Int1_Occur                     = SWKBCFlag^2;
  76          sbit FastA20                                    = SWKBCFlag^3;
  77          sbit ChkAUXRespFlag2            = SWKBCFlag^4;
  78          sbit ECCheckBurstMode           = SWKBCFlag^5;
  79          sbit OEM_Isr_Int1_Request       = SWKBCFlag^6;
  80          sbit FnStickKey                         = SWKBCFlag^7;
  81          
  82          volatile unsigned char bdata Ccb42 _at_ 0x23;
  83          sbit Ccb42_INTR_KEY     = Ccb42^0;
  84          sbit Ccb42_INTR_AUX     = Ccb42^1;
  85          sbit Ccb42_SYS_FLAG     = Ccb42^2;
  86          sbit Ccb42_RV1                  = Ccb42^3;
  87          sbit Ccb42_DISAB_KEY    = Ccb42^4;
  88          sbit Ccb42_DISAB_AUX    = Ccb42^5;
  89          sbit Ccb42_XLATE_PC     = Ccb42^6;
  90          sbit Ccb42_RV2                  = Ccb42^7;
  91          
  92          volatile unsigned char bdata Led_Data _at_ 0x24;
  93          sbit Led_Data_SCROLL    = Led_Data^0;
  94          sbit Led_Data_NUM               = Led_Data^1;
  95          sbit Led_Data_CAPS              = Led_Data^2;
  96          sbit Led_Data_OVL               = Led_Data^3;
  97          sbit Led_Data_LED4              = Led_Data^4;
  98          sbit Led_Data_LED5              = Led_Data^5;
  99          sbit Led_Data_LED6              = Led_Data^6;
 100          sbit Led_Data_LED7              = Led_Data^7;
 101          
 102          volatile unsigned char bdata AuxTestFlagS _at_ 0x25;
 103          sbit PS2StartBit                = AuxTestFlagS^0;
 104          sbit MouseDriverIn              = AuxTestFlagS^1;
 105          sbit KeyboardDriverIn       = AuxTestFlagS^2;
 106          sbit AUX2ByteCommand    = AuxTestFlagS^3;
 107          sbit AuxTestFlagS_RV1   = AuxTestFlagS^4;
 108          sbit AuxTestFlagS_RV2   = AuxTestFlagS^5;
 109          sbit AuxTestFlagS_RV3   = AuxTestFlagS^6;
 110          sbit AuxTestFlagS_RV4   = AuxTestFlagS^7;
 111          
 112          volatile unsigned char bdata MULPX _at_ 0x26;
 113          sbit EnableTP                           = MULPX^0;
 114          sbit MULPX_Mx_state2            = MULPX^1;
 115          sbit MULPX_Mx_state3            = MULPX^2;
 116          sbit MULPX_Multiplex            = MULPX^3;
C51 COMPILER V7.50   CORE_RAM                                                              09/25/2020 15:06:31 PAGE 3   

 117          sbit MULPX_RV1                          = MULPX^4;
 118          sbit MULPX_RV2                          = MULPX^5;
 119          sbit MULPX_RV3                          = MULPX^6;
 120          sbit MULPX_RV4                          = MULPX^7;
 121          /*****************************************************************************/
 122          //      NOTE :
 123          /*****************************************************************************/
 124          // Don't use bit addressble 0x2E and 0x2F.
 125          /*****************************************************************************/
 126          /*****************************************************************************/
 127          /*****************************************************************************/
 128          //      BIT ADDRESS END MARK
 129          //                          >>----------->
 130          //                                          DIRECT START MARK
 131          /*****************************************************************************/
 132          
 133          
 134          /*****************************************************************************/
 135          /* INTERNAL DIRECT RAM AREA       (0x30 ~ 0x7F) ******************************/
 136          /*****************************************************************************/
 137          //-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
 138          IBYTE       _R1                             _at_ 0x30;
 139          IBYTE       _R2                             _at_ 0x31;
 140          IBYTE       _R3                             _at_ 0x32;
 141          IBYTE       _R4                             _at_ 0x33;
 142          IBYTE       _R5                             _at_ 0x34;
 143          IBYTE       _R6                             _at_ 0x35;
 144          IWORD     _W1                             _at_ 0x36;            //0x36-0x37
 145          
 146          BITS_8      CORE_PMFLAG                     _at_ 0x38;
 147          IBYTE   _FlashCMD                                       _at_    0x39;
 148          IBYTE   _SEND                                           _at_    0x3A;
 149          IBYTE   ExitRamCodeCommand              _at_    0x3B;
 150          IBYTE   Kernel_Code_Version                     _at_    0x3C;
 151          
 152          
 153          //0x60-0x6D  PM1/PM2
 154          //-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
 155          IBYTE       PM1Cmd                              _at_ 0x60;
 156          IBYTE       PM1Step                             _at_ 0x61;
 157          IBYTE       PM1StepSP                           _at_ 0x62;
 158          IBYTE       PM1Data                             _at_ 0x63;
 159          IBYTE       PM1Data1                            _at_ 0x64;
 160          IBYTE       PM1Data2                            _at_ 0x65;
 161          IBYTE       PM2Cmd                              _at_ 0x66;
 162          IBYTE       PM2Step                             _at_ 0x67;
 163          IBYTE       PM2StepSP                           _at_ 0x68;
 164          IBYTE       PM2Data                             _at_ 0x69;
 165          IBYTE       PM2Data1                            _at_ 0x6A;
 166          IBYTE       PM2Data2                            _at_ 0x6B;
 167          IBYTE       ECUnProcessCnt                      _at_ 0x6C;
 168          IBYTE       ECUnProcessCnt2             _at_ 0x6D;
 169          
 170          //-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
 171          //***GAP***
 172          //0x6E-0x6F
 173          //-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
 174          
 175          BYTE code *idata Tmp_code_pointer       _at_ 0x70;  
 176          IBYTE   KBHICmd                         _at_ 0x72;
 177          IBYTE   KBHIStep                        _at_ 0x73;
 178          IBYTE   KBHIData                        _at_ 0x74;
C51 COMPILER V7.50   CORE_RAM                                                              09/25/2020 15:06:31 PAGE 4   

 179          IBYTE   KBHIData1                       _at_ 0x75;
 180          IBYTE   KBHIData2                       _at_ 0x76;
 181          //-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
 182          //***GAP***
 183          //0x77-0x7F
 184          //-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
 185          
 186          
 187          /*****************************************************************************/
 188          /*****************************************************************************/
 189          //      DIRECT END MARK
 190          //                          >>----------->
 191          //                                          INDIRECT START MARK
 192          /*****************************************************************************/
 193          /* INTERNAL INDIRECT RAM AREA     (0x80 ~ 0xFF) ******************************/
 194          /*****************************************************************************/
 195          //----------------------------------------------------------------------------
 196          // Internal ram variables (Indirect)[0x80-0xCF]
 197          //----------------------------------------------------------------------------
 198          
 199          //For SWKBC
 200          IIBYTE  KB_Command                      _at_ 0x80;
 201          IIBYTE  KB_CodeSet                      _at_ 0x81;
 202          IIBYTE  PS2KB_Typematic                 _at_ 0x82;
 203          IIBYTE  Save_Typematic                  _at_ 0x83;
 204          IIBYTE  Main_KB_CHN                     _at_ 0x84;
 205          IIBYTE  AuxFlags[3]                             _at_ 0x85;      
 206          IIBYTE  Main_KB_ACK_CUNT                _at_ 0x88;
 207          IIBYTE  KBHIReponse                     _at_ 0x89;
 208          IIBYTE  Pass_Buff[8]                            _at_ 0x8A;
 209          IIBYTE  Pass_Buff_Idx                   _at_ 0x92;
 210          IIBYTE          Pass_On                                 _at_ 0x93;
 211          IIBYTE  Pass_Off                                _at_ 0x94;
 212          IIBYTE  Pass_Make1                              _at_ 0x95;
 213          IIBYTE          Pass_Make2                              _at_ 0x96;
 214          FLAGS   Flag                                            _at_ 0x97;// 2 bytes
 215          
 216          //-----------------------------------------------------------------------------
 217          XBYTE   *idata  Tmp_XPntr                       _at_ 0x99;  //  2 bytes
 218          XBYTE   *idata Tmp_XPntr1                       _at_ 0x9B;      //  2 bytes
 219          
 220          IIBYTE          IVECT_BACKUP                            _at_ 0x9D;      //For incorrect IVECT number issue
 221          
 222          //--- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- -
 223          //Stack                             0xD0 - 0xFF         // 48 bytes
 224          //
 225          // Don't use Idata (0xD0 ~ 0xFF).
 226          // Idata (0xD0 ~ 0xFF). for stack point.
 227          //--- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- -
 228          
 229          
 230          /*****************************************************************************/
 231          /*****************************************************************************/
 232          //      INTERNAL END MARK
 233          //                          >>----------->
 234          //                                          EXTERNAL START MARK
 235          /*****************************************************************************/
 236          /* EXTERNAL RAM AREA      (0x0000 ~ 0x00FF) **********************************/
 237          /*****************************************************************************/
 238          
 239          //-----------------------------------------------------------------------------
 240          //-----------------------------------------------------------------------------
C51 COMPILER V7.50   CORE_RAM                                                              09/25/2020 15:06:31 PAGE 5   

 241          #define OEMHook_MemBase     0x0000  //-0x001F
 242          XBYTE    Timer1msCnt                            _at_ 0x0000;
 243          XBYTE   Timer5msCnt                             _at_ 0x0001;
 244          XBYTE   Timer5msCntB                            _at_ 0x0002;
 245          XBYTE   Timer100msCnt                           _at_ 0x0003;
 246          XBYTE   Timer100msCntB                          _at_ 0x0004;
 247          XBYTE   Timer100msCntC                          _at_ 0x0005;
 248          XBYTE   Timer1SecCnt                            _at_ 0x0006;
 249          XBYTE   Timer1MinCnt                            _at_ 0x0007;
 250          XBYTE   Timer125msCnt                           _at_ 0x0008;
 251          XBYTE   Timer250msCnt                           _at_ 0x0009;
 252          XBYTE   RSTStatus                                       _at_ 0x000A;
 253          
 254          //-----------------------------------------------------------------------------
 255          //For INPUTDEBOUNCE
 256          //-----------------------------------------------------------------------------
 257          XBYTE   DEBOUNCE_FLAG1                          _at_ 0x000B;
 258          XBYTE   DEBOUNCE_FLAG2                          _at_ 0x000C;
 259          XBYTE   DEBOUNCE_CONT0                          _at_ 0x000D;
 260          XBYTE   DEBOUNCE_CONT1                          _at_ 0x000E;
 261          XBYTE   DEBOUNCE_CONT2                          _at_ 0x000F;
 262          XBYTE   DEBOUNCE_CONT3                          _at_ 0x0010;
 263          XBYTE   DEBOUNCE_CONT4                          _at_ 0x0011;
 264          XBYTE   DEBOUNCE_CONT5                          _at_ 0x0012;
 265          XBYTE   DEBOUNCE_CONT6                          _at_ 0x0013;
 266          XBYTE   DEBOUNCE_CONT7                          _at_ 0x0014;
 267          XWORD BtnOverTimer1                             _at_ 0x0015;
 268          XWORD BtnOverTimer2                             _at_ 0x0017;
 269          
 270          //For checksum
 271          //----------------------------------------------------------------------------
 272          XWORD Calc_Checksum                             _at_ 0x0019;    //For CalculateChecksum 0x0019,0x001A
 273          XWORD ROM_Checksum                              _at_ 0x001B;    //For CalculateChecksum 0x001B,0x001C
 274          XBYTE   Checksum_compare                        _at_ 0x001D;    //For CalculateChecksum 
 275          //----------------------------------------------------------------------------
 276          
 277          
 278          
 279          //-----------------------------------------------------------------------------
 280          #define SCI_MemBase         0x0020  //-0x002F
 281          //#define EVENT_BUFFER_SIZE   9
 282          XBYTE   SCI_Event_Buffer[10]                _at_ SCI_MemBase+0x00;
 283          XBYTE   SCI_Event_In_Index                  _at_ SCI_MemBase+0x0A;
 284          XBYTE   SCI_Event_Out_Index                 _at_ SCI_MemBase+0x0B;
 285          XBYTE   SCI_StepTimer                       _at_ SCI_MemBase+0x0D;
 286          XBYTE   SCI_LastQueryEvent                  _at_ SCI_MemBase+0x0E;
 287          XBYTE   SCI_QueryEvent                      _at_ SCI_MemBase+0x0F;
 288          
 289          //-----------------------------------------------------------------------------
 290          #define SMI_MemBase         0x0030  //-0x003F
 291          //#define EVENT_BUFFER_SIZE   9
 292          XBYTE   SMI_Event_Buffer[10]                _at_ SMI_MemBase+0x00;
 293          XBYTE   SMI_Event_In_Index                  _at_ SMI_MemBase+0x0A;
 294          XBYTE   SMI_Event_Out_Index                 _at_ SMI_MemBase+0x0B;
 295          XBYTE   SMI_StepTimer                       _at_ SMI_MemBase+0x0D;
 296          XBYTE   SMI_LastQueryEvent                  _at_ SMI_MemBase+0x0E;
 297          XBYTE   SMI_QueryEvent                      _at_ SMI_MemBase+0x0F;
 298          //-----------------------------------------------------------------------------
 299          
 300          #define Record_MemBase      0x0040  //-0x04F
 301          XBYTE   SCI_SMI_Event_Record[15]                        _at_ Record_MemBase+0x00;
 302          XBYTE   SCI_SMI_Index_Record                    _at_ Record_MemBase+0x0F; 
C51 COMPILER V7.50   CORE_RAM                                                              09/25/2020 15:06:31 PAGE 6   

 303          //-----------------------------------------------------------------------------
 304          
 305          
 306          //-----------------------------------------------------------------------------
 307          //0x0050---0x0063
 308          //For PECI use
 309          //-----------------------------------------------------------------------------
 310          #define PECI_FW_Base        0x0050
 311          XBYTE   AWFCS_EN                                _at_    PECI_FW_Base+0x00;
 312          XBYTE   PECI_FIFO_LB                    _at_    PECI_FW_Base+0x01;
 313          XBYTE   PECI_FIFO_HB                    _at_    PECI_FW_Base+0x02;
 314          XBYTE   CPUTcontrol                             _at_    PECI_FW_Base+0x03;
 315          XBYTE   CPUTjmax                                _at_    PECI_FW_Base+0x04;
 316          XBYTE   PECI_readBuffer[5]              _at_    PECI_FW_Base+0x05 ;             //0x55-0x59
 317          XBYTE   PECI_readBuffer2[5]             _at_    PECI_FW_Base+0x0A ;             //0x5A-0x5E
 318          XBYTE   PECI_PowerUnit                  _at_    PECI_FW_Base+0x0F ;
 319          XBYTE   PECI_EnergyUnit                 _at_    PECI_FW_Base+0x10 ;
 320          XBYTE   PECI_TimeUnit                   _at_    PECI_FW_Base+0x11 ;
 321          XBYTE   CPUTemperature                  _at_    PECI_FW_Base+0x12;
 322          XBYTE   CPUTermMargin                   _at_    PECI_FW_Base+0x13;
 323          
 324          
 325          //-----------------------------------------------------------------------------
 326          //0x006E---
 327          //For UART_TX_RX buffer
 328          //-----------------------------------------------------------------------------
 329          XBYTE   UART_R_IIR                                              _at_    0x006C;
 330          XBYTE   UART_R_LSR                                              _at_    0x006D;
 331          XBYTE   UART_RxIndex                                    _at_    0x006E;
 332          XBYTE   UART_TxIndex                                    _at_    0x006F;
 333          XBYTE   UART_TxBuff[8]                                  _at_    0x0070;
 334          XBYTE   UART_RxBuff[8]                                  _at_    0x0078;
 335          
 336          
 337          //-----------------------------------------------------------------------------
 338          //0x0080---0x00
 339          //PowerCtrl
 340          //-----------------------------------------------------------------------------
 341          #define Power_Ctrl_Base         0x0080
 342          XBYTE   SysPowState                             _at_            Power_Ctrl_Base+0x00;
 343          XBYTE   CtrlPowStep                             _at_            Power_Ctrl_Base+0x01;
 344          XWORD   PowSeqDelay                     _at_            Power_Ctrl_Base+0x02;
 345          XBYTE   AutoColdBootTimer               _at_            Power_Ctrl_Base+0x04;
 346          XBYTE   ColdBootTimer                   _at_            Power_Ctrl_Base+0x05;
 347          XWORD   LockSwitchPowerOn               _at_            Power_Ctrl_Base+0x06;
 348          XWORD   PowSwOverTimer          _at_            Power_Ctrl_Base+0x08;
 349          XBYTE   DeepSleepCountDown      _at_            Power_Ctrl_Base+0x0A;
 350          
 351          
 352          XBYTE   Read_SMLink1_Step                       _at_ 0x008E;
 353          XBYTE   SMLink1_Temp                            _at_ 0x008F;
 354          //-----------------------------------------------------------------------------
 355          //For Core_Flash.c
 356          //=========================================================================================
 357          XBYTE   SPIIDBuf[4]                                                     _at_ 0x90;      
 358          XBYTE   SPIIndex                                                        _at_ 0x94;      
 359          XBYTE   SPIAddrCycle[3]                                         _at_ 0x95;      
 360          XBYTE   SPIAEraseCmd                                            _at_ 0x98;      
 361          XBYTE   SPIReadStatus                                           _at_ 0x99;      
 362          XBYTE   SPIWriteStatus                                          _at_ 0x9A;      
 363          XBYTE   *SPIDataPointer                                         _at_ 0x9B;      
 364          XBYTE   SPIID                                                           _at_ 0x9D;      
C51 COMPILER V7.50   CORE_RAM                                                              09/25/2020 15:06:31 PAGE 7   

 365          XBYTE   SSTDeviceID                                             _at_ 0x9E;
 366          
 367          
 368          //-----------------------------------------------------------------------------
 369          // SMBUS_Debug_Ram 0xA0-0xC6
 370          //-----------------------------------------------------------------------------
 371          #define SMBUS_Debug_Ram 0x00A0
 372          
 373          XBYTE   DB_SMBusFlag1                                   _at_ (SMBUS_Debug_Ram + 0x00);
 374          XBYTE   DB_SMBusFlag2                                   _at_ (SMBUS_Debug_Ram + 0x01);
 375          XBYTE   DB_SMBusFlag3                                   _at_ (SMBUS_Debug_Ram + 0x02);
 376          XBYTE   DB_SMBusAck1                                    _at_ (SMBUS_Debug_Ram + 0x03);
 377          XBYTE   DB_SMBusAddr                                    _at_ (SMBUS_Debug_Ram + 0x04);
 378          XBYTE   DB_SMBusCmd                                     _at_ (SMBUS_Debug_Ram + 0x05);
 379          XBYTE   DB_SMBusBCunt                                   _at_ (SMBUS_Debug_Ram + 0x06);
 380          XBYTE   DB_SMBusData[32]                                _at_ (SMBUS_Debug_Ram + 0x07);  //0xA7~0xC6
 381          
 382          
 383          //-----------------------------------------------------------------------------
 384          // SWKBC 0x00D0 --
 385          //-----------------------------------------------------------------------------
 386          #define SWKBC_RAMBASE   0x00D0
 387          XBYTE   xbKEY_BUFF[KBF_SIZE]                    _at_ (SWKBC_RAMBASE+0x00); //Scan code buffer storage
 388          XBYTE   xbKbf_Head                                              _at_ (SWKBC_RAMBASE+0x10); //Scan code buffer head
 389          XBYTE   xbKbf_Tail                                              _at_ (SWKBC_RAMBASE+0x11); //Scan code buffer tail
 390          XBYTE   bTMrepeat                                               _at_ (SWKBC_RAMBASE+0x12);
 391          XBYTE   bTMdelay                                                _at_ (SWKBC_RAMBASE+0x13);
 392          XBYTE   KBDataPending[4]                                _at_ (SWKBC_RAMBASE + 0x14);
 393          XBYTE   KBPendingRXCount                                _at_ (SWKBC_RAMBASE + 0x18);
 394          XBYTE   KBPendingTXCount                                _at_ (SWKBC_RAMBASE + 0x19);
 395          
 396          //-----------------------------------------------------------------------------
 397          // CIR Buffer 0xF0
 398          //-----------------------------------------------------------------------------
 399          XBYTE   CIR_Buffer[16]                                  _at_    0x00F0;
C51 COMPILER V7.50   CORE_RAM                                                              09/25/2020 15:06:31 PAGE 8   

ASSEMBLY LISTING OF GENERATED OBJECT CODE




MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
