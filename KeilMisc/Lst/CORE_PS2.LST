C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE CORE_PS2
OBJECT MODULE PLACED IN Code\CORE\CORE_PS2.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe Code\CORE\CORE_PS2.C LA WL(1) CD OT(9,SIZE) NOAREGS OR INCDIR(.\Code\CORE\I
                    -NCLUDE\;.\Code\OEM\INCLUDE\;.\Code\CHIP\INCLUDE\)

line level    source

   1          /*-----------------------------------------------------------------------------
   2           * Filename: CORE_PS2.C - PS/2 devices handler
   3           *
   4           * Copyright (c) 2006-2009, ITE Tech. Inc. All Rights Reserved.
   5           *
   6           * You may not reproduce, distribute, publish, display, perform, modify, adapt,
   7           * transmit, broadcast, present, recite, release, license or otherwise exploit
   8           * any part of this publication in any form, by any means, without the prior
   9           * written permission of ITE Tech. Inc.
  10           *---------------------------------------------------------------------------*/
  11           
  12          #include <CORE_INCLUDE.H>
  13          #include <OEM_INCLUDE.H>
  14          
  15          const sPS2Struct code asPS2Struct[] = 
  16          {
  17                  { &PSCTL1, &PSINT1, &PSSTS1,    &PSDAT1,        &IER2,  &ISR2,  Int_PS2_0       },
  18                  { &PSCTL2, &PSINT2, &PSSTS2,    &PSDAT2,        &IER2,  &ISR2,  Int_PS2_1       },
  19                  { &PSCTL3, &PSINT3, &PSSTS3,    &PSDAT3,        &IER2,  &ISR2,  Int_PS2_2       }
  20          };
  21          
  22          /* ----------------------------------------------------------------------------
  23           * FUNCTION: Service_Send_PS2
  24           *
  25           * ------------------------------------------------------------------------- */
  26          void service_PS2_data(void)
  27          {
  28   1          //BYTE index;
  29   1              
  30   1          if(IS_MASK_SET(KBHISR,OBF)||IS_MASK_SET(KBHISR,IBF))                // Dino 0202
  31   1          //if(IS_MASK_SET(KBHISR,OBF))
  32   1              {
  33   2              SetPS2InhibitTime(InactiveTime);
  34   2                      return;
  35   2              }
  36   1      
  37   1              if(TPACKCounter!=0x00)
  38   1              {
  39   2                      TPACKCounter--;
  40   2              }
  41   1              else
  42   1              {
  43   2                      if(Ccb42_DISAB_AUX)             
  44   2                      {
  45   3                  SetPS2InhibitTime(InactiveTime);
  46   3                              return;
  47   3                      }
  48   2              }
  49   1      
  50   1              SendFromAux(MousePendingBuf);
  51   1      
  52   1          if(MULPX_Multiplex)
  53   1          {
  54   2              PS2Deviceactive();          // Enable all ps2 interface
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 2   

  55   2              SetPS2SkipScanTime(MSSkipScanAUXTime);
  56   2          }
  57   1          else
  58   1          {
  59   2              //for(index=0x00;index<3;index++)     // Check any keyboard is attached?
  60   2              //{
  61   2              //    if(IS_MASK_SET(AuxFlags[index], DEVICE_IS_KEYBOARD))
  62   2              //    {
  63   2              //        *asPS2Struct[index].ps2ctrl=PS2_ReceiveMode;
  64   2              //        SET_MASK(*asPS2Struct[index].ps2ier, asPS2Struct[index].ctrlbit); 
  65   2              //    }
  66   2              //}
  67   2              //for(index=0x00;index<3;index++)     // Check any keyboard is attached?
  68   2              //{
  69   2              //    if(index == AUXPortNum)
  70   2              //    {
  71   2              //        *asPS2Struct[AUXPortNum].ps2ctrl=PS2_ReceiveMode;
  72   2                      //        SET_MASK(*asPS2Struct[AUXPortNum].ps2ier, asPS2Struct[AUXPortNum].ctrlbit);
  73   2              //    }
  74   2              //}
  75   2              
  76   2              PS2Deviceactive();          // Enable all ps2 interface
  77   2              SetPS2InhibitTime(InactiveTime);
  78   2          }
  79   1          ResetMSPendingData();
  80   1      }
  81          
  82          //-----------------------------------------------------------------
  83          // Send data from aux mouse 
  84          //-----------------------------------------------------------------
  85          void SendFromAux(BYTE auxdata)
  86          {
  87   1          KBHISR &= 0x0F;
  88   1      
  89   1              if(MULPX_Multiplex)
  90   1              {
  91   2                      if(AUXPortNum==0x00)
  92   2                      {
  93   3                              KBHISR = 0x40;                          // source bits is 01
  94   3                      }
  95   2                      else if(AUXPortNum==0x01)
  96   2                      {
  97   3                              KBHISR = 0x80;                          // source bits is 10
  98   3                      }
  99   2              else if(AUXPortNum==0x02)
 100   2              {
 101   3                              KBHISR = 0xC0;                          // source bits is 11
 102   3                      }
 103   2                      CLEAR_MASK(KBHISR,BIT2);            // clear error bit 
 104   2              }
 105   1      
 106   1              SET_MASK(KBHISR,AOBF);                      // set AUX bit
 107   1              KBHICR &= 0xFC;
 108   1          if ( Ccb42_INTR_AUX )
 109   1          {
 110   2              SET_MASK(KBHICR,OBFMIE);
 111   2          }
 112   1      
 113   1          _nop_();
 114   1          _nop_();
 115   1          _nop_();
 116   1          _nop_();
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 3   

 117   1      
 118   1              KBHIMDOR = auxdata;
 119   1              ShortDelayAfterWriteDOR();
 120   1      
 121   1              if(PS2_MSCMD)
 122   1              {   
 123   2              #if UART_Debug
                      #endif
 125   2              }
 126   1          
 127   1      #if PS2_Pack_Debug    
                  if(PS_Debug_ECToHost==0xFF)
                  {
                     PS_Debug_ECToHost = 0x03;
                  }
                  else
                  {
                      PS_Debug_ECToHost++;
                      if(PS_Debug_ECToHost>3)
                      {
                          PS_Debug_ECToHost = 0x01;
                      }
                  }
              #endif
 141   1      }
 142          
 143          //-----------------------------------------------------------------
 144          // 
 145          //-----------------------------------------------------------------
 146          void SetPS2InhibitTime(BYTE time)
 147          {
 148   1          if(AUXInactiveCounter<time)
 149   1          {
 150   2              AUXInactiveCounter = time;
 151   2          }
 152   1      }
 153          
 154          //-----------------------------------------------------------------
 155          // 
 156          //-----------------------------------------------------------------
 157          void SetPS2SkipScanTime(BYTE time)
 158          {
 159   1          if(SKIP_AUX_SCAN_CUNT<time)
 160   1          {
 161   2              SKIP_AUX_SCAN_CUNT = time;
 162   2          }
 163   1      }
 164          
 165          //-----------------------------------------------------------------
 166          // Process mouse data from ps2 interface
 167          //-----------------------------------------------------------------
 168          void ProcessMouseData(BYTE channel)
 169          {
 170   1          //BYTE index;
 171   1          
 172   1      #if PS2_Pack_Debug                          // Debug only
                  if(PS_Debug_ECToHost==0xFF)
                  {
                     PS_Debug_DeviceToEC = 0x03;
                  }
                  else
                  {
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 4   

                      PS_Debug_DeviceToEC++;
                      if(PS_Debug_DeviceToEC>3)
                      {
                          PS_Debug_DeviceToEC = 0x01;
                      }
                  }
              #endif
 186   1      
 187   1          if(MS_ID_CUNT!=0x00)                    // Save mouse driver type(3bytes, 4bytes, or 5bytes)
 188   1          {
 189   2              if(--MS_ID_CUNT==0x00)
 190   2              {
 191   3                  if(PS2PortxData[channel]==0x00||
 192   3                      PS2PortxData[channel]==0x03||
 193   3                       PS2PortxData[channel]==0x04)
 194   3                  {
 195   4                      MS_DRIVER_TYPE = PS2PortxData[channel];
 196   4                  }
 197   3              }
 198   2          }
 199   1      
 200   1              //RamDebug(PS2PortxData[channel]);
 201   1      
 202   1          if(IS_MASK_SET(KBHISR,OBF)||IS_MASK_SET(KBHISR,IBF)||(Ccb42_DISAB_AUX))
 203   1          //if(IS_MASK_SET(KBHISR,OBF)||(Ccb42_DISAB_AUX))
 204   1          {   
 205   2              AUXPortNum = channel;
 206   2                  MousePendingBuf=PS2PortxData[channel];
 207   2                  MSPending = 0x33;
 208   2          }
 209   1          else
 210   1          {
 211   2              AUXPortNum = channel;
 212   2                  SendFromAux(PS2PortxData[channel]);
 213   2                  if(TPACKCounter!=0x00)
 214   2                  {
 215   3                          TPACKCounter--;
 216   3                  }
 217   2      
 218   2              if(MULPX_Multiplex)
 219   2                  {
 220   3                  if(!AUXInterfaceBusy)
 221   3                  {
 222   4                      PS2Deviceactive();              // Enable all ps2 interface
 223   4                      SetPS2SkipScanTime(MSSkipScanAUXTime);
 224   4                  }
 225   3              }
 226   2              else
 227   2                  {
 228   3                  if(!AUXInterfaceBusy)
 229   3                  {
 230   4                      //for(index=0x00;index<3;index++)     // Check any keyboard is attached?
 231   4                      //{
 232   4                      //    if(IS_MASK_SET(AuxFlags[index], DEVICE_IS_KEYBOARD))
 233   4                      //    {
 234   4                      //        *asPS2Struct[index].ps2ctrl=PS2_ReceiveMode;
 235   4                      //        SET_MASK(*asPS2Struct[index].ps2ier, asPS2Struct[index].ctrlbit); 
 236   4                      //    }
 237   4                      //}
 238   4                      //for(index=0x00;index<3;index++)     // Check any keyboard is attached?
 239   4                      //{
 240   4                      //    if(index == channel)
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 5   

 241   4                      //    {
 242   4                      //        *asPS2Struct[channel].ps2ctrl=PS2_ReceiveMode;
 243   4                              //        SET_MASK(*asPS2Struct[channel].ps2ier, asPS2Struct[channel].ctrlbit);
 244   4                      //    }
 245   4                      //}
 246   4      
 247   4                      PS2Deviceactive();              // Enable all ps2 interface
 248   4                      SetPS2InhibitTime(InactiveTime);
 249   4                  }
 250   3                  }
 251   2          }
 252   1      } 
 253          
 254          //-----------------------------------------------------------------
 255          // Process keybaord data from ps2 interface
 256          //-----------------------------------------------------------------
 257          void ProcessKeyboardData(BYTE channel)
 258          {
 259   1          //BYTE index;
 260   1          if(Main_KB_ACK_CUNT!=0x00)
 261   1          {
 262   2              Main_KB_ACK_CUNT--;
 263   2      
 264   2              KBC_DataPending(PS2PortxData[channel]);
 265   2              SetServiceSendFlag();
 266   2              #if PS2_KBCMD
                          #if UART_Debug
                          #endif
                      #endif
 270   2          }
 271   1          else
 272   1          {
 273   2              Buffer_Key(PS2PortxData[channel]);
 274   2              SetServiceSendFlag();
 275   2          }
 276   1      
 277   1          if(Main_KB_ACK_CUNT==0x00)
 278   1          {   
 279   2              if(MSPending==0x33)             // PS2 data is pending
 280   2              {
 281   3                  if(!AUXInterfaceBusy)       // PS2 interface isn't busy
 282   3                  {
 283   4                      //*asPS2Struct[channel].ps2ctrl=PS2_ReceiveMode;
 284   4                      //SET_MASK(*asPS2Struct[channel].ps2ier, asPS2Struct[channel].ctrlbit);
 285   4                      //SetPS2InhibitTime(InactiveTime);
 286   4      
 287   4                      PS2ReceiveMode_OneChannel(channel, 0x01);
 288   4                  }
 289   3              }
 290   2              else
 291   2              {
 292   3                  if(!AUXInterfaceBusy)       // PS2 interface isn't busy
 293   3                  {
 294   4                      PS2Deviceactive();
 295   4                      SetPS2SkipScanTime(KBSkipScanAUXTime);
 296   4                  }
 297   3              }
 298   2          }
 299   1          else
 300   1          {
 301   2              if(!AUXInterfaceBusy)           // PS2 interface isn't busy
 302   2              {
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 6   

 303   3                  //*asPS2Struct[channel].ps2ctrl=PS2_ReceiveMode;
 304   3                  //SET_MASK(*asPS2Struct[channel].ps2ier, asPS2Struct[channel].ctrlbit);
 305   3                  //SetPS2InhibitTime(InactiveTime);
 306   3      
 307   3                  PS2ReceiveMode_OneChannel(channel, 0x01);
 308   3              }
 309   2          }
 310   1      }
 311          
 312          void ProcessECTestAUXACK(BYTE PortNum, BYTE enablenow)
 313          {
 314   1          ECSendtoAUXFlag = 0;
 315   1          ClearAUXScanTimeOutCunt();
 316   1          SetAUXScanIndexHS(AUXScanIndexFree);
 317   1          ScanAUXStepIndex = ScanAUXStep_CheckOK + PortNum;
 318   1      
 319   1          if(IS_MASK_SET(AuxFlags2[AUX_SCAN_INDEX],DEVICE_NEED_DISABLED))     // Command 0xF5 ACK
 320   1          {
 321   2              if(PS2PortxData[PortNum]==0xFA)
 322   2              {
 323   3                  //CLEAR_MASK(AuxFlags2[AUX_SCAN_INDEX],DEVICE_NEED_DISABLED);
 324   3                  AuxFlags2[AUX_SCAN_INDEX] = 0x00;
 325   3                  SET_MASK(AuxFlags2[AUX_SCAN_INDEX],DEVICE_IS_DISABLED);
 326   3              }
 327   2              else
 328   2              {
 329   3                  PS2_ReTryCunt++;
 330   3                  if(PS2_ReTryCunt>PS2_OnOffTimeOutCUNT)
 331   3                  {
 332   4                      PS2_ReTryCunt = 0x00;
 333   4                      //CLEAR_MASK(AuxFlags2[AUX_SCAN_INDEX],DEVICE_NEED_DISABLED);
 334   4                      AuxFlags2[AUX_SCAN_INDEX] = 0x00;
 335   4                      SET_MASK(AuxFlags2[AUX_SCAN_INDEX],DEVICE_DISABLE_TIME_OUT);
 336   4                  }
 337   3              }
 338   2          }
 339   1          else if(IS_MASK_SET(AuxFlags2[AUX_SCAN_INDEX],DEVICE_NEED_ENABLED))     // Command 0xF4 ACK
 340   1          {
 341   2              if(PS2PortxData[PortNum]==0xFA)
 342   2              {
 343   3                  //CLEAR_MASK(AuxFlags2[AUX_SCAN_INDEX],DEVICE_NEED_ENABLED);
 344   3                  AuxFlags2[AUX_SCAN_INDEX] = 0x00;
 345   3                  SET_MASK(AuxFlags2[AUX_SCAN_INDEX],DEVICE_IS_ENABLED);
 346   3              }
 347   2              else
 348   2              {
 349   3                  PS2_ReTryCunt++;
 350   3                  if(PS2_ReTryCunt>PS2_OnOffTimeOutCUNT)
 351   3                  {
 352   4                      PS2_ReTryCunt = 0x00;
 353   4                      //CLEAR_MASK(AuxFlags2[AUX_SCAN_INDEX],DEVICE_NEED_ENABLED);
 354   4                      AuxFlags2[AUX_SCAN_INDEX] = 0x00;
 355   4                      SET_MASK(AuxFlags2[AUX_SCAN_INDEX],DEVICE_ENABLED_TIME_OUT);
 356   4                  }
 357   3              }
 358   2          }
 359   1          else                                            // Test Command 0xF1 ACK 
 360   1          {
 361   2              if(AuxFlags[PortNum]==0x00)                 // Device first time plug-in
 362   2              {
 363   3                  AuxFlags[PortNum] = DEVICE_NEED_INIT;
 364   3                  SetAUXScanIndexHS(AUXScanIndexInUse);
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 7   

 365   3                  ScanAUXStepIndex = ScanAUXStep_CheckType + PortNum; // goto check device is keyboard or mouse
 366   3              }
 367   2              else
 368   2              {
 369   3                  if(IS_MASK_SET(AuxFlags[PortNum], DEVICE_NEED_CONFIG))
 370   3                  {
 371   4                      SetAUXScanIndexHS(AUXScanIndexInUse);
 372   4                      ScanAUXStepIndex = ScanAUXStep_Init + PortNum;  // goto config. device 
 373   4                  }
 374   3                  else if(AuxFlags[PortNum] == DEVICE_NEED_INIT)
 375   3                  {
 376   4                      SetAUXScanIndexHS(AUXScanIndexInUse);
 377   4                      ScanAUXStepIndex = ScanAUXStep_CheckType + PortNum; // goto check device is keyboard or mo
             -use
 378   4                  }
 379   3                  else
 380   3                  {
 381   4                      if(AuxFlags_KB_CMD[PortNum]!=0x00)
 382   4                      {
 383   5                          SetAUXScanIndexHS(AUXScanIndexInUse);
 384   5                          ScanAUXStepIndex = ScanAUXStep_UpdateKB + PortNum;
 385   5                      }
 386   4                  }
 387   3              }
 388   2          }
 389   1      
 390   1          if(enablenow==0x01)
 391   1          {
 392   2              PS2Deviceactive();      
 393   2          }
 394   1      }
 395          
 396          
 397          //-----------------------------------------------------------------
 398          // Bypass AUX data to host
 399          //-----------------------------------------------------------------
 400          void SendAUXData(BYTE PortNum)  // Dino 0907             
 401          {
 402   1          //BYTE index;
 403   1      
 404   1          if(SendtoAUXFlag)                                   // Send command to device and transmit done.
 405   1          {
 406   2              SendtoAUXFlag = 0;              
 407   2              //*asPS2Struct[PortNum].ps2ctrl=PS2_ReceiveMode;  // Enable Receive mode for ACK byte
 408   2              //SET_MASK(*asPS2Struct[PortNum].ps2ier, asPS2Struct[PortNum].ctrlbit);  // Enable interrupt for A
             -CK byte
 409   2              
 410   2              PS2ReceiveMode_OneChannel(PortNum, 0x00);
 411   2              ClearAUXScanTimeOutCunt();
 412   2          }
 413   1          else                                                                // Receive done and get data
 414   1          {   
 415   2              if(ECSendtoAUXFlag)                 // If this byte is EC scan channel ACK, no send to host
 416   2              {
 417   3                  ProcessECTestAUXACK(PortNum, 1);
 418   3              }
 419   2              else                                // receive mode transmit done.      
 420   2              {
 421   3                  SetAUXScanIndexHS(AUXScanIndexFree);
 422   3                  ClearAUXScanTimeOutCunt();
 423   3                  if(IS_MASK_SET(AuxFlags[PortNum], DEVICE_IS_MOUSE))     // If data from mosue
 424   3                      {
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 8   

 425   4                      ProcessMouseData(PortNum);      // Process mosue data
 426   4                      }
 427   3                  else if(IS_MASK_SET(AuxFlags[PortNum], DEVICE_IS_KEYBOARD)) // If data from keyboard
 428   3                      {       
 429   4                          ProcessKeyboardData(PortNum);   // Process keyboard data
 430   4                      }
 431   3                  else
 432   3                  {
 433   4                      PS2Deviceactive();              // Enable all ps2 interface
 434   4                  }
 435   3              }
 436   2          }
 437   1      }
 438          
 439          // ----------------------------------------------------------------------------
 440          //
 441          // ----------------------------------------------------------------------------
 442          
 443          void RAM_Send2Port(BYTE p_PortNum, BYTE p_cmd)
 444          {
 445   1          if(p_PortNum==0x00)
 446   1          {
 447   2              PSCTL1 = 0x1D;
 448   2              PSDAT1 = p_cmd;
 449   2              PSCTL1 = 0x1C;
 450   2              PSCTL1 = 0x1E;
 451   2          }
 452   1          else if(p_PortNum==0x01)
 453   1          {
 454   2              PSCTL2 = 0x1D;
 455   2              PSDAT2 = p_cmd;
 456   2              PSCTL2 = 0x1C;
 457   2              PSCTL2 = 0x1E;
 458   2          }
 459   1          else if(p_PortNum==0x02)
 460   1          {
 461   2              PSCTL3 = 0x1D;
 462   2              PSDAT3 = p_cmd;
 463   2              PSCTL3 = 0x1C;
 464   2              PSCTL3 = 0x1E;
 465   2          }
 466   1      }
 467          
 468          //-----------------------------------------------------------------
 469          // 
 470          //-----------------------------------------------------------------
 471          void ClearPS2IFPendingEvent(void)
 472          {
 473   1          InhibitAUXDevice();
 474   1          IER2&= ~(Int_PS2_0+Int_PS2_1+Int_PS2_2);    // Disable all PS2 interrupt
 475   1          ISR2=(Int_PS2_0+Int_PS2_1+Int_PS2_2);       // Write to clear all PS2 pending interrupt
 476   1          PS2StartBit = 0;            // clear ps2 interrupt start bit flag
 477   1          F_Service_PS2 = 0;          // Clear PS2 interrupt service flag
 478   1      }
 479          
 480          //-----------------------------------------------------------------
 481          // EC Send command to ps2 interface no ack to host
 482          //-----------------------------------------------------------------
 483          void ECSend2Port( BYTE PortNum, BYTE PortData)
 484          {
 485   1          DisableAllInterrupt();
 486   1          ClearPS2IFPendingEvent();
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 9   

 487   1              ECSendtoAUXFlag = 1;
 488   1          SendtoAUXFlag = 1;
 489   1              //*asPS2Struct[PortNum].ps2ctrl = 0x1D;
 490   1              //*asPS2Struct[PortNum].ps2data = PortData;
 491   1              //*asPS2Struct[PortNum].ps2ctrl = 0x1C;
 492   1              //*asPS2Struct[PortNum].ps2ctrl = 0x1E;
 493   1              RAM_Send2Port(PortNum, PortData);
 494   1          EnableAllInterrupt();
 495   1         
 496   1          SET_MASK(*asPS2Struct[PortNum].ps2ier, asPS2Struct[PortNum].ctrlbit);    // Enable interrupt   
 497   1      }
 498          
 499          //-----------------------------------------------------------------
 500          // Before sending command to PS2 device to make sure no any data is done
 501          //-----------------------------------------------------------------
 502          void CheckNWaitReceiveDone(void)
 503          {
 504   1          BYTE busy;
 505   1          busy=0x00;
 506   1              
 507   1          if(IS_MASK_SET(PSSTS1, SS)||IS_MASK_SET(PSSTS2, SS)||IS_MASK_SET(PSSTS3, SS)
 508   1          ||F_Service_PS2 == 1||PS2StartBit == 1)
 509   1          {
 510   2              TR1 = 0;                            // Disable timer1
 511   2              ET1 = 0;                            // Disable timer1 interrupt
 512   2              _nop_();
 513   2              _nop_();
 514   2              _nop_();
 515   2              _nop_();
 516   2              TH1 = Timer_30ms>>8;            // Set timer1 counter 30ms
 517   2              TL1 = Timer_30ms;               // Set timer1 counter 30ms
 518   2              TF1 = 0;                            // Clear overflow flag
 519   2              TR1 = 1;                            // Enable timer1
 520   2      
 521   2              while(!TF1)
 522   2              {
 523   3                  if(F_Service_PS2)
 524   3                  {
 525   4                      busy=0x01;
 526   4                      TR1 = 0;                                    // disable timer1
 527   4                      TF1 = 0;                                                // clear overflow flag
 528   4                      break;
 529   4                  }
 530   3              }
 531   2      
 532   2              if(TF1)
 533   2              {
 534   3                  if(PS2CheckPendingISR()==0x01)
 535   3                  {
 536   4                      busy=0x01;
 537   4                  }
 538   3              }
 539   2      
 540   2              if(busy==0x01)
 541   2              {
 542   3                  F_Service_PS2=0;
 543   3                  AUXInterfaceBusy=1;
 544   3                  service_ps2();
 545   3                  AUXInterfaceBusy=0;
 546   3              }
 547   2         
 548   2              TR1 = 0;                                    // disable timer1
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 10  

 549   2              TF1 = 0;                                                // clear overflow flag
 550   2              ET1 = 1;        
 551   2          }
 552   1          else
 553   1          {
 554   2              PS2DeviceInactive();
 555   2          }
 556   1      }
 557          
 558          //-----------------------------------------------------------------
 559          // Send data to ps2 interface
 560          //-----------------------------------------------------------------
 561          void Send2Port( BYTE PortNum, BYTE PortData, BYTE action)
 562          {
 563   1          BYTE tempinactvietime;
 564   1      
 565   1          #if !TouchPad_only
                      if(ECSendtoAUXFlag)
                      {
                          if(WaitECSend2PortACK(AUX_SCAN_INDEX)==0x01)
                          {
                              AUXDevicePlugOutClearVariables();
                          }
                      }
                      else
                      {
                          if(action == SendCmdToKB)
                          {
                              CheckNWaitReceiveDone();
                          }
                      }
                  #endif
 581   1      
 582   1          DisableAllInterrupt();
 583   1          ClearPS2IFPendingEvent();
 584   1          
 585   1          if(PortData==0xFF)                              // reset command
 586   1          {
 587   2              SetPS2InhibitTime(DeviceResetCmdITTime);    // 1.2sec
 588   2          }
 589   1          else
 590   1          {
 591   2              if(TPACKCounter!=0x00)
 592   2              {
 593   3                  tempinactvietime = InactiveTime*TPACKCounter;
 594   3              }
 595   2              else if(Main_KB_ACK_CUNT!=0x00)
 596   2              {
 597   3                  tempinactvietime = InactiveTime*Main_KB_ACK_CUNT;
 598   3              }
 599   2              else
 600   2              {
 601   3                  tempinactvietime = InactiveTime;
 602   3              }
 603   2              SetPS2InhibitTime(tempinactvietime);
 604   2          }
 605   1          
 606   1          SetAUXScanIndexHS(AUXScanIndexFree);
 607   1      
 608   1          ECSendtoAUXFlag = 0;
 609   1          SendtoAUXFlag = 1;
 610   1              //*asPS2Struct[PortNum].ps2ctrl = 0x1D;
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 11  

 611   1              //*asPS2Struct[PortNum].ps2data = PortData;
 612   1              //*asPS2Struct[PortNum].ps2ctrl = 0x1C;
 613   1              //*asPS2Struct[PortNum].ps2ctrl = 0x1E;
 614   1              RAM_Send2Port(PortNum, PortData);
 615   1          EnableAllInterrupt();
 616   1        
 617   1          SET_MASK(*asPS2Struct[PortNum].ps2ier, asPS2Struct[PortNum].ctrlbit);    // Enable interrupt 
 618   1      
 619   1          WaitPS2DeviceACK(PortNum);
 620   1      }
 621          
 622          //-----------------------------------------------------------------
 623          // Send command to ps2 interface and check ack or not
 624          //  Note : return   0 --> // Transaction done
 625          //                  1 --> // Transaction fail
 626          //
 627          //                  After this function, all ps2 channel is inhibit and channel interrupt is disabled
 628          //-----------------------------------------------------------------
 629          BYTE Send2PortNWait( BYTE PortNum, BYTE cmd, BYTE bytecunt)
 630          {
 631   1          BYTE result;
 632   1          BYTE index;
 633   1      
 634   1          PS2IFAck = 0x00;
 635   1      
 636   1          DisableAllInterrupt();
 637   1          ClearPS2IFPendingEvent();
 638   1          ECSendtoAUXFlag = 0;
 639   1          SendtoAUXFlag = 0;
 640   1              //*asPS2Struct[PortNum].ps2ctrl = 0x1D;
 641   1              //*asPS2Struct[PortNum].ps2data = cmd;
 642   1              //*asPS2Struct[PortNum].ps2ctrl = 0x1C;
 643   1              //*asPS2Struct[PortNum].ps2ctrl = 0x1E;
 644   1              RAM_Send2Port(PortNum, cmd);
 645   1          EnableAllInterrupt();
 646   1      
 647   1          result = bExtAUXTimeOutCheck(PortNum, PS2_Transmission_Mode);
 648   1      
 649   1          if(result==0x00)                // Transaction done
 650   1          {
 651   2              for(index=0x00;index<bytecunt;index++)
 652   2              {
 653   3                  *asPS2Struct[PortNum].ps2ctrl=PS2_ReceiveMode;  // Get Last ACK by bytecunt
 654   3                  result = bExtAUXTimeOutCheck(PortNum, PS2_Receive_Mode);
 655   3      
 656   3                              if(Oem_RTP_ID_CMD == 0)
 657   3                              {
 658   4      
 659   4                                      switch(Oem_RTP_ID_Step&0x7f)
 660   4                                      {
 661   5                                              case Oem_RTP_ID_Elan_step:
 662   5                                                      if(PS2IFAck == 0x3c)
 663   5                                                      {
 664   6                                                              guoyong003 = 0x88;
 665   6                                                              
 666   6                                                              Oem_RTP_ID_CMD = Elan_TP_ID;
 667   6                                                              SET_MASK(Oem_RTP_ID_Step,Oem_RTP_ID_SUCCESS);                                           
 668   6                                                      }
 669   5                                                              
 670   5                                                      break;
 671   5                                                      
 672   5                                              case Oem_RTP_ID_SY_step:
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 12  

 673   5                                                      if(PS2IFAck == 0x47)
 674   5                                                      {
 675   6      
 676   6                                                              guoyong003 = 0x77;
 677   6                                                              Oem_RTP_ID_CMD = Synaptics_TP_ID;
 678   6                                                              SET_MASK(Oem_RTP_ID_Step,Oem_RTP_ID_SUCCESS);   
 679   6                                                      }
 680   5      
 681   5                                                      break;
 682   5      
 683   5                                              case Oem_RTP_ID_ALPS_step:
 684   5                                                      if(PS2IFAck == 0x73)
 685   5                                                      {
 686   6                                                              guoyong003 = 0x66;
 687   6                                                              Oem_RTP_ID_CMD = ALPS_TP_ID;
 688   6                                                              SET_MASK(Oem_RTP_ID_Step,Oem_RTP_ID_SUCCESS);           
 689   6                                                      }
 690   5      
 691   5      
 692   5                                              default:
 693   5                                                      break;
 694   5                                      }
 695   4                              }
 696   3      
 697   3                  if(result!=0x00)
 698   3                  {
 699   4                      break;              // Transaction fail
 700   4                  }
 701   3              }
 702   2          }
 703   1      
 704   1          *asPS2Struct[PortNum].ps2ctrl=PS2_InhibitMode;
 705   1          ISR2=(Int_PS2_0+Int_PS2_1+Int_PS2_2);       // Write to clear all PS2 pending interrupt
 706   1        
 707   1          return(result);                                     
 708   1      }
 709          
 710          //-----------------------------------------------------------------
 711          // Process AUX command
 712          //-----------------------------------------------------------------
 713          void SendCmdtoMouse(BYTE PortNum)
 714          {
 715   1          BYTE index;
 716   1      
 717   1          Cmd_A8();
 718   1          ResetMSPendingData();
 719   1          SetPS2CmdACKCounter(0);
 720   1          MS_ID_CUNT = 0x00;
 721   1      
 722   1              if(AUX2ByteCommand)
 723   1              {       
 724   2              SetPS2CmdACKCounter(1);
 725   2                      if(TPResolution == 0xFF)
 726   2                      {
 727   3                              TPResolution = KBHIData;
 728   3                      }
 729   2                      else if(TPSamplingRate == 0xFF)
 730   2                      {
 731   3                              TPSamplingRate = KBHIData;              
 732   3                      }
 733   2      
 734   2                      Send2Port(PortNum, KBHIData, SendCmdToMS);      
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 13  

 735   2                      AUX2ByteCommand = 0;
 736   2                      return;
 737   2              }
 738   1      
 739   1              switch(KBHIData)
 740   1              {
 741   2                      case 0xE8:                      // Set Resolution (2 byte)
 742   2                              TPResolution = 0xFF;
 743   2                              AUX2ByteCommand=1;
 744   2                              break;
 745   2                      
 746   2                      case 0xF3:                      // Set Sampling Rate (2 byte)
 747   2                              TPSamplingRate = 0xFF;  
 748   2                              AUX2ByteCommand=1;
 749   2                              break;  
 750   2                              
 751   2                      case 0xF4:      
 752   2                  #if PS2_Pack_Debug
                          PS_Debug_ECToHost = 0xFF;
                          #endif
 755   2                              //EnableTP = 1;
 756   2                              MouseDriverIn = 1;
 757   2                              break;
 758   2                              
 759   2                      case 0xF5:
 760   2                              MouseDriverIn = 0;
 761   2                              break;  
 762   2                              
 763   2                      case 0xE6:
 764   2                              break;
 765   2                              
 766   2                      case 0xE7:
 767   2                              break;
 768   2                              
 769   2                      case 0xEA:
 770   2                              break;
 771   2                              
 772   2                      case 0xEC:
 773   2                              break;
 774   2                              
 775   2                      case 0xEE:
 776   2                              break;
 777   2                              
 778   2                      case 0xF0:
 779   2                              break;
 780   2                              
 781   2                      case 0xF6:              
 782   2                              break;  
 783   2                              
 784   2                      case 0xE9:      
 785   2                              break;
 786   2                              
 787   2                      case 0xF2:      
 788   2                  MS_ID_CUNT = 2;
 789   2                              break;
 790   2                              
 791   2                      case 0xEB:
 792   2                      case 0xFE:      
 793   2                              break;
 794   2                              
 795   2                      case 0xFF:
 796   2                              MouseDriverIn = 0;
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 14  

 797   2                  MULPX_Multiplex = 0;            // Disable Activate Multiplex mode 
 798   2                              //EnableTP = 0;
 799   2      
 800   2                  for(index=0x00; index<3; index++)
 801   2                  {
 802   3                      if((Main_MOUSE_CHN-1)!=index)
 803   3                      {
 804   4                          if(IS_MASK_SET(AuxFlags[index], DEVICE_IS_MOUSE))
 805   4                          {
 806   5                              AuxFlags[index] = 0x00;
 807   5                          }
 808   4                      }
 809   3                  }
 810   2                              break;
 811   2                              
 812   2                      default:                                    // Invalid command
 813   2                              break;
 814   2              }
 815   1      
 816   1          if(KBHIData==0xFF)      // Reset command
 817   1          {
 818   2              SetPS2CmdACKCounter(3);
 819   2          }
 820   1          else if(KBHIData==0xF2) // Read ID command
 821   1          {
 822   2              SetPS2CmdACKCounter(2);
 823   2          }
 824   1          else if(KBHIData==0xE9) // Read status cmmand
 825   1          {
 826   2              SetPS2CmdACKCounter(4);
 827   2          }
 828   1          else                    // Other commands
 829   1          {
 830   2              SetPS2CmdACKCounter(1);
 831   2          }
 832   1          
 833   1              Send2Port(PortNum, KBHIData, SendCmdToMS);
 834   1      }
 835          
 836          //-----------------------------------------------------------------
 837          // Process AUX MUX command
 838          //-----------------------------------------------------------------
 839          void SendCmdtoMUX(BYTE port)
 840          {
 841   1          SetPS2CmdACKCounter(0);
 842   1          ResetMSPendingData();
 843   1              if(AUX2ByteCommand)
 844   1              {       
 845   2              SetPS2CmdACKCounter(1);
 846   2                      Send2Port(port, KBHIData, SendCmdToMS); 
 847   2                      AUX2ByteCommand = 0;
 848   2                      return;
 849   2              }
 850   1      
 851   1              switch(KBHIData)
 852   1              {
 853   2                      case 0xE8:              // Set Resolution (2 byte)
 854   2                      case 0xF3:              // Set Sampling Rate (2 byte)
 855   2                              AUX2ByteCommand=1;
 856   2                              break;  
 857   2                              
 858   2                      case 0xF4:      
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 15  

 859   2                      case 0xF5:      
 860   2                      case 0xE6:
 861   2                      case 0xE7:
 862   2                      case 0xEA:
 863   2                      case 0xEC:
 864   2                      case 0xEE:
 865   2                      case 0xF0:      
 866   2                      case 0xF6:      
 867   2                      case 0xE9:
 868   2                      case 0xEB:
 869   2                      case 0xF2:                              
 870   2                      case 0xFE:      
 871   2                      case 0xE1:                  // For older Synaptics TouchPads            
 872   2                      case 0xFF:
 873   2                              break;
 874   2                              
 875   2                      default:                    // Invalid command
 876   2                              break;
 877   2              }
 878   1      
 879   1          if(KBHIData==0xFF)      // Reset command
 880   1          {
 881   2              SetPS2CmdACKCounter(3);
 882   2          }
 883   1          else if(KBHIData==0xF2) // Read ID command
 884   1          {
 885   2              SetPS2CmdACKCounter(2);
 886   2          }
 887   1          else if(KBHIData==0xE9) // Read status cmmand
 888   1          {
 889   2              SetPS2CmdACKCounter(4);
 890   2          }
 891   1          else                    // Other commands
 892   1          {
 893   2              SetPS2CmdACKCounter(1);
 894   2          }
 895   1      
 896   1          Send2Port(port, KBHIData, SendCmdToMS); 
 897   1      }
 898          
 899          //-----------------------------------------------------------------
 900          // FUNCTION: Ps2_Init - Init PS2 registers and variables.  
 901          // Put in receive mode.
 902          //-----------------------------------------------------------------
 903          void Ps2_Init(void)
 904          {
 905   1      
 906   1      }
 907          
 908          //-----------------------------------------------------------------
 909          // The function of PS2 interface interrupt service routine
 910          //-----------------------------------------------------------------
 911          void service_ps2(void)
 912          {       
 913   1          BYTE channel;
 914   1      
 915   1          channel = PS2_IRQ_Channel;
 916   1          if(channel!=0xFF)
 917   1          {
 918   2              Hook_service_ps2(channel, PS2PortxData[channel]);
 919   2              PS2_IRQ_Channel = 0xFF;
 920   2              SendAUXData(channel);
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 16  

 921   2          }
 922   1      }
 923          
 924          //----------------------------------------------------------------------------
 925          //----------------------------------------------------------------------------
 926          // The function of stopping ps2 devices send data to KBC
 927          //----------------------------------------------------------------------------
 928          void PS2DeviceInactive(void)
 929          {
 930   1              PSCTL1 = PS2_InhibitMode;
 931   1              PSCTL2 = PS2_InhibitMode;
 932   1              PSCTL3 = PS2_InhibitMode;
 933   1      }
 934          
 935          //----------------------------------------------------------------------------
 936          // The function of starting ps2 devices send data to KBC
 937          //----------------------------------------------------------------------------
 938          void PS2Deviceactive(void)
 939          {        
 940   1          //BYTE index;
 941   1          //for(index=0x00;index<3;index++)
 942   1          //{
 943   1          //    if(IS_MASK_SET(AuxFlags[index],DEVICE_IS_KEYBOARD))
 944   1          //    {
 945   1          //        *asPS2Struct[index].ps2ctrl=PS2_ReceiveMode;
 946   1          //        SET_MASK(*asPS2Struct[index].ps2ier, asPS2Struct[index].ctrlbit); 
 947   1          //    }
 948   1          //}
 949   1          //for(index=0x00;index<3;index++)
 950   1          //{
 951   1          //    if(IS_MASK_SET(AuxFlags[index],DEVICE_IS_MOUSE))
 952   1          //    {
 953   1          //       *asPS2Struct[index].ps2ctrl=PS2_ReceiveMode;
 954   1          //        SET_MASK(*asPS2Struct[index].ps2ier, asPS2Struct[index].ctrlbit); 
 955   1          //    }
 956   1          //}   
 957   1      
 958   1          BYTE index;
 959   1          
 960   1          for(index=0x00;index<3;index++)
 961   1          {
 962   2              if(IS_MASK_SET(AuxFlags[index],(DEVICE_IS_KEYBOARD+DEVICE_IS_MOUSE)))   // keyboard or mouse
 963   2              {
 964   3                  //*asPS2Struct[index].ps2ctrl=PS2_ReceiveMode;
 965   3                  //SET_MASK(*asPS2Struct[index].ps2ier, asPS2Struct[index].ctrlbit); 
 966   3                  PS2ReceiveMode_OneChannel(index, 0x00);
 967   3      
 968   3                  WNCKR = 0x00;           // Delay 15.26 us
 969   3                  WNCKR = 0x00;           // Delay 15.26 us
 970   3      
 971   3                  if(PS2StartBit || F_Service_PS2)
 972   3                  {
 973   4                      SetPS2InhibitTime(InactiveTime);
 974   4                      break;
 975   4                  }
 976   3              }
 977   2          }      
 978   1      }
 979          
 980          //----------------------------------------------------------------------------
 981          // The function of starting one ps2 device send data to KBC
 982          //----------------------------------------------------------------------------
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 17  

 983          void PS2ReceiveMode_OneChannel(BYTE PortNum, BYTE SetInhibitTime)
 984          {
 985   1          *asPS2Struct[PortNum].ps2ctrl=PS2_ReceiveMode;
 986   1          SET_MASK(*asPS2Struct[PortNum].ps2ier, asPS2Struct[PortNum].ctrlbit); 
 987   1      
 988   1          if(SetInhibitTime==0x01)
 989   1          {
 990   2              SetPS2InhibitTime(InactiveTime);
 991   2          }
 992   1      }
 993          
 994          
 995          //----------------------------------------------------------------------------
 996          // The function of inhibit AUX device
 997          //----------------------------------------------------------------------------
 998          void InhibitAUXDevice(void)
 999          { 
1000   1              PS2DeviceInactive();
1001   1      
1002   1          TR1 = 0;        // Disable timer1
1003   1              ET1 = 0;                // Disable timer1 interrupt
1004   1          _nop_();
1005   1          _nop_();
1006   1          _nop_();
1007   1          _nop_();
1008   1          TH1 = Timer_150u>>8;    // set timer1 counter 150 us        
1009   1          TL1 = Timer_150u;       // set timer1 counter 150 us
1010   1          TF1 = 0;            // clear overflow flag
1011   1              TR1 = 1;                // enable timer1
1012   1              while(!TF1);    // waitting overflow flag
1013   1          TR1 = 0;        // Disable timer1
1014   1              TF1 = 0;                // clear overflow flag
1015   1              ET1 = 1;                // Enable timer1 interrupt
1016   1      }
1017          
1018          //----------------------------------------------------------------------------
1019          // The function of scaning AUX device
1020          // Parameter 1 : 
1021          //           0 : scan all channel
1022          //           1 : scan mouse channel
1023          //           2 : scan keyboard channel
1024          //----------------------------------------------------------------------------
1025          void ScanAUXDevice(BYTE scan_selection)
1026          {
1027   1              BYTE index;
1028   1          BYTE timeout;
1029   1          
1030   1          if(scan_selection==ScanMouseChannel)    // Scan mouse channel
1031   1          {
1032   2              if(Main_MOUSE_CHN!=0x00)    // Main mouse is presetn
1033   2              {
1034   3                  return;
1035   3              }
1036   2          }
1037   1          else if(scan_selection==ScanKeyboardChannel)   // Scan keyboard channel
1038   1          {
1039   2              if(Main_KB_CHN!=0x00)       // Main keyboard is present
1040   2              {
1041   3                  return;
1042   3              }
1043   2          }
1044   1         
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 18  

1045   1              for(index=0x00;index<3;index++)
1046   1              {
1047   2              if(IS_MASK_SET(AuxFlags[index], DEVICE_IS_MOUSE)||IS_MASK_SET(AuxFlags[index], DEVICE_IS_KEYBOARD)
             -)
1048   2              {
1049   3                  continue;
1050   3              }
1051   2                      AuxFlags[index] = 0x00;                 
1052   2      
1053   2                      if(index==0x00)
1054   2                      {
1055   3                              if((PS2_Port0_CLK_CtrlReg&0xFB)!=0x00 || (PS2_Port0_Data_CtrlReg&0xFB)!=0x00)
1056   3                                      continue;                   // If this channel isn't PS2 ALT function, scan next.             
1057   3                      }
1058   2                      else if(index==0x01)
1059   2                      {
1060   3                              if((PS2_Port1_CLK_CtrlReg&0xFB)!=0x00 || (PS2_Port1_Data_CtrlReg&0xFB)!=0x00)
1061   3                                      continue;                   // If this channel isn't PS2 ALT function, scan next.    
1062   3                      }
1063   2                      else if(index==0x02)
1064   2                      {
1065   3                              if((PS2_Port2_CLK_CtrlReg&0xFB)!=0x00 || (PS2_Port2_Data_CtrlReg&0xFB)!=0x00)
1066   3                                      continue;                   // If this channel isn't PS2 ALT function, scan next.    
1067   3                      }
1068   2              
1069   2              if(Send2PortNWait(index,0xFF,1)==0x00 && (PS2IFAck==0xFA))
1070   2              {
1071   3                  SET_MASK(AuxFlags[index], DEVICE_IS_ATTACHED);
1072   3      
1073   3                  *asPS2Struct[index].ps2ctrl=PS2_ReceiveMode;
1074   3                  for(timeout=0x00;timeout<=ResetCmdTOTime;timeout++) // 510 ms time-out
1075   3                  {
1076   4                          if(!bExtAUXTimeOutCheck(index, PS2_Receive_Mode))
1077   4                      {
1078   5                          break;
1079   5                      }
1080   4                  }
1081   3                      
1082   3                  if(timeout>ResetCmdTOTime)                          // wait aa time-out
1083   3                  {
1084   4                      CLEAR_MASK(AuxFlags[index], DEVICE_IS_ATTACHED);
1085   4                  }
1086   3                  else
1087   3                  {
1088   4                      *asPS2Struct[index].ps2ctrl=PS2_ReceiveMode;
1089   4                      for(timeout=0x00;timeout<=ResetCmdTOTime;timeout++) // 510 ms time-out
1090   4                      {
1091   5                              if(!bExtAUXTimeOutCheck(index, PS2_Receive_Mode))
1092   5                              {
1093   6                              break;
1094   6                          }
1095   5                      }
1096   4                          
1097   4                      if(timeout>ResetCmdTOTime)                  // wait 00 time-out
1098   4                      {
1099   5                          SET_MASK(AuxFlags[index], DEVICE_IS_KEYBOARD);
1100   5                          CheckNSetMainKBCHN(index);
1101   5                          if(scan_selection==ScanKeyboardChannel) // Scan keyboard channel
1102   5                          {
1103   6                              break;
1104   6                          }
1105   5                      }
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 19  

1106   4                      else
1107   4                      {
1108   5                          if(PS2IFAck==0x00)      // Mouse
1109   5                          {
1110   6                              SET_MASK(AuxFlags[index], DEVICE_IS_MOUSE);
1111   6                              CheckNSetMainMSCHN(index);
1112   6                              if(scan_selection==ScanMouseChannel)    // Scan mouse channel
1113   6                              {
1114   7                                  break;
1115   7                              }
1116   6                          }
1117   5                          else                    // Keyboard
1118   5                          {
1119   6                              SET_MASK(AuxFlags[index], DEVICE_IS_KEYBOARD);
1120   6                              CheckNSetMainKBCHN(index);
1121   6                              if(scan_selection==ScanKeyboardChannel) // Scan keyboard channel
1122   6                              {
1123   7                                  break;
1124   7                              }
1125   6                          }
1126   5                      }
1127   4                  }
1128   3      
1129   3                  *asPS2Struct[index].ps2ctrl=PS2_InhibitMode;
1130   3                  ISR2=(Int_PS2_0+Int_PS2_1+Int_PS2_2);       // Write to clear all PS2 pending interrupt
1131   3              }
1132   2              else
1133   2              {
1134   3                  *asPS2Struct[index].ps2ctrl=PS2_InhibitMode;
1135   3                  ISR2=(Int_PS2_0+Int_PS2_1+Int_PS2_2);       // Write to clear all PS2 pending interrupt
1136   3                              continue;           // Device non-ack
1137   3              }       
1138   2              }
1139   1      
1140   1          if((Main_MOUSE_CHN==0x00)&&(Main_KB_CHN==0x00)) // No any device
1141   1          {
1142   2              ClearAUXScanTimeOutCunt();
1143   2              SetAUXScanIndexHS(AUXScanIndexFree);
1144   2          }
1145   1      }
1146          
1147          //----------------------------------------------------------------------------
1148          // The function of checking AUX device is keyborad or mouse
1149          //----------------------------------------------------------------------------
1150          void CheckAUXDeviceType(void)
1151          {
1152   1          BYTE timeout;
1153   1          
1154   1          if(AuxFlags[AUX_SCAN_INDEX] == DEVICE_NEED_INIT)
1155   1          {
1156   2              AuxFlags[AUX_SCAN_INDEX]=0x00;
1157   2              PS2IFAck = 0x00;
1158   2      
1159   2              if(Send2PortNWait(AUX_SCAN_INDEX,0xFF,1)==0x00 && (PS2IFAck==0xFA))
1160   2              {
1161   3                  SET_MASK(AuxFlags[AUX_SCAN_INDEX], DEVICE_IS_ATTACHED);
1162   3      
1163   3                  *asPS2Struct[AUX_SCAN_INDEX].ps2ctrl=PS2_ReceiveMode;
1164   3                  for(timeout=0x00;timeout<=ResetCmdTOTime;timeout++) // 510 ms time-out
1165   3                  {
1166   4                          if(!bExtAUXTimeOutCheck(AUX_SCAN_INDEX, PS2_Receive_Mode))
1167   4                          {
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 20  

1168   5                          break;
1169   5                      }
1170   4                  }
1171   3                      
1172   3                  if(timeout>ResetCmdTOTime)  // wait aa time-out
1173   3                  {
1174   4                      CLEAR_MASK(AuxFlags[AUX_SCAN_INDEX], DEVICE_IS_ATTACHED);
1175   4                  }
1176   3                  else
1177   3                  {
1178   4                      *asPS2Struct[AUX_SCAN_INDEX].ps2ctrl=PS2_ReceiveMode;
1179   4                      for(timeout=0x00;timeout<=ResetCmdTOTime;timeout++) // 510 ms time-out
1180   4                      {
1181   5                          if(!bExtAUXTimeOutCheck(AUX_SCAN_INDEX, PS2_Receive_Mode))
1182   5                          {
1183   6                               break;
1184   6                          }
1185   5                      }
1186   4                          
1187   4                      if(timeout>ResetCmdTOTime)  // wait 00 time-out
1188   4                      {
1189   5                          SET_MASK(AuxFlags[AUX_SCAN_INDEX], DEVICE_IS_KEYBOARD);
1190   5                          CheckNSetMainKBCHN(AUX_SCAN_INDEX);      
1191   5                      }
1192   4                      else
1193   4                      {
1194   5                          if(PS2IFAck==0x00)      // Mouse
1195   5                          {
1196   6                              SET_MASK(AuxFlags[AUX_SCAN_INDEX], DEVICE_IS_MOUSE);      // Device is mouse
1197   6                              CheckNSetMainMSCHN(AUX_SCAN_INDEX);
1198   6                          }
1199   5                          else                    // Keyboard
1200   5                          {
1201   6                              SET_MASK(AuxFlags[AUX_SCAN_INDEX], DEVICE_IS_KEYBOARD);
1202   6                              CheckNSetMainKBCHN(AUX_SCAN_INDEX);
1203   6                          }
1204   5                      }
1205   4                  }
1206   3                  
1207   3                  *asPS2Struct[AUX_SCAN_INDEX].ps2ctrl=PS2_InhibitMode;
1208   3                  ISR2=(Int_PS2_0+Int_PS2_1+Int_PS2_2);       // Write to clear all PS2 pending interrupt
1209   3      
1210   3                  if(IS_MASK_SET(AuxFlags[AUX_SCAN_INDEX], DEVICE_IS_ATTACHED))
1211   3                  {
1212   4                      SET_MASK(AuxFlags[AUX_SCAN_INDEX], DEVICE_NEED_CONFIG);
1213   4                      ScanAUXStepIndex = ScanAUXStep_Init + AUX_SCAN_INDEX;
1214   4                  }
1215   3                  else
1216   3                  {
1217   4                      SetAUXScanIndexHS(AUXScanIndexFree);
1218   4                      ScanAUXStepIndex = ScanAUXStep_CheckTypeFail + AUX_SCAN_INDEX;
1219   4                  }
1220   3              }
1221   2              else
1222   2              {
1223   3                  *asPS2Struct[AUX_SCAN_INDEX].ps2ctrl=PS2_InhibitMode;
1224   3                  ISR2=(Int_PS2_0+Int_PS2_1+Int_PS2_2);       // Write to clear all PS2 pending interrupt
1225   3                   
1226   3                  SetAUXScanIndexHS(AUXScanIndexFree);
1227   3                  ScanAUXStepIndex = ScanAUXStep_InitFail + AUX_SCAN_INDEX;
1228   3              }
1229   2              PS2Deviceactive();
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 21  

1230   2          } 
1231   1      }
1232          
1233          //----------------------------------------------------------------------------
1234          // Clear variables for device plug-out
1235          //----------------------------------------------------------------------------
1236          void AUXDevicePlugOutClearVariables(void)
1237          {
1238   1          BYTE index;
1239   1        
1240   1          ClearAUXScanTimeOutCunt();
1241   1          SetAUXScanIndexHS(AUXScanIndexFree);
1242   1          AuxFlags[AUX_SCAN_INDEX] = 0x00;
1243   1          AuxFlags2[AUX_SCAN_INDEX] = 0x00;
1244   1          PS2_ReTryCunt = 0x00;
1245   1          SendtoAUXFlag = 0;  
1246   1          ECSendtoAUXFlag = 0;
1247   1      
1248   1          if(Main_MOUSE_CHN == (AUX_SCAN_INDEX+1))
1249   1          {
1250   2              Main_MOUSE_CHN = 0x00;
1251   2              for(index=0x00;index<3;index++)
1252   2              {
1253   3                  if(IS_MASK_SET(AuxFlags[index], DEVICE_IS_MOUSE))
1254   3                  {
1255   4                      SET_MASK(AuxFlags[index], DEVICE_IS_MAIN_MOUSE);
1256   4                      Main_MOUSE_CHN = index + 1;
1257   4                      break;
1258   4                  }
1259   3              }   
1260   2          }
1261   1                          
1262   1          if(Main_KB_CHN == (AUX_SCAN_INDEX+1))
1263   1          {
1264   2              Main_KB_CHN = 0x00;
1265   2              for(index=0x00;index<3;index++)
1266   2              {
1267   3                  if(IS_MASK_SET(AuxFlags[index], DEVICE_IS_KEYBOARD))
1268   3                  {
1269   4                      SET_MASK(AuxFlags[index], DEVICE_IS_MAIN_KB);
1270   4                      Main_KB_CHN = index + 1;
1271   4                      break;
1272   4                  }
1273   3              }
1274   2          }
1275   1      }
1276          
1277          //----------------------------------------------------------------------------
1278          // The polling aux device center
1279          //----------------------------------------------------------------------------
1280          void PollingAUXDeviceCenter(void)
1281          {
1282   1          if(AUX_SCAN_INDEX_HS!=AUXScanIndexInUse)
1283   1          {
1284   2              SetAUXScanIndexHS(AUXScanIndexInUse);
1285   2              AUX_SCAN_INDEX++;
1286   2              if(AUX_SCAN_INDEX>2)
1287   2              {
1288   3                  AUX_SCAN_INDEX=0x00;
1289   3              }
1290   2              ScanAUXStepIndex = ScanAUXStep_ScanPort+AUX_SCAN_INDEX;
1291   2          }
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 22  

1292   1          else
1293   1          {
1294   2              if(ECSendtoAUXFlag)
1295   2              {
1296   3                  AUX_SCAN_TIMEOUT_CUNT++;
1297   3                  if(AUX_SCAN_TIMEOUT_CUNT>=CheckDeviceTimeOut)
1298   3                  {
1299   4                      AUXDevicePlugOutClearVariables();
1300   4                      PS2Deviceactive();      
1301   4                  }
1302   3              }
1303   2          }
1304   1      }
1305          
1306          //----------------------------------------------------------------------------
1307          // The function of update external keyboard device
1308          //----------------------------------------------------------------------------
1309          const BYTE code UpdateConfigAUXKB[] = {0xF5, 0xF4, 0xF3, 0xED}; // Command table
1310          
1311          void UpdateExtKeyboard(BYTE portnum)
1312          {   
1313   1              BYTE index;
1314   1          
1315   1          for(index=0x00; index<sizeof(UpdateConfigAUXKB); index++)   
1316   1          {
1317   2              //if(IS_BIT_SET(AuxFlags_KB_CMD[AUX_SCAN_INDEX], bit(index)))
1318   2              if(IS_MASK_SET(AuxFlags_KB_CMD[AUX_SCAN_INDEX], BIT(index)))
1319   2              {
1320   3                  if(!Send2PortNWait(portnum,UpdateConfigAUXKB[index],1))
1321   3                  {
1322   4                      if(UpdateConfigAUXKB[index]==0xF3)
1323   4                      {
1324   5                          Send2PortNWait(portnum,Save_Typematic,1);
1325   5                      }
1326   4                      else if(UpdateConfigAUXKB[index]==0xED)
1327   4                      {
1328   5                          Send2PortNWait(portnum,(Led_Data&0x07),1);
1329   5                      }
1330   4                      CLEAR_MASK(AuxFlags_KB_CMD[AUX_SCAN_INDEX], BIT(index));
1331   4                  }
1332   3              }
1333   2          }
1334   1      }
1335          
1336          //----------------------------------------------------------------------------
1337          // The function of update aux keyboard device
1338          //----------------------------------------------------------------------------
1339          void UpdateAUXKBDevice(void)
1340          {
1341   1          UpdateExtKeyboard(AUX_SCAN_INDEX);
1342   1          SetAUXScanIndexHS(AUXScanIndexFree);
1343   1      }
1344          
1345          
1346          //----------------------------------------------------------------------------
1347          // The function of init, AUX device
1348          //----------------------------------------------------------------------------
1349          void InitAUXDevice(void)
1350          {
1351   1          if(IS_MASK_SET(AuxFlags[AUX_SCAN_INDEX], DEVICE_IS_KEYBOARD))   // device is keyboard
1352   1          {
1353   2              if(KeyboardDriverIn)
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 23  

1354   2              {
1355   3                  if(AuxFlags_KB_CMD[AUX_SCAN_INDEX]==0x00)
1356   3                  {
1357   4                      ConfigExtKeyboard(AUX_SCAN_INDEX);
1358   4                  }
1359   3                  else
1360   3                  {
1361   4                      UpdateExtKeyboard(AUX_SCAN_INDEX);
1362   4                  }
1363   3                  CLEAR_MASK(AuxFlags[AUX_SCAN_INDEX], DEVICE_NEED_CONFIG);
1364   3              }
1365   2              else
1366   2              {
1367   3                  
1368   3              }
1369   2          }
1370   1          else                                                // device is mouse
1371   1          {
1372   2              if(MouseDriverIn)
1373   2              {
1374   3                      if(MULPX_Multiplex)
1375   3                      {
1376   4                      AUXData_To_Host_nWait(0xAA,AUX_SCAN_INDEX);
1377   4                      AUXData_To_Host_nWait(0x00,AUX_SCAN_INDEX);
1378   4                      CLEAR_MASK(AuxFlags[AUX_SCAN_INDEX], DEVICE_NEED_CONFIG);
1379   4                      SetPS2SkipScanTime(10);
1380   4                      }
1381   3                  else
1382   3                  {
1383   4                      if(SetIntellimouse(MS_DRIVER_TYPE,AUX_SCAN_INDEX))
1384   4                      {
1385   5                          if(ReadMouseID(AUX_SCAN_INDEX)==MS_DRIVER_TYPE)
1386   5                          {
1387   6                              if(ConfigExtMouse(AUX_SCAN_INDEX))
1388   6                              {
1389   7                                  CLEAR_MASK(AuxFlags[AUX_SCAN_INDEX], DEVICE_NEED_CONFIG);
1390   7                              }
1391   6                              else
1392   6                              {
1393   7                                  AuxFlags[AUX_SCAN_INDEX] = 0x00;        // device error
1394   7                              }
1395   6                          }
1396   5                          else
1397   5                          {
1398   6                              SET_MASK(AuxFlags[AUX_SCAN_INDEX],DEVICE_MS_DRIVER_NO_MATCH);
1399   6                              CLEAR_MASK(AuxFlags[AUX_SCAN_INDEX], DEVICE_NEED_CONFIG);
1400   6                          }
1401   5                      }
1402   4                      else
1403   4                      {
1404   5                          AuxFlags[AUX_SCAN_INDEX] = 0x00;                // device error
1405   5                      }
1406   4                  }
1407   3              }
1408   2              else
1409   2              {
1410   3                      if(MULPX_Multiplex)
1411   3                      {
1412   4                      AUXData_To_Host_nWait(0xAA,AUX_SCAN_INDEX);
1413   4                      AUXData_To_Host_nWait(0x00,AUX_SCAN_INDEX);
1414   4                      CLEAR_MASK(AuxFlags[AUX_SCAN_INDEX], DEVICE_NEED_CONFIG);
1415   4                      }
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 24  

1416   3              }
1417   2          }
1418   1          PS2Deviceactive();
1419   1          SetAUXScanIndexHS(AUXScanIndexFree);
1420   1      }
1421          
1422          //----------------------------------------------------------------------------
1423          // The function of enabling/disabling TP by EC self.
1424          //
1425          //      Note : If want to enable mouse device. Please ensrue "MouseDriverIn" is set.
1426          //----------------------------------------------------------------------------
1427          void TPOnlyLowLevelFunc(void)
1428          {
1429   1          BYTE index;
1430   1      
1431   1          if(StartENAUXDevice)        // 10ms time base
1432   1          {
1433   2              StartENAUXDevice = 0;
1434   2      
1435   2              if(MSPending==0x33)     // PS2 data is pending
1436   2              {
1437   3                  return;             // Exit
1438   3              }
1439   2      
1440   2              if(TPACKCounter!=0x00)
1441   2              {
1442   3                  return;
1443   3              }
1444   2      
1445   2              Hook_TPOnlyLowLevelFunc();
1446   2      
1447   2              if(AUXInactiveCounter!=0x00)
1448   2                  {
1449   3                          AUXInactiveCounter--;
1450   3                  return;
1451   3                  }
1452   2              else
1453   2              {
1454   3                  if(IS_MASK_SET(PSSTS1, SS)||IS_MASK_SET(PSSTS2, SS)||IS_MASK_SET(PSSTS3, SS)||F_Service_PS2)
1455   3                  {
1456   4                      return;
1457   4                  }
1458   3              }
1459   2      
1460   2              if(AUXInactiveCounter==0x00)
1461   2              {
1462   3                      for(index=0x00;index<3;index++)
1463   3                      {
1464   4                              if(IS_MASK_SET(AuxFlags2[index], DEVICE_NEED_DISABLED))
1465   4                              {
1466   5                              if(!Send2PortNWait(index,0xF5,1))
1467   5                              {
1468   6                                      CLEAR_MASK(AuxFlags2[index], DEVICE_NEED_DISABLED);
1469   6                              SET_MASK(AuxFlags2[index],DEVICE_IS_DISABLED);
1470   6                              }
1471   5                              }
1472   4                              else if(IS_MASK_SET(AuxFlags2[index], DEVICE_NEED_ENABLED))
1473   4                              {
1474   5                              if(!Send2PortNWait(index,0xF4,1))
1475   5                              {
1476   6                                      CLEAR_MASK(AuxFlags2[index], DEVICE_NEED_ENABLED);
1477   6                              SET_MASK(AuxFlags2[index],DEVICE_IS_ENABLED);
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 25  

1478   6                                              //*asPS2Struct[index].ps2ctrl=PS2_ReceiveMode;
1479   6                              //SET_MASK(*asPS2Struct[index].ps2ier, asPS2Struct[index].ctrlbit); 
1480   6                              PS2ReceiveMode_OneChannel(index, 0x00);
1481   6                              }
1482   5                              }
1483   4                      }
1484   3              }
1485   2          }
1486   1      }
1487          
1488          //----------------------------------------------------------------------------
1489          // The function of scaning external AUX device
1490          //----------------------------------------------------------------------------
1491          void ExternalAUXLowLevelFunc(void)
1492          {
1493   1          BYTE ISR2Temp;
1494   1      
1495   1          if(StartENAUXDevice)                // 10ms time base
1496   1          {        
1497   2              StartENAUXDevice = 0;
1498   2      
1499   2              if(MSPending==0x33)             // PS2 data is pending
1500   2              {
1501   3                  return;                     // Exit
1502   3              }
1503   2              
1504   2              EnableAUXDevice();
1505   2      
1506   2              if(AUXInactiveCounter!=0x00)    // PS2 channel in inhibit.
1507   2              {
1508   3                  return;                     // Exit
1509   3              }
1510   2      
1511   2              if(SKIP_AUX_SCAN_CUNT!=0x00)    // EC skip to scan PS2 interface
1512   2              {
1513   3                  return; 
1514   3              }   
1515   2       
1516   2              if(IS_MASK_SET(PSSTS1, SS)||IS_MASK_SET(PSSTS2, SS)||IS_MASK_SET(PSSTS3, SS)||PS2StartBit==1)
1517   2              {
1518   3                  AuxScanWDT++;
1519   3                  
1520   3                  if(AuxScanWDT>100)          // Interface watch dog for hot-plug  (1sec). 
1521   3                  {
1522   4                      AuxScanWDT = 0x00;
1523   4                      PS2StartBit = 0;
1524   4      
1525   4                      AUXDevicePlugOutClearVariables();
1526   4                      PS2Deviceactive();
1527   4                      
1528   4                      if(IS_MASK_SET(PSSTS1, SS)||PS2_SSIRQ_Channel == 0)
1529   4                      {
1530   5                              PSCTL1 = PS2_InhibitMode;
1531   5                      }
1532   4                      else if(IS_MASK_SET(PSSTS2, SS)||PS2_SSIRQ_Channel == 1)
1533   4                      {
1534   5                          PSCTL2 = PS2_InhibitMode;
1535   5                      }
1536   4                      else if(IS_MASK_SET(PSSTS3, SS)||PS2_SSIRQ_Channel == 2)
1537   4                      {
1538   5                          PSCTL3 = PS2_InhibitMode;
1539   5                      }
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 26  

1540   4                  }
1541   3                  return;
1542   3              }
1543   2              else
1544   2              {
1545   3                  AuxScanWDT = 0x00;
1546   3      
1547   3                  ISR2Temp = ISR2;
1548   3                  ISR2Temp &= (Int_PS2_0+Int_PS2_1+Int_PS2_2);
1549   3                  if(ISR2Temp !=0x00)
1550   3                  {
1551   4                      return;
1552   4                  }
1553   3                  else
1554   3                  {
1555   4                      //if(PS2StartBit==1 || F_Service_PS2==1)  // Any ps2 channel has getten data.
1556   4                      if(F_Service_PS2)       // Any ps2 channel has getten data.
1557   4                      {
1558   5                          return;             // Exit
1559   5                      }
1560   4                      else
1561   4                      {
1562   5                          PS2DeviceInactive();
1563   5                      }
1564   4                  }
1565   3              }
1566   2      
1567   2              PollingAUXDeviceCenter();
1568   2      
1569   2              switch(ScanAUXStepIndex)
1570   2              {
1571   3                  case ScanAUXStep_ScanPort0:   
1572   3                  case ScanAUXStep_ScanPort1:
1573   3                  case ScanAUXStep_ScanPort2:
1574   3                      ScanAUXPortX();
1575   3                      break;      
1576   3                  
1577   3                  case ScanAUXStep_CheckType0:
1578   3                  case ScanAUXStep_CheckType1:
1579   3                  case ScanAUXStep_CheckType2:
1580   3                      CheckAUXDeviceType();
1581   3                      break;
1582   3                  
1583   3                  case ScanAUXStep_Init0:
1584   3                  case ScanAUXStep_Init1:
1585   3                  case ScanAUXStep_Init2:
1586   3                      InitAUXDevice();
1587   3                      break;
1588   3      
1589   3                  case ScanAUXStep_UpdateKB0:
1590   3                  case ScanAUXStep_UpdateKB1:
1591   3                  case ScanAUXStep_UpdateKB2:
1592   3                      UpdateAUXKBDevice();
1593   3                      break;
1594   3      
1595   3                  case ScanAUXStep_CheckOK1:
1596   3                  case ScanAUXStep_CheckOK2:
1597   3                  case ScanAUXStep_CheckOK3:
1598   3                  
1599   3                  case ScanAUXStep_InitFail0:
1600   3                  case ScanAUXStep_InitFail1:
1601   3                  case ScanAUXStep_InitFail2:    
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 27  

1602   3      
1603   3                  case ScanAUXStep_CheckTypeFail0:
1604   3                  case ScanAUXStep_CheckTypeFail1:
1605   3                  case ScanAUXStep_CheckTypeFail2:
1606   3             
1607   3                  case ScanAUXStep_Skip0:
1608   3                  case ScanAUXStep_Skip1:
1609   3                  case ScanAUXStep_Skip2:
1610   3                  
1611   3                  case ScanAUXStep_WaitPort0:
1612   3                  case ScanAUXStep_WaitPort1:
1613   3                  case ScanAUXStep_WaitPort2:
1614   3                  
1615   3                  default:
1616   3                      break;
1617   3              } 
1618   2              
1619   2          }
1620   1      }
1621          
1622          //----------------------------------------------------------------------------
1623          // The function of scaning AUX device step
1624          //----------------------------------------------------------------------------
1625          void ScanAUXDeviceStep(void)
1626          { 
1627   1          #if TouchPad_only
1628   1          TPOnlyLowLevelFunc();
1629   1          #else
                  ExternalAUXLowLevelFunc();
                  #endif    
1632   1      }
1633          
1634          //----------------------------------------------------------------------------
1635          // The function of checking AUX device
1636          //----------------------------------------------------------------------------
1637          void ScanAUXPortX(void)
1638          {
1639   1          if(AUX_SCAN_INDEX_HS==AUXScanIndexInUse)
1640   1          {
1641   2              if(AUX_SCAN_INDEX==0x00)
1642   2              {
1643   3                  if((PS2_Port0_CLK_CtrlReg&0xFB)!=0x00 || (PS2_Port0_Data_CtrlReg&0xFB)!=0x00)
1644   3                  {
1645   4                       SetAUXScanIndexHS(AUXScanIndexFree);
1646   4                  }
1647   3              }
1648   2              else if(AUX_SCAN_INDEX==0x01)
1649   2              {
1650   3                  if((PS2_Port1_CLK_CtrlReg&0xFB)!=0x00 || (PS2_Port1_Data_CtrlReg&0xFB)!=0x00)
1651   3                  {
1652   4                      SetAUXScanIndexHS(AUXScanIndexFree);
1653   4                  }
1654   3              }
1655   2              else if(AUX_SCAN_INDEX==0x02)
1656   2              {
1657   3                  if((PS2_Port2_CLK_CtrlReg&0xFB)!=0x00 || (PS2_Port2_Data_CtrlReg&0xFB)!=0x00)
1658   3                  {
1659   4                       SetAUXScanIndexHS(AUXScanIndexFree);
1660   4                  }
1661   3              }
1662   2                  
1663   2              if(AUX_SCAN_INDEX_HS == AUXScanIndexFree)
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 28  

1664   2              {
1665   3                  ScanAUXStepIndex = ScanAUXStep_Skip + AUX_SCAN_INDEX;
1666   3              }
1667   2              else
1668   2              {
1669   3                  ClearAUXScanTimeOutCunt();
1670   3                  if(IS_MASK_SET(AuxFlags2[AUX_SCAN_INDEX],DEVICE_NEED_DISABLED))
1671   3                  {
1672   4                      ECSend2Port(AUX_SCAN_INDEX, 0xF5);
1673   4                  }
1674   3                  else if(IS_MASK_SET(AuxFlags2[AUX_SCAN_INDEX],DEVICE_NEED_ENABLED))
1675   3                  {
1676   4                      ECSend2Port(AUX_SCAN_INDEX, 0xF4);
1677   4                  }
1678   3                  else
1679   3                  {
1680   4                      ECSend2Port(AUX_SCAN_INDEX, 0xF1);
1681   4                  }
1682   3                  ScanAUXStepIndex = ScanAUXStep_WaitPort + AUX_SCAN_INDEX;
1683   3              }
1684   2          }
1685   1      }
1686          
1687          //----------------------------------------------------------------------------
1688          // The function of enabling all PS2 interface
1689          //----------------------------------------------------------------------------
1690          void EnableAUXDevice(void)
1691          {
1692   1              if(AUXInactiveCounter!=0x00)
1693   1              {
1694   2                      if(--AUXInactiveCounter==0x00)
1695   2                      {
1696   3                              PS2Deviceactive();
1697   3                      }
1698   2              }
1699   1      
1700   1          if(SKIP_AUX_SCAN_CUNT!=0x00)
1701   1          {
1702   2              SKIP_AUX_SCAN_CUNT--;
1703   2          }
1704   1      }
1705          
1706          //----------------------------------------------------------------------------
1707          // The function of starting to check AUX device
1708          //----------------------------------------------------------------------------
1709          BYTE bExtAUXTimeOutCheck(BYTE channel, BYTE p_mode)
1710          {
1711   1          BYTE result;
1712   1          result = 0x01;      // pre-set resutl is fail
1713   1          
1714   1          TR1 = 0;            // Disable timer 1
1715   1              ET1 = 0;                        // Disable timer1 interrupt
1716   1          _nop_();
1717   1          _nop_();
1718   1          _nop_();
1719   1          _nop_();
1720   1          TH1 = Timer_30ms>>8;    // Set timer1 counter 30ms
1721   1          TL1 = Timer_30ms;       // Set timer1 counter 30ms
1722   1          TF1 = 0;                    // clear overflow flag
1723   1              TR1 = 1;                        // enable timer1
1724   1      
1725   1              do
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 29  

1726   1              {                   // Wait PS2 transaction Done Status
1727   2              //if(IS_MASK_SET(*asPS2Struct[channel].ps2status, TDS))
1728   2              
1729   2              //
1730   2              // Wait PS2 transaction Done
1731   2              //
1732   2              if(IS_MASK_SET(*asPS2Struct[channel].ps2isr, asPS2Struct[channel].ctrlbit))
1733   2              {
1734   3                  if(p_mode == PS2_Transmission_Mode)
1735   3                  {
1736   4                      for(PS2DataPinStatus=0x00;PS2DataPinStatus<5;PS2DataPinStatus++)
1737   4                      {
1738   5                          //if(IS_MASK_SET(*asPS2Struct[channel].ps2status, DLS))   // DATA Line Status is high
1739   5                          //{
1740   5                          //    break;
1741   5                          //}
1742   5                          if(channel==2)
1743   5                          {
1744   6                              //
1745   6                              // DATA Line Status is high of ps2 port 1
1746   6                              //
1747   6                              if(IS_MASK_SET(GPDRF, BIT5))   // DATA Line Status is high
1748   6                              {
1749   7                                  break;
1750   7                              }
1751   6                          }
1752   5                          else if(channel==1)
1753   5                          {
1754   6                              //
1755   6                              // DATA Line Status is high of ps2 port 1
1756   6                              //
1757   6                              if(IS_MASK_SET(GPDRF, BIT3))
1758   6                              {
1759   7                                  break;
1760   7                              }
1761   6                          }
1762   5                          else if(channel==0)
1763   5                          {
1764   6                              //
1765   6                              // DATA Line Status is high of ps2 port 0
1766   6                              //
1767   6                              if(IS_MASK_SET(GPDRF, BIT1))
1768   6                              {
1769   7                                  break;
1770   7                              }
1771   6                          }
1772   5                          else
1773   5                          {
1774   6                              //WNCKR = 0x00;       // Delay 15.26 us
1775   6                          }
1776   5      
1777   5                          //
1778   5                          // Delay 15.26 us
1779   5                          //
1780   5                          WNCKR = 0x00;
1781   5                      }
1782   4                  }
1783   3                  //WNCKR = 0x00;               // Delay 15.26 us
1784   3                  //WNCKR = 0x00;               // Delay 15.26 us
1785   3                  //WNCKR = 0x00;               // Delay 15.26 us
1786   3                  //WNCKR = 0x00;               // Delay 15.26 us
1787   3                  //WNCKR = 0x00;               // Delay 15.26 us
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 30  

1788   3                  //WNCKR = 0x00;               // Delay 15.26 us
1789   3                  //WNCKR = 0x00;               // Delay 15.26 us
1790   3                  *asPS2Struct[channel].ps2ctrl=PS2_InhibitMode;
1791   3                  PS2IFAck=*asPS2Struct[channel].ps2data;
1792   3                  result = 0x00;
1793   3      
1794   3                  *asPS2Struct[channel].ps2isr = asPS2Struct[channel].ctrlbit;
1795   3                  break;
1796   3              }
1797   2              }while(!TF1);                                   // waitting for overflow flag
1798   1       
1799   1          TR1 = 0;                                // disable timer1
1800   1          TF1 = 0;                                            // clear overflow flag
1801   1          ET1 = 1;    
1802   1              return(result);
1803   1      }
1804          
1805          //----------------------------------------------------------------------------
1806          // The function of setting external keyboard device
1807          //----------------------------------------------------------------------------
1808          const BYTE code ConfigAUXKB[] = {0xF3, 0xED, 0xF4 };    // Command table
1809          
1810          void ConfigExtKeyboard(BYTE portnum)
1811          {   
1812   1              BYTE index;
1813   1      
1814   1          for(index=0x00; index<sizeof(ConfigAUXKB); index++) 
1815   1          {
1816   2              if(!Send2PortNWait(portnum,ConfigAUXKB[index],1))
1817   2              {
1818   3                  if(ConfigAUXKB[index]==0xF3)
1819   3                  {
1820   4                      Send2PortNWait(portnum,Save_Typematic,1);
1821   4                  }
1822   3                  else if(ConfigAUXKB[index]==0xED)
1823   3                  {
1824   4                      Send2PortNWait(portnum,(Led_Data&0x07),1);
1825   4                  }
1826   3              }
1827   2          }
1828   1      }
1829          
1830          //----------------------------------------------------------------------------
1831          // The function of setting Resolution
1832          //  return : 1 OK, 0 fail
1833          //----------------------------------------------------------------------------
1834          BYTE EnableMouse(BYTE port)
1835          {
1836   1          BYTE resault;
1837   1          if(!Send2PortNWait(port,0xF4,1))
1838   1          {
1839   2              resault = 1;
1840   2          }
1841   1          else
1842   1          {
1843   2              resault = 0;
1844   2          }
1845   1          return(resault);
1846   1      }
1847          
1848          //----------------------------------------------------------------------------
1849          // The function of setting Resolution
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 31  

1850          //  return : 1 OK, 0 fail
1851          //----------------------------------------------------------------------------
1852          BYTE SetResolution(BYTE port, BYTE resolution)
1853          {
1854   1          BYTE resault;
1855   1          if(!Send2PortNWait(port,0xE8,1))
1856   1          {
1857   2              if(!Send2PortNWait(port,resolution,1))
1858   2              {
1859   3                  resault = 1;
1860   3              }
1861   2              else
1862   2              {
1863   3                  resault = 0;
1864   3              }
1865   2          }
1866   1          else
1867   1          {
1868   2              resault = 0;
1869   2          }
1870   1          return(resault);
1871   1      }
1872          
1873          //----------------------------------------------------------------------------
1874          // The function of setting samplerate
1875          //  return : 1 OK, 0 fail
1876          //----------------------------------------------------------------------------
1877          BYTE Setsamplerate(BYTE port, BYTE samplerate)
1878          {
1879   1          BYTE resault;
1880   1          if(!Send2PortNWait(port,0xF3,1))
1881   1          {
1882   2              if(!Send2PortNWait(port,samplerate,1))
1883   2              {
1884   3                  resault = 1;
1885   3              }
1886   2              else
1887   2              {
1888   3                  resault = 0;
1889   3              }
1890   2          }
1891   1          else
1892   1          {
1893   2              resault = 0;
1894   2          }
1895   1          return(resault);
1896   1      }
1897          
1898          //----------------------------------------------------------------------------
1899          // The Microsoft Intellimouse
1900          //----------------------------------------------------------------------------
1901          const BYTE code Intellimouse_5Byte[3] = 
1902          {       
1903              200,    200,    80
1904          };      
1905          
1906          const BYTE code Intellimouse_4Byte[3] = 
1907          {       
1908              200,    100,    80
1909          };
1910          
1911          BYTE SetIntellimouse(BYTE DriverType, BYTE port)
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 32  

1912          {
1913   1          BYTE index;
1914   1          BYTE result;
1915   1          result = 0x01;   // pr-set OK
1916   1          
1917   1          if(DriverType==3)
1918   1          {
1919   2              for(index=0x00;index<sizeof(Intellimouse_4Byte);index++)
1920   2              {
1921   3                  if(Setsamplerate(port, Intellimouse_4Byte[index])==0x00)
1922   3                  {
1923   4                      result = 0x00;
1924   4                      break;
1925   4                  }
1926   3              }
1927   2          }
1928   1          else if(DriverType==4)
1929   1          {
1930   2              for(index=0x00;index<sizeof(Intellimouse_5Byte);index++)
1931   2              {
1932   3                  if(Setsamplerate(port, Intellimouse_5Byte[index])==0x00)
1933   3                  {
1934   4                      result = 0x00;
1935   4                      break;
1936   4                  }
1937   3              }
1938   2          }
1939   1          return(result);
1940   1      }
1941          
1942          BYTE ReadMouseID(BYTE port)
1943          {
1944   1          if(Send2PortNWait(port,0xF2,2)==0x00)
1945   1          {
1946   2              return(PS2IFAck);
1947   2          }
1948   1          return(0xFF);
1949   1      }
1950          
1951          //----------------------------------------------------------------------------
1952          // The function of setting external mouse device
1953          //----------------------------------------------------------------------------
1954          BYTE ConfigExtMouse(BYTE portnum)
1955          {  
1956   1          BYTE result;
1957   1          result = 0x00;
1958   1          
1959   1          if(SetResolution(portnum,TPResolution))
1960   1          {
1961   2              if(EnableMouse(portnum))
1962   2              {
1963   3                  result = 0x01;
1964   3              }
1965   2          }
1966   1          return(result);
1967   1      }
1968          
1969          //----------------------------------------------------------------------------
1970          // The function of checking AUX Multiplexed modes
1971          //----------------------------------------------------------------------------
1972          BYTE CheckAuxMux(void)
1973          {
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 33  

1974   1              BYTE current,data_byte,index;
1975   1              current = 1;
1976   1              if (KBHIData == 0xF0)                   // Data from Host is F0h 
1977   1              {  
1978   2              MULPX_Mx_state2 = 1;
1979   2              MULPX_Mx_state3 = 0;
1980   2              current = 0;                            // Do NOT clear State2 and State3 
1981   2              data_byte = 0xF0;
1982   2              }
1983   1              else if (KBHIData == 0x56)              // Data from Host is 56h
1984   1              { 
1985   2              if (MULPX_Mx_state2)            // Current is State2
1986   2                      { 
1987   3                      MULPX_Mx_state2 = 0;
1988   3                      MULPX_Mx_state3 = 1;
1989   3                      current = 0;
1990   3                              data_byte = 0x56;
1991   3              }
1992   2              }
1993   1              else if (KBHIData == 0xA4)              // Data from Host is A4h 
1994   1              {  
1995   2                      if (MULPX_Mx_state3)            // Current is State3 
1996   2                      {  
1997   3                      MULPX_Multiplex = 1;    // Enable Activate Multiplex mode 
1998   3                      data_byte = 0x11;               // Return Version number 
1999   3              }
2000   2              }
2001   1              else if (KBHIData == 0xA5)              // Data from Host is A5h. 
2002   1              {   
2003   2                      if (MULPX_Mx_state3)            // Current is State3
2004   2                      {  
2005   3                      MULPX_Multiplex = 0;    // Reveret to Legacy Mode 
2006   3                      data_byte = 0x11;       // Return version number 
2007   3              }
2008   2              } 
2009   1          else
2010   1          {
2011   2              data_byte = KBHIData;
2012   2          }
2013   1      
2014   1              if (current) 
2015   1              {
2016   2              MULPX_Mx_state2 = 0;            // Clear State2 and State3 
2017   2                      MULPX_Mx_state3 = 0;
2018   2              }
2019   1              return(data_byte);
2020   1      }
2021          
2022          // ----------------------------------------------------------------------------
2023          // The function of disable ps2 channel x
2024          // Input :  portnum --> ps2 channel
2025          //          active  --> 1 : On, 0 : Off
2026          //
2027          //  Note : If want to enable mouse device. Please ensrue "MouseDriverIn" is set.
2028          // ----------------------------------------------------------------------------
2029          void OnOffPS2Channel_X(BYTE portnum, BYTE active)
2030          {
2031   1          if(portnum==0x00)
2032   1          {
2033   2              if((PS2_Port0_CLK_CtrlReg&0xFB)!=0x00 || (PS2_Port0_Data_CtrlReg&0xFB)!=0x00)
2034   2              {
2035   3                  return;// If this channel isn't PS2 ALT function. return;  
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 34  

2036   3              }                  
2037   2          }
2038   1          else if(portnum==0x01)
2039   1          {
2040   2                  if((PS2_Port1_CLK_CtrlReg&0xFB)!=0x00 || (PS2_Port1_Data_CtrlReg&0xFB)!=0x00)
2041   2              {
2042   3                  return;// If this channel isn't PS2 ALT function. return;  
2043   3              }    
2044   2          }
2045   1          else if(portnum==0x02)
2046   1          {
2047   2                  if((PS2_Port2_CLK_CtrlReg&0xFB)!=0x00 || (PS2_Port2_Data_CtrlReg&0xFB)!=0x00)
2048   2              {
2049   3                  return;// If this channel isn't PS2 ALT function. return;  
2050   3              }     
2051   2          }
2052   1      
2053   1          if(IS_MASK_SET(AuxFlags[portnum], DEVICE_IS_MOUSE))
2054   1          {
2055   2              if(MouseDriverIn)
2056   2              {
2057   3                  if(active == 0x00)
2058   3                  {
2059   4                      SET_MASK(AuxFlags2[portnum], DEVICE_NEED_DISABLED);
2060   4                  }
2061   3                  else if(active == 0x01)
2062   3                  {
2063   4                      SET_MASK(AuxFlags2[portnum], DEVICE_NEED_ENABLED);
2064   4                  }
2065   3                  PS2_ReTryCunt = 0x00;
2066   3              }
2067   2          }
2068   1          else
2069   1          {
2070   2              if(KeyboardDriverIn)
2071   2              {
2072   3                  if(active == 0x00)
2073   3                  {
2074   4                      SET_MASK(AuxFlags2[portnum], DEVICE_NEED_DISABLED);
2075   4                  }
2076   3                  else if(active == 0x01)
2077   3                  {
2078   4                      SET_MASK(AuxFlags2[portnum], DEVICE_NEED_ENABLED);
2079   4                  }
2080   3                  PS2_ReTryCunt = 0x00;
2081   3              }
2082   2          }
2083   1      }
2084          
2085          // ----------------------------------------------------------------------------
2086          // 
2087          // ----------------------------------------------------------------------------
2088          void KBCmdAckByteCunt(BYTE ackcunt)
2089          {
2090   1          Main_KB_ACK_CUNT = ackcunt;
2091   1      }
2092          
2093          // ----------------------------------------------------------------------------
2094          // 
2095          // ----------------------------------------------------------------------------
2096          void SetOtherKBNeedUpdataFlag(BYTE KBCmd)
2097          {
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 35  

2098   1          BYTE index;
2099   1          
2100   1          for(index=0x00;index<3;index++)
2101   1          {
2102   2              if(IS_MASK_SET(AuxFlags[index], DEVICE_IS_KEYBOARD))
2103   2              {
2104   3                  if(Main_KB_CHN != (index+1))
2105   3                  {
2106   4                      if(IS_MASK_CLEAR(AuxFlags[index], DEVICE_NEED_CONFIG))
2107   4                      {
2108   5                          if(KBCmd==0xED)
2109   5                          {
2110   6                              AuxFlags_KB_CMD[index] |= KB_CMD_0xED;
2111   6                          }
2112   5                          else if(KBCmd==0xF3)
2113   5                          {
2114   6                              AuxFlags_KB_CMD[index] |= KB_CMD_0xF3;
2115   6                          }
2116   5                          else if(KBCmd==0xF4)
2117   5                          {
2118   6                              AuxFlags_KB_CMD[index] |= KB_CMD_0xF4;
2119   6                          }
2120   5                          else if(KBCmd==0xF5)
2121   5                          {
2122   6                              AuxFlags_KB_CMD[index] |= KB_CMD_0xF5;
2123   6                          }      
2124   5                      }
2125   4                  }
2126   3              }
2127   2          } 
2128   1      }
2129          
2130          // ----------------------------------------------------------------------------
2131          // 
2132          // ----------------------------------------------------------------------------
2133          void SetStartScanAUXFlag(void)
2134          {
2135   1          StartENAUXDevice = 1;
2136   1      }
2137          
2138          // ----------------------------------------------------------------------------
2139          // 
2140          // ----------------------------------------------------------------------------
2141          void AUXData_To_Host_nWait(BYTE data_byte, BYTE portnum)
2142          {
2143   1          if(portnum!=0xFF)
2144   1          {
2145   2              AUXPortNum = portnum;
2146   2          }
2147   1          SendFromAux(data_byte);
2148   1      
2149   1          TR1 = 0;                    // Disable timer1
2150   1          ET1 = 0;                    // Disable timer1 interrupt
2151   1          _nop_();
2152   1          _nop_();
2153   1          _nop_();
2154   1          _nop_();
2155   1          TH1 = Timer_26ms>>8;        // Set timer1 counter 26ms
2156   1          TL1 = Timer_26ms;           // Set timer1 counter 26ms
2157   1          TF1 = 0;                    // Clear overflow flag
2158   1          TR1 = 1;                    // Enable timer1
2159   1      
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 36  

2160   1              while (!TF1)
2161   1              { 
2162   2                  if(IS_MASK_CLEAR(KBHISR, OBF))
2163   2              {
2164   3                  break;
2165   3              }   
2166   2              if(IS_MASK_SET(KBHISR, IBF))
2167   2              {
2168   3                  break;
2169   3              }  
2170   2              }
2171   1      
2172   1          TR1 = 0;                    // Disable timer 1
2173   1          TF1 = 0;                            // clear overflow flag
2174   1          ET1 = 1;                            // Enable timer1 interrupt
2175   1      }
2176          
2177          // ----------------------------------------------------------------------------
2178          // 
2179          // ----------------------------------------------------------------------------
2180          void ReSendPS2PendingData(void)
2181          {
2182   1          if(MSPending==0x33)
2183   1          {
2184   2              F_Service_Send_PS2 = 1;
2185   2          }
2186   1      }
2187          
2188          // ----------------------------------------------------------------------------
2189          // 
2190          // ----------------------------------------------------------------------------
2191          void CheckNSetMainKBCHN(BYTE PortNum)
2192          {
2193   1          if(Main_KB_CHN == 0x00)
2194   1          {
2195   2              SET_MASK(AuxFlags[PortNum], DEVICE_IS_MAIN_KB);
2196   2              Main_KB_CHN = PortNum+1;
2197   2          }
2198   1      }
2199          
2200          // ----------------------------------------------------------------------------
2201          // 
2202          // ----------------------------------------------------------------------------
2203          void CheckNSetMainMSCHN(BYTE PortNum)
2204          {
2205   1          if(Main_MOUSE_CHN == 0x00)
2206   1          {
2207   2              SET_MASK(AuxFlags[PortNum], DEVICE_IS_MAIN_MOUSE);
2208   2              Main_MOUSE_CHN = PortNum+1;
2209   2          }
2210   1      }
2211          
2212          // ----------------------------------------------------------------------------
2213          // 
2214          // ----------------------------------------------------------------------------
2215          void ResetMSPendingData(void)
2216          {
2217   1          MSPending = 0x88;
2218   1          F_Service_Send_PS2 = 0;
2219   1      }
2220          
2221          //----------------------------------------------------------------------------
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 37  

2222          // PS2 interface enable/disable OEM function call
2223          //----------------------------------------------------------------------------
2224          // ----------------------------------------------------------------------------
2225          // Disable port 0 ( send 0xF5 command to device)
2226          // ----------------------------------------------------------------------------
2227          void DisablePS2Port_0(void)
2228          {
2229   1          OnOffPS2Channel_X(0,0);
2230   1      }
2231          
2232          // ----------------------------------------------------------------------------
2233          // Disable port 1 ( send 0xF5 command to device)
2234          // ----------------------------------------------------------------------------
2235          void DisablePS2Port_1(void)
2236          {
2237   1          OnOffPS2Channel_X(1,0);
2238   1      }
2239          
2240          // ----------------------------------------------------------------------------
2241          // Disable port 2 ( send 0xF5 command to device) 
2242          // ----------------------------------------------------------------------------
2243          void DisablePS2Port_2(void)
2244          {
2245   1          OnOffPS2Channel_X(2,0);
2246   1      }
2247          
2248          // ----------------------------------------------------------------------------
2249          // Enable port 0 ( send 0xF4 command to device) 
2250          // ----------------------------------------------------------------------------
2251          void EnablePS2Port_0(void)
2252          {
2253   1          OnOffPS2Channel_X(0,1);
2254   1      }
2255          
2256          // ----------------------------------------------------------------------------
2257          // Enable port 1 ( send 0xF4 command to device)  
2258          // ----------------------------------------------------------------------------
2259          void EnablePS2Port_1(void)
2260          {
2261   1          OnOffPS2Channel_X(1,1);
2262   1      }
2263          
2264          // ----------------------------------------------------------------------------
2265          // Enable port 2 ( send 0xF4 command to device)  
2266          // ----------------------------------------------------------------------------
2267          void EnablePS2Port_2(void)
2268          {
2269   1          OnOffPS2Channel_X(2,1);
2270   1      }
2271          
2272          // ----------------------------------------------------------------------------
2273          // Power off clock and data pins of all supported channel
2274          // ----------------------------------------------------------------------------
2275          void PS2_PowerOff(void)
2276          {
2277   1          BYTE index;
2278   1          ResetMSPendingData();
2279   1          ClearPS2IFPendingEvent();
2280   1      
2281   1          ClearAUXScanTimeOutCunt();
2282   1          SetAUXScanIndexHS(AUXScanIndexFree);
2283   1          PS2_ReTryCunt = 0x00;
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 38  

2284   1          SendtoAUXFlag = 0;  
2285   1          ECSendtoAUXFlag = 0;
2286   1          AUXInactiveCounter = 0;
2287   1          StartENAUXDevice = 0;
2288   1      
2289   1          for(index=0x00;index<3;index++)
2290   1          {
2291   2              AuxFlags[index] = 0x00;
2292   2              AuxFlags2[index] = 0x00;
2293   2          }
2294   1          
2295   1          if((PS2_Port0_CLK_CtrlReg&0xFB)==0x00 && (PS2_Port0_Data_CtrlReg&0xFB)==0x00)
2296   1          {
2297   2              PS2_Port0_CLK_CtrlReg = OUTPUT+PULL_DW;
2298   2              PS2_Port0_Data_CtrlReg = OUTPUT+PULL_DW;
2299   2              SET_MASK(AuxFlags2[0], DEVICE_POWER_DOWN);
2300   2          }
2301   1                 
2302   1          if((PS2_Port1_CLK_CtrlReg&0xFB)==0x00 && (PS2_Port1_Data_CtrlReg&0xFB)==0x00)
2303   1          {
2304   2              PS2_Port1_CLK_CtrlReg = OUTPUT+PULL_DW;
2305   2              PS2_Port1_Data_CtrlReg = OUTPUT+PULL_DW;
2306   2              SET_MASK(AuxFlags2[1], DEVICE_POWER_DOWN);
2307   2          }
2308   1          
2309   1          if((PS2_Port2_CLK_CtrlReg&0xFB)==0x00 && (PS2_Port2_Data_CtrlReg&0xFB)==0x00)
2310   1          {
2311   2              PS2_Port2_CLK_CtrlReg = OUTPUT+PULL_DW;
2312   2              PS2_Port2_Data_CtrlReg = OUTPUT+PULL_DW;
2313   2              SET_MASK(AuxFlags2[2], DEVICE_POWER_DOWN);
2314   2          }
2315   1      }
2316          
2317          // ----------------------------------------------------------------------------
2318          // Power on clock and data pins of all supported channel
2319          // ----------------------------------------------------------------------------
2320          void PS2_PowerOn(void)
2321          {
2322   1          PS2DeviceInactive();
2323   1          if(IS_MASK_SET(AuxFlags2[0], DEVICE_POWER_DOWN))
2324   1          {
2325   2              CLEAR_MASK(AuxFlags2[0], DEVICE_POWER_DOWN);
2326   2              PS2_Port0_CLK_CtrlReg = ALT;
2327   2              PS2_Port0_Data_CtrlReg = ALT;
2328   2          }
2329   1          
2330   1          if(IS_MASK_SET(AuxFlags2[1], DEVICE_POWER_DOWN))
2331   1          {
2332   2              CLEAR_MASK(AuxFlags2[1], DEVICE_POWER_DOWN);
2333   2              PS2_Port1_CLK_CtrlReg = ALT;
2334   2              PS2_Port1_Data_CtrlReg = ALT;
2335   2          }
2336   1      
2337   1          if(IS_MASK_SET(AuxFlags2[2], DEVICE_POWER_DOWN))
2338   1          {
2339   2              CLEAR_MASK(AuxFlags2[2], DEVICE_POWER_DOWN);
2340   2              PS2_Port2_CLK_CtrlReg = ALT;
2341   2              PS2_Port2_Data_CtrlReg = ALT;
2342   2          }    
2343   1      }
2344          
2345          // ----------------------------------------------------------------------------
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 39  

2346          // Power on clock and data pins of all supported channel
2347          // ----------------------------------------------------------------------------
2348          void PowerOffClearTPPendingData(void)
2349          {
2350   1          ResetMSPendingData();
2351   1          ClearPS2IFPendingEvent();
2352   1      }
2353          
2354          void SetPS2CmdACKCounter(BYTE ackcunt)
2355          {
2356   1          TPACKCounter = ackcunt;
2357   1      }
2358          
2359          // ----------------------------------------------------------------------------
2360          // Wait ECSend2Port transaction done  
2361          // ----------------------------------------------------------------------------
2362          BYTE WaitECSend2PortACK(BYTE PortNum)
2363          {
2364   1          BYTE timeout;
2365   1          BYTE channel;
2366   1      
2367   1          timeout = 0x00;
2368   1          if(AuxFlags[PortNum] == 0x00)
2369   1          {
2370   2              return(timeout);
2371   2          }
2372   1          
2373   1          TR1 = 0;                    // Disable timer 1
2374   1          ET1 = 0;                            // Disable timer1 interrupt
2375   1          _nop_();
2376   1          _nop_();
2377   1          _nop_();
2378   1          _nop_();
2379   1          TH1 = Timer_85ms>>8;        // set timer1 counter 85 ms 
2380   1          TL1 = Timer_85ms;           // set timer1 counter 85 ms
2381   1          TF1 = 0;                            // clear overflow flag
2382   1          TR1 = 1;                            // enable timer1
2383   1      
2384   1          while(!TF1)                 // waitting for overflow flag
2385   1          {                           // Wait PS2 transaction Done Status
2386   2                  if(F_Service_PS2)
2387   2                  {
2388   3                          if(SendtoAUXFlag)   // Send command to device and transmit done.
2389   3                          {
2390   4                                  F_Service_PS2 = 0;  // Clear main service flag
2391   4                                  SendtoAUXFlag = 0;  
2392   4                      PS2_IRQ_Channel = 0xFF; // Clear PS2 2 service flag
2393   4                              //*asPS2Struct[PortNum].ps2ctrl=PS2_ReceiveMode;  // Enable Receive mode for ACK byte
2394   4                              //SET_MASK(*asPS2Struct[PortNum].ps2ier, asPS2Struct[PortNum].ctrlbit);  // Enable interrupt for AC
             -K byte
2395   4                              PS2ReceiveMode_OneChannel(PortNum, 0x00);
2396   4                                  ClearAUXScanTimeOutCunt();
2397   4                          }
2398   3                          else
2399   3                          {
2400   4                      channel = PS2_IRQ_Channel;
2401   4                      F_Service_PS2 = 0;      // Clear main service flag
2402   4                      ECSendtoAUXFlag = 0;
2403   4                      PS2_IRQ_Channel = 0xFF; // Clear PS2 2 service flag
2404   4                      ProcessECTestAUXACK(channel, 0);
2405   4                      TR1 = 0;                    // Disable timer 1
2406   4                      TF1 = 0;                                // clear overflow flag
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 40  

2407   4                      break;
2408   4                          }
2409   3                  }
2410   2          }
2411   1      
2412   1          if(TF1)
2413   1          {
2414   2              timeout = 0x01;
2415   2          }
2416   1          
2417   1          TR1 = 0;                    // Disable timer 1
2418   1          TF1 = 0;                            // clear overflow flag
2419   1          ET1 = 1;                            // Enable timer1 interrupt
2420   1          return(timeout);
2421   1      }
2422          
2423          
2424          // ----------------------------------------------------------------------------
2425          // Wait Send2Port transaction done  
2426          // ----------------------------------------------------------------------------
2427          void WaitPS2DeviceACK(BYTE PortNum)
2428          {
2429   1          TR1 = 0;                    // Disable timer 1
2430   1          ET1 = 0;                            // Disable timer1 interrupt
2431   1          _nop_();
2432   1          _nop_();
2433   1          _nop_();
2434   1          _nop_();
2435   1          TH1 = Timer_40ms>>8;        // set timer1 counter 40 ms 
2436   1          TL1 = Timer_40ms;           // set timer1 counter 40 ms
2437   1          TF1 = 0;                            // clear overflow flag
2438   1          TR1 = 1;                            // enable timer1
2439   1      
2440   1          while(!TF1)                 // waitting for overflow flag
2441   1          {                           // Wait PS2 transaction Done Status
2442   2                  if(F_Service_PS2)
2443   2                  {
2444   3                          if(SendtoAUXFlag)   // Send command to device and transmit done.
2445   3                          {
2446   4                                  F_Service_PS2 = 0;  // Clear main service flag
2447   4                                  SendtoAUXFlag = 0;  
2448   4                      PS2_IRQ_Channel = 0xFF;     // Clear PS2 2 service flag
2449   4                                  //*asPS2Struct[PortNum].ps2ctrl=PS2_ReceiveMode;  // Enable Receive mode for ACK byte
2450   4                                  //SET_MASK(*asPS2Struct[PortNum].ps2ier, asPS2Struct[PortNum].ctrlbit);  // Enable interrupt for AC
             -K byte
2451   4                                  PS2ReceiveMode_OneChannel(PortNum, 0x00);
2452   4                                  ClearAUXScanTimeOutCunt();
2453   4                          }
2454   3                          else
2455   3                          {
2456   4                      break;          // Receive transmit done.
2457   4                          }
2458   3                  }
2459   2          }
2460   1        
2461   1          TR1 = 0;                    // Disable timer 1
2462   1          TF1 = 0;                            // clear overflow flag
2463   1          ET1 = 1;                            // Enable timer1 interrupt
2464   1      }
2465          
2466          // ----------------------------------------------------------------------------
2467          //  Return : 
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 41  

2468          //          1 : PS2 TDS pending
2469          //          0 : No PS2 TDS pending
2470          // ----------------------------------------------------------------------------
2471          BYTE PS2CheckPendingISR(void)
2472          {
2473   1          BYTE pending;
2474   1          pending = 0x00;         // Pre-clear pending flag.
2475   1      
2476   1          if(IS_MASK_SET(PSSTS3, TDS))
2477   1          {
2478   2              if(IS_MASK_SET(IER2,Int_PS2_2)&&IS_MASK_CLEAR(ISR2,Int_PS2_2)&&(PSCTL3==PS2_ReceiveMode))
2479   2              {
2480   3                  IRQ_INT18_PS2Interrupt2();
2481   3                  pending=0x01;
2482   3              }
2483   2          }
2484   1          else if(IS_MASK_SET(PSSTS2, TDS))
2485   1          {
2486   2              if(IS_MASK_SET(IER2,Int_PS2_1)&&IS_MASK_CLEAR(ISR2,Int_PS2_1)&&(PSCTL2==PS2_ReceiveMode))
2487   2              {
2488   3                  IRQ_INT19_PS2Interrupt1();
2489   3                  pending=0x01;
2490   3              }
2491   2          }
2492   1          else if(IS_MASK_SET(PSSTS1, TDS))
2493   1          {
2494   2              if(IS_MASK_SET(IER2,Int_PS2_0)&&IS_MASK_CLEAR(ISR2,Int_PS2_0)&&(PSCTL1==PS2_ReceiveMode))
2495   2              {
2496   3                  IRQ_INT20_PS2Interrupt0();
2497   3                  pending=0x01;
2498   3              }
2499   2          }
2500   1      
2501   1          return(pending);
2502   1      }
2503          
2504          // ----------------------------------------------------------------------------
2505          //
2506          // ----------------------------------------------------------------------------
2507          void SetAUXScanIndexHS(BYTE status)
2508          {
2509   1          AUX_SCAN_INDEX_HS = status;
2510   1      }
2511          
2512          // ----------------------------------------------------------------------------
2513          //
2514          // ----------------------------------------------------------------------------
2515          void ClearAUXScanTimeOutCunt(void)
2516          {
2517   1          AUX_SCAN_TIMEOUT_CUNT = 0x00;
2518   1      }
2519          
2520          
2521          const BYTE code ELAN_ID_SQ[] = 
2522          {       
2523             0xE6,0x01,
2524             0xE6,0x01,
2525             0xE6,0x01,
2526             0xE9,0x03,
2527          };      
2528          
2529          const BYTE code SYN_ID_SQ[] = 
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 42  

2530          {       
2531              0xE8,0x01,
2532                  0x00,0x01,
2533                  0xE8,0x01,
2534                  0x00,0x01,
2535                  0xE8,0x01,
2536                  0x00,0x01,
2537                  0xE8,0x01,
2538                  0x00,0x01,
2539                  0xE9,0x03,
2540          };
2541          
2542          const BYTE code ALPS_ID_SQ[] = 
2543          {       
2544             0xE7,0x01,
2545             0xE7,0x01,
2546             0xE7,0x01,
2547             0xE9,0x03,
2548          };
2549          
2550          
2551          //   5ms base time
2552          
2553          void Read_TP_ID(void)
2554          {
2555   1      
2556   1          BYTE code * data_pntr;
2557   1              BYTE index_cmd = 0x00;
2558   1      
2559   1              if(Oem_RTP_ID_CMD != 0)
2560   1                      return;
2561   1      
2562   1              if(Oem_RTP_ID_1s_EN == 0x01)
2563   1                      Oem_RTP_ID_1s_T = Oem_RTP_ID_1s_T + 1;
2564   1      
2565   1      
2566   1              if(Oem_RTP_ID_1s_T<1) 
2567   1              {
2568   2                      return;
2569   2              }
2570   1              else
2571   1                      Oem_RTP_ID_1s_EN = 0x00;
2572   1      
2573   1              while(Oem_RTP_ID_LOOP_Index <= 3)
2574   1              {
2575   2              
2576   2              if(IS_MASK_CLEAR(Oem_RTP_ID_Step,Oem_RTP_ID_SUCCESS))
2577   2                      {
2578   3      
2579   3      //^^^^^^^^^^^^^^^^^^^^^^^^^^^ELAN TP^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2580   3                              RamDebug(0x66);
2581   3                              SET_MASK(Oem_RTP_ID_Step,Oem_RTP_ID_Elan_step);
2582   3      
2583   3                              data_pntr = ELAN_ID_SQ;
2584   3                              for(index_cmd=0;index_cmd<(sizeof(ELAN_ID_SQ)/2);index_cmd++)
2585   3                              {
2586   4      
2587   4                                      Send2PortNWait(2,*data_pntr++,*data_pntr++);
2588   4                                      
2589   4                              }
2590   3                              CLEAR_MASK(Oem_RTP_ID_Step,Oem_RTP_ID_Elan_step);
2591   3      
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 43  

2592   3                              RamDebug(0x66);
2593   3      
2594   3                              if(IS_MASK_SET(Oem_RTP_ID_Step,Oem_RTP_ID_SUCCESS))
2595   3                              {
2596   4                                      break;
2597   4                              }
2598   3      
2599   3      //^^^^^^^^^^^^^^^^^^^^^^^^^^^Synaptics TP^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2600   3      
2601   3                              RamDebug(0x44);
2602   3                              SET_MASK(Oem_RTP_ID_Step,Oem_RTP_ID_SY_step);
2603   3      
2604   3                              data_pntr = SYN_ID_SQ;
2605   3                              for(index_cmd=0;index_cmd<(sizeof(SYN_ID_SQ)/2);index_cmd++)
2606   3                              {
2607   4                                      Send2PortNWait(2,*(data_pntr++),*(data_pntr++));
2608   4      
2609   4                                      
2610   4                              }
2611   3                              CLEAR_MASK(Oem_RTP_ID_Step,Oem_RTP_ID_SY_step);
2612   3      
2613   3                              RamDebug(0x44);
2614   3      
2615   3                              if(IS_MASK_SET(Oem_RTP_ID_Step,Oem_RTP_ID_SUCCESS))
2616   3                              {
2617   4                                      break;
2618   4                              }       
2619   3      
2620   3      //^^^^^^^^^^^^^^^^^^^^^^^^^^^^ALPS TP^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2621   3      
2622   3                              RamDebug(0x33);
2623   3                              SET_MASK(Oem_RTP_ID_Step,Oem_RTP_ID_ALPS_step);
2624   3                      
2625   3                              data_pntr = ALPS_ID_SQ;
2626   3                              for(index_cmd=0;index_cmd<(sizeof(ALPS_ID_SQ)/2);index_cmd++)
2627   3                              {
2628   4                                              
2629   4                                      Send2PortNWait(2,*data_pntr++,*data_pntr++);            
2630   4                                      
2631   4                              }
2632   3                              CLEAR_MASK(Oem_RTP_ID_Step,Oem_RTP_ID_ALPS_step);
2633   3                              
2634   3                              RamDebug(0x33);
2635   3                      
2636   3      
2637   3                              if(IS_MASK_SET(Oem_RTP_ID_Step,Oem_RTP_ID_SUCCESS))
2638   3                              {
2639   4                                      break;
2640   4                              }       
2641   3              
2642   3      
2643   3                              
2644   3                      }
2645   2      
2646   2                      Oem_RTP_ID_LOOP_Index++;
2647   2                      
2648   2              }
2649   1      
2650   1              
2651   1      }
2652          
2653          /*-----------------------------------------------------------------------------
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 44  

2654           * End
2655           *---------------------------------------------------------------------------*/
2656          
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 45  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com026E (BEGIN)
0000         L?0623:
0000         L?0624:
0000 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0002 E6                MOV     A,@R0
0003         L?0625:
0003 75F00D            MOV     B,#0DH
0006 A4                MUL     AB
0007 2400        R     ADD     A,#LOW asPS2Struct
0009 F582              MOV     DPL,A
000B E4                CLR     A
000C 3400        R     ADDC    A,#HIGH asPS2Struct
000E F583              MOV     DPH,A
0010 E4                CLR     A
0011 93                MOVC    A,@A+DPTR
0012 22                RET     
0013         L?0626:
0013         L?0627:
0013 900000      R     MOV     DPTR,#data_pntr
0016 E4                CLR     A
0017 75F001            MOV     B,#01H
001A 120000      E     LCALL   ?C?ILDIX
001D 85F082            MOV     DPL,B
0020 F583              MOV     DPH,A
0022 E4                CLR     A
0023 93                MOVC    A,@A+DPTR
0024 FD                MOV     R5,A
0025 900000      R     MOV     DPTR,#data_pntr
0028 E4                CLR     A
0029 75F001            MOV     B,#01H
002C 120000      E     LCALL   ?C?ILDIX
002F 85F082            MOV     DPL,B
0032 F583              MOV     DPH,A
0034 E4                CLR     A
0035 93                MOVC    A,@A+DPTR
0036 22                RET     
0037         L?0628:
0037 E4                CLR     A
0038 F6                MOV     @R0,A
0039         L?0629:
0039 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
003B E6                MOV     A,@R0
003C 2400        E     ADD     A,#LOW AuxFlags2
003E         L?0630:
003E F8                MOV     R0,A
003F E4                CLR     A
0040         L?0631:
0040 F6                MOV     @R0,A
0041         L?0632:
0041 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0043 E6                MOV     A,@R0
0044 2400        E     ADD     A,#LOW AuxFlags2
0046 F8                MOV     R0,A
0047 22                RET     
0048         L?0633:
0048         L?0634:
0048 E0                MOVX    A,@DPTR
0049 FE                MOV     R6,A
004A         L?0635:
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 46  

004A EF                MOV     A,R7
004B 75F00D            MOV     B,#0DH
004E A4                MUL     AB
004F 2400        R     ADD     A,#LOW asPS2Struct+0CH
0051 F582              MOV     DPL,A
0053 E4                CLR     A
0054 3400        R     ADDC    A,#HIGH asPS2Struct+0CH
0056 F583              MOV     DPH,A
0058 E4                CLR     A
0059 93                MOVC    A,@A+DPTR
005A 22                RET     
005B         L?0636:
005B E0                MOVX    A,@DPTR
005C FF                MOV     R7,A
005D 75F00D            MOV     B,#0DH
0060 A4                MUL     AB
0061 2400        R     ADD     A,#LOW asPS2Struct+08H
0063 F582              MOV     DPL,A
0065 E4                CLR     A
0066 3400        R     ADDC    A,#HIGH asPS2Struct+08H
0068         L?0637:
0068 F583              MOV     DPH,A
006A E4                CLR     A
006B 93                MOVC    A,@A+DPTR
006C         L?0638:
006C FC                MOV     R4,A
006D 7401              MOV     A,#01H
006F 93                MOVC    A,@A+DPTR
0070 F582              MOV     DPL,A
0072 8C83              MOV     DPH,R4
0074 22                RET     
0075         L?0639:
0075 FE                MOV     R6,A
0076 7401              MOV     A,#01H
0078 93                MOVC    A,@A+DPTR
0079 F582              MOV     DPL,A
007B 8E83              MOV     DPH,R6
007D         L?0640:
007D 7411              MOV     A,#011H
007F         L?0641:
007F F0                MOVX    @DPTR,A
0080 900000      E     MOV     DPTR,#ISR2
0083 741C              MOV     A,#01CH
0085 F0                MOVX    @DPTR,A
0086 22                RET     
0087         L?0644:
0087         L?0645:
0087 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0089 E6                MOV     A,@R0
008A 2400        E     ADD     A,#LOW AuxFlags
008C F8                MOV     R0,A
008D 22                RET     
008E         L?0648:
008E         L?0649:
008E C28E              CLR     TR1
0090 C28F              CLR     TF1
0092 D2AB              SETB    ET1
0094 22                RET     
0095         L?0650:
0095 900000      R     MOV     DPTR,#timeout
0098         L?0651:
0098 E0                MOVX    A,@DPTR
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 47  

0099 04                INC     A
009A F0                MOVX    @DPTR,A
009B E0                MOVX    A,@DPTR
009C D3                SETB    C
009D 9411              SUBB    A,#011H
009F 22                RET     
00A0         L?0652:
00A0         L?0653:
00A0 FE                MOV     R6,A
00A1 7401              MOV     A,#01H
00A3 93                MOVC    A,@A+DPTR
00A4 F582              MOV     DPL,A
00A6 8E83              MOV     DPH,R6
00A8 22                RET     
00A9         L?0654:
00A9 F583              MOV     DPH,A
00AB E4                CLR     A
00AC 93                MOVC    A,@A+DPTR
00AD         L?0655:
00AD FA                MOV     R2,A
00AE 7401              MOV     A,#01H
00B0 93                MOVC    A,@A+DPTR
00B1 F582              MOV     DPL,A
00B3 8A83              MOV     DPH,R2
00B5 22                RET     
00B6         L?0657:
00B6 FE                MOV     R6,A
00B7 7401              MOV     A,#01H
00B9 93                MOVC    A,@A+DPTR
00BA F582              MOV     DPL,A
00BC 8E83              MOV     DPH,R6
00BE 7417              MOV     A,#017H
00C0 F0                MOVX    @DPTR,A
00C1 E4                CLR     A
00C2 900000      R     MOV     DPTR,#timeout
00C5 F0                MOVX    @DPTR,A
00C6 22                RET     
00C7         L?0658:
00C7 900000      R     MOV     DPTR,#PortNum
00CA         L?0659:
00CA E0                MOVX    A,@DPTR
00CB FF                MOV     R7,A
00CC 7B02              MOV     R3,#02H
00CE AD00        E     MOV     R5,KBHIData
00D0 22                RET     
00D1         L?0662:
00D1         L?0663:
00D1 900000      R     MOV     DPTR,#index
00D4 E0                MOVX    A,@DPTR
00D5 FF                MOV     R7,A
00D6 2400        E     ADD     A,#LOW AuxFlags2
00D8 F8                MOV     R0,A
00D9 22                RET     
00DA         L?0664:
00DA 900000      R     MOV     DPTR,#PortNum
00DD         L?0665:
00DD E0                MOVX    A,@DPTR
00DE FF                MOV     R7,A
00DF 2400        E     ADD     A,#LOW AuxFlags
00E1 F8                MOV     R0,A
00E2 E6                MOV     A,@R0
00E3 22                RET     
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 48  

00E4         L?0666:
00E4         L?0667:
00E4 900000      E     MOV     DPTR,#GPCRF0
00E7 E0                MOVX    A,@DPTR
00E8 54FB              ANL     A,#0FBH
00EA 22                RET     
00EB         L?0668:
00EB         L?0669:
00EB 900000      E     MOV     DPTR,#GPCRF1
00EE E0                MOVX    A,@DPTR
00EF 54FB              ANL     A,#0FBH
00F1 22                RET     
00F2         L?0670:
00F2         L?0671:
00F2 900000      E     MOV     DPTR,#GPCRF2
00F5 E0                MOVX    A,@DPTR
00F6 54FB              ANL     A,#0FBH
00F8 22                RET     
00F9         L?0672:
00F9         L?0673:
00F9 900000      E     MOV     DPTR,#GPCRF3
00FC E0                MOVX    A,@DPTR
00FD 54FB              ANL     A,#0FBH
00FF 22                RET     
0100         L?0674:
0100         L?0675:
0100 900000      E     MOV     DPTR,#GPCRF4
0103 E0                MOVX    A,@DPTR
0104 54FB              ANL     A,#0FBH
0106 22                RET     
0107         L?0676:
0107         L?0677:
0107 900000      E     MOV     DPTR,#GPCRF5
010A E0                MOVX    A,@DPTR
010B 54FB              ANL     A,#0FBH
010D 22                RET     
010E         L?0678:
010E EF                MOV     A,R7
010F 75F00D            MOV     B,#0DH
0112 A4                MUL     AB
0113 2400        R     ADD     A,#LOW asPS2Struct+0AH
0115 F582              MOV     DPL,A
0117 E4                CLR     A
0118 3400        R     ADDC    A,#HIGH asPS2Struct+0AH
011A 22                RET     
011B         L?0679:
011B 900000      E     MOV     DPTR,#guoyong003
011E F0                MOVX    @DPTR,A
011F 900000      E     MOV     DPTR,#Oem_RTP_ID_CMD
0122 22                RET     
0123         L?0682:
0123 7400        E     MOV     A,#LOW AuxFlags2
0125         L?0683:
0125 2F                ADD     A,R7
0126 F8                MOV     R0,A
0127 7410              MOV     A,#010H
0129 46                ORL     A,@R0
012A F6                MOV     @R0,A
012B 22                RET     
012C         L?0685:
012C 758DA6            MOV     TH1,#0A6H
012F 758B29            MOV     TL1,#029H
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 49  

0132 C28F              CLR     TF1
0134 D28E              SETB    TR1
0136 22                RET     
0137         L?0686:
0137 F8                MOV     R0,A
0138 7420              MOV     A,#020H
013A 46                ORL     A,@R0
013B F6                MOV     @R0,A
013C EF                MOV     A,R7
013D 04                INC     A
013E 7800        E     MOV     R0,#LOW Main_MOUSE_CHN
0140 F6                MOV     @R0,A
0141 22                RET     
0142         L?0688:
0142 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0144 E6                MOV     A,@R0
0145 2401              ADD     A,#01H
0147 FF                MOV     R7,A
0148 E4                CLR     A
0149 33                RLC     A
014A FE                MOV     R6,A
014B 22                RET     
014C         L?0689:
014C         L?0690:
014C 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
014E E6                MOV     A,@R0
014F 2400        E     ADD     A,#LOW AuxFlags_KB_CMD
0151 F8                MOV     R0,A
0152 22                RET     
             ; FUNCTION Com026E (END)

             ; FUNCTION service_PS2_data (BEGIN)
                                           ; SOURCE LINE # 26
                                           ; SOURCE LINE # 27
                                           ; SOURCE LINE # 30
0000 900000      E     MOV     DPTR,#KBHISR
0003 E0                MOVX    A,@DPTR
0004 20E011            JB      ACC.0,?C0579
0007 E0                MOVX    A,@DPTR
0008 30E102            JNB     ACC.1,?C0001
000B         ?C0002:
                                           ; SOURCE LINE # 32
                                           ; SOURCE LINE # 33
000B 800B              SJMP    ?C0579
                                           ; SOURCE LINE # 35
000D         ?C0001:
                                           ; SOURCE LINE # 37
000D 7800        E     MOV     R0,#LOW TPACKCounter
000F E6                MOV     A,@R0
0010 6003              JZ      ?C0004
                                           ; SOURCE LINE # 38
                                           ; SOURCE LINE # 39
0012 16                DEC     @R0
                                           ; SOURCE LINE # 40
0013 8008              SJMP    ?C0005
0015         ?C0004:
                                           ; SOURCE LINE # 42
                                           ; SOURCE LINE # 43
0015 300005      E     JNB     Ccb42_DISAB_AUX,?C0005
                                           ; SOURCE LINE # 44
                                           ; SOURCE LINE # 45
0018         ?C0579:
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 50  

0018 7F06              MOV     R7,#06H
001A 020000      R     LJMP    _SetPS2InhibitTime
                                           ; SOURCE LINE # 47
                                           ; SOURCE LINE # 48
001D         ?C0005:
                                           ; SOURCE LINE # 50
001D 7800        E     MOV     R0,#LOW MousePendingBuf
001F E6                MOV     A,@R0
0020 FF                MOV     R7,A
0021 120000      R     LCALL   _SendFromAux
                                           ; SOURCE LINE # 52
0024 30000A      E     JNB     MULPX_Multiplex,?C0007
                                           ; SOURCE LINE # 53
                                           ; SOURCE LINE # 54
0027 120000      R     LCALL   PS2Deviceactive
                                           ; SOURCE LINE # 55
002A 7F06              MOV     R7,#06H
002C 120000      R     LCALL   _SetPS2SkipScanTime
                                           ; SOURCE LINE # 56
002F 8008              SJMP    ?C0008
0031         ?C0007:
                                           ; SOURCE LINE # 58
                                           ; SOURCE LINE # 76
0031 120000      R     LCALL   PS2Deviceactive
                                           ; SOURCE LINE # 77
0034 7F06              MOV     R7,#06H
0036 120000      R     LCALL   _SetPS2InhibitTime
                                           ; SOURCE LINE # 78
0039         ?C0008:
                                           ; SOURCE LINE # 79
0039 120000      R     LCALL   ResetMSPendingData
                                           ; SOURCE LINE # 80
003C         ?C0003:
003C 22                RET     
             ; FUNCTION service_PS2_data (END)

             ; FUNCTION _SendFromAux (BEGIN)
                                           ; SOURCE LINE # 85
;---- Variable 'auxdata' assigned to Register 'R5' ----
0000 CD                XCH     A,R5
0001 EF                MOV     A,R7
0002 CD                XCH     A,R5
                                           ; SOURCE LINE # 86
                                           ; SOURCE LINE # 87
0003 900000      E     MOV     DPTR,#KBHISR
0006 E0                MOVX    A,@DPTR
0007 540F              ANL     A,#0FH
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 89
000A 30002B      E     JNB     MULPX_Multiplex,?C0009
                                           ; SOURCE LINE # 90
                                           ; SOURCE LINE # 91
000D 7800        E     MOV     R0,#LOW AUXPortNum
000F E6                MOV     A,@R0
0010 7005              JNZ     ?C0010
                                           ; SOURCE LINE # 92
                                           ; SOURCE LINE # 93
0012 7440              MOV     A,#040H
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 94
0015 801A              SJMP    ?C0011
0017         ?C0010:
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 51  

                                           ; SOURCE LINE # 95
0017 7800        E     MOV     R0,#LOW AUXPortNum
0019 E6                MOV     A,@R0
001A B40108            CJNE    A,#01H,?C0012
                                           ; SOURCE LINE # 96
                                           ; SOURCE LINE # 97
001D 900000      E     MOV     DPTR,#KBHISR
0020 7480              MOV     A,#080H
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 98
0023 800C              SJMP    ?C0011
0025         ?C0012:
                                           ; SOURCE LINE # 99
0025 7800        E     MOV     R0,#LOW AUXPortNum
0027 E6                MOV     A,@R0
0028 B40206            CJNE    A,#02H,?C0011
                                           ; SOURCE LINE # 100
                                           ; SOURCE LINE # 101
002B 900000      E     MOV     DPTR,#KBHISR
002E 74C0              MOV     A,#0C0H
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 102
0031         ?C0011:
                                           ; SOURCE LINE # 103
0031 900000      E     MOV     DPTR,#KBHISR
0034 E0                MOVX    A,@DPTR
0035 54FB              ANL     A,#0FBH
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 104
0038         ?C0009:
                                           ; SOURCE LINE # 106
0038 900000      E     MOV     DPTR,#KBHISR
003B E0                MOVX    A,@DPTR
003C 4420              ORL     A,#020H
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 107
003F 900000      E     MOV     DPTR,#KBHICR
0042 E0                MOVX    A,@DPTR
0043 54FC              ANL     A,#0FCH
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 108
0046 300004      E     JNB     Ccb42_INTR_AUX,?C0015
                                           ; SOURCE LINE # 109
                                           ; SOURCE LINE # 110
0049 E0                MOVX    A,@DPTR
004A 4402              ORL     A,#02H
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 111
004D         ?C0015:
                                           ; SOURCE LINE # 113
004D 00                NOP     
                                           ; SOURCE LINE # 114
004E 00                NOP     
                                           ; SOURCE LINE # 115
004F 00                NOP     
                                           ; SOURCE LINE # 116
0050 00                NOP     
                                           ; SOURCE LINE # 118
0051 900000      E     MOV     DPTR,#KBHIMDOR
0054 ED                MOV     A,R5
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 119
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 52  

0056 120000      E     LCALL   ShortDelayAfterWriteDOR
                                           ; SOURCE LINE # 121
                                           ; SOURCE LINE # 122
                                           ; SOURCE LINE # 125
                                           ; SOURCE LINE # 141
0059         ?C0017:
0059 22                RET     
             ; FUNCTION _SendFromAux (END)

             ; FUNCTION _SetPS2InhibitTime (BEGIN)
                                           ; SOURCE LINE # 146
;---- Variable 'time' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 147
                                           ; SOURCE LINE # 148
0000 7800        E     MOV     R0,#LOW AUXInactiveCounter
0002 E6                MOV     A,@R0
0003 C3                CLR     C
0004 9F                SUBB    A,R7
0005 5002              JNC     ?C0019
                                           ; SOURCE LINE # 149
                                           ; SOURCE LINE # 150
0007 EF                MOV     A,R7
0008 F6                MOV     @R0,A
                                           ; SOURCE LINE # 151
                                           ; SOURCE LINE # 152
0009         ?C0019:
0009 22                RET     
             ; FUNCTION _SetPS2InhibitTime (END)

             ; FUNCTION _SetPS2SkipScanTime (BEGIN)
                                           ; SOURCE LINE # 157
;---- Variable 'time' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 158
                                           ; SOURCE LINE # 159
0000 7800        E     MOV     R0,#LOW SKIP_AUX_SCAN_CUNT
0002 E6                MOV     A,@R0
0003 C3                CLR     C
0004 9F                SUBB    A,R7
0005 5002              JNC     ?C0021
                                           ; SOURCE LINE # 160
                                           ; SOURCE LINE # 161
0007 EF                MOV     A,R7
0008 F6                MOV     @R0,A
                                           ; SOURCE LINE # 162
                                           ; SOURCE LINE # 163
0009         ?C0021:
0009 22                RET     
             ; FUNCTION _SetPS2SkipScanTime (END)

             ; FUNCTION _ProcessMouseData (BEGIN)
                                           ; SOURCE LINE # 168
;---- Variable 'channel' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 169
                                           ; SOURCE LINE # 187
0000 7800        E     MOV     R0,#LOW MS_ID_CUNT
0002 E6                MOV     A,@R0
0003 6024              JZ      ?C0022
                                           ; SOURCE LINE # 188
                                           ; SOURCE LINE # 189
0005 16                DEC     @R0
0006 E6                MOV     A,@R0
0007 7020              JNZ     ?C0022
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 53  

                                           ; SOURCE LINE # 190
                                           ; SOURCE LINE # 191
0009 7400        E     MOV     A,#LOW PS2PortxData
000B 2F                ADD     A,R7
000C F8                MOV     R0,A
000D E6                MOV     A,@R0
000E 6011              JZ      ?C0025
0010 7400        E     MOV     A,#LOW PS2PortxData
0012 2F                ADD     A,R7
0013 F8                MOV     R0,A
0014 E6                MOV     A,@R0
0015 6403              XRL     A,#03H
0017 6008              JZ      ?C0025
0019 7400        E     MOV     A,#LOW PS2PortxData
001B 2F                ADD     A,R7
001C F8                MOV     R0,A
001D E6                MOV     A,@R0
001E B40408            CJNE    A,#04H,?C0022
0021         ?C0025:
                                           ; SOURCE LINE # 194
                                           ; SOURCE LINE # 195
0021 7400        E     MOV     A,#LOW PS2PortxData
0023 2F                ADD     A,R7
0024 F8                MOV     R0,A
0025 E6                MOV     A,@R0
0026 7800        E     MOV     R0,#LOW MS_DRIVER_TYPE
0028 F6                MOV     @R0,A
                                           ; SOURCE LINE # 196
                                           ; SOURCE LINE # 197
                                           ; SOURCE LINE # 198
0029         ?C0022:
                                           ; SOURCE LINE # 202
0029 900000      E     MOV     DPTR,#KBHISR
002C E0                MOVX    A,@DPTR
002D 20E007            JB      ACC.0,?C0027
0030 E0                MOVX    A,@DPTR
0031 20E103            JB      ACC.1,?C0027
0034 300010      E     JNB     Ccb42_DISAB_AUX,?C0026
0037         ?C0027:
                                           ; SOURCE LINE # 204
                                           ; SOURCE LINE # 205
0037 7800        E     MOV     R0,#LOW AUXPortNum
0039 EF                MOV     A,R7
003A F6                MOV     @R0,A
                                           ; SOURCE LINE # 206
003B 2400        E     ADD     A,#LOW PS2PortxData
003D F8                MOV     R0,A
003E E6                MOV     A,@R0
003F 7800        E     MOV     R0,#LOW MousePendingBuf
0041 F6                MOV     @R0,A
                                           ; SOURCE LINE # 207
0042 7800        E     MOV     R0,#LOW MSPending
0044 7633              MOV     @R0,#033H
                                           ; SOURCE LINE # 208
0046 22                RET     
0047         ?C0026:
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 211
0047 7800        E     MOV     R0,#LOW AUXPortNum
0049 EF                MOV     A,R7
004A F6                MOV     @R0,A
                                           ; SOURCE LINE # 212
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 54  

004B 2400        E     ADD     A,#LOW PS2PortxData
004D F8                MOV     R0,A
004E E6                MOV     A,@R0
004F FF                MOV     R7,A
0050 120000      R     LCALL   _SendFromAux
                                           ; SOURCE LINE # 213
0053 7800        E     MOV     R0,#LOW TPACKCounter
0055 E6                MOV     A,@R0
0056 6001              JZ      ?C0029
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 215
0058 16                DEC     @R0
                                           ; SOURCE LINE # 216
0059         ?C0029:
                                           ; SOURCE LINE # 218
0059 30000B      E     JNB     MULPX_Multiplex,?C0030
                                           ; SOURCE LINE # 219
                                           ; SOURCE LINE # 220
005C 200013      E     JB      AUXInterfaceBusy,?C0034
                                           ; SOURCE LINE # 221
                                           ; SOURCE LINE # 222
005F 120000      R     LCALL   PS2Deviceactive
                                           ; SOURCE LINE # 223
0062 7F06              MOV     R7,#06H
0064 020000      R     LJMP    _SetPS2SkipScanTime
                                           ; SOURCE LINE # 224
                                           ; SOURCE LINE # 225
0067         ?C0030:
                                           ; SOURCE LINE # 227
                                           ; SOURCE LINE # 228
0067 200008      E     JB      AUXInterfaceBusy,?C0034
                                           ; SOURCE LINE # 229
                                           ; SOURCE LINE # 247
006A 120000      R     LCALL   PS2Deviceactive
                                           ; SOURCE LINE # 248
006D 7F06              MOV     R7,#06H
006F 120000      R     LCALL   _SetPS2InhibitTime
                                           ; SOURCE LINE # 249
                                           ; SOURCE LINE # 250
                                           ; SOURCE LINE # 251
                                           ; SOURCE LINE # 252
0072         ?C0034:
0072 22                RET     
             ; FUNCTION _ProcessMouseData (END)

             ; FUNCTION _ProcessKeyboardData (BEGIN)
                                           ; SOURCE LINE # 257
0000 900000      R     MOV     DPTR,#channel
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 258
                                           ; SOURCE LINE # 260
0005 7800        E     MOV     R0,#LOW Main_KB_ACK_CUNT
0007 E6                MOV     A,@R0
0008 600C              JZ      ?C0035
                                           ; SOURCE LINE # 261
                                           ; SOURCE LINE # 262
000A 16                DEC     @R0
                                           ; SOURCE LINE # 264
000B E0                MOVX    A,@DPTR
000C 2400        E     ADD     A,#LOW PS2PortxData
000E F8                MOV     R0,A
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 55  

000F E6                MOV     A,@R0
0010 FF                MOV     R7,A
0011 120000      E     LCALL   _KBC_DataPending
                                           ; SOURCE LINE # 265
                                           ; SOURCE LINE # 270
0014 800C              SJMP    ?C0580
0016         ?C0035:
                                           ; SOURCE LINE # 272
                                           ; SOURCE LINE # 273
0016 900000      R     MOV     DPTR,#channel
0019 E0                MOVX    A,@DPTR
001A 2400        E     ADD     A,#LOW PS2PortxData
001C F8                MOV     R0,A
001D E6                MOV     A,@R0
001E FF                MOV     R7,A
001F 120000      E     LCALL   _Buffer_Key
                                           ; SOURCE LINE # 274
0022         ?C0580:
0022 120000      E     LCALL   SetServiceSendFlag
                                           ; SOURCE LINE # 275
0025         ?C0036:
                                           ; SOURCE LINE # 277
0025 7800        E     MOV     R0,#LOW Main_KB_ACK_CUNT
0027 E6                MOV     A,@R0
0028 7016              JNZ     ?C0037
                                           ; SOURCE LINE # 278
                                           ; SOURCE LINE # 279
002A 7800        E     MOV     R0,#LOW MSPending
002C E6                MOV     A,@R0
002D B43305            CJNE    A,#033H,?C0038
                                           ; SOURCE LINE # 280
                                           ; SOURCE LINE # 281
0030 20001A      E     JB      AUXInterfaceBusy,?C0044
                                           ; SOURCE LINE # 282
                                           ; SOURCE LINE # 287
                                           ; SOURCE LINE # 288
                                           ; SOURCE LINE # 289
0033 800E              SJMP    ?C0581
0035         ?C0038:
                                           ; SOURCE LINE # 291
                                           ; SOURCE LINE # 292
0035 200015      E     JB      AUXInterfaceBusy,?C0044
                                           ; SOURCE LINE # 293
                                           ; SOURCE LINE # 294
0038 120000      R     LCALL   PS2Deviceactive
                                           ; SOURCE LINE # 295
003B 7F06              MOV     R7,#06H
003D 020000      R     LJMP    _SetPS2SkipScanTime
                                           ; SOURCE LINE # 296
                                           ; SOURCE LINE # 297
                                           ; SOURCE LINE # 298
0040         ?C0037:
                                           ; SOURCE LINE # 300
                                           ; SOURCE LINE # 301
0040 20000A      E     JB      AUXInterfaceBusy,?C0044
                                           ; SOURCE LINE # 302
                                           ; SOURCE LINE # 307
0043         ?C0581:
0043 900000      R     MOV     DPTR,#channel
0046 E0                MOVX    A,@DPTR
0047 FF                MOV     R7,A
0048 7D01              MOV     R5,#01H
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 56  

004A 120000      R     LCALL   _PS2ReceiveMode_OneChannel
                                           ; SOURCE LINE # 308
                                           ; SOURCE LINE # 309
                                           ; SOURCE LINE # 310
004D         ?C0044:
004D 22                RET     
             ; FUNCTION _ProcessKeyboardData (END)

             ; FUNCTION _ProcessECTestAUXACK (BEGIN)
                                           ; SOURCE LINE # 312
0000 900000      R     MOV     DPTR,#PortNum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 313
                                           ; SOURCE LINE # 314
0008 C200        E     CLR     ECSendtoAUXFlag
                                           ; SOURCE LINE # 315
000A 120000      R     LCALL   ClearAUXScanTimeOutCunt
                                           ; SOURCE LINE # 316
000D E4                CLR     A
000E FF                MOV     R7,A
000F 120000      R     LCALL   _SetAUXScanIndexHS
                                           ; SOURCE LINE # 317
0012 900000      R     MOV     DPTR,#PortNum
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 2480              ADD     A,#080H
0019 7800        E     MOV     R0,#LOW ScanAUXStepIndex
                                           ; SOURCE LINE # 319
001B 120000      R     LCALL   L?0631
001E E6                MOV     A,@R0
001F 30E028            JNB     ACC.0,?C0045
                                           ; SOURCE LINE # 320
                                           ; SOURCE LINE # 321
0022 7400        E     MOV     A,#LOW PS2PortxData
0024 2F                ADD     A,R7
0025 F8                MOV     R0,A
0026 E6                MOV     A,@R0
0027 B4FA0A            CJNE    A,#0FAH,?C0046
                                           ; SOURCE LINE # 322
                                           ; SOURCE LINE # 324
                                           ; SOURCE LINE # 325
002A 120000      R     LCALL   L?0629
002D 7402              MOV     A,#02H
002F 46                ORL     A,@R0
0030 F6                MOV     @R0,A
                                           ; SOURCE LINE # 326
0031 020000      R     LJMP    ?C0049
0034         ?C0046:
                                           ; SOURCE LINE # 328
                                           ; SOURCE LINE # 329
0034 7800        E     MOV     R0,#LOW PS2_ReTryCunt
0036 06                INC     @R0
                                           ; SOURCE LINE # 330
0037 E6                MOV     A,@R0
0038 D3                SETB    C
0039 9405              SUBB    A,#05H
003B 5003              JNC     $ + 5H
003D 020000      R     LJMP    ?C0049
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 57  

                                           ; SOURCE LINE # 331
                                           ; SOURCE LINE # 332
                                           ; SOURCE LINE # 334
                                           ; SOURCE LINE # 335
0040 120000      R     LCALL   L?0628
0043 7404              MOV     A,#04H
0045 46                ORL     A,@R0
0046 F6                MOV     @R0,A
                                           ; SOURCE LINE # 336
                                           ; SOURCE LINE # 337
                                           ; SOURCE LINE # 338
0047 020000      R     LJMP    ?C0049
004A         ?C0045:
                                           ; SOURCE LINE # 339
004A 120000      R     LCALL   L?0632
004D E6                MOV     A,@R0
004E 30E426            JNB     ACC.4,?C0050
                                           ; SOURCE LINE # 340
                                           ; SOURCE LINE # 341
0051 900000      R     MOV     DPTR,#PortNum
0054 E0                MOVX    A,@DPTR
0055 2400        E     ADD     A,#LOW PS2PortxData
0057 F8                MOV     R0,A
0058 E6                MOV     A,@R0
0059 B4FA09            CJNE    A,#0FAH,?C0051
                                           ; SOURCE LINE # 342
                                           ; SOURCE LINE # 344
                                           ; SOURCE LINE # 345
005C 120000      R     LCALL   L?0629
005F 7420              MOV     A,#020H
0061 46                ORL     A,@R0
0062 F6                MOV     @R0,A
                                           ; SOURCE LINE # 346
0063 805E              SJMP    ?C0049
0065         ?C0051:
                                           ; SOURCE LINE # 348
                                           ; SOURCE LINE # 349
0065 7800        E     MOV     R0,#LOW PS2_ReTryCunt
0067 06                INC     @R0
                                           ; SOURCE LINE # 350
0068 E6                MOV     A,@R0
0069 D3                SETB    C
006A 9405              SUBB    A,#05H
006C 4055              JC      ?C0049
                                           ; SOURCE LINE # 351
                                           ; SOURCE LINE # 352
                                           ; SOURCE LINE # 354
                                           ; SOURCE LINE # 355
006E 120000      R     LCALL   L?0628
0071 7440              MOV     A,#040H
0073 46                ORL     A,@R0
0074 F6                MOV     @R0,A
                                           ; SOURCE LINE # 356
                                           ; SOURCE LINE # 357
                                           ; SOURCE LINE # 358
0075 804C              SJMP    ?C0049
0077         ?C0050:
                                           ; SOURCE LINE # 360
                                           ; SOURCE LINE # 361
0077 900000      R     MOV     DPTR,#PortNum
007A 120000      R     LCALL   L?0665
007D 7008              JNZ     ?C0055
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 58  

                                           ; SOURCE LINE # 362
                                           ; SOURCE LINE # 363
007F 7400        E     MOV     A,#LOW AuxFlags
0081 2F                ADD     A,R7
0082 F8                MOV     R0,A
0083 7602              MOV     @R0,#02H
                                           ; SOURCE LINE # 364
                                           ; SOURCE LINE # 365
                                           ; SOURCE LINE # 366
0085 801D              SJMP    ?C0582
0087         ?C0055:
                                           ; SOURCE LINE # 368
                                           ; SOURCE LINE # 369
0087 900000      R     MOV     DPTR,#PortNum
008A E0                MOVX    A,@DPTR
008B 2400        E     ADD     A,#LOW AuxFlags
008D F8                MOV     R0,A
008E E6                MOV     A,@R0
008F 30E307            JNB     ACC.3,?C0057
                                           ; SOURCE LINE # 370
                                           ; SOURCE LINE # 371
                                           ; SOURCE LINE # 372
0092 120000      R     LCALL   L?0647
0095 24C0              ADD     A,#0C0H
                                           ; SOURCE LINE # 373
0097 8027              SJMP    ?C0584
0099         ?C0057:
                                           ; SOURCE LINE # 374
0099 900000      R     MOV     DPTR,#PortNum
009C E0                MOVX    A,@DPTR
009D 2400        E     ADD     A,#LOW AuxFlags
009F F8                MOV     R0,A
00A0 E6                MOV     A,@R0
00A1 B40207            CJNE    A,#02H,?C0059
                                           ; SOURCE LINE # 375
                                           ; SOURCE LINE # 376
00A4         ?C0582:
                                           ; SOURCE LINE # 377
00A4 120000      R     LCALL   L?0647
00A7 24B0              ADD     A,#0B0H
00A9         ?C0583:
                                           ; SOURCE LINE # 378
00A9 8015              SJMP    ?C0584
00AB         ?C0059:
                                           ; SOURCE LINE # 380
                                           ; SOURCE LINE # 381
00AB 900000      R     MOV     DPTR,#PortNum
00AE E0                MOVX    A,@DPTR
00AF 2400        E     ADD     A,#LOW AuxFlags_KB_CMD
00B1 F8                MOV     R0,A
00B2 E6                MOV     A,@R0
00B3 600E              JZ      ?C0049
                                           ; SOURCE LINE # 382
                                           ; SOURCE LINE # 383
00B5 7FFF              MOV     R7,#0FFH
00B7 120000      R     LCALL   _SetAUXScanIndexHS
                                           ; SOURCE LINE # 384
00BA 900000      R     MOV     DPTR,#PortNum
00BD E0                MOVX    A,@DPTR
00BE 24A0              ADD     A,#0A0H
00C0         ?C0584:
00C0 7800        E     MOV     R0,#LOW ScanAUXStepIndex
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 59  

00C2 F6                MOV     @R0,A
                                           ; SOURCE LINE # 385
                                           ; SOURCE LINE # 386
                                           ; SOURCE LINE # 387
                                           ; SOURCE LINE # 388
00C3         ?C0049:
                                           ; SOURCE LINE # 390
00C3 900000      R     MOV     DPTR,#enablenow
00C6 E0                MOVX    A,@DPTR
00C7 B40103            CJNE    A,#01H,?C0063
                                           ; SOURCE LINE # 391
                                           ; SOURCE LINE # 392
00CA 120000      R     LCALL   PS2Deviceactive
                                           ; SOURCE LINE # 393
                                           ; SOURCE LINE # 394
00CD         ?C0063:
00CD 22                RET     
00CE         L?0647:
00CE 7FFF              MOV     R7,#0FFH
00D0 120000      R     LCALL   _SetAUXScanIndexHS
00D3 900000      R     MOV     DPTR,#PortNum
00D6 E0                MOVX    A,@DPTR
00D7 22                RET     
             ; FUNCTION _ProcessECTestAUXACK (END)

             ; FUNCTION _SendAUXData (BEGIN)
                                           ; SOURCE LINE # 400
0000 900000      R     MOV     DPTR,#PortNum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 401
                                           ; SOURCE LINE # 404
0005 300008      E     JNB     SendtoAUXFlag,?C0064
                                           ; SOURCE LINE # 405
                                           ; SOURCE LINE # 406
0008 C200        E     CLR     SendtoAUXFlag
                                           ; SOURCE LINE # 410
000A 120000      R     LCALL   L?0681
                                           ; SOURCE LINE # 411
000D 020000      R     LJMP    ClearAUXScanTimeOutCunt
                                           ; SOURCE LINE # 412
0010         ?C0064:
                                           ; SOURCE LINE # 414
                                           ; SOURCE LINE # 415
0010 30000A      E     JNB     ECSendtoAUXFlag,?C0066
                                           ; SOURCE LINE # 416
                                           ; SOURCE LINE # 417
0013 900000      R     MOV     DPTR,#PortNum
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 7D01              MOV     R5,#01H
001A 020000      R     LJMP    _ProcessECTestAUXACK
                                           ; SOURCE LINE # 418
001D         ?C0066:
                                           ; SOURCE LINE # 420
                                           ; SOURCE LINE # 421
001D E4                CLR     A
001E FF                MOV     R7,A
001F 120000      R     LCALL   _SetAUXScanIndexHS
                                           ; SOURCE LINE # 422
0022 120000      R     LCALL   ClearAUXScanTimeOutCunt
                                           ; SOURCE LINE # 423
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 60  

0025 120000      R     LCALL   L?0664
0028 30E703            JNB     ACC.7,?C0068
                                           ; SOURCE LINE # 424
                                           ; SOURCE LINE # 425
002B 020000      R     LJMP    _ProcessMouseData
                                           ; SOURCE LINE # 426
002E         ?C0068:
                                           ; SOURCE LINE # 427
002E 120000      R     LCALL   L?0664
0031 30E603            JNB     ACC.6,?C0070
                                           ; SOURCE LINE # 428
                                           ; SOURCE LINE # 429
0034 020000      R     LJMP    _ProcessKeyboardData
                                           ; SOURCE LINE # 430
0037         ?C0070:
                                           ; SOURCE LINE # 432
                                           ; SOURCE LINE # 433
0037 120000      R     LCALL   PS2Deviceactive
                                           ; SOURCE LINE # 434
                                           ; SOURCE LINE # 435
                                           ; SOURCE LINE # 436
                                           ; SOURCE LINE # 437
003A         ?C0072:
003A 22                RET     
             ; FUNCTION _SendAUXData (END)

             ; FUNCTION L?0660 (BEGIN)
0000         L?0661:
0000 E0                MOVX    A,@DPTR
0001 FF                MOV     R7,A
0002 A3                INC     DPTR
0003 E0                MOVX    A,@DPTR
0004 FD                MOV     R5,A
             ; FUNCTION _RAM_Send2Port (BEGIN)
                                           ; SOURCE LINE # 443
;---- Variable 'p_cmd' assigned to Register 'R5' ----
;---- Variable 'p_PortNum' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 444
                                           ; SOURCE LINE # 445
0005 EF                MOV     A,R7
0006 7010              JNZ     ?C0073
                                           ; SOURCE LINE # 446
                                           ; SOURCE LINE # 447
0008 900000      E     MOV     DPTR,#PSCTL1
000B 741D              MOV     A,#01DH
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 448
000E 900000      E     MOV     DPTR,#PSDAT1
0011 ED                MOV     A,R5
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 449
0013 900000      E     MOV     DPTR,#PSCTL1
                                           ; SOURCE LINE # 450
                                           ; SOURCE LINE # 451
0016 8026              SJMP    ?C0586
0018         ?C0073:
                                           ; SOURCE LINE # 452
0018 EF                MOV     A,R7
0019 B40110            CJNE    A,#01H,?C0075
                                           ; SOURCE LINE # 453
                                           ; SOURCE LINE # 454
001C 900000      E     MOV     DPTR,#PSCTL2
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 61  

001F 741D              MOV     A,#01DH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 455
0022 900000      E     MOV     DPTR,#PSDAT2
0025 ED                MOV     A,R5
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 456
0027 900000      E     MOV     DPTR,#PSCTL2
002A         ?C0585:
                                           ; SOURCE LINE # 457
                                           ; SOURCE LINE # 458
002A 8012              SJMP    ?C0586
002C         ?C0075:
                                           ; SOURCE LINE # 459
002C EF                MOV     A,R7
002D B40214            CJNE    A,#02H,?C0078
                                           ; SOURCE LINE # 460
                                           ; SOURCE LINE # 461
0030 900000      E     MOV     DPTR,#PSCTL3
0033 741D              MOV     A,#01DH
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 462
0036 900000      E     MOV     DPTR,#PSDAT3
0039 ED                MOV     A,R5
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 463
003B 900000      E     MOV     DPTR,#PSCTL3
003E         ?C0586:
003E 741C              MOV     A,#01CH
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 464
0041 741E              MOV     A,#01EH
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 465
                                           ; SOURCE LINE # 466
0044         ?C0078:
0044 22                RET     
             ; FUNCTION _RAM_Send2Port (END)

             ; FUNCTION ClearPS2IFPendingEvent (BEGIN)
                                           ; SOURCE LINE # 471
                                           ; SOURCE LINE # 472
                                           ; SOURCE LINE # 473
0000 120000      R     LCALL   InhibitAUXDevice
                                           ; SOURCE LINE # 474
0003 900000      E     MOV     DPTR,#IER2
0006 E0                MOVX    A,@DPTR
0007 54E3              ANL     A,#0E3H
                                           ; SOURCE LINE # 475
0009 120000      R     LCALL   L?0641
                                           ; SOURCE LINE # 476
000C C200        E     CLR     PS2StartBit
                                           ; SOURCE LINE # 477
000E C200        E     CLR     F_Service_PS2
                                           ; SOURCE LINE # 478
0010 22                RET     
             ; FUNCTION ClearPS2IFPendingEvent (END)

             ; FUNCTION _ECSend2Port (BEGIN)
                                           ; SOURCE LINE # 483
0000 900000      R     MOV     DPTR,#PortNum
0003 EF                MOV     A,R7
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 62  

0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 484
                                           ; SOURCE LINE # 485
0008 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 486
000B 120000      R     LCALL   ClearPS2IFPendingEvent
                                           ; SOURCE LINE # 487
000E D200        E     SETB    ECSendtoAUXFlag
                                           ; SOURCE LINE # 488
0010 D200        E     SETB    SendtoAUXFlag
                                           ; SOURCE LINE # 493
0012 900000      R     MOV     DPTR,#PortNum
0015 120000      R     LCALL   L?0660
                                           ; SOURCE LINE # 494
0018 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 496
001B 900000      R     MOV     DPTR,#PortNum
001E 120000      R     LCALL   L?0636
0021 C083              PUSH    DPH
0023 C082              PUSH    DPL
0025 120000      R     LCALL   L?0633
0028 FF                MOV     R7,A
0029 EE                MOV     A,R6
002A 4F                ORL     A,R7
002B D082              POP     DPL
002D D083              POP     DPH
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 497
0030 22                RET     
             ; FUNCTION _ECSend2Port (END)

             ; FUNCTION CheckNWaitReceiveDone (BEGIN)
                                           ; SOURCE LINE # 502
                                           ; SOURCE LINE # 503
                                           ; SOURCE LINE # 505
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#busy
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 507
0005 900000      E     MOV     DPTR,#PSSTS1
0008 E0                MOVX    A,@DPTR
0009 20E214            JB      ACC.2,?C0082
000C 900000      E     MOV     DPTR,#PSSTS2
000F E0                MOVX    A,@DPTR
0010 20E20D            JB      ACC.2,?C0082
0013 900000      E     MOV     DPTR,#PSSTS3
0016 E0                MOVX    A,@DPTR
0017 20E206            JB      ACC.2,?C0082
001A 200003      E     JB      F_Service_PS2,?C0082
001D 30003E      E     JNB     PS2StartBit,?C0081
0020         ?C0082:
                                           ; SOURCE LINE # 509
                                           ; SOURCE LINE # 510
0020 C28E              CLR     TR1
                                           ; SOURCE LINE # 511
0022 C2AB              CLR     ET1
                                           ; SOURCE LINE # 512
0024 00                NOP     
                                           ; SOURCE LINE # 513
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 63  

0025 00                NOP     
                                           ; SOURCE LINE # 514
0026 00                NOP     
                                           ; SOURCE LINE # 515
0027 00                NOP     
                                           ; SOURCE LINE # 516
                                           ; SOURCE LINE # 517
                                           ; SOURCE LINE # 518
                                           ; SOURCE LINE # 519
0028 120000      R     LCALL   L?0685
002B         ?C0083:
                                           ; SOURCE LINE # 521
002B 208F0D            JB      TF1,?C0084
                                           ; SOURCE LINE # 522
                                           ; SOURCE LINE # 523
002E 3000FA      E     JNB     F_Service_PS2,?C0083
                                           ; SOURCE LINE # 524
                                           ; SOURCE LINE # 525
0031 900000      R     MOV     DPTR,#busy
0034 7401              MOV     A,#01H
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 526
0037 C28E              CLR     TR1
                                           ; SOURCE LINE # 527
0039 C28F              CLR     TF1
                                           ; SOURCE LINE # 528
                                           ; SOURCE LINE # 529
                                           ; SOURCE LINE # 530
003B         ?C0084:
                                           ; SOURCE LINE # 532
003B 308F0C            JNB     TF1,?C0086
                                           ; SOURCE LINE # 533
                                           ; SOURCE LINE # 534
003E 120000      R     LCALL   PS2CheckPendingISR
0041 BF0106            CJNE    R7,#01H,?C0086
                                           ; SOURCE LINE # 535
                                           ; SOURCE LINE # 536
0044 900000      R     MOV     DPTR,#busy
0047 7401              MOV     A,#01H
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 537
                                           ; SOURCE LINE # 538
004A         ?C0086:
                                           ; SOURCE LINE # 540
004A 900000      R     MOV     DPTR,#busy
004D E0                MOVX    A,@DPTR
004E B40109            CJNE    A,#01H,?C0088
                                           ; SOURCE LINE # 541
                                           ; SOURCE LINE # 542
0051 C200        E     CLR     F_Service_PS2
                                           ; SOURCE LINE # 543
0053 D200        E     SETB    AUXInterfaceBusy
                                           ; SOURCE LINE # 544
0055 120000      R     LCALL   service_ps2
                                           ; SOURCE LINE # 545
0058 C200        E     CLR     AUXInterfaceBusy
                                           ; SOURCE LINE # 546
005A         ?C0088:
                                           ; SOURCE LINE # 548
                                           ; SOURCE LINE # 549
                                           ; SOURCE LINE # 550
005A 120000      R     LCALL   L?0648
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 64  

                                           ; SOURCE LINE # 551
005D 22                RET     
005E         ?C0081:
                                           ; SOURCE LINE # 553
                                           ; SOURCE LINE # 554
005E 120000      R     LCALL   PS2DeviceInactive
                                           ; SOURCE LINE # 555
                                           ; SOURCE LINE # 556
0061         ?C0090:
0061 22                RET     
             ; FUNCTION CheckNWaitReceiveDone (END)

             ; FUNCTION _Send2Port (BEGIN)
                                           ; SOURCE LINE # 561
0000 900000      R     MOV     DPTR,#PortNum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EB                MOV     A,R3
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 562
                                           ; SOURCE LINE # 582
000B 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 583
000E 120000      R     LCALL   ClearPS2IFPendingEvent
                                           ; SOURCE LINE # 585
0011 900000      R     MOV     DPTR,#PortData
0014 E0                MOVX    A,@DPTR
0015 B4FF04            CJNE    A,#0FFH,?C0091
                                           ; SOURCE LINE # 586
                                           ; SOURCE LINE # 587
0018 7F78              MOV     R7,#078H
                                           ; SOURCE LINE # 588
001A 8022              SJMP    ?C0587
001C         ?C0091:
                                           ; SOURCE LINE # 590
                                           ; SOURCE LINE # 591
001C 7800        E     MOV     R0,#LOW TPACKCounter
001E E6                MOV     A,@R0
001F 6002              JZ      ?C0093
                                           ; SOURCE LINE # 592
                                           ; SOURCE LINE # 593
                                           ; SOURCE LINE # 594
0021 8005              SJMP    ?C0588
0023         ?C0093:
                                           ; SOURCE LINE # 595
0023 7800        E     MOV     R0,#LOW Main_KB_ACK_CUNT
0025 E6                MOV     A,@R0
0026 600B              JZ      ?C0095
                                           ; SOURCE LINE # 596
                                           ; SOURCE LINE # 597
0028         ?C0588:
0028 E6                MOV     A,@R0
0029 75F006            MOV     B,#06H
002C A4                MUL     AB
002D 900000      R     MOV     DPTR,#tempinactvietime
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 598
0031 8006              SJMP    ?C0094
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 65  

0033         ?C0095:
                                           ; SOURCE LINE # 600
                                           ; SOURCE LINE # 601
0033 900000      R     MOV     DPTR,#tempinactvietime
0036 7406              MOV     A,#06H
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 602
0039         ?C0094:
                                           ; SOURCE LINE # 603
0039 900000      R     MOV     DPTR,#tempinactvietime
003C E0                MOVX    A,@DPTR
003D FF                MOV     R7,A
003E         ?C0587:
003E 120000      R     LCALL   _SetPS2InhibitTime
                                           ; SOURCE LINE # 604
0041         ?C0092:
                                           ; SOURCE LINE # 606
0041 E4                CLR     A
0042 FF                MOV     R7,A
0043 120000      R     LCALL   _SetAUXScanIndexHS
                                           ; SOURCE LINE # 608
0046 C200        E     CLR     ECSendtoAUXFlag
                                           ; SOURCE LINE # 609
0048 D200        E     SETB    SendtoAUXFlag
                                           ; SOURCE LINE # 614
004A 900000      R     MOV     DPTR,#PortNum
004D 120000      R     LCALL   L?0660
                                           ; SOURCE LINE # 615
0050 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 617
0053 900000      R     MOV     DPTR,#PortNum
0056 120000      R     LCALL   L?0636
0059 C083              PUSH    DPH
005B C082              PUSH    DPL
005D 120000      R     LCALL   L?0633
0060 FF                MOV     R7,A
0061 EE                MOV     A,R6
0062 4F                ORL     A,R7
0063 D082              POP     DPL
0065 D083              POP     DPH
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 619
0068 900000      R     MOV     DPTR,#PortNum
006B E0                MOVX    A,@DPTR
006C FF                MOV     R7,A
006D 020000      R     LJMP    _WaitPS2DeviceACK
             ; FUNCTION _Send2Port (END)

             ; FUNCTION _Send2PortNWait (BEGIN)
                                           ; SOURCE LINE # 629
0000 900000      R     MOV     DPTR,#PortNum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EB                MOV     A,R3
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 630
                                           ; SOURCE LINE # 634
000B E4                CLR     A
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 66  

000C 7800        E     MOV     R0,#LOW PS2IFAck
000E F6                MOV     @R0,A
                                           ; SOURCE LINE # 636
000F 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 637
0012 120000      R     LCALL   ClearPS2IFPendingEvent
                                           ; SOURCE LINE # 638
0015 C200        E     CLR     ECSendtoAUXFlag
                                           ; SOURCE LINE # 639
0017 C200        E     CLR     SendtoAUXFlag
                                           ; SOURCE LINE # 644
0019 900000      R     MOV     DPTR,#PortNum
001C 120000      R     LCALL   L?0661
                                           ; SOURCE LINE # 645
001F 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 647
0022 900000      R     MOV     DPTR,#PortNum
0025 E0                MOVX    A,@DPTR
0026 FF                MOV     R7,A
0027 7D01              MOV     R5,#01H
0029 120000      R     LCALL   _bExtAUXTimeOutCheck
;---- Variable 'result' assigned to Register 'R4' ----
002C CC                XCH     A,R4
002D EF                MOV     A,R7
002E CC                XCH     A,R4
                                           ; SOURCE LINE # 649
002F EC                MOV     A,R4
0030 6003              JZ      $ + 5H
0032 020000      R     LJMP    ?C0098
                                           ; SOURCE LINE # 650
                                           ; SOURCE LINE # 651
0035 900000      R     MOV     DPTR,#index
0038 F0                MOVX    @DPTR,A
0039         ?C0099:
0039 900000      R     MOV     DPTR,#bytecunt
003C E0                MOVX    A,@DPTR
003D FF                MOV     R7,A
003E A3                INC     DPTR
003F E0                MOVX    A,@DPTR
0040 C3                CLR     C
0041 9F                SUBB    A,R7
0042 5073              JNC     ?C0098
                                           ; SOURCE LINE # 652
                                           ; SOURCE LINE # 653
0044 900000      R     MOV     DPTR,#PortNum
0047 E0                MOVX    A,@DPTR
0048 FF                MOV     R7,A
0049 120000      R     LCALL   L?0625
004C 120000      R     LCALL   L?0638
004F 7417              MOV     A,#017H
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 654
0052 7D02              MOV     R5,#02H
0054 120000      R     LCALL   _bExtAUXTimeOutCheck
0057 CC                XCH     A,R4
0058 EF                MOV     A,R7
0059 CC                XCH     A,R4
                                           ; SOURCE LINE # 656
005A 900000      E     MOV     DPTR,#Oem_RTP_ID_CMD
005D E0                MOVX    A,@DPTR
005E 704B              JNZ     ?C0102
                                           ; SOURCE LINE # 657
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 67  

                                           ; SOURCE LINE # 659
0060 900000      E     MOV     DPTR,#Oem_RTP_ID_Step
0063 E0                MOVX    A,@DPTR
0064 547F              ANL     A,#07FH
0066 24FE              ADD     A,#0FEH
0068 6018              JZ      ?C0106
006A 24FE              ADD     A,#0FEH
006C 6024              JZ      ?C0108
006E 2403              ADD     A,#03H
0070 7039              JNZ     ?C0102
                                           ; SOURCE LINE # 660
                                           ; SOURCE LINE # 661
0072         ?C0104:
                                           ; SOURCE LINE # 662
0072 7800        E     MOV     R0,#LOW PS2IFAck
0074 E6                MOV     A,@R0
0075 643C              XRL     A,#03CH
0077 7032              JNZ     ?C0102
                                           ; SOURCE LINE # 663
                                           ; SOURCE LINE # 664
0079 7488              MOV     A,#088H
                                           ; SOURCE LINE # 666
007B 120000      R     LCALL   L?0679
007E 7402              MOV     A,#02H
                                           ; SOURCE LINE # 667
                                           ; SOURCE LINE # 668
                                           ; SOURCE LINE # 670
0080 8021              SJMP    ?C0590
                                           ; SOURCE LINE # 672
0082         ?C0106:
                                           ; SOURCE LINE # 673
0082 7800        E     MOV     R0,#LOW PS2IFAck
0084 E6                MOV     A,@R0
0085 6447              XRL     A,#047H
0087 7022              JNZ     ?C0102
                                           ; SOURCE LINE # 674
                                           ; SOURCE LINE # 676
0089 7477              MOV     A,#077H
                                           ; SOURCE LINE # 677
008B 120000      R     LCALL   L?0679
008E 7401              MOV     A,#01H
0090         ?C0589:
                                           ; SOURCE LINE # 678
                                           ; SOURCE LINE # 679
                                           ; SOURCE LINE # 681
0090 8011              SJMP    ?C0590
                                           ; SOURCE LINE # 683
0092         ?C0108:
                                           ; SOURCE LINE # 684
0092 7800        E     MOV     R0,#LOW PS2IFAck
0094 E6                MOV     A,@R0
0095 B47313            CJNE    A,#073H,?C0102
                                           ; SOURCE LINE # 685
                                           ; SOURCE LINE # 686
0098 900000      E     MOV     DPTR,#guoyong003
009B 7466              MOV     A,#066H
009D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 687
009E 900000      E     MOV     DPTR,#Oem_RTP_ID_CMD
00A1 7404              MOV     A,#04H
00A3         ?C0590:
00A3 F0                MOVX    @DPTR,A
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 68  

                                           ; SOURCE LINE # 688
00A4 900000      E     MOV     DPTR,#Oem_RTP_ID_Step
00A7 E0                MOVX    A,@DPTR
00A8 4480              ORL     A,#080H
00AA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 689
                                           ; SOURCE LINE # 692
                                           ; SOURCE LINE # 693
                                           ; SOURCE LINE # 694
                                           ; SOURCE LINE # 695
00AB         ?C0102:
                                           ; SOURCE LINE # 697
00AB EC                MOV     A,R4
00AC 7009              JNZ     ?C0098
                                           ; SOURCE LINE # 698
                                           ; SOURCE LINE # 699
                                           ; SOURCE LINE # 700
                                           ; SOURCE LINE # 701
00AE         ?C0101:
00AE 900000      R     MOV     DPTR,#index
00B1 E0                MOVX    A,@DPTR
00B2 04                INC     A
00B3 F0                MOVX    @DPTR,A
00B4 020000      R     LJMP    ?C0099
                                           ; SOURCE LINE # 702
00B7         ?C0098:
                                           ; SOURCE LINE # 704
00B7 900000      R     MOV     DPTR,#PortNum
00BA E0                MOVX    A,@DPTR
00BB 120000      R     LCALL   L?0625
                                           ; SOURCE LINE # 705
00BE 120000      R     LCALL   L?0639
                                           ; SOURCE LINE # 707
00C1 CF                XCH     A,R7
00C2 EC                MOV     A,R4
00C3 CF                XCH     A,R7
                                           ; SOURCE LINE # 708
00C4         ?C0112:
00C4 22                RET     
             ; FUNCTION _Send2PortNWait (END)

             ; FUNCTION _SendCmdtoMouse (BEGIN)
                                           ; SOURCE LINE # 713
0000 900000      R     MOV     DPTR,#PortNum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 714
                                           ; SOURCE LINE # 717
0005 120000      E     LCALL   Cmd_A8
                                           ; SOURCE LINE # 718
0008 120000      R     LCALL   ResetMSPendingData
                                           ; SOURCE LINE # 719
000B E4                CLR     A
000C FF                MOV     R7,A
000D 120000      R     LCALL   _SetPS2CmdACKCounter
                                           ; SOURCE LINE # 720
0010 E4                CLR     A
0011 7800        E     MOV     R0,#LOW MS_ID_CUNT
0013 F6                MOV     @R0,A
                                           ; SOURCE LINE # 722
0014 300020      E     JNB     AUX2ByteCommand,?C0113
                                           ; SOURCE LINE # 723
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 69  

                                           ; SOURCE LINE # 724
0017 7F01              MOV     R7,#01H
0019 120000      R     LCALL   _SetPS2CmdACKCounter
                                           ; SOURCE LINE # 725
001C 7800        E     MOV     R0,#LOW TPResolution
001E E6                MOV     A,@R0
001F B4FF04            CJNE    A,#0FFH,?C0114
                                           ; SOURCE LINE # 726
                                           ; SOURCE LINE # 727
0022 A600        E     MOV     @R0,KBHIData
                                           ; SOURCE LINE # 728
0024 8008              SJMP    ?C0115
0026         ?C0114:
                                           ; SOURCE LINE # 729
0026 7800        E     MOV     R0,#LOW TPSamplingRate
0028 E6                MOV     A,@R0
0029 B4FF02            CJNE    A,#0FFH,?C0115
                                           ; SOURCE LINE # 730
                                           ; SOURCE LINE # 731
002C A600        E     MOV     @R0,KBHIData
                                           ; SOURCE LINE # 732
002E         ?C0115:
                                           ; SOURCE LINE # 734
002E 120000      R     LCALL   L?0658
0031 120000      R     LCALL   _Send2Port
                                           ; SOURCE LINE # 735
0034 C200        E     CLR     AUX2ByteCommand
0036 22                RET     
                                           ; SOURCE LINE # 737
0037         ?C0113:
                                           ; SOURCE LINE # 739
0037 E500        E     MOV     A,KBHIData
0039 240E              ADD     A,#0EH
003B 6025              JZ      ?C0131
003D 14                DEC     A
003E 6012              JZ      ?C0120
0040 14                DEC     A
0041 6017              JZ      ?C0121
0043 14                DEC     A
0044 6018              JZ      ?C0122
0046 24F6              ADD     A,#0F6H
0048 601E              JZ      ?C0134
004A 2417              ADD     A,#017H
004C 703A              JNZ     ?C0118
                                           ; SOURCE LINE # 740
                                           ; SOURCE LINE # 741
004E         ?C0119:
                                           ; SOURCE LINE # 742
004E 7800        E     MOV     R0,#LOW TPResolution
                                           ; SOURCE LINE # 743
                                           ; SOURCE LINE # 744
0050 8002              SJMP    ?C0591
                                           ; SOURCE LINE # 746
0052         ?C0120:
                                           ; SOURCE LINE # 747
0052 7800        E     MOV     R0,#LOW TPSamplingRate
0054         ?C0591:
0054 76FF              MOV     @R0,#0FFH
                                           ; SOURCE LINE # 748
0056 D200        E     SETB    AUX2ByteCommand
                                           ; SOURCE LINE # 749
0058 802E              SJMP    ?C0118
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 70  

                                           ; SOURCE LINE # 751
005A         ?C0121:
                                           ; SOURCE LINE # 756
005A D200        E     SETB    MouseDriverIn
                                           ; SOURCE LINE # 757
005C 802A              SJMP    ?C0118
                                           ; SOURCE LINE # 759
005E         ?C0122:
                                           ; SOURCE LINE # 760
005E C200        E     CLR     MouseDriverIn
                                           ; SOURCE LINE # 761
0060 8026              SJMP    ?C0118
                                           ; SOURCE LINE # 763
                                           ; SOURCE LINE # 764
                                           ; SOURCE LINE # 766
                                           ; SOURCE LINE # 767
                                           ; SOURCE LINE # 769
                                           ; SOURCE LINE # 770
                                           ; SOURCE LINE # 772
                                           ; SOURCE LINE # 773
                                           ; SOURCE LINE # 775
                                           ; SOURCE LINE # 776
                                           ; SOURCE LINE # 778
                                           ; SOURCE LINE # 779
                                           ; SOURCE LINE # 781
                                           ; SOURCE LINE # 782
                                           ; SOURCE LINE # 784
                                           ; SOURCE LINE # 785
                                           ; SOURCE LINE # 787
0062         ?C0131:
                                           ; SOURCE LINE # 788
0062 7800        E     MOV     R0,#LOW MS_ID_CUNT
0064 7602              MOV     @R0,#02H
                                           ; SOURCE LINE # 789
0066 8020              SJMP    ?C0118
                                           ; SOURCE LINE # 791
                                           ; SOURCE LINE # 792
                                           ; SOURCE LINE # 793
                                           ; SOURCE LINE # 795
0068         ?C0134:
                                           ; SOURCE LINE # 796
0068 C200        E     CLR     MouseDriverIn
                                           ; SOURCE LINE # 797
006A C200        E     CLR     MULPX_Multiplex
                                           ; SOURCE LINE # 800
;---- Variable 'index' assigned to Register 'R7' ----
006C E4                CLR     A
006D FF                MOV     R7,A
006E         ?C0135:
                                           ; SOURCE LINE # 801
                                           ; SOURCE LINE # 802
006E 7800        E     MOV     R0,#LOW Main_MOUSE_CHN
0070 E6                MOV     A,@R0
0071 14                DEC     A
0072 6F                XRL     A,R7
0073 600E              JZ      ?C0137
                                           ; SOURCE LINE # 803
                                           ; SOURCE LINE # 804
0075 7400        E     MOV     A,#LOW AuxFlags
0077 2F                ADD     A,R7
0078 F8                MOV     R0,A
0079 E6                MOV     A,@R0
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 71  

007A 30E706            JNB     ACC.7,?C0137
                                           ; SOURCE LINE # 805
                                           ; SOURCE LINE # 806
007D 7400        E     MOV     A,#LOW AuxFlags
007F 2F                ADD     A,R7
0080 F8                MOV     R0,A
0081 E4                CLR     A
0082 F6                MOV     @R0,A
                                           ; SOURCE LINE # 807
                                           ; SOURCE LINE # 808
                                           ; SOURCE LINE # 809
0083         ?C0137:
0083 0F                INC     R7
0084 EF                MOV     A,R7
0085 B403E6            CJNE    A,#03H,?C0135
                                           ; SOURCE LINE # 810
                                           ; SOURCE LINE # 812
                                           ; SOURCE LINE # 813
                                           ; SOURCE LINE # 814
0088         ?C0118:
                                           ; SOURCE LINE # 816
0088 E500        E     MOV     A,KBHIData
008A B4FF04            CJNE    A,#0FFH,?C0141
                                           ; SOURCE LINE # 817
                                           ; SOURCE LINE # 818
008D 7F03              MOV     R7,#03H
                                           ; SOURCE LINE # 819
008F 8014              SJMP    ?C0594
0091         ?C0141:
                                           ; SOURCE LINE # 820
0091 E500        E     MOV     A,KBHIData
0093 B4F204            CJNE    A,#0F2H,?C0143
                                           ; SOURCE LINE # 821
                                           ; SOURCE LINE # 822
0096 7F02              MOV     R7,#02H
0098         ?C0592:
                                           ; SOURCE LINE # 823
0098 800B              SJMP    ?C0594
009A         ?C0143:
                                           ; SOURCE LINE # 824
009A E500        E     MOV     A,KBHIData
009C B4E904            CJNE    A,#0E9H,?C0145
                                           ; SOURCE LINE # 825
                                           ; SOURCE LINE # 826
009F 7F04              MOV     R7,#04H
00A1         ?C0593:
                                           ; SOURCE LINE # 827
00A1 8002              SJMP    ?C0594
00A3         ?C0145:
                                           ; SOURCE LINE # 829
                                           ; SOURCE LINE # 830
00A3 7F01              MOV     R7,#01H
00A5         ?C0594:
00A5 120000      R     LCALL   _SetPS2CmdACKCounter
                                           ; SOURCE LINE # 831
00A8         ?C0142:
                                           ; SOURCE LINE # 833
00A8 120000      R     LCALL   L?0658
00AB 120000      R     LCALL   _Send2Port
                                           ; SOURCE LINE # 834
00AE         ?C0117:
00AE 22                RET     
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 72  

             ; FUNCTION _SendCmdtoMouse (END)

             ; FUNCTION _SendCmdtoMUX (BEGIN)
                                           ; SOURCE LINE # 839
0000 900000      R     MOV     DPTR,#port
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 840
                                           ; SOURCE LINE # 841
0005 E4                CLR     A
0006 FF                MOV     R7,A
0007 120000      R     LCALL   _SetPS2CmdACKCounter
                                           ; SOURCE LINE # 842
000A 120000      R     LCALL   ResetMSPendingData
                                           ; SOURCE LINE # 843
000D 300011      E     JNB     AUX2ByteCommand,?C0147
                                           ; SOURCE LINE # 844
                                           ; SOURCE LINE # 845
0010 7F01              MOV     R7,#01H
0012 120000      R     LCALL   _SetPS2CmdACKCounter
                                           ; SOURCE LINE # 846
0015 900000      R     MOV     DPTR,#port
0018 120000      R     LCALL   L?0659
001B 120000      R     LCALL   _Send2Port
                                           ; SOURCE LINE # 847
001E C200        E     CLR     AUX2ByteCommand
0020 22                RET     
                                           ; SOURCE LINE # 849
0021         ?C0147:
                                           ; SOURCE LINE # 851
0021 E500        E     MOV     A,KBHIData
0023 240D              ADD     A,#0DH
0025 6004              JZ      ?C0151
0027 240B              ADD     A,#0BH
0029 7002              JNZ     ?C0149
                                           ; SOURCE LINE # 852
                                           ; SOURCE LINE # 853
                                           ; SOURCE LINE # 854
002B         ?C0151:
                                           ; SOURCE LINE # 855
002B D200        E     SETB    AUX2ByteCommand
                                           ; SOURCE LINE # 856
                                           ; SOURCE LINE # 858
                                           ; SOURCE LINE # 859
                                           ; SOURCE LINE # 860
                                           ; SOURCE LINE # 861
                                           ; SOURCE LINE # 862
                                           ; SOURCE LINE # 863
                                           ; SOURCE LINE # 864
                                           ; SOURCE LINE # 865
                                           ; SOURCE LINE # 866
                                           ; SOURCE LINE # 867
                                           ; SOURCE LINE # 868
                                           ; SOURCE LINE # 869
                                           ; SOURCE LINE # 870
                                           ; SOURCE LINE # 871
                                           ; SOURCE LINE # 872
                                           ; SOURCE LINE # 873
                                           ; SOURCE LINE # 875
                                           ; SOURCE LINE # 876
                                           ; SOURCE LINE # 877
002D         ?C0149:
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 73  

                                           ; SOURCE LINE # 879
002D E500        E     MOV     A,KBHIData
002F B4FF04            CJNE    A,#0FFH,?C0168
                                           ; SOURCE LINE # 880
                                           ; SOURCE LINE # 881
0032 7F03              MOV     R7,#03H
                                           ; SOURCE LINE # 882
0034 8014              SJMP    ?C0597
0036         ?C0168:
                                           ; SOURCE LINE # 883
0036 E500        E     MOV     A,KBHIData
0038 B4F204            CJNE    A,#0F2H,?C0170
                                           ; SOURCE LINE # 884
                                           ; SOURCE LINE # 885
003B 7F02              MOV     R7,#02H
003D         ?C0595:
                                           ; SOURCE LINE # 886
003D 800B              SJMP    ?C0597
003F         ?C0170:
                                           ; SOURCE LINE # 887
003F E500        E     MOV     A,KBHIData
0041 B4E904            CJNE    A,#0E9H,?C0172
                                           ; SOURCE LINE # 888
                                           ; SOURCE LINE # 889
0044 7F04              MOV     R7,#04H
0046         ?C0596:
                                           ; SOURCE LINE # 890
0046 8002              SJMP    ?C0597
0048         ?C0172:
                                           ; SOURCE LINE # 892
                                           ; SOURCE LINE # 893
0048 7F01              MOV     R7,#01H
004A         ?C0597:
004A 120000      R     LCALL   _SetPS2CmdACKCounter
                                           ; SOURCE LINE # 894
004D         ?C0169:
                                           ; SOURCE LINE # 896
004D 900000      R     MOV     DPTR,#port
0050 120000      R     LCALL   L?0659
0053 120000      R     LCALL   _Send2Port
                                           ; SOURCE LINE # 897
0056         ?C0148:
0056 22                RET     
             ; FUNCTION _SendCmdtoMUX (END)

             ; FUNCTION Ps2_Init (BEGIN)
                                           ; SOURCE LINE # 903
                                           ; SOURCE LINE # 904
                                           ; SOURCE LINE # 906
0000 22                RET     
             ; FUNCTION Ps2_Init (END)

             ; FUNCTION service_ps2 (BEGIN)
                                           ; SOURCE LINE # 911
                                           ; SOURCE LINE # 912
                                           ; SOURCE LINE # 915
0000 7800        E     MOV     R0,#LOW PS2_IRQ_Channel
0002 E6                MOV     A,@R0
0003 900000      R     MOV     DPTR,#channel
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 916
0007 E0                MOVX    A,@DPTR
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 74  

0008 F4                CPL     A
0009 6016              JZ      ?C0176
                                           ; SOURCE LINE # 917
                                           ; SOURCE LINE # 918
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D 2400        E     ADD     A,#LOW PS2PortxData
000F F8                MOV     R0,A
0010 E6                MOV     A,@R0
0011 FD                MOV     R5,A
0012 120000      E     LCALL   _Hook_service_ps2
                                           ; SOURCE LINE # 919
0015 7800        E     MOV     R0,#LOW PS2_IRQ_Channel
0017 76FF              MOV     @R0,#0FFH
                                           ; SOURCE LINE # 920
0019 900000      R     MOV     DPTR,#channel
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E 120000      R     LCALL   _SendAUXData
                                           ; SOURCE LINE # 921
                                           ; SOURCE LINE # 922
0021         ?C0176:
0021 22                RET     
             ; FUNCTION service_ps2 (END)

             ; FUNCTION PS2DeviceInactive (BEGIN)
                                           ; SOURCE LINE # 928
                                           ; SOURCE LINE # 929
                                           ; SOURCE LINE # 930
0000 900000      E     MOV     DPTR,#PSCTL1
0003 7411              MOV     A,#011H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 931
0006 900000      E     MOV     DPTR,#PSCTL2
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 932
000A 900000      E     MOV     DPTR,#PSCTL3
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 933
000E 22                RET     
             ; FUNCTION PS2DeviceInactive (END)

             ; FUNCTION PS2Deviceactive (BEGIN)
                                           ; SOURCE LINE # 938
                                           ; SOURCE LINE # 939
                                           ; SOURCE LINE # 960
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#index
0004 F0                MOVX    @DPTR,A
0005         ?C0178:
0005 900000      R     MOV     DPTR,#index
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A C3                CLR     C
000B 9403              SUBB    A,#03H
000D 5027              JNC     ?C0184
                                           ; SOURCE LINE # 961
                                           ; SOURCE LINE # 962
000F 7400        E     MOV     A,#LOW AuxFlags
0011 2F                ADD     A,R7
0012 F8                MOV     R0,A
0013 E6                MOV     A,@R0
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 75  

0014 54C0              ANL     A,#0C0H
0016 6016              JZ      ?C0180
                                           ; SOURCE LINE # 963
                                           ; SOURCE LINE # 966
0018 E4                CLR     A
0019 FD                MOV     R5,A
001A 120000      R     LCALL   _PS2ReceiveMode_OneChannel
                                           ; SOURCE LINE # 968
001D E4                CLR     A
001E 900000      E     MOV     DPTR,#WNCKR
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 969
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 971
0023 200003      E     JB      PS2StartBit,?C0183
0026 300005      E     JNB     F_Service_PS2,?C0180
0029         ?C0183:
                                           ; SOURCE LINE # 972
                                           ; SOURCE LINE # 973
0029 7F06              MOV     R7,#06H
002B 020000      R     LJMP    _SetPS2InhibitTime
                                           ; SOURCE LINE # 974
                                           ; SOURCE LINE # 975
                                           ; SOURCE LINE # 976
                                           ; SOURCE LINE # 977
002E         ?C0180:
002E 900000      R     MOV     DPTR,#index
0031 E0                MOVX    A,@DPTR
0032 04                INC     A
0033 F0                MOVX    @DPTR,A
0034 80CF              SJMP    ?C0178
                                           ; SOURCE LINE # 978
0036         ?C0184:
0036 22                RET     
             ; FUNCTION PS2Deviceactive (END)

             ; FUNCTION L?0680 (BEGIN)
0000         L?0681:
0000 E0                MOVX    A,@DPTR
0001 FF                MOV     R7,A
0002 E4                CLR     A
0003 FD                MOV     R5,A
             ; FUNCTION _PS2ReceiveMode_OneChannel (BEGIN)
                                           ; SOURCE LINE # 983
;---- Variable 'PortNum' assigned to Register 'R7' ----
;---- Variable 'SetInhibitTime' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 984
                                           ; SOURCE LINE # 985
0004 EF                MOV     A,R7
0005 120000      R     LCALL   L?0625
0008 120000      R     LCALL   L?0655
000B 7417              MOV     A,#017H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 986
000E EF                MOV     A,R7
000F 75F00D            MOV     B,#0DH
0012 A4                MUL     AB
0013 2400        R     ADD     A,#LOW asPS2Struct+08H
0015 F582              MOV     DPL,A
0017 E4                CLR     A
0018 3400        R     ADDC    A,#HIGH asPS2Struct+08H
001A 120000      R     LCALL   L?0654
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 76  

001D C083              PUSH    DPH
001F C082              PUSH    DPL
0021 120000      R     LCALL   L?0634
0024 FF                MOV     R7,A
0025 EE                MOV     A,R6
0026 4F                ORL     A,R7
0027 D082              POP     DPL
0029 D083              POP     DPH
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 988
002C ED                MOV     A,R5
002D B40105            CJNE    A,#01H,?C0186
                                           ; SOURCE LINE # 989
                                           ; SOURCE LINE # 990
0030 7F06              MOV     R7,#06H
0032 120000      R     LCALL   _SetPS2InhibitTime
                                           ; SOURCE LINE # 991
                                           ; SOURCE LINE # 992
0035         ?C0186:
0035 22                RET     
             ; FUNCTION _PS2ReceiveMode_OneChannel (END)

             ; FUNCTION InhibitAUXDevice (BEGIN)
                                           ; SOURCE LINE # 998
                                           ; SOURCE LINE # 999
                                           ; SOURCE LINE # 1000
0000 120000      R     LCALL   PS2DeviceInactive
                                           ; SOURCE LINE # 1002
0003 C28E              CLR     TR1
                                           ; SOURCE LINE # 1003
0005 C2AB              CLR     ET1
                                           ; SOURCE LINE # 1004
0007 00                NOP     
                                           ; SOURCE LINE # 1005
0008 00                NOP     
                                           ; SOURCE LINE # 1006
0009 00                NOP     
                                           ; SOURCE LINE # 1007
000A 00                NOP     
                                           ; SOURCE LINE # 1008
000B 758DFF            MOV     TH1,#0FFH
                                           ; SOURCE LINE # 1009
000E 758B8C            MOV     TL1,#08CH
                                           ; SOURCE LINE # 1010
0011 C28F              CLR     TF1
                                           ; SOURCE LINE # 1011
0013 D28E              SETB    TR1
0015         ?C0187:
                                           ; SOURCE LINE # 1012
0015 308FFD            JNB     TF1,?C0187
0018         ?C0188:
                                           ; SOURCE LINE # 1013
                                           ; SOURCE LINE # 1014
                                           ; SOURCE LINE # 1015
0018 120000      R     LCALL   L?0648
                                           ; SOURCE LINE # 1016
001B 22                RET     
             ; FUNCTION InhibitAUXDevice (END)

             ; FUNCTION _ScanAUXDevice (BEGIN)
                                           ; SOURCE LINE # 1025
0000 900000      R     MOV     DPTR,#scan_selection
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 77  

0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1026
                                           ; SOURCE LINE # 1030
0005 BF0106            CJNE    R7,#01H,?C0190
                                           ; SOURCE LINE # 1031
                                           ; SOURCE LINE # 1032
0008 7800        E     MOV     R0,#LOW Main_MOUSE_CHN
000A E6                MOV     A,@R0
000B 6010              JZ      ?C0193
                                           ; SOURCE LINE # 1033
000D 22                RET     
                                           ; SOURCE LINE # 1035
                                           ; SOURCE LINE # 1036
000E         ?C0190:
                                           ; SOURCE LINE # 1037
000E 900000      R     MOV     DPTR,#scan_selection
0011 E0                MOVX    A,@DPTR
0012 B40208            CJNE    A,#02H,?C0193
                                           ; SOURCE LINE # 1038
                                           ; SOURCE LINE # 1039
0015 7800        E     MOV     R0,#LOW Main_KB_CHN
0017 E6                MOV     A,@R0
0018 6003              JZ      $ + 5H
001A 020000      R     LJMP    ?C0192
                                           ; SOURCE LINE # 1040
                                           ; SOURCE LINE # 1042
                                           ; SOURCE LINE # 1043
001D         ?C0193:
                                           ; SOURCE LINE # 1045
001D E4                CLR     A
001E 900000      R     MOV     DPTR,#index
0021 F0                MOVX    @DPTR,A
0022         ?C0196:
0022 900000      R     MOV     DPTR,#index
0025 E0                MOVX    A,@DPTR
0026 FF                MOV     R7,A
0027 C3                CLR     C
0028 9403              SUBB    A,#03H
002A 4003              JC      $ + 5H
002C 020000      R     LJMP    ?C0197
                                           ; SOURCE LINE # 1046
                                           ; SOURCE LINE # 1047
002F 7400        E     MOV     A,#LOW AuxFlags
0031 2F                ADD     A,R7
0032 F8                MOV     R0,A
0033 E6                MOV     A,@R0
0034 30E703            JNB     ACC.7,$ + 6H
0037 020000      R     LJMP    ?C0198
003A E0                MOVX    A,@DPTR
003B 2400        E     ADD     A,#LOW AuxFlags
003D F8                MOV     R0,A
003E E6                MOV     A,@R0
003F 30E603            JNB     ACC.6,$ + 6H
0042 020000      R     LJMP    ?C0198
                                           ; SOURCE LINE # 1048
                                           ; SOURCE LINE # 1049
                                           ; SOURCE LINE # 1050
0045         ?C0199:
                                           ; SOURCE LINE # 1051
0045 900000      R     MOV     DPTR,#index
0048 E0                MOVX    A,@DPTR
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 78  

0049 FE                MOV     R6,A
004A 2400        E     ADD     A,#LOW AuxFlags
004C F8                MOV     R0,A
004D E4                CLR     A
004E F6                MOV     @R0,A
                                           ; SOURCE LINE # 1053
004F EE                MOV     A,R6
0050 7010              JNZ     ?C0201
                                           ; SOURCE LINE # 1054
                                           ; SOURCE LINE # 1055
0052 120000      R     LCALL   L?0666
0055 6003              JZ      $ + 5H
0057 020000      R     LJMP    ?C0198
005A 120000      R     LCALL   L?0668
005D 602E              JZ      ?C0204
                                           ; SOURCE LINE # 1056
005F 020000      R     LJMP    ?C0198
                                           ; SOURCE LINE # 1057
0062         ?C0201:
                                           ; SOURCE LINE # 1058
0062 EF                MOV     A,R7
0063 B40110            CJNE    A,#01H,?C0205
                                           ; SOURCE LINE # 1059
                                           ; SOURCE LINE # 1060
0066 120000      R     LCALL   L?0670
0069 6003              JZ      $ + 5H
006B 020000      R     LJMP    ?C0198
006E 120000      R     LCALL   L?0672
0071 601A              JZ      ?C0204
                                           ; SOURCE LINE # 1061
0073         ?C0598:
0073 020000      R     LJMP    ?C0198
                                           ; SOURCE LINE # 1062
0076         ?C0205:
                                           ; SOURCE LINE # 1063
0076 900000      R     MOV     DPTR,#index
0079 E0                MOVX    A,@DPTR
007A B40210            CJNE    A,#02H,?C0204
                                           ; SOURCE LINE # 1064
                                           ; SOURCE LINE # 1065
007D 120000      R     LCALL   L?0674
0080 6003              JZ      $ + 5H
0082 020000      R     LJMP    ?C0198
0085 120000      R     LCALL   L?0676
0088 6003              JZ      $ + 5H
008A 020000      R     LJMP    ?C0198
                                           ; SOURCE LINE # 1066
                                           ; SOURCE LINE # 1067
008D         ?C0204:
                                           ; SOURCE LINE # 1069
008D 900000      R     MOV     DPTR,#index
0090 E0                MOVX    A,@DPTR
0091 FF                MOV     R7,A
0092 7B01              MOV     R3,#01H
0094 7DFF              MOV     R5,#0FFH
0096 120000      R     LCALL   _Send2PortNWait
0099 EF                MOV     A,R7
009A 6003              JZ      $ + 5H
009C 020000      R     LJMP    ?C0212
009F 7800        E     MOV     R0,#LOW PS2IFAck
00A1 E6                MOV     A,@R0
00A2 64FA              XRL     A,#0FAH
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 79  

00A4 707C              JNZ     ?C0212
                                           ; SOURCE LINE # 1070
                                           ; SOURCE LINE # 1071
00A6 900000      R     MOV     DPTR,#index
00A9 E0                MOVX    A,@DPTR
00AA FF                MOV     R7,A
00AB 2400        E     ADD     A,#LOW AuxFlags
00AD F8                MOV     R0,A
00AE 7401              MOV     A,#01H
00B0 46                ORL     A,@R0
00B1 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1073
00B2 EF                MOV     A,R7
00B3 120000      R     LCALL   L?0625
                                           ; SOURCE LINE # 1074
00B6 120000      R     LCALL   L?0657
00B9         ?C0213:
                                           ; SOURCE LINE # 1075
                                           ; SOURCE LINE # 1076
00B9 120000      R     LCALL   L?0684
00BC 6005              JZ      ?C0214
                                           ; SOURCE LINE # 1077
                                           ; SOURCE LINE # 1078
                                           ; SOURCE LINE # 1079
                                           ; SOURCE LINE # 1080
00BE         ?C0215:
00BE 120000      R     LCALL   L?0650
00C1 40F6              JC      ?C0213
00C3         ?C0214:
                                           ; SOURCE LINE # 1082
00C3 900000      R     MOV     DPTR,#timeout
00C6 E0                MOVX    A,@DPTR
00C7 D3                SETB    C
00C8 9411              SUBB    A,#011H
00CA 400E              JC      ?C0217
                                           ; SOURCE LINE # 1083
                                           ; SOURCE LINE # 1084
00CC 900000      R     MOV     DPTR,#index
00CF E0                MOVX    A,@DPTR
00D0 2400        E     ADD     A,#LOW AuxFlags
00D2 F8                MOV     R0,A
00D3 74FE              MOV     A,#0FEH
00D5 56                ANL     A,@R0
00D6 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1085
00D7 020000      R     LJMP    ?C0600
00DA         ?C0217:
                                           ; SOURCE LINE # 1087
                                           ; SOURCE LINE # 1088
00DA 900000      R     MOV     DPTR,#index
00DD E0                MOVX    A,@DPTR
00DE 120000      R     LCALL   L?0625
                                           ; SOURCE LINE # 1089
00E1 120000      R     LCALL   L?0657
00E4         ?C0219:
                                           ; SOURCE LINE # 1090
                                           ; SOURCE LINE # 1091
00E4 120000      R     LCALL   L?0684
00E7 6005              JZ      ?C0220
                                           ; SOURCE LINE # 1092
                                           ; SOURCE LINE # 1093
                                           ; SOURCE LINE # 1094
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 80  

                                           ; SOURCE LINE # 1095
00E9         ?C0221:
00E9 120000      R     LCALL   L?0650
00EC 40F6              JC      ?C0219
00EE         ?C0220:
                                           ; SOURCE LINE # 1097
00EE 900000      R     MOV     DPTR,#timeout
00F1 E0                MOVX    A,@DPTR
00F2 D3                SETB    C
00F3 9411              SUBB    A,#011H
00F5 4007              JC      ?C0223
                                           ; SOURCE LINE # 1098
                                           ; SOURCE LINE # 1099
                                           ; SOURCE LINE # 1100
                                           ; SOURCE LINE # 1101
00F7 120000      R     LCALL   L?0646
00FA 7026              JNZ     ?C0600
                                           ; SOURCE LINE # 1102
                                           ; SOURCE LINE # 1103
00FC 8037              SJMP    ?C0197
                                           ; SOURCE LINE # 1104
                                           ; SOURCE LINE # 1105
00FE         ?C0223:
                                           ; SOURCE LINE # 1107
                                           ; SOURCE LINE # 1108
00FE 7800        E     MOV     R0,#LOW PS2IFAck
0100 E6                MOV     A,@R0
0101 7018              JNZ     ?C0226
                                           ; SOURCE LINE # 1109
                                           ; SOURCE LINE # 1110
0103 900000      R     MOV     DPTR,#index
0106 E0                MOVX    A,@DPTR
0107 FF                MOV     R7,A
0108 2400        E     ADD     A,#LOW AuxFlags
010A F8                MOV     R0,A
010B 7480              MOV     A,#080H
010D 46                ORL     A,@R0
010E F6                MOV     @R0,A
                                           ; SOURCE LINE # 1111
010F 120000      R     LCALL   _CheckNSetMainMSCHN
                                           ; SOURCE LINE # 1112
0112 900000      R     MOV     DPTR,#scan_selection
0115 E0                MOVX    A,@DPTR
0116 B40107            CJNE    A,#01H,?C0218
                                           ; SOURCE LINE # 1113
                                           ; SOURCE LINE # 1114
0119         ?C0599:
0119 801A              SJMP    ?C0197
                                           ; SOURCE LINE # 1115
                                           ; SOURCE LINE # 1116
011B         ?C0226:
                                           ; SOURCE LINE # 1118
                                           ; SOURCE LINE # 1119
                                           ; SOURCE LINE # 1120
                                           ; SOURCE LINE # 1121
011B 120000      R     LCALL   L?0646
011E 6015              JZ      ?C0197
                                           ; SOURCE LINE # 1122
                                           ; SOURCE LINE # 1123
                                           ; SOURCE LINE # 1124
                                           ; SOURCE LINE # 1125
                                           ; SOURCE LINE # 1126
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 81  

                                           ; SOURCE LINE # 1127
0120         ?C0218:
                                           ; SOURCE LINE # 1129
                                           ; SOURCE LINE # 1130
                                           ; SOURCE LINE # 1131
0120 8000              SJMP    ?C0600
0122         ?C0212:
                                           ; SOURCE LINE # 1133
                                           ; SOURCE LINE # 1134
0122         ?C0600:
0122 900000      R     MOV     DPTR,#index
0125 E0                MOVX    A,@DPTR
0126 120000      R     LCALL   L?0625
                                           ; SOURCE LINE # 1135
0129 120000      R     LCALL   L?0639
                                           ; SOURCE LINE # 1136
                                           ; SOURCE LINE # 1137
                                           ; SOURCE LINE # 1138
012C         ?C0198:
012C 900000      R     MOV     DPTR,#index
012F E0                MOVX    A,@DPTR
0130 04                INC     A
0131 F0                MOVX    @DPTR,A
0132 020000      R     LJMP    ?C0196
0135         ?C0197:
                                           ; SOURCE LINE # 1140
0135 7800        E     MOV     R0,#LOW Main_MOUSE_CHN
0137 E6                MOV     A,@R0
0138 700D              JNZ     ?C0192
013A 7800        E     MOV     R0,#LOW Main_KB_CHN
013C E6                MOV     A,@R0
013D 7008              JNZ     ?C0192
                                           ; SOURCE LINE # 1141
                                           ; SOURCE LINE # 1142
013F 120000      R     LCALL   ClearAUXScanTimeOutCunt
                                           ; SOURCE LINE # 1143
0142 E4                CLR     A
0143 FF                MOV     R7,A
0144 120000      R     LCALL   _SetAUXScanIndexHS
                                           ; SOURCE LINE # 1144
                                           ; SOURCE LINE # 1145
0147         ?C0192:
0147 22                RET     
0148         L?0646:
0148 900000      R     MOV     DPTR,#index
014B E0                MOVX    A,@DPTR
014C FF                MOV     R7,A
014D 2400        E     ADD     A,#LOW AuxFlags
014F F8                MOV     R0,A
0150 7440              MOV     A,#040H
0152 46                ORL     A,@R0
0153 F6                MOV     @R0,A
0154 120000      R     LCALL   _CheckNSetMainKBCHN
0157 900000      R     MOV     DPTR,#scan_selection
015A E0                MOVX    A,@DPTR
015B 6402              XRL     A,#02H
015D 22                RET     
015E         L?0684:
015E 900000      R     MOV     DPTR,#index
0161 E0                MOVX    A,@DPTR
0162 FF                MOV     R7,A
0163 7D02              MOV     R5,#02H
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 82  

0165 120000      R     LCALL   _bExtAUXTimeOutCheck
0168 EF                MOV     A,R7
0169 22                RET     
             ; FUNCTION _ScanAUXDevice (END)

             ; FUNCTION CheckAUXDeviceType (BEGIN)
                                           ; SOURCE LINE # 1150
                                           ; SOURCE LINE # 1151
                                           ; SOURCE LINE # 1154
0000 120000      R     LCALL   L?0644
0003 E6                MOV     A,@R0
0004 6402              XRL     A,#02H
0006 6003              JZ      $ + 5H
0008 020000      R     LJMP    ?C0251
                                           ; SOURCE LINE # 1155
                                           ; SOURCE LINE # 1156
000B 120000      R     LCALL   L?0644
000E E4                CLR     A
000F F6                MOV     @R0,A
                                           ; SOURCE LINE # 1157
0010 7800        E     MOV     R0,#LOW PS2IFAck
0012 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1159
0013 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0015 E6                MOV     A,@R0
0016 FF                MOV     R7,A
0017 7B01              MOV     R3,#01H
0019 7DFF              MOV     R5,#0FFH
001B 120000      R     LCALL   _Send2PortNWait
001E EF                MOV     A,R7
001F 6003              JZ      $ + 5H
0021 020000      R     LJMP    ?C0233
0024 7800        E     MOV     R0,#LOW PS2IFAck
0026 E6                MOV     A,@R0
0027 64FA              XRL     A,#0FAH
0029 6003              JZ      $ + 5H
002B 020000      R     LJMP    ?C0233
                                           ; SOURCE LINE # 1160
                                           ; SOURCE LINE # 1161
002E 120000      R     LCALL   L?0645
0031 7401              MOV     A,#01H
0033 46                ORL     A,@R0
0034 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1163
0035 120000      R     LCALL   L?0623
0038 120000      R     LCALL   L?0652
003B 7417              MOV     A,#017H
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1164
003E E4                CLR     A
003F 900000      R     MOV     DPTR,#timeout
0042 F0                MOVX    @DPTR,A
0043         ?C0234:
                                           ; SOURCE LINE # 1165
                                           ; SOURCE LINE # 1166
0043 120000      R     LCALL   L?0687
0046 6008              JZ      ?C0235
                                           ; SOURCE LINE # 1167
                                           ; SOURCE LINE # 1168
                                           ; SOURCE LINE # 1169
                                           ; SOURCE LINE # 1170
0048         ?C0236:
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 83  

0048 900000      R     MOV     DPTR,#timeout
004B 120000      R     LCALL   L?0651
004E 40F3              JC      ?C0234
0050         ?C0235:
                                           ; SOURCE LINE # 1172
0050 900000      R     MOV     DPTR,#timeout
0053 E0                MOVX    A,@DPTR
0054 D3                SETB    C
0055 9411              SUBB    A,#011H
0057 4009              JC      ?C0238
                                           ; SOURCE LINE # 1173
                                           ; SOURCE LINE # 1174
0059 120000      R     LCALL   L?0645
005C 74FE              MOV     A,#0FEH
005E 56                ANL     A,@R0
005F F6                MOV     @R0,A
                                           ; SOURCE LINE # 1175
0060 804F              SJMP    ?C0239
0062         ?C0238:
                                           ; SOURCE LINE # 1177
                                           ; SOURCE LINE # 1178
0062 120000      R     LCALL   L?0623
0065 120000      R     LCALL   L?0652
0068 7417              MOV     A,#017H
006A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1179
006B E4                CLR     A
006C 900000      R     MOV     DPTR,#timeout
006F F0                MOVX    @DPTR,A
0070         ?C0240:
                                           ; SOURCE LINE # 1180
                                           ; SOURCE LINE # 1181
0070 120000      R     LCALL   L?0687
0073 6008              JZ      ?C0241
                                           ; SOURCE LINE # 1182
                                           ; SOURCE LINE # 1183
                                           ; SOURCE LINE # 1184
                                           ; SOURCE LINE # 1185
0075         ?C0242:
0075 900000      R     MOV     DPTR,#timeout
0078 120000      R     LCALL   L?0651
007B 40F3              JC      ?C0240
007D         ?C0241:
                                           ; SOURCE LINE # 1187
007D 900000      R     MOV     DPTR,#timeout
0080 E0                MOVX    A,@DPTR
0081 D3                SETB    C
0082 9411              SUBB    A,#011H
0084 4004              JC      ?C0244
                                           ; SOURCE LINE # 1188
                                           ; SOURCE LINE # 1189
0086 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
                                           ; SOURCE LINE # 1190
                                           ; SOURCE LINE # 1191
0088 8018              SJMP    ?C0601
008A         ?C0244:
                                           ; SOURCE LINE # 1193
                                           ; SOURCE LINE # 1194
008A 7800        E     MOV     R0,#LOW PS2IFAck
008C E6                MOV     A,@R0
008D 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
008F 7011              JNZ     ?C0246
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 84  

                                           ; SOURCE LINE # 1195
                                           ; SOURCE LINE # 1196
0091 E6                MOV     A,@R0
0092 2400        E     ADD     A,#LOW AuxFlags
0094 F8                MOV     R0,A
0095 7480              MOV     A,#080H
0097 46                ORL     A,@R0
0098 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1197
0099 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
009B E6                MOV     A,@R0
009C FF                MOV     R7,A
009D 120000      R     LCALL   _CheckNSetMainMSCHN
                                           ; SOURCE LINE # 1198
00A0 800F              SJMP    ?C0239
00A2         ?C0246:
                                           ; SOURCE LINE # 1200
                                           ; SOURCE LINE # 1201
00A2         ?C0601:
00A2 E6                MOV     A,@R0
00A3 2400        E     ADD     A,#LOW AuxFlags
00A5 F8                MOV     R0,A
00A6 7440              MOV     A,#040H
00A8 46                ORL     A,@R0
00A9 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1202
00AA 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
00AC E6                MOV     A,@R0
00AD FF                MOV     R7,A
00AE 120000      R     LCALL   _CheckNSetMainKBCHN
                                           ; SOURCE LINE # 1203
                                           ; SOURCE LINE # 1204
                                           ; SOURCE LINE # 1205
00B1         ?C0239:
                                           ; SOURCE LINE # 1207
00B1 120000      R     LCALL   L?0624
00B4 120000      R     LCALL   L?0653
                                           ; SOURCE LINE # 1208
00B7 120000      R     LCALL   L?0640
                                           ; SOURCE LINE # 1210
00BA E6                MOV     A,@R0
00BB 2400        E     ADD     A,#LOW AuxFlags
00BD F8                MOV     R0,A
00BE E6                MOV     A,@R0
00BF 30E00E            JNB     ACC.0,?C0248
                                           ; SOURCE LINE # 1211
                                           ; SOURCE LINE # 1212
00C2 120000      R     LCALL   L?0645
00C5 7408              MOV     A,#08H
00C7 46                ORL     A,@R0
00C8 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1213
00C9 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
00CB E6                MOV     A,@R0
00CC 24C0              ADD     A,#0C0H
                                           ; SOURCE LINE # 1214
00CE 801F              SJMP    ?C0603
00D0         ?C0248:
                                           ; SOURCE LINE # 1216
                                           ; SOURCE LINE # 1217
00D0 E4                CLR     A
00D1 FF                MOV     R7,A
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 85  

00D2 120000      R     LCALL   _SetAUXScanIndexHS
                                           ; SOURCE LINE # 1218
00D5 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
00D7 E6                MOV     A,@R0
00D8 24B8              ADD     A,#0B8H
00DA         ?C0602:
                                           ; SOURCE LINE # 1219
                                           ; SOURCE LINE # 1220
00DA 8013              SJMP    ?C0603
00DC         ?C0233:
                                           ; SOURCE LINE # 1222
                                           ; SOURCE LINE # 1223
00DC 120000      R     LCALL   L?0624
00DF 120000      R     LCALL   L?0653
                                           ; SOURCE LINE # 1224
00E2 120000      R     LCALL   L?0640
                                           ; SOURCE LINE # 1226
00E5 E4                CLR     A
00E6 FF                MOV     R7,A
00E7 120000      R     LCALL   _SetAUXScanIndexHS
                                           ; SOURCE LINE # 1227
00EA 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
00EC E6                MOV     A,@R0
00ED 24C8              ADD     A,#0C8H
00EF         ?C0603:
00EF 7900        E     MOV     R1,#LOW ScanAUXStepIndex
00F1 F7                MOV     @R1,A
                                           ; SOURCE LINE # 1228
00F2         ?C0250:
                                           ; SOURCE LINE # 1229
00F2 120000      R     LCALL   PS2Deviceactive
                                           ; SOURCE LINE # 1230
                                           ; SOURCE LINE # 1231
00F5         ?C0251:
00F5 22                RET     
00F6         L?0687:
00F6 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
00F8 E6                MOV     A,@R0
00F9 FF                MOV     R7,A
00FA 7D02              MOV     R5,#02H
00FC 120000      R     LCALL   _bExtAUXTimeOutCheck
00FF EF                MOV     A,R7
0100 22                RET     
             ; FUNCTION CheckAUXDeviceType (END)

             ; FUNCTION AUXDevicePlugOutClearVariables (BEGIN)
                                           ; SOURCE LINE # 1236
                                           ; SOURCE LINE # 1237
                                           ; SOURCE LINE # 1240
0000 120000      R     LCALL   ClearAUXScanTimeOutCunt
                                           ; SOURCE LINE # 1241
0003 E4                CLR     A
0004 FF                MOV     R7,A
0005 120000      R     LCALL   _SetAUXScanIndexHS
                                           ; SOURCE LINE # 1242
0008 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
000A E6                MOV     A,@R0
000B 2400        E     ADD     A,#LOW AuxFlags
                                           ; SOURCE LINE # 1243
000D 120000      R     LCALL   L?0630
0010 E4                CLR     A
0011 F6                MOV     @R0,A
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 86  

                                           ; SOURCE LINE # 1244
0012 7800        E     MOV     R0,#LOW PS2_ReTryCunt
0014 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1245
0015 C200        E     CLR     SendtoAUXFlag
                                           ; SOURCE LINE # 1246
0017 C200        E     CLR     ECSendtoAUXFlag
                                           ; SOURCE LINE # 1248
0019 120000      R     LCALL   L?0688
001C 7800        E     MOV     R0,#LOW Main_MOUSE_CHN
001E E6                MOV     A,@R0
001F 6F                XRL     A,R7
0020 7001              JNZ     ?C0572
0022 EE                MOV     A,R6
0023         ?C0572:
0023 7027              JNZ     ?C0252
                                           ; SOURCE LINE # 1249
                                           ; SOURCE LINE # 1250
0025 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1251
0026 900000      R     MOV     DPTR,#index
0029 F0                MOVX    @DPTR,A
002A         ?C0253:
002A 900000      R     MOV     DPTR,#index
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F C3                CLR     C
0030 9403              SUBB    A,#03H
0032 5018              JNC     ?C0252
                                           ; SOURCE LINE # 1252
                                           ; SOURCE LINE # 1253
0034 7400        E     MOV     A,#LOW AuxFlags
0036 2F                ADD     A,R7
0037 F8                MOV     R0,A
0038 E6                MOV     A,@R0
0039 30E708            JNB     ACC.7,?C0255
                                           ; SOURCE LINE # 1254
                                           ; SOURCE LINE # 1255
003C E0                MOVX    A,@DPTR
003D 2400        E     ADD     A,#LOW AuxFlags
                                           ; SOURCE LINE # 1256
003F 120000      R     LCALL   L?0686
                                           ; SOURCE LINE # 1257
0042 8008              SJMP    ?C0252
                                           ; SOURCE LINE # 1258
                                           ; SOURCE LINE # 1259
0044         ?C0255:
0044 900000      R     MOV     DPTR,#index
0047 E0                MOVX    A,@DPTR
0048 04                INC     A
0049 F0                MOVX    @DPTR,A
004A 80DE              SJMP    ?C0253
                                           ; SOURCE LINE # 1260
004C         ?C0252:
                                           ; SOURCE LINE # 1262
004C 120000      R     LCALL   L?0688
004F 7800        E     MOV     R0,#LOW Main_KB_CHN
0051 E6                MOV     A,@R0
0052 6F                XRL     A,R7
0053 7001              JNZ     ?C0573
0055 EE                MOV     A,R6
0056         ?C0573:
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 87  

0056 702D              JNZ     ?C0262
                                           ; SOURCE LINE # 1263
                                           ; SOURCE LINE # 1264
0058 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1265
0059 900000      R     MOV     DPTR,#index
005C F0                MOVX    @DPTR,A
005D         ?C0258:
005D 900000      R     MOV     DPTR,#index
0060 E0                MOVX    A,@DPTR
0061 FF                MOV     R7,A
0062 C3                CLR     C
0063 9403              SUBB    A,#03H
0065 501E              JNC     ?C0262
                                           ; SOURCE LINE # 1266
                                           ; SOURCE LINE # 1267
0067 7400        E     MOV     A,#LOW AuxFlags
0069 2F                ADD     A,R7
006A F8                MOV     R0,A
006B E6                MOV     A,@R0
006C 30E60E            JNB     ACC.6,?C0260
                                           ; SOURCE LINE # 1268
                                           ; SOURCE LINE # 1269
006F E0                MOVX    A,@DPTR
0070 2400        E     ADD     A,#LOW AuxFlags
0072 F8                MOV     R0,A
0073 7410              MOV     A,#010H
0075 46                ORL     A,@R0
0076 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1270
0077 EF                MOV     A,R7
0078 04                INC     A
0079 7800        E     MOV     R0,#LOW Main_KB_CHN
007B F6                MOV     @R0,A
                                           ; SOURCE LINE # 1271
007C 22                RET     
                                           ; SOURCE LINE # 1272
                                           ; SOURCE LINE # 1273
007D         ?C0260:
007D 900000      R     MOV     DPTR,#index
0080 E0                MOVX    A,@DPTR
0081 04                INC     A
0082 F0                MOVX    @DPTR,A
0083 80D8              SJMP    ?C0258
                                           ; SOURCE LINE # 1274
                                           ; SOURCE LINE # 1275
0085         ?C0262:
0085 22                RET     
             ; FUNCTION AUXDevicePlugOutClearVariables (END)

             ; FUNCTION PollingAUXDeviceCenter (BEGIN)
                                           ; SOURCE LINE # 1280
                                           ; SOURCE LINE # 1281
                                           ; SOURCE LINE # 1282
0000 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX_HS
0002 E6                MOV     A,@R0
0003 F4                CPL     A
0004 6019              JZ      ?C0263
                                           ; SOURCE LINE # 1283
                                           ; SOURCE LINE # 1284
0006 7FFF              MOV     R7,#0FFH
0008 120000      R     LCALL   _SetAUXScanIndexHS
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 88  

                                           ; SOURCE LINE # 1285
000B 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
000D 06                INC     @R0
                                           ; SOURCE LINE # 1286
000E E6                MOV     A,@R0
000F D3                SETB    C
0010 9402              SUBB    A,#02H
0012 4002              JC      ?C0264
                                           ; SOURCE LINE # 1287
                                           ; SOURCE LINE # 1288
0014 E4                CLR     A
0015 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1289
0016         ?C0264:
                                           ; SOURCE LINE # 1290
0016 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0018 E6                MOV     A,@R0
0019 24F0              ADD     A,#0F0H
001B 7900        E     MOV     R1,#LOW ScanAUXStepIndex
001D F7                MOV     @R1,A
                                           ; SOURCE LINE # 1291
001E 22                RET     
001F         ?C0263:
                                           ; SOURCE LINE # 1293
                                           ; SOURCE LINE # 1294
001F 30000F      E     JNB     ECSendtoAUXFlag,?C0268
                                           ; SOURCE LINE # 1295
                                           ; SOURCE LINE # 1296
0022 7800        E     MOV     R0,#LOW AUX_SCAN_TIMEOUT_CUNT
0024 06                INC     @R0
                                           ; SOURCE LINE # 1297
0025 E6                MOV     A,@R0
0026 C3                CLR     C
0027 9408              SUBB    A,#08H
0029 4006              JC      ?C0268
                                           ; SOURCE LINE # 1298
                                           ; SOURCE LINE # 1299
002B 120000      R     LCALL   AUXDevicePlugOutClearVariables
                                           ; SOURCE LINE # 1300
002E 120000      R     LCALL   PS2Deviceactive
                                           ; SOURCE LINE # 1301
                                           ; SOURCE LINE # 1302
                                           ; SOURCE LINE # 1303
                                           ; SOURCE LINE # 1304
0031         ?C0268:
0031 22                RET     
             ; FUNCTION PollingAUXDeviceCenter (END)

             ; FUNCTION _UpdateExtKeyboard (BEGIN)
                                           ; SOURCE LINE # 1311
0000 900000      R     MOV     DPTR,#portnum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1312
                                           ; SOURCE LINE # 1315
0005 E4                CLR     A
0006 A3                INC     DPTR
0007 F0                MOVX    @DPTR,A
0008         ?C0269:
0008 900000      R     MOV     DPTR,#index
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 89  

000D C3                CLR     C
000E 9404              SUBB    A,#04H
0010 4003              JC      $ + 5H
0012 020000      R     LJMP    ?C0277
                                           ; SOURCE LINE # 1316
                                           ; SOURCE LINE # 1318
0015 120000      R     LCALL   L?0689
0018 E6                MOV     A,@R0
0019 FD                MOV     R5,A
001A 7C00              MOV     R4,#00H
001C 7401              MOV     A,#01H
001E 7E00              MOV     R6,#00H
0020 C8                XCH     A,R0
0021 EF                MOV     A,R7
0022 C8                XCH     A,R0
0023 08                INC     R0
0024 8005              SJMP    ?C0575
0026         ?C0574:
0026 C3                CLR     C
0027 33                RLC     A
0028 CE                XCH     A,R6
0029 33                RLC     A
002A CE                XCH     A,R6
002B         ?C0575:
002B D8F9              DJNZ    R0,?C0574
002D FF                MOV     R7,A
002E EE                MOV     A,R6
002F 5C                ANL     A,R4
0030 FE                MOV     R6,A
0031 EF                MOV     A,R7
0032 5D                ANL     A,R5
0033 4E                ORL     A,R6
0034 605D              JZ      ?C0271
                                           ; SOURCE LINE # 1319
                                           ; SOURCE LINE # 1320
0036 900000      R     MOV     DPTR,#portnum
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B A3                INC     DPTR
003C E0                MOVX    A,@DPTR
003D 900000      R     MOV     DPTR,#UpdateConfigAUXKB
0040 93                MOVC    A,@A+DPTR
0041 FD                MOV     R5,A
0042 7B01              MOV     R3,#01H
0044 120000      R     LCALL   _Send2PortNWait
0047 EF                MOV     A,R7
0048 7049              JNZ     ?C0271
                                           ; SOURCE LINE # 1321
                                           ; SOURCE LINE # 1322
004A 900000      R     MOV     DPTR,#index
004D E0                MOVX    A,@DPTR
004E 900000      R     MOV     DPTR,#UpdateConfigAUXKB
0051 93                MOVC    A,@A+DPTR
0052 B4F30A            CJNE    A,#0F3H,?C0274
                                           ; SOURCE LINE # 1323
                                           ; SOURCE LINE # 1324
0055 900000      R     MOV     DPTR,#portnum
0058 E0                MOVX    A,@DPTR
0059 FF                MOV     R7,A
005A 7800        E     MOV     R0,#LOW Save_Typematic
005C E6                MOV     A,@R0
                                           ; SOURCE LINE # 1325
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 90  

005D 8014              SJMP    ?C0604
005F         ?C0274:
                                           ; SOURCE LINE # 1326
005F 900000      R     MOV     DPTR,#index
0062 E0                MOVX    A,@DPTR
0063 900000      R     MOV     DPTR,#UpdateConfigAUXKB
0066 93                MOVC    A,@A+DPTR
0067 B4ED0F            CJNE    A,#0EDH,?C0275
                                           ; SOURCE LINE # 1327
                                           ; SOURCE LINE # 1328
006A 900000      R     MOV     DPTR,#portnum
006D E0                MOVX    A,@DPTR
006E FF                MOV     R7,A
006F E500        E     MOV     A,Led_Data
0071 5407              ANL     A,#07H
0073         ?C0604:
0073 FD                MOV     R5,A
0074 7B01              MOV     R3,#01H
0076 120000      R     LCALL   _Send2PortNWait
                                           ; SOURCE LINE # 1329
0079         ?C0275:
                                           ; SOURCE LINE # 1330
0079 120000      R     LCALL   L?0689
007C C9                XCH     A,R1
007D E8                MOV     A,R0
007E C9                XCH     A,R1
007F 900000      R     MOV     DPTR,#index
0082 E0                MOVX    A,@DPTR
0083 FF                MOV     R7,A
0084 7401              MOV     A,#01H
0086 C8                XCH     A,R0
0087 EF                MOV     A,R7
0088 C8                XCH     A,R0
0089 08                INC     R0
008A 8002              SJMP    ?C0577
008C         ?C0576:
008C C3                CLR     C
008D 33                RLC     A
008E         ?C0577:
008E D8FC              DJNZ    R0,?C0576
0090 F4                CPL     A
0091 57                ANL     A,@R1
0092 F7                MOV     @R1,A
                                           ; SOURCE LINE # 1331
                                           ; SOURCE LINE # 1332
                                           ; SOURCE LINE # 1333
0093         ?C0271:
0093 900000      R     MOV     DPTR,#index
0096 E0                MOVX    A,@DPTR
0097 04                INC     A
0098 F0                MOVX    @DPTR,A
0099 020000      R     LJMP    ?C0269
                                           ; SOURCE LINE # 1334
009C         ?C0277:
009C 22                RET     
             ; FUNCTION _UpdateExtKeyboard (END)

             ; FUNCTION UpdateAUXKBDevice (BEGIN)
                                           ; SOURCE LINE # 1339
                                           ; SOURCE LINE # 1340
                                           ; SOURCE LINE # 1341
0000 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 91  

0002 E6                MOV     A,@R0
0003 FF                MOV     R7,A
0004 120000      R     LCALL   _UpdateExtKeyboard
                                           ; SOURCE LINE # 1342
0007 E4                CLR     A
0008 FF                MOV     R7,A
0009 020000      R     LJMP    _SetAUXScanIndexHS
             ; FUNCTION UpdateAUXKBDevice (END)

             ; FUNCTION InitAUXDevice (BEGIN)
                                           ; SOURCE LINE # 1349
                                           ; SOURCE LINE # 1350
                                           ; SOURCE LINE # 1351
0000 120000      R     LCALL   L?0645
0003 E6                MOV     A,@R0
0004 30E61C            JNB     ACC.6,?C0279
                                           ; SOURCE LINE # 1352
                                           ; SOURCE LINE # 1353
0007 200003      E     JB      KeyboardDriverIn,$ + 6H
000A 020000      R     LJMP    ?C0284
                                           ; SOURCE LINE # 1354
                                           ; SOURCE LINE # 1355
000D 120000      R     LCALL   L?0690
0010 E6                MOV     A,@R0
0011 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0013 7007              JNZ     ?C0281
                                           ; SOURCE LINE # 1356
                                           ; SOURCE LINE # 1357
0015 E6                MOV     A,@R0
0016 FF                MOV     R7,A
0017 120000      R     LCALL   _ConfigExtKeyboard
                                           ; SOURCE LINE # 1358
001A 805D              SJMP    ?C0605
001C         ?C0281:
                                           ; SOURCE LINE # 1360
                                           ; SOURCE LINE # 1361
001C E6                MOV     A,@R0
001D FF                MOV     R7,A
001E 120000      R     LCALL   _UpdateExtKeyboard
                                           ; SOURCE LINE # 1362
0021         ?C0282:
                                           ; SOURCE LINE # 1363
                                           ; SOURCE LINE # 1364
0021 8056              SJMP    ?C0605
                                           ; SOURCE LINE # 1366
                                           ; SOURCE LINE # 1368
                                           ; SOURCE LINE # 1369
0023         ?C0279:
                                           ; SOURCE LINE # 1371
                                           ; SOURCE LINE # 1372
0023 300061      E     JNB     MouseDriverIn,?C0285
                                           ; SOURCE LINE # 1373
                                           ; SOURCE LINE # 1374
0026 300020      E     JNB     MULPX_Multiplex,?C0286
                                           ; SOURCE LINE # 1375
                                           ; SOURCE LINE # 1376
0029 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
002B E6                MOV     A,@R0
002C FD                MOV     R5,A
002D 7FAA              MOV     R7,#0AAH
002F 120000      R     LCALL   _AUXData_To_Host_nWait
                                           ; SOURCE LINE # 1377
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 92  

0032 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0034 E6                MOV     A,@R0
0035 FD                MOV     R5,A
0036 E4                CLR     A
0037 FF                MOV     R7,A
0038 120000      R     LCALL   _AUXData_To_Host_nWait
                                           ; SOURCE LINE # 1378
003B 120000      R     LCALL   L?0645
003E 74F7              MOV     A,#0F7H
0040 56                ANL     A,@R0
0041 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1379
0042 7F0A              MOV     R7,#0AH
0044 120000      R     LCALL   _SetPS2SkipScanTime
                                           ; SOURCE LINE # 1380
0047 805D              SJMP    ?C0284
0049         ?C0286:
                                           ; SOURCE LINE # 1382
                                           ; SOURCE LINE # 1383
0049 7800        E     MOV     R0,#LOW MS_DRIVER_TYPE
004B E6                MOV     A,@R0
004C FF                MOV     R7,A
004D 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
004F E6                MOV     A,@R0
0050 FD                MOV     R5,A
0051 120000      R     LCALL   _SetIntellimouse
0054 EF                MOV     A,R7
0055 6026              JZ      ?C0288
                                           ; SOURCE LINE # 1384
                                           ; SOURCE LINE # 1385
0057 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0059 E6                MOV     A,@R0
005A FF                MOV     R7,A
005B 120000      R     LCALL   _ReadMouseID
005E 7800        E     MOV     R0,#LOW MS_DRIVER_TYPE
0060 E6                MOV     A,@R0
0061 6F                XRL     A,R7
0062 700E              JNZ     ?C0289
                                           ; SOURCE LINE # 1386
                                           ; SOURCE LINE # 1387
0064 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0066 E6                MOV     A,@R0
0067 FF                MOV     R7,A
0068 120000      R     LCALL   _ConfigExtMouse
006B EF                MOV     A,R7
006C 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
006E 600F              JZ      ?C0607
                                           ; SOURCE LINE # 1388
                                           ; SOURCE LINE # 1389
                                           ; SOURCE LINE # 1390
0070 802C              SJMP    ?C0608
0072         ?C0289:
                                           ; SOURCE LINE # 1397
                                           ; SOURCE LINE # 1398
0072 120000      R     LCALL   L?0645
0075 7404              MOV     A,#04H
0077 46                ORL     A,@R0
0078 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1399
0079         ?C0605:
0079 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
007B         ?C0606:
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 93  

                                           ; SOURCE LINE # 1400
                                           ; SOURCE LINE # 1401
007B 8021              SJMP    ?C0608
007D         ?C0288:
                                           ; SOURCE LINE # 1403
                                           ; SOURCE LINE # 1404
007D 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
007F         ?C0607:
007F E6                MOV     A,@R0
0080 2400        E     ADD     A,#LOW AuxFlags
0082 F8                MOV     R0,A
0083 E4                CLR     A
0084 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1405
                                           ; SOURCE LINE # 1406
                                           ; SOURCE LINE # 1407
0085 801F              SJMP    ?C0284
0087         ?C0285:
                                           ; SOURCE LINE # 1409
                                           ; SOURCE LINE # 1410
0087 30001C      E     JNB     MULPX_Multiplex,?C0284
                                           ; SOURCE LINE # 1411
                                           ; SOURCE LINE # 1412
008A 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
008C E6                MOV     A,@R0
008D FD                MOV     R5,A
008E 7FAA              MOV     R7,#0AAH
0090 120000      R     LCALL   _AUXData_To_Host_nWait
                                           ; SOURCE LINE # 1413
0093 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0095 E6                MOV     A,@R0
0096 FD                MOV     R5,A
0097 E4                CLR     A
0098 FF                MOV     R7,A
0099 120000      R     LCALL   _AUXData_To_Host_nWait
                                           ; SOURCE LINE # 1414
009C 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
009E         ?C0608:
009E E6                MOV     A,@R0
009F 2400        E     ADD     A,#LOW AuxFlags
00A1 F8                MOV     R0,A
00A2 74F7              MOV     A,#0F7H
00A4 56                ANL     A,@R0
00A5 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1415
                                           ; SOURCE LINE # 1416
                                           ; SOURCE LINE # 1417
00A6         ?C0284:
                                           ; SOURCE LINE # 1418
00A6 120000      R     LCALL   PS2Deviceactive
                                           ; SOURCE LINE # 1419
00A9 E4                CLR     A
00AA FF                MOV     R7,A
00AB 020000      R     LJMP    _SetAUXScanIndexHS
             ; FUNCTION InitAUXDevice (END)

             ; FUNCTION TPOnlyLowLevelFunc (BEGIN)
                                           ; SOURCE LINE # 1427
                                           ; SOURCE LINE # 1428
                                           ; SOURCE LINE # 1431
0000 200003      E     JB      StartENAUXDevice,$ + 6H
0003 020000      R     LJMP    ?C0299
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 94  

                                           ; SOURCE LINE # 1432
                                           ; SOURCE LINE # 1433
0006 C200        E     CLR     StartENAUXDevice
                                           ; SOURCE LINE # 1435
0008 7800        E     MOV     R0,#LOW MSPending
000A E6                MOV     A,@R0
000B 6433              XRL     A,#033H
000D 7003              JNZ     $ + 5H
000F 020000      R     LJMP    ?C0299
                                           ; SOURCE LINE # 1436
                                           ; SOURCE LINE # 1438
0012         ?C0298:
                                           ; SOURCE LINE # 1440
0012 7800        E     MOV     R0,#LOW TPACKCounter
0014 E6                MOV     A,@R0
0015 6003              JZ      $ + 5H
0017 020000      R     LJMP    ?C0299
                                           ; SOURCE LINE # 1441
                                           ; SOURCE LINE # 1443
001A         ?C0300:
                                           ; SOURCE LINE # 1445
001A 120000      E     LCALL   Hook_TPOnlyLowLevelFunc
                                           ; SOURCE LINE # 1447
001D 7800        E     MOV     R0,#LOW AUXInactiveCounter
001F E6                MOV     A,@R0
0020 6002              JZ      ?C0301
                                           ; SOURCE LINE # 1448
                                           ; SOURCE LINE # 1449
0022 16                DEC     @R0
0023 22                RET     
                                           ; SOURCE LINE # 1451
0024         ?C0301:
                                           ; SOURCE LINE # 1453
                                           ; SOURCE LINE # 1454
0024 900000      E     MOV     DPTR,#PSSTS1
0027 E0                MOVX    A,@DPTR
0028 20E272            JB      ACC.2,?C0299
002B 900000      E     MOV     DPTR,#PSSTS2
002E E0                MOVX    A,@DPTR
002F 20E26B            JB      ACC.2,?C0299
0032 900000      E     MOV     DPTR,#PSSTS3
0035 E0                MOVX    A,@DPTR
0036 20E264            JB      ACC.2,?C0299
0039 200061      E     JB      F_Service_PS2,?C0299
                                           ; SOURCE LINE # 1455
                                           ; SOURCE LINE # 1457
                                           ; SOURCE LINE # 1458
003C         ?C0302:
                                           ; SOURCE LINE # 1460
003C 7800        E     MOV     R0,#LOW AUXInactiveCounter
003E E6                MOV     A,@R0
003F 705C              JNZ     ?C0299
                                           ; SOURCE LINE # 1461
                                           ; SOURCE LINE # 1462
0041 900000      R     MOV     DPTR,#index
0044 F0                MOVX    @DPTR,A
0045         ?C0306:
0045 900000      R     MOV     DPTR,#index
0048 E0                MOVX    A,@DPTR
0049 FF                MOV     R7,A
004A C3                CLR     C
004B 9403              SUBB    A,#03H
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 95  

004D 504E              JNC     ?C0299
                                           ; SOURCE LINE # 1463
                                           ; SOURCE LINE # 1464
004F 7400        E     MOV     A,#LOW AuxFlags2
0051 2F                ADD     A,R7
0052 F8                MOV     R0,A
0053 E6                MOV     A,@R0
0054 30E01B            JNB     ACC.0,?C0309
                                           ; SOURCE LINE # 1465
                                           ; SOURCE LINE # 1466
0057 7B01              MOV     R3,#01H
0059 7DF5              MOV     R5,#0F5H
005B 120000      R     LCALL   _Send2PortNWait
005E EF                MOV     A,R7
005F 7034              JNZ     ?C0308
                                           ; SOURCE LINE # 1467
                                           ; SOURCE LINE # 1468
0061 120000      R     LCALL   L?0662
0064 74FE              MOV     A,#0FEH
0066 56                ANL     A,@R0
0067 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1469
0068 7400        E     MOV     A,#LOW AuxFlags2
006A 2F                ADD     A,R7
006B F8                MOV     R0,A
006C 7402              MOV     A,#02H
006E 46                ORL     A,@R0
006F F6                MOV     @R0,A
                                           ; SOURCE LINE # 1470
                                           ; SOURCE LINE # 1471
0070 8023              SJMP    ?C0308
0072         ?C0309:
                                           ; SOURCE LINE # 1472
0072 120000      R     LCALL   L?0662
0075 E6                MOV     A,@R0
0076 30E41C            JNB     ACC.4,?C0308
                                           ; SOURCE LINE # 1473
                                           ; SOURCE LINE # 1474
0079 7B01              MOV     R3,#01H
007B 7DF4              MOV     R5,#0F4H
007D 120000      R     LCALL   _Send2PortNWait
0080 EF                MOV     A,R7
0081 7012              JNZ     ?C0308
                                           ; SOURCE LINE # 1475
                                           ; SOURCE LINE # 1476
0083 120000      R     LCALL   L?0663
0086 74EF              MOV     A,#0EFH
0088 56                ANL     A,@R0
0089 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1477
008A 7400        E     MOV     A,#LOW AuxFlags2
008C 2F                ADD     A,R7
008D F8                MOV     R0,A
008E 7420              MOV     A,#020H
0090 46                ORL     A,@R0
0091 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1480
0092 120000      R     LCALL   L?0680
                                           ; SOURCE LINE # 1481
                                           ; SOURCE LINE # 1482
                                           ; SOURCE LINE # 1483
0095         ?C0308:
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 96  

0095 900000      R     MOV     DPTR,#index
0098 E0                MOVX    A,@DPTR
0099 04                INC     A
009A F0                MOVX    @DPTR,A
009B 80A8              SJMP    ?C0306
                                           ; SOURCE LINE # 1484
                                           ; SOURCE LINE # 1485
                                           ; SOURCE LINE # 1486
009D         ?C0299:
009D 22                RET     
             ; FUNCTION TPOnlyLowLevelFunc (END)

             ; FUNCTION ExternalAUXLowLevelFunc (BEGIN)
                                           ; SOURCE LINE # 1491
                                           ; SOURCE LINE # 1492
                                           ; SOURCE LINE # 1495
0000 200003      E     JB      StartENAUXDevice,$ + 6H
0003 020000      R     LJMP    ?C0316
                                           ; SOURCE LINE # 1496
                                           ; SOURCE LINE # 1497
0006 C200        E     CLR     StartENAUXDevice
                                           ; SOURCE LINE # 1499
0008 7800        E     MOV     R0,#LOW MSPending
000A E6                MOV     A,@R0
000B 6433              XRL     A,#033H
000D 7003              JNZ     $ + 5H
000F 020000      R     LJMP    ?C0316
                                           ; SOURCE LINE # 1500
                                           ; SOURCE LINE # 1502
0012         ?C0315:
                                           ; SOURCE LINE # 1504
0012 120000      R     LCALL   EnableAUXDevice
                                           ; SOURCE LINE # 1506
0015 7800        E     MOV     R0,#LOW AUXInactiveCounter
0017 E6                MOV     A,@R0
0018 6003              JZ      $ + 5H
001A 020000      R     LJMP    ?C0316
                                           ; SOURCE LINE # 1507
                                           ; SOURCE LINE # 1509
001D         ?C0317:
                                           ; SOURCE LINE # 1511
001D 7800        E     MOV     R0,#LOW SKIP_AUX_SCAN_CUNT
001F E6                MOV     A,@R0
0020 6003              JZ      $ + 5H
0022 020000      R     LJMP    ?C0316
                                           ; SOURCE LINE # 1512
                                           ; SOURCE LINE # 1514
0025         ?C0318:
                                           ; SOURCE LINE # 1516
0025 900000      E     MOV     DPTR,#PSSTS1
0028 E0                MOVX    A,@DPTR
0029 20E211            JB      ACC.2,?C0320
002C 900000      E     MOV     DPTR,#PSSTS2
002F E0                MOVX    A,@DPTR
0030 20E20A            JB      ACC.2,?C0320
0033 900000      E     MOV     DPTR,#PSSTS3
0036 E0                MOVX    A,@DPTR
0037 20E203            JB      ACC.2,?C0320
003A 30004E      E     JNB     PS2StartBit,?C0319
003D         ?C0320:
                                           ; SOURCE LINE # 1517
                                           ; SOURCE LINE # 1518
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 97  

003D 7800        E     MOV     R0,#LOW AuxScanWDT
003F 06                INC     @R0
                                           ; SOURCE LINE # 1520
0040 E6                MOV     A,@R0
0041 D3                SETB    C
0042 9464              SUBB    A,#064H
0044 5003              JNC     $ + 5H
0046 020000      R     LJMP    ?C0316
                                           ; SOURCE LINE # 1521
                                           ; SOURCE LINE # 1522
0049 E4                CLR     A
004A F6                MOV     @R0,A
                                           ; SOURCE LINE # 1523
004B C200        E     CLR     PS2StartBit
                                           ; SOURCE LINE # 1525
004D 120000      R     LCALL   AUXDevicePlugOutClearVariables
                                           ; SOURCE LINE # 1526
0050 120000      R     LCALL   PS2Deviceactive
                                           ; SOURCE LINE # 1528
0053 900000      E     MOV     DPTR,#PSSTS1
0056 E0                MOVX    A,@DPTR
0057 20E205            JB      ACC.2,?C0323
005A 7800        E     MOV     R0,#LOW PS2_SSIRQ_Channel
005C E6                MOV     A,@R0
005D 7005              JNZ     ?C0322
005F         ?C0323:
                                           ; SOURCE LINE # 1529
                                           ; SOURCE LINE # 1530
005F 900000      E     MOV     DPTR,#PSCTL1
                                           ; SOURCE LINE # 1531
0062 8023              SJMP    ?C0610
0064         ?C0322:
                                           ; SOURCE LINE # 1532
0064 900000      E     MOV     DPTR,#PSSTS2
0067 E0                MOVX    A,@DPTR
0068 20E206            JB      ACC.2,?C0326
006B 7800        E     MOV     R0,#LOW PS2_SSIRQ_Channel
006D E6                MOV     A,@R0
006E B40105            CJNE    A,#01H,?C0325
0071         ?C0326:
                                           ; SOURCE LINE # 1533
                                           ; SOURCE LINE # 1534
0071 900000      E     MOV     DPTR,#PSCTL2
0074         ?C0609:
                                           ; SOURCE LINE # 1535
0074 8011              SJMP    ?C0610
0076         ?C0325:
                                           ; SOURCE LINE # 1536
0076 900000      E     MOV     DPTR,#PSSTS3
0079 E0                MOVX    A,@DPTR
007A 20E207            JB      ACC.2,?C0329
007D 7800        E     MOV     R0,#LOW PS2_SSIRQ_Channel
007F E6                MOV     A,@R0
0080 6402              XRL     A,#02H
0082 7057              JNZ     ?C0316
0084         ?C0329:
                                           ; SOURCE LINE # 1537
                                           ; SOURCE LINE # 1538
0084 900000      E     MOV     DPTR,#PSCTL3
0087         ?C0610:
0087 7411              MOV     A,#011H
0089 F0                MOVX    @DPTR,A
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 98  

                                           ; SOURCE LINE # 1539
                                           ; SOURCE LINE # 1540
008A 22                RET     
                                           ; SOURCE LINE # 1542
008B         ?C0319:
                                           ; SOURCE LINE # 1544
                                           ; SOURCE LINE # 1545
008B E4                CLR     A
008C 7800        E     MOV     R0,#LOW AuxScanWDT
008E F6                MOV     @R0,A
                                           ; SOURCE LINE # 1547
008F 900000      E     MOV     DPTR,#ISR2
0092 E0                MOVX    A,@DPTR
;---- Variable 'ISR2Temp' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1548
0093 541C              ANL     A,#01CH
0095 FF                MOV     R7,A
                                           ; SOURCE LINE # 1549
0096 7043              JNZ     ?C0316
                                           ; SOURCE LINE # 1550
                                           ; SOURCE LINE # 1552
0098         ?C0331:
                                           ; SOURCE LINE # 1554
                                           ; SOURCE LINE # 1556
0098 200040      E     JB      F_Service_PS2,?C0316
                                           ; SOURCE LINE # 1557
                                           ; SOURCE LINE # 1559
009B         ?C0333:
                                           ; SOURCE LINE # 1561
                                           ; SOURCE LINE # 1562
009B 120000      R     LCALL   PS2DeviceInactive
                                           ; SOURCE LINE # 1563
                                           ; SOURCE LINE # 1564
                                           ; SOURCE LINE # 1565
009E         ?C0330:
                                           ; SOURCE LINE # 1567
009E 120000      R     LCALL   PollingAUXDeviceCenter
                                           ; SOURCE LINE # 1569
00A1 7800        E     MOV     R0,#LOW ScanAUXStepIndex
00A3 E6                MOV     A,@R0
00A4 120000      E     LCALL   ?C?CCASE
00A7 0000        R     DW      ?C0347
00A9 A0                DB      0A0H
00AA 0000        R     DW      ?C0347
00AC A1                DB      0A1H
00AD 0000        R     DW      ?C0347
00AF A2                DB      0A2H
00B0 0000        R     DW      ?C0341
00B2 B0                DB      0B0H
00B3 0000        R     DW      ?C0341
00B5 B1                DB      0B1H
00B6 0000        R     DW      ?C0341
00B8 B2                DB      0B2H
00B9 0000        R     DW      ?C0344
00BB C0                DB      0C0H
00BC 0000        R     DW      ?C0344
00BE C1                DB      0C1H
00BF 0000        R     DW      ?C0344
00C1 C2                DB      0C2H
00C2 0000        R     DW      ?C0338
00C4 F0                DB      0F0H
00C5 0000        R     DW      ?C0338
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 99  

00C7 F1                DB      0F1H
00C8 0000        R     DW      ?C0338
00CA F2                DB      0F2H
00CB 0000              DW      00H
00CD 0000        R     DW      ?C0316
                                           ; SOURCE LINE # 1570
                                           ; SOURCE LINE # 1571
                                           ; SOURCE LINE # 1572
                                           ; SOURCE LINE # 1573
00CF         ?C0338:
                                           ; SOURCE LINE # 1574
00CF 020000      R     LJMP    ScanAUXPortX
                                           ; SOURCE LINE # 1575
                                           ; SOURCE LINE # 1577
                                           ; SOURCE LINE # 1578
                                           ; SOURCE LINE # 1579
00D2         ?C0341:
                                           ; SOURCE LINE # 1580
00D2 020000      R     LJMP    CheckAUXDeviceType
                                           ; SOURCE LINE # 1581
                                           ; SOURCE LINE # 1583
                                           ; SOURCE LINE # 1584
                                           ; SOURCE LINE # 1585
00D5         ?C0344:
                                           ; SOURCE LINE # 1586
00D5 020000      R     LJMP    InitAUXDevice
                                           ; SOURCE LINE # 1587
                                           ; SOURCE LINE # 1589
                                           ; SOURCE LINE # 1590
                                           ; SOURCE LINE # 1591
00D8         ?C0347:
                                           ; SOURCE LINE # 1592
00D8 120000      R     LCALL   UpdateAUXKBDevice
                                           ; SOURCE LINE # 1593
                                           ; SOURCE LINE # 1595
                                           ; SOURCE LINE # 1596
                                           ; SOURCE LINE # 1597
                                           ; SOURCE LINE # 1599
                                           ; SOURCE LINE # 1600
                                           ; SOURCE LINE # 1601
                                           ; SOURCE LINE # 1603
                                           ; SOURCE LINE # 1604
                                           ; SOURCE LINE # 1605
                                           ; SOURCE LINE # 1607
                                           ; SOURCE LINE # 1608
                                           ; SOURCE LINE # 1609
                                           ; SOURCE LINE # 1611
                                           ; SOURCE LINE # 1612
                                           ; SOURCE LINE # 1613
                                           ; SOURCE LINE # 1615
                                           ; SOURCE LINE # 1616
                                           ; SOURCE LINE # 1617
                                           ; SOURCE LINE # 1619
                                           ; SOURCE LINE # 1620
00DB         ?C0316:
00DB 22                RET     
             ; FUNCTION ExternalAUXLowLevelFunc (END)

             ; FUNCTION ScanAUXDeviceStep (BEGIN)
                                           ; SOURCE LINE # 1625
                                           ; SOURCE LINE # 1626
                                           ; SOURCE LINE # 1628
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 100 

0000 020000      R     LJMP    TPOnlyLowLevelFunc
             ; FUNCTION ScanAUXDeviceStep (END)

             ; FUNCTION ScanAUXPortX (BEGIN)
                                           ; SOURCE LINE # 1637
                                           ; SOURCE LINE # 1638
                                           ; SOURCE LINE # 1639
0000 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX_HS
0002 E6                MOV     A,@R0
0003 F4                CPL     A
0004 7074              JNZ     ?C0383
                                           ; SOURCE LINE # 1640
                                           ; SOURCE LINE # 1641
0006 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0008 E6                MOV     A,@R0
0009 700C              JNZ     ?C0366
                                           ; SOURCE LINE # 1642
                                           ; SOURCE LINE # 1643
000B 120000      R     LCALL   L?0666
000E 7029              JNZ     ?C0612
0010 120000      R     LCALL   L?0668
0013 6029              JZ      ?C0369
0015         ?C0368:
                                           ; SOURCE LINE # 1644
                                           ; SOURCE LINE # 1645
                                           ; SOURCE LINE # 1646
                                           ; SOURCE LINE # 1647
0015 8022              SJMP    ?C0612
0017         ?C0366:
                                           ; SOURCE LINE # 1648
0017 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0019 E6                MOV     A,@R0
001A B4010C            CJNE    A,#01H,?C0370
                                           ; SOURCE LINE # 1649
                                           ; SOURCE LINE # 1650
001D 120000      R     LCALL   L?0670
0020 7005              JNZ     ?C0372
0022 120000      R     LCALL   L?0672
0025 6017              JZ      ?C0369
0027         ?C0372:
                                           ; SOURCE LINE # 1651
                                           ; SOURCE LINE # 1652
0027         ?C0611:
                                           ; SOURCE LINE # 1653
                                           ; SOURCE LINE # 1654
0027 8010              SJMP    ?C0612
0029         ?C0370:
                                           ; SOURCE LINE # 1655
0029 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
002B E6                MOV     A,@R0
002C B4020F            CJNE    A,#02H,?C0369
                                           ; SOURCE LINE # 1656
                                           ; SOURCE LINE # 1657
002F 120000      R     LCALL   L?0674
0032 7005              JNZ     ?C0376
0034 120000      R     LCALL   L?0676
0037 6005              JZ      ?C0369
0039         ?C0376:
                                           ; SOURCE LINE # 1658
                                           ; SOURCE LINE # 1659
0039         ?C0612:
0039 E4                CLR     A
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 101 

003A FF                MOV     R7,A
003B 120000      R     LCALL   _SetAUXScanIndexHS
                                           ; SOURCE LINE # 1660
                                           ; SOURCE LINE # 1661
003E         ?C0369:
                                           ; SOURCE LINE # 1663
003E 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX_HS
0040 E6                MOV     A,@R0
0041 7007              JNZ     ?C0377
                                           ; SOURCE LINE # 1664
                                           ; SOURCE LINE # 1665
0043 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0045 E6                MOV     A,@R0
0046 24D0              ADD     A,#0D0H
                                           ; SOURCE LINE # 1666
0048 802D              SJMP    ?C0613
004A         ?C0377:
                                           ; SOURCE LINE # 1668
                                           ; SOURCE LINE # 1669
004A 120000      R     LCALL   ClearAUXScanTimeOutCunt
                                           ; SOURCE LINE # 1670
004D 120000      R     LCALL   L?0632
0050 E6                MOV     A,@R0
0051 30E008            JNB     ACC.0,?C0379
                                           ; SOURCE LINE # 1671
                                           ; SOURCE LINE # 1672
0054 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0056 E6                MOV     A,@R0
0057 FF                MOV     R7,A
0058 7DF5              MOV     R5,#0F5H
                                           ; SOURCE LINE # 1673
005A 8013              SJMP    ?C0615
005C         ?C0379:
                                           ; SOURCE LINE # 1674
005C 120000      R     LCALL   L?0632
005F E6                MOV     A,@R0
0060 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0062 30E406            JNB     ACC.4,?C0381
                                           ; SOURCE LINE # 1675
                                           ; SOURCE LINE # 1676
0065 E6                MOV     A,@R0
0066 FF                MOV     R7,A
0067 7DF4              MOV     R5,#0F4H
0069         ?C0614:
                                           ; SOURCE LINE # 1677
0069 8004              SJMP    ?C0615
006B         ?C0381:
                                           ; SOURCE LINE # 1679
                                           ; SOURCE LINE # 1680
006B E6                MOV     A,@R0
006C FF                MOV     R7,A
006D 7DF1              MOV     R5,#0F1H
006F         ?C0615:
006F 120000      R     LCALL   _ECSend2Port
                                           ; SOURCE LINE # 1681
0072         ?C0380:
                                           ; SOURCE LINE # 1682
0072 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0074 E6                MOV     A,@R0
0075 24E0              ADD     A,#0E0H
0077         ?C0613:
0077 7900        E     MOV     R1,#LOW ScanAUXStepIndex
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 102 

0079 F7                MOV     @R1,A
                                           ; SOURCE LINE # 1683
                                           ; SOURCE LINE # 1684
                                           ; SOURCE LINE # 1685
007A         ?C0383:
007A 22                RET     
             ; FUNCTION ScanAUXPortX (END)

             ; FUNCTION EnableAUXDevice (BEGIN)
                                           ; SOURCE LINE # 1690
                                           ; SOURCE LINE # 1691
                                           ; SOURCE LINE # 1692
0000 7800        E     MOV     R0,#LOW AUXInactiveCounter
0002 E6                MOV     A,@R0
0003 6007              JZ      ?C0384
                                           ; SOURCE LINE # 1693
                                           ; SOURCE LINE # 1694
0005 16                DEC     @R0
0006 E6                MOV     A,@R0
0007 7003              JNZ     ?C0384
                                           ; SOURCE LINE # 1695
                                           ; SOURCE LINE # 1696
0009 120000      R     LCALL   PS2Deviceactive
                                           ; SOURCE LINE # 1697
                                           ; SOURCE LINE # 1698
000C         ?C0384:
                                           ; SOURCE LINE # 1700
000C 7800        E     MOV     R0,#LOW SKIP_AUX_SCAN_CUNT
000E E6                MOV     A,@R0
000F 6001              JZ      ?C0387
                                           ; SOURCE LINE # 1701
                                           ; SOURCE LINE # 1702
0011 16                DEC     @R0
                                           ; SOURCE LINE # 1703
                                           ; SOURCE LINE # 1704
0012         ?C0387:
0012 22                RET     
             ; FUNCTION EnableAUXDevice (END)

             ; FUNCTION _bExtAUXTimeOutCheck (BEGIN)
                                           ; SOURCE LINE # 1709
;---- Variable 'channel' assigned to Register 'R7' ----
;---- Variable 'p_mode' assigned to Register 'R1' ----
0000 C9                XCH     A,R1
0001 ED                MOV     A,R5
0002 C9                XCH     A,R1
                                           ; SOURCE LINE # 1710
                                           ; SOURCE LINE # 1712
;---- Variable 'result' assigned to Register 'R6' ----
0003 7E01              MOV     R6,#01H
                                           ; SOURCE LINE # 1714
0005 C28E              CLR     TR1
                                           ; SOURCE LINE # 1715
0007 C2AB              CLR     ET1
                                           ; SOURCE LINE # 1716
0009 00                NOP     
                                           ; SOURCE LINE # 1717
000A 00                NOP     
                                           ; SOURCE LINE # 1718
000B 00                NOP     
                                           ; SOURCE LINE # 1719
000C 00                NOP     
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 103 

                                           ; SOURCE LINE # 1720
                                           ; SOURCE LINE # 1721
                                           ; SOURCE LINE # 1722
                                           ; SOURCE LINE # 1723
000D 120000      R     LCALL   L?0685
0010         ?C0390:
                                           ; SOURCE LINE # 1726
                                           ; SOURCE LINE # 1732
0010 120000      R     LCALL   L?0678
0013 120000      R     LCALL   L?0637
0016 E0                MOVX    A,@DPTR
0017 FD                MOV     R5,A
0018 120000      R     LCALL   L?0635
001B FC                MOV     R4,A
001C ED                MOV     A,R5
001D 5C                ANL     A,R4
001E 6069              JZ      ?C0388
                                           ; SOURCE LINE # 1733
                                           ; SOURCE LINE # 1734
0020 E9                MOV     A,R1
0021 6401              XRL     A,#01H
0023 7037              JNZ     ?C0392
                                           ; SOURCE LINE # 1735
                                           ; SOURCE LINE # 1736
0025 900000      E     MOV     DPTR,#PS2DataPinStatus
0028 F0                MOVX    @DPTR,A
0029         ?C0393:
                                           ; SOURCE LINE # 1737
                                           ; SOURCE LINE # 1742
0029 EF                MOV     A,R7
002A B40209            CJNE    A,#02H,?C0396
                                           ; SOURCE LINE # 1743
                                           ; SOURCE LINE # 1747
002D 900000      E     MOV     DPTR,#GPDRF
0030 E0                MOVX    A,@DPTR
0031 30E519            JNB     ACC.5,?C0398
                                           ; SOURCE LINE # 1748
                                           ; SOURCE LINE # 1749
0034 8026              SJMP    ?C0392
                                           ; SOURCE LINE # 1750
                                           ; SOURCE LINE # 1751
0036         ?C0396:
                                           ; SOURCE LINE # 1752
0036 EF                MOV     A,R7
0037 B40109            CJNE    A,#01H,?C0399
                                           ; SOURCE LINE # 1753
                                           ; SOURCE LINE # 1757
003A 900000      E     MOV     DPTR,#GPDRF
003D E0                MOVX    A,@DPTR
003E 30E30C            JNB     ACC.3,?C0398
                                           ; SOURCE LINE # 1758
                                           ; SOURCE LINE # 1759
0041 8019              SJMP    ?C0392
                                           ; SOURCE LINE # 1760
                                           ; SOURCE LINE # 1761
0043         ?C0399:
                                           ; SOURCE LINE # 1762
0043 EF                MOV     A,R7
0044 7007              JNZ     ?C0398
                                           ; SOURCE LINE # 1763
                                           ; SOURCE LINE # 1767
0046 900000      E     MOV     DPTR,#GPDRF
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 104 

0049 E0                MOVX    A,@DPTR
004A 20E10F            JB      ACC.1,?C0392
                                           ; SOURCE LINE # 1768
                                           ; SOURCE LINE # 1769
                                           ; SOURCE LINE # 1770
                                           ; SOURCE LINE # 1771
                                           ; SOURCE LINE # 1773
                                           ; SOURCE LINE # 1775
004D         ?C0398:
                                           ; SOURCE LINE # 1780
004D E4                CLR     A
004E 900000      E     MOV     DPTR,#WNCKR
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1781
0052 900000      E     MOV     DPTR,#PS2DataPinStatus
0055 E0                MOVX    A,@DPTR
0056 04                INC     A
0057 F0                MOVX    @DPTR,A
0058 E0                MOVX    A,@DPTR
0059 B405CD            CJNE    A,#05H,?C0393
                                           ; SOURCE LINE # 1782
005C         ?C0392:
                                           ; SOURCE LINE # 1790
005C EF                MOV     A,R7
005D 120000      R     LCALL   L?0625
0060 120000      R     LCALL   L?0638
0063 7411              MOV     A,#011H
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1791
0066 EF                MOV     A,R7
0067 75F00D            MOV     B,#0DH
006A A4                MUL     AB
006B 2400        R     ADD     A,#LOW asPS2Struct+06H
006D F582              MOV     DPL,A
006F E4                CLR     A
0070 3400        R     ADDC    A,#HIGH asPS2Struct+06H
0072 120000      R     LCALL   L?0637
0075 E0                MOVX    A,@DPTR
0076 7800        E     MOV     R0,#LOW PS2IFAck
0078 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1792
0079 E4                CLR     A
007A FE                MOV     R6,A
                                           ; SOURCE LINE # 1794
007B 120000      R     LCALL   L?0635
007E FD                MOV     R5,A
007F 120000      R     LCALL   L?0678
0082 120000      R     LCALL   L?0654
0085 ED                MOV     A,R5
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1795
0087 8003              SJMP    ?C0389
                                           ; SOURCE LINE # 1796
                                           ; SOURCE LINE # 1797
0089         ?C0388:
0089 308F84            JNB     TF1,?C0390
008C         ?C0389:
                                           ; SOURCE LINE # 1799
                                           ; SOURCE LINE # 1800
                                           ; SOURCE LINE # 1801
008C 120000      R     LCALL   L?0649
                                           ; SOURCE LINE # 1802
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 105 

008F CF                XCH     A,R7
0090 EE                MOV     A,R6
0091 CF                XCH     A,R7
                                           ; SOURCE LINE # 1803
0092         ?C0405:
0092 22                RET     
             ; FUNCTION _bExtAUXTimeOutCheck (END)

             ; FUNCTION _ConfigExtKeyboard (BEGIN)
                                           ; SOURCE LINE # 1810
0000 900000      R     MOV     DPTR,#portnum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1811
                                           ; SOURCE LINE # 1814
0005 E4                CLR     A
0006 A3                INC     DPTR
0007 F0                MOVX    @DPTR,A
0008         ?C0406:
0008 900000      R     MOV     DPTR,#index
000B E0                MOVX    A,@DPTR
000C FE                MOV     R6,A
000D C3                CLR     C
000E 9403              SUBB    A,#03H
0010 504A              JNC     ?C0413
                                           ; SOURCE LINE # 1815
                                           ; SOURCE LINE # 1816
0012 900000      R     MOV     DPTR,#portnum
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 EE                MOV     A,R6
0018 900000      R     MOV     DPTR,#ConfigAUXKB
001B 93                MOVC    A,@A+DPTR
001C FD                MOV     R5,A
001D 7B01              MOV     R3,#01H
001F 120000      R     LCALL   _Send2PortNWait
0022 EF                MOV     A,R7
0023 702F              JNZ     ?C0408
                                           ; SOURCE LINE # 1817
                                           ; SOURCE LINE # 1818
0025 900000      R     MOV     DPTR,#index
0028 E0                MOVX    A,@DPTR
0029 900000      R     MOV     DPTR,#ConfigAUXKB
002C 93                MOVC    A,@A+DPTR
002D B4F30A            CJNE    A,#0F3H,?C0410
                                           ; SOURCE LINE # 1819
                                           ; SOURCE LINE # 1820
0030 900000      R     MOV     DPTR,#portnum
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
0035 7800        E     MOV     R0,#LOW Save_Typematic
0037 E6                MOV     A,@R0
                                           ; SOURCE LINE # 1821
0038 8014              SJMP    ?C0616
003A         ?C0410:
                                           ; SOURCE LINE # 1822
003A 900000      R     MOV     DPTR,#index
003D E0                MOVX    A,@DPTR
003E 900000      R     MOV     DPTR,#ConfigAUXKB
0041 93                MOVC    A,@A+DPTR
0042 B4ED0F            CJNE    A,#0EDH,?C0408
                                           ; SOURCE LINE # 1823
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 106 

                                           ; SOURCE LINE # 1824
0045 900000      R     MOV     DPTR,#portnum
0048 E0                MOVX    A,@DPTR
0049 FF                MOV     R7,A
004A E500        E     MOV     A,Led_Data
004C 5407              ANL     A,#07H
004E         ?C0616:
004E FD                MOV     R5,A
004F 7B01              MOV     R3,#01H
0051 120000      R     LCALL   _Send2PortNWait
                                           ; SOURCE LINE # 1825
                                           ; SOURCE LINE # 1826
                                           ; SOURCE LINE # 1827
0054         ?C0408:
0054 900000      R     MOV     DPTR,#index
0057 E0                MOVX    A,@DPTR
0058 04                INC     A
0059 F0                MOVX    @DPTR,A
005A 80AC              SJMP    ?C0406
                                           ; SOURCE LINE # 1828
005C         ?C0413:
005C 22                RET     
             ; FUNCTION _ConfigExtKeyboard (END)

             ; FUNCTION _EnableMouse (BEGIN)
                                           ; SOURCE LINE # 1834
;---- Variable 'port' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1835
                                           ; SOURCE LINE # 1837
0000 7B01              MOV     R3,#01H
0002 7DF4              MOV     R5,#0F4H
0004 120000      R     LCALL   _Send2PortNWait
0007 EF                MOV     A,R7
0008 7007              JNZ     ?C0414
                                           ; SOURCE LINE # 1838
                                           ; SOURCE LINE # 1839
000A 900000      R     MOV     DPTR,#resault
000D 04                INC     A
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1840
000F 8005              SJMP    ?C0415
0011         ?C0414:
                                           ; SOURCE LINE # 1842
                                           ; SOURCE LINE # 1843
0011 E4                CLR     A
0012 900000      R     MOV     DPTR,#resault
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1844
0016         ?C0415:
                                           ; SOURCE LINE # 1845
0016 900000      R     MOV     DPTR,#resault
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
                                           ; SOURCE LINE # 1846
001B         ?C0416:
001B 22                RET     
             ; FUNCTION _EnableMouse (END)

             ; FUNCTION _SetResolution (BEGIN)
                                           ; SOURCE LINE # 1852
0000 900000      R     MOV     DPTR,#resolution
0003 ED                MOV     A,R5
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 107 

0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#port
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1853
                                           ; SOURCE LINE # 1855
000A 7B01              MOV     R3,#01H
000C 7DE8              MOV     R5,#0E8H
000E 120000      R     LCALL   _Send2PortNWait
0011 EF                MOV     A,R7
0012 7017              JNZ     ?C0417
                                           ; SOURCE LINE # 1856
                                           ; SOURCE LINE # 1857
0014 900000      R     MOV     DPTR,#port
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 A3                INC     DPTR
001A E0                MOVX    A,@DPTR
001B FD                MOV     R5,A
001C 7B01              MOV     R3,#01H
001E 120000      R     LCALL   _Send2PortNWait
0021 EF                MOV     A,R7
0022 7007              JNZ     ?C0617
                                           ; SOURCE LINE # 1858
                                           ; SOURCE LINE # 1859
0024 900000      R     MOV     DPTR,#resault
0027 04                INC     A
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1860
0029 8005              SJMP    ?C0420
002B         ?C0417:
                                           ; SOURCE LINE # 1867
                                           ; SOURCE LINE # 1868
002B         ?C0617:
002B E4                CLR     A
002C 900000      R     MOV     DPTR,#resault
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1869
0030         ?C0420:
                                           ; SOURCE LINE # 1870
0030 900000      R     MOV     DPTR,#resault
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
                                           ; SOURCE LINE # 1871
0035         ?C0421:
0035 22                RET     
             ; FUNCTION _SetResolution (END)

             ; FUNCTION _Setsamplerate (BEGIN)
                                           ; SOURCE LINE # 1877
0000 900000      R     MOV     DPTR,#samplerate
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#port
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1878
                                           ; SOURCE LINE # 1880
000A 7B01              MOV     R3,#01H
000C 7DF3              MOV     R5,#0F3H
000E 120000      R     LCALL   _Send2PortNWait
0011 EF                MOV     A,R7
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 108 

0012 7017              JNZ     ?C0422
                                           ; SOURCE LINE # 1881
                                           ; SOURCE LINE # 1882
0014 900000      R     MOV     DPTR,#port
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 A3                INC     DPTR
001A E0                MOVX    A,@DPTR
001B FD                MOV     R5,A
001C 7B01              MOV     R3,#01H
001E 120000      R     LCALL   _Send2PortNWait
0021 EF                MOV     A,R7
0022 7007              JNZ     ?C0618
                                           ; SOURCE LINE # 1883
                                           ; SOURCE LINE # 1884
0024 900000      R     MOV     DPTR,#resault
0027 04                INC     A
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1885
0029 8005              SJMP    ?C0425
002B         ?C0422:
                                           ; SOURCE LINE # 1892
                                           ; SOURCE LINE # 1893
002B         ?C0618:
002B E4                CLR     A
002C 900000      R     MOV     DPTR,#resault
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1894
0030         ?C0425:
                                           ; SOURCE LINE # 1895
0030 900000      R     MOV     DPTR,#resault
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
                                           ; SOURCE LINE # 1896
0035         ?C0426:
0035 22                RET     
             ; FUNCTION _Setsamplerate (END)

             ; FUNCTION _SetIntellimouse (BEGIN)
                                           ; SOURCE LINE # 1911
0000 900000      R     MOV     DPTR,#port
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#DriverType
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1912
                                           ; SOURCE LINE # 1915
000A 900000      R     MOV     DPTR,#result
000D 7401              MOV     A,#01H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1917
0010 EF                MOV     A,R7
0011 6403              XRL     A,#03H
0013 7029              JNZ     ?C0427
                                           ; SOURCE LINE # 1918
                                           ; SOURCE LINE # 1919
0015 900000      R     MOV     DPTR,#index
0018 F0                MOVX    @DPTR,A
0019         ?C0428:
0019 900000      R     MOV     DPTR,#index
001C E0                MOVX    A,@DPTR
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 109 

001D FE                MOV     R6,A
001E C3                CLR     C
001F 9403              SUBB    A,#03H
0021 5050              JNC     ?C0432
                                           ; SOURCE LINE # 1920
                                           ; SOURCE LINE # 1921
0023 900000      R     MOV     DPTR,#port
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 EE                MOV     A,R6
0029 900000      R     MOV     DPTR,#Intellimouse_4Byte
002C 93                MOVC    A,@A+DPTR
002D FD                MOV     R5,A
002E 120000      R     LCALL   _Setsamplerate
0031 EF                MOV     A,R7
0032 7002              JNZ     ?C0430
                                           ; SOURCE LINE # 1922
                                           ; SOURCE LINE # 1923
                                           ; SOURCE LINE # 1924
0034 802F              SJMP    ?C0619
                                           ; SOURCE LINE # 1925
                                           ; SOURCE LINE # 1926
0036         ?C0430:
0036 900000      R     MOV     DPTR,#index
0039 E0                MOVX    A,@DPTR
003A 04                INC     A
003B F0                MOVX    @DPTR,A
003C 80DB              SJMP    ?C0428
                                           ; SOURCE LINE # 1927
003E         ?C0427:
                                           ; SOURCE LINE # 1928
003E 900000      R     MOV     DPTR,#DriverType
0041 E0                MOVX    A,@DPTR
0042 6404              XRL     A,#04H
0044 702D              JNZ     ?C0432
                                           ; SOURCE LINE # 1929
                                           ; SOURCE LINE # 1930
0046 900000      R     MOV     DPTR,#index
0049 F0                MOVX    @DPTR,A
004A         ?C0434:
004A 900000      R     MOV     DPTR,#index
004D E0                MOVX    A,@DPTR
004E FE                MOV     R6,A
004F C3                CLR     C
0050 9403              SUBB    A,#03H
0052 501F              JNC     ?C0432
                                           ; SOURCE LINE # 1931
                                           ; SOURCE LINE # 1932
0054 900000      R     MOV     DPTR,#port
0057 E0                MOVX    A,@DPTR
0058 FF                MOV     R7,A
0059 EE                MOV     A,R6
005A 900000      R     MOV     DPTR,#Intellimouse_5Byte
005D 93                MOVC    A,@A+DPTR
005E FD                MOV     R5,A
005F 120000      R     LCALL   _Setsamplerate
0062 EF                MOV     A,R7
0063 7006              JNZ     ?C0436
                                           ; SOURCE LINE # 1933
                                           ; SOURCE LINE # 1934
0065         ?C0619:
0065 900000      R     MOV     DPTR,#result
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 110 

0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1935
0069 8008              SJMP    ?C0432
                                           ; SOURCE LINE # 1936
                                           ; SOURCE LINE # 1937
006B         ?C0436:
006B 900000      R     MOV     DPTR,#index
006E E0                MOVX    A,@DPTR
006F 04                INC     A
0070 F0                MOVX    @DPTR,A
0071 80D7              SJMP    ?C0434
                                           ; SOURCE LINE # 1938
0073         ?C0432:
                                           ; SOURCE LINE # 1939
0073 900000      R     MOV     DPTR,#result
0076 E0                MOVX    A,@DPTR
0077 FF                MOV     R7,A
                                           ; SOURCE LINE # 1940
0078         ?C0438:
0078 22                RET     
             ; FUNCTION _SetIntellimouse (END)

             ; FUNCTION _ReadMouseID (BEGIN)
                                           ; SOURCE LINE # 1942
;---- Variable 'port' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1943
                                           ; SOURCE LINE # 1944
0000 7B02              MOV     R3,#02H
0002 7DF2              MOV     R5,#0F2H
0004 120000      R     LCALL   _Send2PortNWait
0007 EF                MOV     A,R7
0008 7005              JNZ     ?C0439
                                           ; SOURCE LINE # 1945
                                           ; SOURCE LINE # 1946
000A 7800        E     MOV     R0,#LOW PS2IFAck
000C E6                MOV     A,@R0
000D FF                MOV     R7,A
000E 22                RET     
                                           ; SOURCE LINE # 1947
000F         ?C0439:
                                           ; SOURCE LINE # 1948
000F 7FFF              MOV     R7,#0FFH
                                           ; SOURCE LINE # 1949
0011         ?C0440:
0011 22                RET     
             ; FUNCTION _ReadMouseID (END)

             ; FUNCTION _ConfigExtMouse (BEGIN)
                                           ; SOURCE LINE # 1954
0000 900000      R     MOV     DPTR,#portnum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1955
                                           ; SOURCE LINE # 1957
0005 E4                CLR     A
0006 A3                INC     DPTR
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1959
0008 7800        E     MOV     R0,#LOW TPResolution
000A E6                MOV     A,@R0
000B FD                MOV     R5,A
000C 120000      R     LCALL   _SetResolution
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 111 

000F EF                MOV     A,R7
0010 6011              JZ      ?C0441
                                           ; SOURCE LINE # 1960
                                           ; SOURCE LINE # 1961
0012 900000      R     MOV     DPTR,#portnum
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 120000      R     LCALL   _EnableMouse
001A EF                MOV     A,R7
001B 6006              JZ      ?C0441
                                           ; SOURCE LINE # 1962
                                           ; SOURCE LINE # 1963
001D 900000      R     MOV     DPTR,#result
0020 7401              MOV     A,#01H
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1964
                                           ; SOURCE LINE # 1965
0023         ?C0441:
                                           ; SOURCE LINE # 1966
0023 900000      R     MOV     DPTR,#result
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
                                           ; SOURCE LINE # 1967
0028         ?C0443:
0028 22                RET     
             ; FUNCTION _ConfigExtMouse (END)

             ; FUNCTION CheckAuxMux (BEGIN)
                                           ; SOURCE LINE # 1972
;---- Variable 'data_byte' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1973
                                           ; SOURCE LINE # 1975
;---- Variable 'current' assigned to Register 'R6' ----
0000 7E01              MOV     R6,#01H
                                           ; SOURCE LINE # 1976
0002 E500        E     MOV     A,KBHIData
0004 B4F009            CJNE    A,#0F0H,?C0444
                                           ; SOURCE LINE # 1977
                                           ; SOURCE LINE # 1978
0007 D200        E     SETB    MULPX_Mx_state2
                                           ; SOURCE LINE # 1979
0009 C200        E     CLR     MULPX_Mx_state3
                                           ; SOURCE LINE # 1980
000B 1E                DEC     R6
                                           ; SOURCE LINE # 1981
000C 7FF0              MOV     R7,#0F0H
                                           ; SOURCE LINE # 1982
000E 8030              SJMP    ?C0445
0010         ?C0444:
                                           ; SOURCE LINE # 1983
0010 E500        E     MOV     A,KBHIData
0012 B4560D            CJNE    A,#056H,?C0446
                                           ; SOURCE LINE # 1984
                                           ; SOURCE LINE # 1985
0015 300028      E     JNB     MULPX_Mx_state2,?C0445
                                           ; SOURCE LINE # 1986
                                           ; SOURCE LINE # 1987
0018 C200        E     CLR     MULPX_Mx_state2
                                           ; SOURCE LINE # 1988
001A D200        E     SETB    MULPX_Mx_state3
                                           ; SOURCE LINE # 1989
001C E4                CLR     A
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 112 

001D FE                MOV     R6,A
                                           ; SOURCE LINE # 1990
001E 7F56              MOV     R7,#056H
                                           ; SOURCE LINE # 1991
                                           ; SOURCE LINE # 1992
0020 801E              SJMP    ?C0445
0022         ?C0446:
                                           ; SOURCE LINE # 1993
0022 E500        E     MOV     A,KBHIData
0024 B4A409            CJNE    A,#0A4H,?C0449
                                           ; SOURCE LINE # 1994
                                           ; SOURCE LINE # 1995
0027 300016      E     JNB     MULPX_Mx_state3,?C0445
                                           ; SOURCE LINE # 1996
                                           ; SOURCE LINE # 1997
002A D200        E     SETB    MULPX_Multiplex
                                           ; SOURCE LINE # 1998
002C 7F11              MOV     R7,#011H
                                           ; SOURCE LINE # 1999
                                           ; SOURCE LINE # 2000
002E 8010              SJMP    ?C0445
0030         ?C0449:
                                           ; SOURCE LINE # 2001
0030 E500        E     MOV     A,KBHIData
0032 B4A509            CJNE    A,#0A5H,?C0452
                                           ; SOURCE LINE # 2002
                                           ; SOURCE LINE # 2003
0035 300008      E     JNB     MULPX_Mx_state3,?C0445
                                           ; SOURCE LINE # 2004
                                           ; SOURCE LINE # 2005
0038 C200        E     CLR     MULPX_Multiplex
                                           ; SOURCE LINE # 2006
003A 7F11              MOV     R7,#011H
                                           ; SOURCE LINE # 2007
                                           ; SOURCE LINE # 2008
003C 8002              SJMP    ?C0445
003E         ?C0452:
                                           ; SOURCE LINE # 2010
                                           ; SOURCE LINE # 2011
003E AF00        E     MOV     R7,KBHIData
                                           ; SOURCE LINE # 2012
0040         ?C0445:
                                           ; SOURCE LINE # 2014
0040 EE                MOV     A,R6
0041 6004              JZ      ?C0455
                                           ; SOURCE LINE # 2015
                                           ; SOURCE LINE # 2016
0043 C200        E     CLR     MULPX_Mx_state2
                                           ; SOURCE LINE # 2017
0045 C200        E     CLR     MULPX_Mx_state3
                                           ; SOURCE LINE # 2018
0047         ?C0455:
                                           ; SOURCE LINE # 2019
                                           ; SOURCE LINE # 2020
0047         ?C0456:
0047 22                RET     
             ; FUNCTION CheckAuxMux (END)

             ; FUNCTION _OnOffPS2Channel_X (BEGIN)
                                           ; SOURCE LINE # 2029
;---- Variable 'portnum' assigned to Register 'R7' ----
;---- Variable 'active' assigned to Register 'R5' ----
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 113 

                                           ; SOURCE LINE # 2030
                                           ; SOURCE LINE # 2031
0000 EF                MOV     A,R7
0001 700B              JNZ     ?C0457
                                           ; SOURCE LINE # 2032
                                           ; SOURCE LINE # 2033
0003 120000      R     LCALL   L?0667
0006 705F              JNZ     ?C0460
0008 120000      R     LCALL   L?0669
000B 601E              JZ      ?C0461
                                           ; SOURCE LINE # 2034
000D 22                RET     
                                           ; SOURCE LINE # 2036
                                           ; SOURCE LINE # 2037
000E         ?C0457:
                                           ; SOURCE LINE # 2038
000E EF                MOV     A,R7
000F B4010B            CJNE    A,#01H,?C0462
                                           ; SOURCE LINE # 2039
                                           ; SOURCE LINE # 2040
0012 120000      R     LCALL   L?0671
0015 7050              JNZ     ?C0460
0017 120000      R     LCALL   L?0673
001A 600F              JZ      ?C0461
                                           ; SOURCE LINE # 2041
001C         ?C0620:
001C 22                RET     
                                           ; SOURCE LINE # 2043
                                           ; SOURCE LINE # 2044
001D         ?C0462:
                                           ; SOURCE LINE # 2045
001D EF                MOV     A,R7
001E B4020A            CJNE    A,#02H,?C0461
                                           ; SOURCE LINE # 2046
                                           ; SOURCE LINE # 2047
0021 120000      R     LCALL   L?0675
0024 7041              JNZ     ?C0460
0026 120000      R     LCALL   L?0677
0029 703C              JNZ     ?C0460
                                           ; SOURCE LINE # 2048
                                           ; SOURCE LINE # 2050
                                           ; SOURCE LINE # 2051
002B         ?C0461:
                                           ; SOURCE LINE # 2053
002B 7400        E     MOV     A,#LOW AuxFlags
002D 2F                ADD     A,R7
002E F8                MOV     R0,A
002F E6                MOV     A,@R0
0030 30E719            JNB     ACC.7,?C0469
                                           ; SOURCE LINE # 2054
                                           ; SOURCE LINE # 2055
0033 300031      E     JNB     MouseDriverIn,?C0460
                                           ; SOURCE LINE # 2056
                                           ; SOURCE LINE # 2057
0036 ED                MOV     A,R5
0037 700A              JNZ     ?C0471
                                           ; SOURCE LINE # 2058
                                           ; SOURCE LINE # 2059
0039 7400        E     MOV     A,#LOW AuxFlags2
003B 2F                ADD     A,R7
003C F8                MOV     R0,A
003D 7401              MOV     A,#01H
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 114 

003F 46                ORL     A,@R0
0040 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2060
0041 8020              SJMP    ?C0621
0043         ?C0471:
                                           ; SOURCE LINE # 2061
0043 ED                MOV     A,R5
0044 B40103            CJNE    A,#01H,?C0472
                                           ; SOURCE LINE # 2062
                                           ; SOURCE LINE # 2063
0047 120000      R     LCALL   L?0682
                                           ; SOURCE LINE # 2064
004A         ?C0472:
                                           ; SOURCE LINE # 2065
                                           ; SOURCE LINE # 2066
                                           ; SOURCE LINE # 2067
004A 8017              SJMP    ?C0621
004C         ?C0469:
                                           ; SOURCE LINE # 2069
                                           ; SOURCE LINE # 2070
004C 300018      E     JNB     KeyboardDriverIn,?C0460
                                           ; SOURCE LINE # 2071
                                           ; SOURCE LINE # 2072
004F ED                MOV     A,R5
0050 700A              JNZ     ?C0476
                                           ; SOURCE LINE # 2073
                                           ; SOURCE LINE # 2074
0052 7400        E     MOV     A,#LOW AuxFlags2
0054 2F                ADD     A,R7
0055 F8                MOV     R0,A
0056 7401              MOV     A,#01H
0058 46                ORL     A,@R0
0059 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2075
005A 8007              SJMP    ?C0477
005C         ?C0476:
                                           ; SOURCE LINE # 2076
005C ED                MOV     A,R5
005D B40103            CJNE    A,#01H,?C0477
                                           ; SOURCE LINE # 2077
                                           ; SOURCE LINE # 2078
0060 120000      R     LCALL   L?0682
                                           ; SOURCE LINE # 2079
0063         ?C0477:
                                           ; SOURCE LINE # 2080
0063         ?C0621:
0063 E4                CLR     A
0064 7800        E     MOV     R0,#LOW PS2_ReTryCunt
0066 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2081
                                           ; SOURCE LINE # 2082
                                           ; SOURCE LINE # 2083
0067         ?C0460:
0067 22                RET     
             ; FUNCTION _OnOffPS2Channel_X (END)

             ; FUNCTION _KBCmdAckByteCunt (BEGIN)
                                           ; SOURCE LINE # 2088
;---- Variable 'ackcunt' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2089
                                           ; SOURCE LINE # 2090
0000 7800        E     MOV     R0,#LOW Main_KB_ACK_CUNT
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 115 

0002 EF                MOV     A,R7
0003 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2091
0004 22                RET     
             ; FUNCTION _KBCmdAckByteCunt (END)

             ; FUNCTION _SetOtherKBNeedUpdataFlag (BEGIN)
                                           ; SOURCE LINE # 2096
;---- Variable 'KBCmd' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2097
                                           ; SOURCE LINE # 2100
;---- Variable 'index' assigned to Register 'R6' ----
0000 E4                CLR     A
0001 FE                MOV     R6,A
0002         ?C0480:
                                           ; SOURCE LINE # 2101
                                           ; SOURCE LINE # 2102
0002 7400        E     MOV     A,#LOW AuxFlags
0004 2E                ADD     A,R6
0005 F8                MOV     R0,A
0006 E6                MOV     A,@R0
0007 30E64E            JNB     ACC.6,?C0482
                                           ; SOURCE LINE # 2103
                                           ; SOURCE LINE # 2104
000A EE                MOV     A,R6
000B 2401              ADD     A,#01H
000D FD                MOV     R5,A
000E E4                CLR     A
000F 33                RLC     A
0010 FC                MOV     R4,A
0011 7800        E     MOV     R0,#LOW Main_KB_CHN
0013 E6                MOV     A,@R0
0014 6D                XRL     A,R5
0015 7001              JNZ     ?C0578
0017 EC                MOV     A,R4
0018         ?C0578:
0018 603E              JZ      ?C0482
                                           ; SOURCE LINE # 2105
                                           ; SOURCE LINE # 2106
001A 7400        E     MOV     A,#LOW AuxFlags
001C 2E                ADD     A,R6
001D F8                MOV     R0,A
001E E6                MOV     A,@R0
001F 20E336            JB      ACC.3,?C0482
                                           ; SOURCE LINE # 2107
                                           ; SOURCE LINE # 2108
0022 EF                MOV     A,R7
0023 B4ED0A            CJNE    A,#0EDH,?C0486
                                           ; SOURCE LINE # 2109
                                           ; SOURCE LINE # 2110
0026 7400        E     MOV     A,#LOW AuxFlags_KB_CMD
0028 2E                ADD     A,R6
0029 F8                MOV     R0,A
002A 7408              MOV     A,#08H
002C 46                ORL     A,@R0
002D F6                MOV     @R0,A
                                           ; SOURCE LINE # 2111
002E 8028              SJMP    ?C0482
0030         ?C0486:
                                           ; SOURCE LINE # 2112
0030 EF                MOV     A,R7
0031 B4F30A            CJNE    A,#0F3H,?C0488
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 116 

                                           ; SOURCE LINE # 2113
                                           ; SOURCE LINE # 2114
0034 7400        E     MOV     A,#LOW AuxFlags_KB_CMD
0036 2E                ADD     A,R6
0037 F8                MOV     R0,A
0038 7404              MOV     A,#04H
003A 46                ORL     A,@R0
003B F6                MOV     @R0,A
                                           ; SOURCE LINE # 2115
003C 801A              SJMP    ?C0482
003E         ?C0488:
                                           ; SOURCE LINE # 2116
003E EF                MOV     A,R7
003F B4F40A            CJNE    A,#0F4H,?C0490
                                           ; SOURCE LINE # 2117
                                           ; SOURCE LINE # 2118
0042 7400        E     MOV     A,#LOW AuxFlags_KB_CMD
0044 2E                ADD     A,R6
0045 F8                MOV     R0,A
0046 7402              MOV     A,#02H
0048 46                ORL     A,@R0
0049 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2119
004A 800C              SJMP    ?C0482
004C         ?C0490:
                                           ; SOURCE LINE # 2120
004C EF                MOV     A,R7
004D B4F508            CJNE    A,#0F5H,?C0482
                                           ; SOURCE LINE # 2121
                                           ; SOURCE LINE # 2122
0050 7400        E     MOV     A,#LOW AuxFlags_KB_CMD
0052 2E                ADD     A,R6
0053 F8                MOV     R0,A
0054 7401              MOV     A,#01H
0056 46                ORL     A,@R0
0057 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2123
                                           ; SOURCE LINE # 2124
                                           ; SOURCE LINE # 2125
                                           ; SOURCE LINE # 2126
                                           ; SOURCE LINE # 2127
0058         ?C0482:
0058 0E                INC     R6
0059 EE                MOV     A,R6
005A 6403              XRL     A,#03H
005C 70A4              JNZ     ?C0480
                                           ; SOURCE LINE # 2128
005E         ?C0493:
005E 22                RET     
             ; FUNCTION _SetOtherKBNeedUpdataFlag (END)

             ; FUNCTION SetStartScanAUXFlag (BEGIN)
                                           ; SOURCE LINE # 2133
                                           ; SOURCE LINE # 2134
                                           ; SOURCE LINE # 2135
0000 D200        E     SETB    StartENAUXDevice
                                           ; SOURCE LINE # 2136
0002 22                RET     
             ; FUNCTION SetStartScanAUXFlag (END)

             ; FUNCTION _AUXData_To_Host_nWait (BEGIN)
                                           ; SOURCE LINE # 2141
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 117 

;---- Variable 'portnum' assigned to Register 'R5' ----
;---- Variable 'data_byte' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2142
                                           ; SOURCE LINE # 2143
0000 ED                MOV     A,R5
0001 F4                CPL     A
0002 6004              JZ      ?C0495
                                           ; SOURCE LINE # 2144
                                           ; SOURCE LINE # 2145
0004 7800        E     MOV     R0,#LOW AUXPortNum
0006 ED                MOV     A,R5
0007 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2146
0008         ?C0495:
                                           ; SOURCE LINE # 2147
0008 120000      R     LCALL   _SendFromAux
                                           ; SOURCE LINE # 2149
000B C28E              CLR     TR1
                                           ; SOURCE LINE # 2150
000D C2AB              CLR     ET1
                                           ; SOURCE LINE # 2151
000F 00                NOP     
                                           ; SOURCE LINE # 2152
0010 00                NOP     
                                           ; SOURCE LINE # 2153
0011 00                NOP     
                                           ; SOURCE LINE # 2154
0012 00                NOP     
                                           ; SOURCE LINE # 2155
0013 758DB2            MOV     TH1,#0B2H
                                           ; SOURCE LINE # 2156
0016 758B19            MOV     TL1,#019H
                                           ; SOURCE LINE # 2157
0019 C28F              CLR     TF1
                                           ; SOURCE LINE # 2158
001B D28E              SETB    TR1
001D         ?C0496:
                                           ; SOURCE LINE # 2160
001D 208F0E            JB      TF1,?C0497
                                           ; SOURCE LINE # 2161
                                           ; SOURCE LINE # 2162
0020 900000      E     MOV     DPTR,#KBHISR
0023 E0                MOVX    A,@DPTR
0024 30E007            JNB     ACC.0,?C0497
                                           ; SOURCE LINE # 2163
                                           ; SOURCE LINE # 2164
                                           ; SOURCE LINE # 2165
0027         ?C0498:
                                           ; SOURCE LINE # 2166
0027 900000      E     MOV     DPTR,#KBHISR
002A E0                MOVX    A,@DPTR
002B 30E1EF            JNB     ACC.1,?C0496
                                           ; SOURCE LINE # 2167
                                           ; SOURCE LINE # 2168
                                           ; SOURCE LINE # 2169
                                           ; SOURCE LINE # 2170
002E         ?C0497:
                                           ; SOURCE LINE # 2172
                                           ; SOURCE LINE # 2173
                                           ; SOURCE LINE # 2174
002E 120000      R     LCALL   L?0649
                                           ; SOURCE LINE # 2175
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 118 

0031 22                RET     
             ; FUNCTION _AUXData_To_Host_nWait (END)

             ; FUNCTION ReSendPS2PendingData (BEGIN)
                                           ; SOURCE LINE # 2180
                                           ; SOURCE LINE # 2181
                                           ; SOURCE LINE # 2182
0000 7800        E     MOV     R0,#LOW MSPending
0002 E6                MOV     A,@R0
0003 B43302            CJNE    A,#033H,?C0502
                                           ; SOURCE LINE # 2183
                                           ; SOURCE LINE # 2184
0006 D200        E     SETB    F_Service_Send_PS2
                                           ; SOURCE LINE # 2185
                                           ; SOURCE LINE # 2186
0008         ?C0502:
0008 22                RET     
             ; FUNCTION ReSendPS2PendingData (END)

             ; FUNCTION _CheckNSetMainKBCHN (BEGIN)
                                           ; SOURCE LINE # 2191
;---- Variable 'PortNum' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2192
                                           ; SOURCE LINE # 2193
0000 7800        E     MOV     R0,#LOW Main_KB_CHN
0002 E6                MOV     A,@R0
0003 700A              JNZ     ?C0504
                                           ; SOURCE LINE # 2194
                                           ; SOURCE LINE # 2195
0005 7400        E     MOV     A,#LOW AuxFlags
0007 120000      R     LCALL   L?0683
                                           ; SOURCE LINE # 2196
000A EF                MOV     A,R7
000B 04                INC     A
000C 7800        E     MOV     R0,#LOW Main_KB_CHN
000E F6                MOV     @R0,A
                                           ; SOURCE LINE # 2197
                                           ; SOURCE LINE # 2198
000F         ?C0504:
000F 22                RET     
             ; FUNCTION _CheckNSetMainKBCHN (END)

             ; FUNCTION _CheckNSetMainMSCHN (BEGIN)
                                           ; SOURCE LINE # 2203
;---- Variable 'PortNum' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2204
                                           ; SOURCE LINE # 2205
0000 7800        E     MOV     R0,#LOW Main_MOUSE_CHN
0002 E6                MOV     A,@R0
0003 7006              JNZ     ?C0506
                                           ; SOURCE LINE # 2206
                                           ; SOURCE LINE # 2207
0005 7400        E     MOV     A,#LOW AuxFlags
0007 2F                ADD     A,R7
                                           ; SOURCE LINE # 2208
0008 120000      R     LCALL   L?0686
                                           ; SOURCE LINE # 2209
                                           ; SOURCE LINE # 2210
000B         ?C0506:
000B 22                RET     
             ; FUNCTION _CheckNSetMainMSCHN (END)

C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 119 

             ; FUNCTION ResetMSPendingData (BEGIN)
                                           ; SOURCE LINE # 2215
                                           ; SOURCE LINE # 2216
                                           ; SOURCE LINE # 2217
0000 7800        E     MOV     R0,#LOW MSPending
0002 7688              MOV     @R0,#088H
                                           ; SOURCE LINE # 2218
0004 C200        E     CLR     F_Service_Send_PS2
                                           ; SOURCE LINE # 2219
0006 22                RET     
             ; FUNCTION ResetMSPendingData (END)

             ; FUNCTION DisablePS2Port_0 (BEGIN)
                                           ; SOURCE LINE # 2227
                                           ; SOURCE LINE # 2228
                                           ; SOURCE LINE # 2229
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 FF                MOV     R7,A
0003 020000      R     LJMP    _OnOffPS2Channel_X
             ; FUNCTION DisablePS2Port_0 (END)

             ; FUNCTION DisablePS2Port_1 (BEGIN)
                                           ; SOURCE LINE # 2235
                                           ; SOURCE LINE # 2236
                                           ; SOURCE LINE # 2237
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 7F01              MOV     R7,#01H
0004 020000      R     LJMP    _OnOffPS2Channel_X
             ; FUNCTION DisablePS2Port_1 (END)

             ; FUNCTION DisablePS2Port_2 (BEGIN)
                                           ; SOURCE LINE # 2243
                                           ; SOURCE LINE # 2244
                                           ; SOURCE LINE # 2245
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 7F02              MOV     R7,#02H
0004 020000      R     LJMP    _OnOffPS2Channel_X
             ; FUNCTION DisablePS2Port_2 (END)

             ; FUNCTION EnablePS2Port_0 (BEGIN)
                                           ; SOURCE LINE # 2251
                                           ; SOURCE LINE # 2252
                                           ; SOURCE LINE # 2253
0000 7D01              MOV     R5,#01H
0002 E4                CLR     A
0003 FF                MOV     R7,A
0004 020000      R     LJMP    _OnOffPS2Channel_X
             ; FUNCTION EnablePS2Port_0 (END)

             ; FUNCTION EnablePS2Port_1 (BEGIN)
                                           ; SOURCE LINE # 2259
                                           ; SOURCE LINE # 2260
                                           ; SOURCE LINE # 2261
0000 7D01              MOV     R5,#01H
0002 7F01              MOV     R7,#01H
0004 020000      R     LJMP    _OnOffPS2Channel_X
             ; FUNCTION EnablePS2Port_1 (END)

             ; FUNCTION EnablePS2Port_2 (BEGIN)
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 120 

                                           ; SOURCE LINE # 2267
                                           ; SOURCE LINE # 2268
                                           ; SOURCE LINE # 2269
0000 7D01              MOV     R5,#01H
0002 7F02              MOV     R7,#02H
0004 020000      R     LJMP    _OnOffPS2Channel_X
             ; FUNCTION EnablePS2Port_2 (END)

             ; FUNCTION PS2_PowerOff (BEGIN)
                                           ; SOURCE LINE # 2275
                                           ; SOURCE LINE # 2276
                                           ; SOURCE LINE # 2278
0000 120000      R     LCALL   ResetMSPendingData
                                           ; SOURCE LINE # 2279
0003 120000      R     LCALL   ClearPS2IFPendingEvent
                                           ; SOURCE LINE # 2281
0006 120000      R     LCALL   ClearAUXScanTimeOutCunt
                                           ; SOURCE LINE # 2282
0009 E4                CLR     A
000A FF                MOV     R7,A
000B 120000      R     LCALL   _SetAUXScanIndexHS
                                           ; SOURCE LINE # 2283
000E E4                CLR     A
000F 7800        E     MOV     R0,#LOW PS2_ReTryCunt
0011 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2284
0012 C200        E     CLR     SendtoAUXFlag
                                           ; SOURCE LINE # 2285
0014 C200        E     CLR     ECSendtoAUXFlag
                                           ; SOURCE LINE # 2286
0016 7800        E     MOV     R0,#LOW AUXInactiveCounter
0018 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2287
0019 C200        E     CLR     StartENAUXDevice
                                           ; SOURCE LINE # 2289
;---- Variable 'index' assigned to Register 'R7' ----
001B FF                MOV     R7,A
001C         ?C0514:
                                           ; SOURCE LINE # 2290
                                           ; SOURCE LINE # 2291
001C 7400        E     MOV     A,#LOW AuxFlags
001E 2F                ADD     A,R7
001F F8                MOV     R0,A
0020 E4                CLR     A
0021 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2292
0022 7400        E     MOV     A,#LOW AuxFlags2
0024 2F                ADD     A,R7
0025 F8                MOV     R0,A
0026 E4                CLR     A
0027 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2293
0028 0F                INC     R7
0029 EF                MOV     A,R7
002A B403EF            CJNE    A,#03H,?C0514
002D         ?C0515:
                                           ; SOURCE LINE # 2295
002D 120000      R     LCALL   L?0667
0030 7015              JNZ     ?C0517
0032 120000      R     LCALL   L?0669
0035 7010              JNZ     ?C0517
                                           ; SOURCE LINE # 2296
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 121 

                                           ; SOURCE LINE # 2297
0037 900000      E     MOV     DPTR,#GPCRF0
003A 7442              MOV     A,#042H
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2298
003D 900000      E     MOV     DPTR,#GPCRF1
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2299
0041 7800        E     MOV     R0,#LOW AuxFlags2
0043 E6                MOV     A,@R0
0044 4480              ORL     A,#080H
0046 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2300
0047         ?C0517:
                                           ; SOURCE LINE # 2302
0047 120000      R     LCALL   L?0671
004A 7015              JNZ     ?C0518
004C 120000      R     LCALL   L?0673
004F 7010              JNZ     ?C0518
                                           ; SOURCE LINE # 2303
                                           ; SOURCE LINE # 2304
0051 900000      E     MOV     DPTR,#GPCRF2
0054 7442              MOV     A,#042H
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2305
0057 900000      E     MOV     DPTR,#GPCRF3
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2306
005B 7800        E     MOV     R0,#LOW AuxFlags2+01H
005D E6                MOV     A,@R0
005E 4480              ORL     A,#080H
0060 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2307
0061         ?C0518:
                                           ; SOURCE LINE # 2309
0061 120000      R     LCALL   L?0675
0064 7015              JNZ     ?C0520
0066 120000      R     LCALL   L?0677
0069 7010              JNZ     ?C0520
                                           ; SOURCE LINE # 2310
                                           ; SOURCE LINE # 2311
006B 900000      E     MOV     DPTR,#GPCRF4
006E 7442              MOV     A,#042H
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2312
0071 900000      E     MOV     DPTR,#GPCRF5
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2313
0075 7800        E     MOV     R0,#LOW AuxFlags2+02H
0077 E6                MOV     A,@R0
0078 4480              ORL     A,#080H
007A F6                MOV     @R0,A
                                           ; SOURCE LINE # 2314
                                           ; SOURCE LINE # 2315
007B         ?C0520:
007B 22                RET     
             ; FUNCTION PS2_PowerOff (END)

             ; FUNCTION PS2_PowerOn (BEGIN)
                                           ; SOURCE LINE # 2320
                                           ; SOURCE LINE # 2321
                                           ; SOURCE LINE # 2322
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 122 

0000 120000      R     LCALL   PS2DeviceInactive
                                           ; SOURCE LINE # 2323
0003 7800        E     MOV     R0,#LOW AuxFlags2
0005 E6                MOV     A,@R0
0006 30E70D            JNB     ACC.7,?C0521
                                           ; SOURCE LINE # 2324
                                           ; SOURCE LINE # 2325
0009 E6                MOV     A,@R0
000A 547F              ANL     A,#07FH
000C F6                MOV     @R0,A
                                           ; SOURCE LINE # 2326
000D E4                CLR     A
000E 900000      E     MOV     DPTR,#GPCRF0
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2327
0012 900000      E     MOV     DPTR,#GPCRF1
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2328
0016         ?C0521:
                                           ; SOURCE LINE # 2330
0016 7800        E     MOV     R0,#LOW AuxFlags2+01H
0018 E6                MOV     A,@R0
0019 30E70D            JNB     ACC.7,?C0522
                                           ; SOURCE LINE # 2331
                                           ; SOURCE LINE # 2332
001C E6                MOV     A,@R0
001D 547F              ANL     A,#07FH
001F F6                MOV     @R0,A
                                           ; SOURCE LINE # 2333
0020 E4                CLR     A
0021 900000      E     MOV     DPTR,#GPCRF2
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2334
0025 900000      E     MOV     DPTR,#GPCRF3
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2335
0029         ?C0522:
                                           ; SOURCE LINE # 2337
0029 7800        E     MOV     R0,#LOW AuxFlags2+02H
002B E6                MOV     A,@R0
002C 30E70D            JNB     ACC.7,?C0524
                                           ; SOURCE LINE # 2338
                                           ; SOURCE LINE # 2339
002F E6                MOV     A,@R0
0030 547F              ANL     A,#07FH
0032 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2340
0033 E4                CLR     A
0034 900000      E     MOV     DPTR,#GPCRF4
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2341
0038 900000      E     MOV     DPTR,#GPCRF5
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2342
                                           ; SOURCE LINE # 2343
003C         ?C0524:
003C 22                RET     
             ; FUNCTION PS2_PowerOn (END)

             ; FUNCTION PowerOffClearTPPendingData (BEGIN)
                                           ; SOURCE LINE # 2348
                                           ; SOURCE LINE # 2349
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 123 

                                           ; SOURCE LINE # 2350
0000 120000      R     LCALL   ResetMSPendingData
                                           ; SOURCE LINE # 2351
0003 020000      R     LJMP    ClearPS2IFPendingEvent
             ; FUNCTION PowerOffClearTPPendingData (END)

             ; FUNCTION _SetPS2CmdACKCounter (BEGIN)
                                           ; SOURCE LINE # 2354
;---- Variable 'ackcunt' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2355
                                           ; SOURCE LINE # 2356
0000 7800        E     MOV     R0,#LOW TPACKCounter
0002 EF                MOV     A,R7
0003 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2357
0004 22                RET     
             ; FUNCTION _SetPS2CmdACKCounter (END)

             ; FUNCTION _WaitECSend2PortACK (BEGIN)
                                           ; SOURCE LINE # 2362
0000 900000      R     MOV     DPTR,#PortNum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2363
                                           ; SOURCE LINE # 2367
0005 E4                CLR     A
0006 A3                INC     DPTR
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2368
0008 900000      R     MOV     DPTR,#PortNum
000B E0                MOVX    A,@DPTR
000C 2400        E     ADD     A,#LOW AuxFlags
000E F8                MOV     R0,A
000F E6                MOV     A,@R0
0010 7004              JNZ     ?C0527
                                           ; SOURCE LINE # 2369
                                           ; SOURCE LINE # 2370
0012 A3                INC     DPTR
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 22                RET     
                                           ; SOURCE LINE # 2371
0016         ?C0527:
                                           ; SOURCE LINE # 2373
0016 C28E              CLR     TR1
                                           ; SOURCE LINE # 2374
0018 C2AB              CLR     ET1
                                           ; SOURCE LINE # 2375
001A 00                NOP     
                                           ; SOURCE LINE # 2376
001B 00                NOP     
                                           ; SOURCE LINE # 2377
001C 00                NOP     
                                           ; SOURCE LINE # 2378
001D 00                NOP     
                                           ; SOURCE LINE # 2379
001E E4                CLR     A
001F F58D              MOV     TH1,A
                                           ; SOURCE LINE # 2380
0021 758B01            MOV     TL1,#01H
                                           ; SOURCE LINE # 2381
0024 C28F              CLR     TF1
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 124 

                                           ; SOURCE LINE # 2382
0026 D28E              SETB    TR1
0028         ?C0529:
                                           ; SOURCE LINE # 2384
0028 208F2C            JB      TF1,?C0530
                                           ; SOURCE LINE # 2385
                                           ; SOURCE LINE # 2386
002B 3000FA      E     JNB     F_Service_PS2,?C0529
                                           ; SOURCE LINE # 2387
                                           ; SOURCE LINE # 2388
002E 300013      E     JNB     SendtoAUXFlag,?C0532
                                           ; SOURCE LINE # 2389
                                           ; SOURCE LINE # 2390
0031 C200        E     CLR     F_Service_PS2
                                           ; SOURCE LINE # 2391
0033 C200        E     CLR     SendtoAUXFlag
                                           ; SOURCE LINE # 2392
0035 7800        E     MOV     R0,#LOW PS2_IRQ_Channel
0037 76FF              MOV     @R0,#0FFH
                                           ; SOURCE LINE # 2395
0039 900000      R     MOV     DPTR,#PortNum
003C 120000      R     LCALL   L?0680
                                           ; SOURCE LINE # 2396
003F 120000      R     LCALL   ClearAUXScanTimeOutCunt
                                           ; SOURCE LINE # 2397
0042 80E4              SJMP    ?C0529
0044         ?C0532:
                                           ; SOURCE LINE # 2399
                                           ; SOURCE LINE # 2400
0044 7800        E     MOV     R0,#LOW PS2_IRQ_Channel
0046 E6                MOV     A,@R0
0047 FF                MOV     R7,A
;---- Variable 'channel' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2401
0048 C200        E     CLR     F_Service_PS2
                                           ; SOURCE LINE # 2402
004A C200        E     CLR     ECSendtoAUXFlag
                                           ; SOURCE LINE # 2403
004C 76FF              MOV     @R0,#0FFH
                                           ; SOURCE LINE # 2404
004E E4                CLR     A
004F FD                MOV     R5,A
0050 120000      R     LCALL   _ProcessECTestAUXACK
                                           ; SOURCE LINE # 2405
0053 C28E              CLR     TR1
                                           ; SOURCE LINE # 2406
0055 C28F              CLR     TF1
                                           ; SOURCE LINE # 2407
                                           ; SOURCE LINE # 2408
                                           ; SOURCE LINE # 2409
                                           ; SOURCE LINE # 2410
0057         ?C0530:
                                           ; SOURCE LINE # 2412
0057 308F06            JNB     TF1,?C0534
                                           ; SOURCE LINE # 2413
                                           ; SOURCE LINE # 2414
005A 900000      R     MOV     DPTR,#timeout
005D 7401              MOV     A,#01H
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2415
0060         ?C0534:
                                           ; SOURCE LINE # 2417
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 125 

                                           ; SOURCE LINE # 2418
                                           ; SOURCE LINE # 2419
0060 120000      R     LCALL   L?0649
                                           ; SOURCE LINE # 2420
0063 900000      R     MOV     DPTR,#timeout
0066 E0                MOVX    A,@DPTR
0067 FF                MOV     R7,A
                                           ; SOURCE LINE # 2421
0068         ?C0528:
0068 22                RET     
             ; FUNCTION _WaitECSend2PortACK (END)

             ; FUNCTION _WaitPS2DeviceACK (BEGIN)
                                           ; SOURCE LINE # 2427
0000 900000      R     MOV     DPTR,#PortNum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2428
                                           ; SOURCE LINE # 2429
0005 C28E              CLR     TR1
                                           ; SOURCE LINE # 2430
0007 C2AB              CLR     ET1
                                           ; SOURCE LINE # 2431
0009 00                NOP     
                                           ; SOURCE LINE # 2432
000A 00                NOP     
                                           ; SOURCE LINE # 2433
000B 00                NOP     
                                           ; SOURCE LINE # 2434
000C 00                NOP     
                                           ; SOURCE LINE # 2435
000D 758D88            MOV     TH1,#088H
                                           ; SOURCE LINE # 2436
0010 758B4F            MOV     TL1,#04FH
                                           ; SOURCE LINE # 2437
0013 C28F              CLR     TF1
                                           ; SOURCE LINE # 2438
0015 D28E              SETB    TR1
0017         ?C0535:
                                           ; SOURCE LINE # 2440
0017 208F19            JB      TF1,?C0536
                                           ; SOURCE LINE # 2441
                                           ; SOURCE LINE # 2442
001A 3000FA      E     JNB     F_Service_PS2,?C0535
                                           ; SOURCE LINE # 2443
                                           ; SOURCE LINE # 2444
001D 300013      E     JNB     SendtoAUXFlag,?C0536
                                           ; SOURCE LINE # 2445
                                           ; SOURCE LINE # 2446
0020 C200        E     CLR     F_Service_PS2
                                           ; SOURCE LINE # 2447
0022 C200        E     CLR     SendtoAUXFlag
                                           ; SOURCE LINE # 2448
0024 7800        E     MOV     R0,#LOW PS2_IRQ_Channel
0026 76FF              MOV     @R0,#0FFH
                                           ; SOURCE LINE # 2451
0028 900000      R     MOV     DPTR,#PortNum
002B 120000      R     LCALL   L?0681
                                           ; SOURCE LINE # 2452
002E 120000      R     LCALL   ClearAUXScanTimeOutCunt
                                           ; SOURCE LINE # 2453
0031 80E4              SJMP    ?C0535
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 126 

                                           ; SOURCE LINE # 2455
                                           ; SOURCE LINE # 2456
                                           ; SOURCE LINE # 2457
                                           ; SOURCE LINE # 2458
                                           ; SOURCE LINE # 2459
0033         ?C0536:
                                           ; SOURCE LINE # 2461
                                           ; SOURCE LINE # 2462
                                           ; SOURCE LINE # 2463
0033 120000      R     LCALL   L?0649
                                           ; SOURCE LINE # 2464
0036 22                RET     
             ; FUNCTION _WaitPS2DeviceACK (END)

             ; FUNCTION PS2CheckPendingISR (BEGIN)
                                           ; SOURCE LINE # 2471
                                           ; SOURCE LINE # 2472
                                           ; SOURCE LINE # 2474
;---- Variable 'pending' assigned to Register 'R7' ----
0000 E4                CLR     A
0001 FF                MOV     R7,A
                                           ; SOURCE LINE # 2476
0002 900000      E     MOV     DPTR,#PSSTS3
0005 E0                MOVX    A,@DPTR
0006 30E31D            JNB     ACC.3,?C0541
                                           ; SOURCE LINE # 2477
                                           ; SOURCE LINE # 2478
0009 900000      E     MOV     DPTR,#IER2
000C E0                MOVX    A,@DPTR
000D 30E25B            JNB     ACC.2,?C0543
0010 900000      E     MOV     DPTR,#ISR2
0013 E0                MOVX    A,@DPTR
0014 20E254            JB      ACC.2,?C0543
0017 900000      E     MOV     DPTR,#PSCTL3
001A E0                MOVX    A,@DPTR
001B 6417              XRL     A,#017H
001D 704C              JNZ     ?C0543
                                           ; SOURCE LINE # 2479
                                           ; SOURCE LINE # 2480
001F 120000      E     LCALL   IRQ_INT18_PS2Interrupt2
                                           ; SOURCE LINE # 2481
0022 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 2482
                                           ; SOURCE LINE # 2483
0024 8045              SJMP    ?C0543
0026         ?C0541:
                                           ; SOURCE LINE # 2484
0026 900000      E     MOV     DPTR,#PSSTS2
0029 E0                MOVX    A,@DPTR
002A 30E31D            JNB     ACC.3,?C0544
                                           ; SOURCE LINE # 2485
                                           ; SOURCE LINE # 2486
002D 900000      E     MOV     DPTR,#IER2
0030 E0                MOVX    A,@DPTR
0031 30E337            JNB     ACC.3,?C0543
0034 900000      E     MOV     DPTR,#ISR2
0037 E0                MOVX    A,@DPTR
0038 20E330            JB      ACC.3,?C0543
003B 900000      E     MOV     DPTR,#PSCTL2
003E E0                MOVX    A,@DPTR
003F 6417              XRL     A,#017H
0041 7028              JNZ     ?C0543
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 127 

                                           ; SOURCE LINE # 2487
                                           ; SOURCE LINE # 2488
0043 120000      E     LCALL   IRQ_INT19_PS2Interrupt1
                                           ; SOURCE LINE # 2489
0046 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 2490
                                           ; SOURCE LINE # 2491
0048 8021              SJMP    ?C0543
004A         ?C0544:
                                           ; SOURCE LINE # 2492
004A 900000      E     MOV     DPTR,#PSSTS1
004D E0                MOVX    A,@DPTR
004E 30E31A            JNB     ACC.3,?C0543
                                           ; SOURCE LINE # 2493
                                           ; SOURCE LINE # 2494
0051 900000      E     MOV     DPTR,#IER2
0054 E0                MOVX    A,@DPTR
0055 30E413            JNB     ACC.4,?C0543
0058 900000      E     MOV     DPTR,#ISR2
005B E0                MOVX    A,@DPTR
005C 20E40C            JB      ACC.4,?C0543
005F 900000      E     MOV     DPTR,#PSCTL1
0062 E0                MOVX    A,@DPTR
0063 B41705            CJNE    A,#017H,?C0543
                                           ; SOURCE LINE # 2495
                                           ; SOURCE LINE # 2496
0066 120000      E     LCALL   IRQ_INT20_PS2Interrupt0
                                           ; SOURCE LINE # 2497
0069 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 2498
                                           ; SOURCE LINE # 2499
006B         ?C0543:
                                           ; SOURCE LINE # 2501
                                           ; SOURCE LINE # 2502
006B         ?C0549:
006B 22                RET     
             ; FUNCTION PS2CheckPendingISR (END)

             ; FUNCTION _SetAUXScanIndexHS (BEGIN)
                                           ; SOURCE LINE # 2507
;---- Variable 'status' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2508
                                           ; SOURCE LINE # 2509
0000 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX_HS
0002 EF                MOV     A,R7
0003 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2510
0004 22                RET     
             ; FUNCTION _SetAUXScanIndexHS (END)

             ; FUNCTION ClearAUXScanTimeOutCunt (BEGIN)
                                           ; SOURCE LINE # 2515
                                           ; SOURCE LINE # 2516
                                           ; SOURCE LINE # 2517
0000 E4                CLR     A
0001 7800        E     MOV     R0,#LOW AUX_SCAN_TIMEOUT_CUNT
0003 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2518
0004 22                RET     
             ; FUNCTION ClearAUXScanTimeOutCunt (END)

             ; FUNCTION Read_TP_ID (BEGIN)
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 128 

                                           ; SOURCE LINE # 2553
                                           ; SOURCE LINE # 2554
                                           ; SOURCE LINE # 2557
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#index_cmd
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2559
0005 900000      E     MOV     DPTR,#Oem_RTP_ID_CMD
0008 E0                MOVX    A,@DPTR
0009 6003              JZ      $ + 5H
000B 020000      R     LJMP    ?C0553
000E         ?C0552:
                                           ; SOURCE LINE # 2562
000E 900000      E     MOV     DPTR,#Oem_RTP_ID_1s_EN
0011 E0                MOVX    A,@DPTR
0012 B4010A            CJNE    A,#01H,?C0554
                                           ; SOURCE LINE # 2563
0015 900000      E     MOV     DPTR,#Oem_RTP_ID_1s_T
0018 E4                CLR     A
0019 75F001            MOV     B,#01H
001C 120000      E     LCALL   ?C?IILDX
001F         ?C0554:
                                           ; SOURCE LINE # 2566
001F C3                CLR     C
0020 900000      E     MOV     DPTR,#Oem_RTP_ID_1s_T+01H
0023 E0                MOVX    A,@DPTR
0024 9401              SUBB    A,#01H
0026 900000      E     MOV     DPTR,#Oem_RTP_ID_1s_T
0029 E0                MOVX    A,@DPTR
002A 9400              SUBB    A,#00H
002C 5003              JNC     $ + 5H
002E 020000      R     LJMP    ?C0553
                                           ; SOURCE LINE # 2567
                                           ; SOURCE LINE # 2569
0031         ?C0555:
                                           ; SOURCE LINE # 2571
0031 E4                CLR     A
0032 900000      E     MOV     DPTR,#Oem_RTP_ID_1s_EN
0035 F0                MOVX    @DPTR,A
0036         ?C0557:
                                           ; SOURCE LINE # 2573
0036 900000      E     MOV     DPTR,#Oem_RTP_ID_LOOP_Index
0039 E0                MOVX    A,@DPTR
003A D3                SETB    C
003B 9403              SUBB    A,#03H
003D 4003              JC      $ + 5H
003F 020000      R     LJMP    ?C0553
                                           ; SOURCE LINE # 2574
                                           ; SOURCE LINE # 2576
0042 900000      E     MOV     DPTR,#Oem_RTP_ID_Step
0045 E0                MOVX    A,@DPTR
0046 30E703            JNB     ACC.7,$ + 6H
0049 020000      R     LJMP    ?C0559
                                           ; SOURCE LINE # 2577
                                           ; SOURCE LINE # 2580
                                           ; SOURCE LINE # 2581
004C 120000      R     LCALL   L?0642
004F 4401              ORL     A,#01H
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2583
0052 900000      R     MOV     DPTR,#data_pntr
0055 7400        R     MOV     A,#HIGH ELAN_ID_SQ
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 129 

0057 F0                MOVX    @DPTR,A
0058 A3                INC     DPTR
0059 7400        R     MOV     A,#LOW ELAN_ID_SQ
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2584
005C E4                CLR     A
005D A3                INC     DPTR
005E F0                MOVX    @DPTR,A
005F         ?C0560:
                                           ; SOURCE LINE # 2585
                                           ; SOURCE LINE # 2587
005F 120000      R     LCALL   L?0626
                                           ; SOURCE LINE # 2589
0062 120000      R     LCALL   L?0643
0065 9404              SUBB    A,#04H
0067 40F6              JC      ?C0560
0069         ?C0561:
                                           ; SOURCE LINE # 2590
0069 900000      E     MOV     DPTR,#Oem_RTP_ID_Step
006C E0                MOVX    A,@DPTR
006D 54FE              ANL     A,#0FEH
006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2592
                                           ; SOURCE LINE # 2594
0070 120000      R     LCALL   L?0642
0073 20E768            JB      ACC.7,?C0553
                                           ; SOURCE LINE # 2595
                                           ; SOURCE LINE # 2596
                                           ; SOURCE LINE # 2597
0076         ?C0563:
                                           ; SOURCE LINE # 2601
                                           ; SOURCE LINE # 2602
0076 120000      R     LCALL   L?0656
0079 4402              ORL     A,#02H
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2604
007C 900000      R     MOV     DPTR,#data_pntr
007F 7400        R     MOV     A,#HIGH SYN_ID_SQ
0081 F0                MOVX    @DPTR,A
0082 A3                INC     DPTR
0083 7400        R     MOV     A,#LOW SYN_ID_SQ
0085 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2605
0086 E4                CLR     A
0087 A3                INC     DPTR
0088 F0                MOVX    @DPTR,A
0089         ?C0564:
                                           ; SOURCE LINE # 2606
                                           ; SOURCE LINE # 2607
0089 120000      R     LCALL   L?0626
                                           ; SOURCE LINE # 2610
008C 120000      R     LCALL   L?0643
008F 9409              SUBB    A,#09H
0091 40F6              JC      ?C0564
0093         ?C0565:
                                           ; SOURCE LINE # 2611
0093 900000      E     MOV     DPTR,#Oem_RTP_ID_Step
0096 E0                MOVX    A,@DPTR
0097 54FD              ANL     A,#0FDH
0099 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2613
                                           ; SOURCE LINE # 2615
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 130 

009A 120000      R     LCALL   L?0656
009D 20E73E            JB      ACC.7,?C0553
                                           ; SOURCE LINE # 2616
                                           ; SOURCE LINE # 2617
                                           ; SOURCE LINE # 2618
00A0         ?C0567:
                                           ; SOURCE LINE # 2622
                                           ; SOURCE LINE # 2623
00A0 120000      R     LCALL   L?0691
00A3 4404              ORL     A,#04H
00A5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2625
00A6 900000      R     MOV     DPTR,#data_pntr
00A9 7400        R     MOV     A,#HIGH ALPS_ID_SQ
00AB F0                MOVX    @DPTR,A
00AC A3                INC     DPTR
00AD 7400        R     MOV     A,#LOW ALPS_ID_SQ
00AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2626
00B0 E4                CLR     A
00B1 A3                INC     DPTR
00B2 F0                MOVX    @DPTR,A
00B3         ?C0568:
                                           ; SOURCE LINE # 2627
                                           ; SOURCE LINE # 2629
00B3 120000      R     LCALL   L?0627
00B6 FB                MOV     R3,A
00B7 7F02              MOV     R7,#02H
00B9 120000      R     LCALL   _Send2PortNWait
                                           ; SOURCE LINE # 2631
00BC 900000      R     MOV     DPTR,#index_cmd
00BF E0                MOVX    A,@DPTR
00C0 04                INC     A
00C1 F0                MOVX    @DPTR,A
00C2 E0                MOVX    A,@DPTR
00C3 C3                CLR     C
00C4 9404              SUBB    A,#04H
00C6 40EB              JC      ?C0568
00C8         ?C0569:
                                           ; SOURCE LINE # 2632
00C8 900000      E     MOV     DPTR,#Oem_RTP_ID_Step
00CB E0                MOVX    A,@DPTR
00CC 54FB              ANL     A,#0FBH
00CE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2634
                                           ; SOURCE LINE # 2637
00CF 120000      R     LCALL   L?0691
00D2 20E709            JB      ACC.7,?C0553
                                           ; SOURCE LINE # 2638
                                           ; SOURCE LINE # 2639
                                           ; SOURCE LINE # 2640
                                           ; SOURCE LINE # 2644
00D5         ?C0559:
                                           ; SOURCE LINE # 2646
00D5 900000      E     MOV     DPTR,#Oem_RTP_ID_LOOP_Index
00D8 E0                MOVX    A,@DPTR
00D9 04                INC     A
00DA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2648
00DB 020000      R     LJMP    ?C0557
                                           ; SOURCE LINE # 2651
00DE         ?C0553:
C51 COMPILER V7.50   CORE_PS2                                                              09/08/2020 15:56:19 PAGE 131 

00DE 22                RET     
00DF         L?0642:
00DF 7F66              MOV     R7,#066H
00E1 120000      E     LCALL   _RamDebug
00E4 900000      E     MOV     DPTR,#Oem_RTP_ID_Step
00E7 E0                MOVX    A,@DPTR
00E8 22                RET     
00E9         L?0643:
00E9 FB                MOV     R3,A
00EA 7F02              MOV     R7,#02H
00EC 120000      R     LCALL   _Send2PortNWait
00EF 900000      R     MOV     DPTR,#index_cmd
00F2 E0                MOVX    A,@DPTR
00F3 04                INC     A
00F4 F0                MOVX    @DPTR,A
00F5 E0                MOVX    A,@DPTR
00F6 C3                CLR     C
00F7 22                RET     
00F8         L?0656:
00F8 7F44              MOV     R7,#044H
00FA 120000      E     LCALL   _RamDebug
00FD 900000      E     MOV     DPTR,#Oem_RTP_ID_Step
0100 E0                MOVX    A,@DPTR
0101 22                RET     
0102         L?0691:
0102 7F33              MOV     R7,#033H
0104 120000      E     LCALL   _RamDebug
0107 900000      E     MOV     DPTR,#Oem_RTP_ID_Step
010A E0                MOVX    A,@DPTR
010B 22                RET     
             ; FUNCTION Read_TP_ID (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5350    ----
   CONSTANT SIZE    =     86    ----
   XDATA SIZE       =   ----      49
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
