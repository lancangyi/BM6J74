C51 COMPILER V7.50   OEM_DEBUG                                                             09/08/2020 15:56:26 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE OEM_DEBUG
OBJECT MODULE PLACED IN Code\Oem\OEM_Debug.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe Code\Oem\OEM_Debug.C LA WL(1) CD OT(9,SIZE) NOAREGS OR INCDIR(.\Code\CORE\I
                    -NCLUDE\;.\Code\OEM\INCLUDE\;.\Code\CHIP\INCLUDE\)

line level    source

   1          /*-----------------------------------------------------------------------------
   2           * TITLE: OEM_Debug.C
   3           *
   4           * Author : Dino
   5           *
   6           * Note : These functions are reference only.
   7           *        Please follow your project software specification to do some modification.
   8           *---------------------------------------------------------------------------*/
   9          
  10          #include <CORE_INCLUDE.H>
  11          #include <OEM_INCLUDE.H>
  12          
  13          /*------------------;
  14           ;EC2I READ                     ;
  15           ;------------------*/  
  16          BYTE ReadSioInterface(BYTE Ldnumber, BYTE offset)
  17          {
  18   1              BYTE rval;
  19   1      
  20   1              SET_MASK(LSIOHA,LKCFG);
  21   1              SET_MASK(IBMAE,CFGAE);
  22   1              SET_MASK(IBCTL,CSAE);
  23   1      
  24   1          IHIOA=0;              // Set indirect Host I/O Address
  25   1          IHD=0x07;
  26   1          while(IS_MASK_SET(IBCTL,CWIB));
  27   1        
  28   1          IHIOA=1;              // Set indirect Host I/O Address
  29   1          IHD=Ldnumber;
  30   1          while(IS_MASK_SET(IBCTL,CWIB)); 
  31   1      
  32   1          IHIOA=0;              // Set indirect Host I/O Address
  33   1          IHD=offset;
  34   1          while(IS_MASK_SET(IBCTL,CWIB));    
  35   1      
  36   1          IHIOA=1;              // Set indirect Host I/O Address
  37   1          SET_MASK(IBCTL, CRIB);    
  38   1              while(IS_MASK_SET(IBCTL, CRIB));
  39   1              
  40   1              rval = IHD;
  41   1      
  42   1              CLEAR_MASK(LSIOHA,LKCFG);
  43   1              CLEAR_MASK(IBMAE,CFGAE);
  44   1              CLEAR_MASK(IBCTL,CSAE);
  45   1      
  46   1              return rval;
  47   1      }
  48          
  49          
  50          BYTE Get_P80_CurrentIndex(void)
  51          {
  52   1              BYTE index;
  53   1              index = ReadSioInterface(0x10,0xF5);
  54   1              return index;
C51 COMPILER V7.50   OEM_DEBUG                                                             09/08/2020 15:56:26 PAGE 2   

  55   1      }
  56          
  57          //------------------------------------------------------------
  58          // RAM Debug function
  59          // 1. You can Set the macro RAM_Debug to TRUE to enable RAM debug
  60          // 2. You can print a Byte data to EC RAM for debug use this function
  61          //------------------------------------------------------------
  62          void RamDebug(unsigned char dbgcode)
  63          {
  64   1      #if RAM_Debug
  65   1              PORT_BYTE_PNTR ClearIndex;
  66   1              PORT_BYTE_PNTR byte_register_pntr;
  67   1          XBYTE index;
  68   1              XBYTE i;
  69   1              
  70   1          byte_register_pntr = DebugRamAddr+DebugRamRange;
  71   1          index = *byte_register_pntr;
  72   1          *byte_register_pntr +=1;
  73   1              
  74   1          if ( *byte_register_pntr == DebugRamRange )
  75   1              {
  76   2                      *byte_register_pntr = 0;
  77   2              ClearIndex= DebugRamAddr;
  78   2      
  79   2                      //for (i=0x00;i<DebugRamRange;i++)
  80   2              //{
  81   2              //      *ClearIndex=0x00;
  82   2              //      ClearIndex++;
  83   2              //}
  84   2              }
  85   1      
  86   1              byte_register_pntr = DebugRamAddr + index;
  87   1          *byte_register_pntr = dbgcode;
  88   1      #endif
  89   1      }
  90          
  91          
  92          //----------------------------------------------------------------------------
  93          // The function of copy Bram bank 0x2200 to ram 0x0a00
  94          // 
  95          //----------------------------------------------------------------------------
  96          void Copy_BRAM_SRAM(void)
  97          {
  98   1              PORT_BYTE_PNTR Bram_Source_pntr;
  99   1              PORT_BYTE_PNTR Sram_destination_pntr,Sram_temp_pntr;
 100   1      
 101   1              Sram_temp_pntr = 0x0AFF;
 102   1          Bram_Source_pntr = 0x2200;
 103   1              Sram_destination_pntr = BRAM_RAM_Addr;
 104   1          while(Bram_Source_pntr <= 0x22FF)
 105   1          {
 106   2              *Sram_destination_pntr = *Bram_Source_pntr;
 107   2              Sram_destination_pntr++;
 108   2                      Bram_Source_pntr++;
 109   2          }
 110   1              
 111   1              *Sram_temp_pntr = Get_P80_CurrentIndex();
 112   1      
 113   1      
 114   1      }
 115          
 116          //----------------------------------------------------------------------------
C51 COMPILER V7.50   OEM_DEBUG                                                             09/08/2020 15:56:26 PAGE 3   

 117          //(0x2210~0x0x224F)
 118          //----------------------------------------------------------------------------
 119          void BRAMDebug(unsigned char dbgcode)
 120          {
 121   1              PORT_BYTE_PNTR Bram_pntr;
 122   1              XBYTE index;
 123   1              
 124   1              Bram_pntr = DebugBRamAddr+DebugBRamRange;
 125   1              index = *Bram_pntr;
 126   1              
 127   1              *Bram_pntr +=1; 
 128   1              
 129   1          if(*Bram_pntr == DebugBRamRange)
 130   1          {
 131   2              
 132   2                      *Bram_pntr = 0;
 133   2                      
 134   2          }
 135   1      
 136   1              Bram_pntr = DebugBRamAddr + index;              
 137   1              *Bram_pntr = dbgcode ;  
 138   1      
 139   1      }
 140          
 141          
 142          //----------------------------------------------------------------------------
 143          // The function of clearing battery ram for oem debug
 144          //----------------------------------------------------------------------------
 145          void ClearBRam(void)
 146          {
 147   1              PORT_BYTE_PNTR byte_register_pntr;
 148   1      
 149   1          byte_register_pntr=0x2210;
 150   1          while(byte_register_pntr<=0x223F) // Clear battery ram (0x2200~0x22FF)   
 151   1          {
 152   2              *byte_register_pntr=0;
 153   2              byte_register_pntr ++;
 154   2          }                                                   
 155   1      
 156   1      }
 157          
 158          
C51 COMPILER V7.50   OEM_DEBUG                                                             09/08/2020 15:56:26 PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0017 (BEGIN)
0000         L?0024:
0000 F0                MOVX    @DPTR,A
0001 8D82              MOV     DPL,R5
0003 8C83              MOV     DPH,R4
0005 E0                MOVX    A,@DPTR
0006 04                INC     A
0007 F0                MOVX    @DPTR,A
0008 E0                MOVX    A,@DPTR
0009 22                RET     
             ; FUNCTION Com0017 (END)

             ; FUNCTION _ReadSioInterface (BEGIN)
                                           ; SOURCE LINE # 16
;---- Variable 'offset' assigned to Register 'R5' ----
;---- Variable 'Ldnumber' assigned to Register 'R6' ----
0000 CE                XCH     A,R6
0001 EF                MOV     A,R7
0002 CE                XCH     A,R6
                                           ; SOURCE LINE # 17
                                           ; SOURCE LINE # 20
0003 900000      E     MOV     DPTR,#LSIOHA
0006 E0                MOVX    A,@DPTR
0007 4401              ORL     A,#01H
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 21
000A 900000      E     MOV     DPTR,#IBMAE
000D E0                MOVX    A,@DPTR
000E 4401              ORL     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 22
0011 900000      E     MOV     DPTR,#IBCTL
0014 E0                MOVX    A,@DPTR
0015 4401              ORL     A,#01H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 24
0018 E4                CLR     A
0019 900000      E     MOV     DPTR,#IHIOA
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 25
001D 900000      E     MOV     DPTR,#IHD
0020 7407              MOV     A,#07H
0022 F0                MOVX    @DPTR,A
0023         ?C0001:
                                           ; SOURCE LINE # 26
0023 900000      E     MOV     DPTR,#IBCTL
0026 E0                MOVX    A,@DPTR
0027 20E2F9            JB      ACC.2,?C0001
002A         ?C0002:
                                           ; SOURCE LINE # 28
002A 900000      E     MOV     DPTR,#IHIOA
002D 7401              MOV     A,#01H
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 29
0030 900000      E     MOV     DPTR,#IHD
0033 EE                MOV     A,R6
0034 F0                MOVX    @DPTR,A
0035         ?C0003:
                                           ; SOURCE LINE # 30
C51 COMPILER V7.50   OEM_DEBUG                                                             09/08/2020 15:56:26 PAGE 5   

0035 900000      E     MOV     DPTR,#IBCTL
0038 E0                MOVX    A,@DPTR
0039 20E2F9            JB      ACC.2,?C0003
003C         ?C0004:
                                           ; SOURCE LINE # 32
003C E4                CLR     A
003D 900000      E     MOV     DPTR,#IHIOA
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 33
0041 900000      E     MOV     DPTR,#IHD
0044 ED                MOV     A,R5
0045 F0                MOVX    @DPTR,A
0046         ?C0005:
                                           ; SOURCE LINE # 34
0046 900000      E     MOV     DPTR,#IBCTL
0049 E0                MOVX    A,@DPTR
004A 20E2F9            JB      ACC.2,?C0005
004D         ?C0006:
                                           ; SOURCE LINE # 36
004D 900000      E     MOV     DPTR,#IHIOA
0050 7401              MOV     A,#01H
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 37
0053 900000      E     MOV     DPTR,#IBCTL
0056 E0                MOVX    A,@DPTR
0057 4402              ORL     A,#02H
0059 F0                MOVX    @DPTR,A
005A         ?C0007:
                                           ; SOURCE LINE # 38
005A 900000      E     MOV     DPTR,#IBCTL
005D E0                MOVX    A,@DPTR
005E 20E1F9            JB      ACC.1,?C0007
0061         ?C0008:
                                           ; SOURCE LINE # 40
0061 900000      E     MOV     DPTR,#IHD
0064 E0                MOVX    A,@DPTR
;---- Variable 'rval' assigned to Register 'R5' ----
0065 FD                MOV     R5,A
                                           ; SOURCE LINE # 42
0066 900000      E     MOV     DPTR,#LSIOHA
0069 E0                MOVX    A,@DPTR
006A 54FE              ANL     A,#0FEH
006C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 43
006D 900000      E     MOV     DPTR,#IBMAE
0070 E0                MOVX    A,@DPTR
0071 54FE              ANL     A,#0FEH
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 44
0074 900000      E     MOV     DPTR,#IBCTL
0077 E0                MOVX    A,@DPTR
0078 54FE              ANL     A,#0FEH
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 46
007B CF                XCH     A,R7
007C ED                MOV     A,R5
007D CF                XCH     A,R7
                                           ; SOURCE LINE # 47
007E         ?C0009:
007E 22                RET     
             ; FUNCTION _ReadSioInterface (END)

C51 COMPILER V7.50   OEM_DEBUG                                                             09/08/2020 15:56:26 PAGE 6   

             ; FUNCTION Get_P80_CurrentIndex (BEGIN)
                                           ; SOURCE LINE # 50
                                           ; SOURCE LINE # 51
                                           ; SOURCE LINE # 53
0000 7DF5              MOV     R5,#0F5H
0002 7F10              MOV     R7,#010H
0004 120000      R     LCALL   _ReadSioInterface
;---- Variable 'index' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 55
0007         ?C0010:
0007 22                RET     
             ; FUNCTION Get_P80_CurrentIndex (END)

             ; FUNCTION _RamDebug (BEGIN)
                                           ; SOURCE LINE # 62
;---- Variable 'dbgcode' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 63
                                           ; SOURCE LINE # 70
;---- Variable 'byte_register_pntr' assigned to Register 'R4/R5' ----
0000 7DFF              MOV     R5,#0FFH
0002 7C09              MOV     R4,#09H
                                           ; SOURCE LINE # 71
0004 8D82              MOV     DPL,R5
0006 8C83              MOV     DPH,R4
0008 E0                MOVX    A,@DPTR
0009 900000      R     MOV     DPTR,#index
                                           ; SOURCE LINE # 72
                                           ; SOURCE LINE # 74
000C 120000      R     LCALL   L?0024
000F B4FF0B            CJNE    A,#0FFH,?C0011
                                           ; SOURCE LINE # 75
                                           ; SOURCE LINE # 76
0012 E4                CLR     A
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 77
0014 900000      R     MOV     DPTR,#ClearIndex
0017 7409              MOV     A,#09H
0019 F0                MOVX    @DPTR,A
001A A3                INC     DPTR
001B E4                CLR     A
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 84
001D         ?C0011:
                                           ; SOURCE LINE # 86
001D 900000      R     MOV     DPTR,#index
0020 E0                MOVX    A,@DPTR
0021 2400              ADD     A,#00H
0023 FD                MOV     R5,A
0024 E4                CLR     A
0025 3409              ADDC    A,#09H
                                           ; SOURCE LINE # 87
0027 8D82              MOV     DPL,R5
0029 F583              MOV     DPH,A
002B EF                MOV     A,R7
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 89
002D 22                RET     
             ; FUNCTION _RamDebug (END)

             ; FUNCTION Copy_BRAM_SRAM (BEGIN)
                                           ; SOURCE LINE # 96
C51 COMPILER V7.50   OEM_DEBUG                                                             09/08/2020 15:56:26 PAGE 7   

                                           ; SOURCE LINE # 97
                                           ; SOURCE LINE # 101
0000 900000      R     MOV     DPTR,#Sram_temp_pntr
0003 740A              MOV     A,#0AH
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 74FF              MOV     A,#0FFH
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 102
;---- Variable 'Bram_Source_pntr' assigned to Register 'R6/R7' ----
000A 7F00              MOV     R7,#00H
000C 7E22              MOV     R6,#022H
                                           ; SOURCE LINE # 103
;---- Variable 'Sram_destination_pntr' assigned to Register 'R4/R5' ----
000E 7D00              MOV     R5,#00H
0010 7C0A              MOV     R4,#0AH
0012         ?C0013:
                                           ; SOURCE LINE # 104
0012 D3                SETB    C
0013 EF                MOV     A,R7
0014 94FF              SUBB    A,#0FFH
0016 EE                MOV     A,R6
0017 9422              SUBB    A,#022H
0019 5016              JNC     ?C0014
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 106
001B 8F82              MOV     DPL,R7
001D 8E83              MOV     DPH,R6
001F E0                MOVX    A,@DPTR
0020 8D82              MOV     DPL,R5
0022 8C83              MOV     DPH,R4
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 107
0025 0D                INC     R5
0026 BD0001            CJNE    R5,#00H,?C0021
0029 0C                INC     R4
002A         ?C0021:
                                           ; SOURCE LINE # 108
002A 0F                INC     R7
002B BF0001            CJNE    R7,#00H,?C0022
002E 0E                INC     R6
002F         ?C0022:
                                           ; SOURCE LINE # 109
002F 80E1              SJMP    ?C0013
0031         ?C0014:
                                           ; SOURCE LINE # 111
0031 120000      R     LCALL   Get_P80_CurrentIndex
0034 900000      R     MOV     DPTR,#Sram_temp_pntr
0037 E0                MOVX    A,@DPTR
0038 FC                MOV     R4,A
0039 A3                INC     DPTR
003A E0                MOVX    A,@DPTR
003B F582              MOV     DPL,A
003D 8C83              MOV     DPH,R4
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 114
0041 22                RET     
             ; FUNCTION Copy_BRAM_SRAM (END)

             ; FUNCTION _BRAMDebug (BEGIN)
                                           ; SOURCE LINE # 119
C51 COMPILER V7.50   OEM_DEBUG                                                             09/08/2020 15:56:26 PAGE 8   

;---- Variable 'dbgcode' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 120
                                           ; SOURCE LINE # 124
;---- Variable 'Bram_pntr' assigned to Register 'R4/R5' ----
0000 7D3F              MOV     R5,#03FH
0002 7C22              MOV     R4,#022H
                                           ; SOURCE LINE # 125
0004 8D82              MOV     DPL,R5
0006 8C83              MOV     DPH,R4
0008 E0                MOVX    A,@DPTR
0009 900000      R     MOV     DPTR,#index
                                           ; SOURCE LINE # 127
                                           ; SOURCE LINE # 129
000C 120000      R     LCALL   L?0024
000F B42F02            CJNE    A,#02FH,?C0016
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 132
0012 E4                CLR     A
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 134
0014         ?C0016:
                                           ; SOURCE LINE # 136
0014 900000      R     MOV     DPTR,#index
0017 E0                MOVX    A,@DPTR
0018 2410              ADD     A,#010H
001A FD                MOV     R5,A
001B E4                CLR     A
001C 3422              ADDC    A,#022H
                                           ; SOURCE LINE # 137
001E 8D82              MOV     DPL,R5
0020 F583              MOV     DPH,A
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 139
0024 22                RET     
             ; FUNCTION _BRAMDebug (END)

             ; FUNCTION ClearBRam (BEGIN)
                                           ; SOURCE LINE # 145
                                           ; SOURCE LINE # 146
                                           ; SOURCE LINE # 149
;---- Variable 'byte_register_pntr' assigned to Register 'DPTR' ----
0000 902210            MOV     DPTR,#02210H
0003         ?C0018:
                                           ; SOURCE LINE # 150
0003 AF82              MOV     R7,DPL
0005 AE83              MOV     R6,DPH
0007 D3                SETB    C
0008 EF                MOV     A,R7
0009 943F              SUBB    A,#03FH
000B EE                MOV     A,R6
000C 9422              SUBB    A,#022H
000E 5005              JNC     ?C0020
                                           ; SOURCE LINE # 151
                                           ; SOURCE LINE # 152
0010 E4                CLR     A
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 153
0012 A3                INC     DPTR
                                           ; SOURCE LINE # 154
0013 80EE              SJMP    ?C0018
                                           ; SOURCE LINE # 156
C51 COMPILER V7.50   OEM_DEBUG                                                             09/08/2020 15:56:26 PAGE 9   

0015         ?C0020:
0015 22                RET     
             ; FUNCTION ClearBRam (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    316    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       7
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
