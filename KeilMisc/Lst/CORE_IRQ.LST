C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE CORE_IRQ
OBJECT MODULE PLACED IN Code\CORE\CORE_IRQ.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe Code\CORE\CORE_IRQ.C LA WL(1) CD OT(9,SIZE) NOAREGS OR INCDIR(.\Code\CORE\I
                    -NCLUDE\;.\Code\OEM\INCLUDE\;.\Code\CHIP\INCLUDE\)

line level    source

   1          /*-----------------------------------------------------------------------------
   2           * TITLE: CORE_IRQ.C - Interrupt Service Routines (ISR).
   3           *
   4           * The Interrupt Service Routines (ISR).  The actual interrupt functions are
   5           * implemented in the "CHIP_IRQ.C".
   6           *
   7           * Copyright (c) 1983-2007, Insyde Software Corporation. All Rights Reserved.
   8           *
   9           * You may not reproduce, distribute, publish, display, perform, modify, adapt,
  10           * transmit, broadcast, present, recite, release, license or otherwise exploit
  11           * any part of this publication in any form, by any means, without the prior
  12           * written permission of Insyde Software Corporation.
  13           *---------------------------------------------------------------------------*/
  14           
  15          #include <CORE_INCLUDE.H>
  16          #include <OEM_INCLUDE.H>
  17          
  18          //----------------------------------------------------------------------------
  19          // Input full irq lock scan
  20          //----------------------------------------------------------------------------
  21          void IrqLock_scan(void)
  22          {
  23   1              Int_Var.Scan_Lock = 1;
  24   1          //Timer_B.fbit.SEND_ENABLE = 0;     // Lock scanner. 
  25   1      }
  26          
  27          //----------------------------------------------------------------------------
  28          // Null function
  29          //----------------------------------------------------------------------------
  30          void IRQ_INT0_Null(void)
  31          {
  32   1      
  33   1      }
  34          
  35          //----------------------------------------------------------------------------
  36          // WKO[20]
  37          //----------------------------------------------------------------------------
  38          void IRQ_INT1_WKO20(void)
  39          {
  40   1          Hook_IRQ_INT1_WKO20();
  41   1      }
  42          
  43          //----------------------------------------------------------------------------
  44          // KBC Output Buffer Empty Interrupt
  45          //----------------------------------------------------------------------------
  46          void IRQ_INT2_KBCOBE(void)
  47          {
  48   1          Hook_IRQ_INT2_KBCOBE();
  49   1      }
  50          
  51          //----------------------------------------------------------------------------
  52          // PMC Output Buffer Empty Intr. PMC1 Output Buffer Empty Intr.
  53          //----------------------------------------------------------------------------
  54          void IRQ_INT3_PMCPMC1OBE(void)
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 2   

  55          {
  56   1          Hook_IRQ_INT3_PMCPMC1OBE();
  57   1      }
  58          
  59          //----------------------------------------------------------------------------
  60          // SMBus D Interrupt
  61          //----------------------------------------------------------------------------
  62          void IRQ_INT4_SMBusD(void)
  63          {
  64   1          Hook_IRQ_INT4_SMBusD();
  65   1      }
  66          
  67          //----------------------------------------------------------------------------
  68          // WKINTAD (WKINTA or WKINTD)
  69          //----------------------------------------------------------------------------
  70          void IRQ_INT5_WKINTAD(void)
  71          {
  72   1          Hook_IRQ_INT5_WKINTAD();
  73   1      }
  74          
  75          //----------------------------------------------------------------------------
  76          // WKO[23]
  77          //----------------------------------------------------------------------------
  78          void IRQ_INT6_WKO23(void)
  79          {
  80   1          Hook_IRQ_INT6_WKO23();
  81   1      }
  82          
  83          //----------------------------------------------------------------------------
  84          // PWM Interrupt
  85          //----------------------------------------------------------------------------
  86          void IRQ_INT7_PWM(void)
  87          {
  88   1          Hook_IRQ_INT7_PWM();
  89   1      }
  90          
  91          //----------------------------------------------------------------------------
  92          // ADC Interrupt
  93          //----------------------------------------------------------------------------
  94          void IRQ_INT8_ADC(void)
  95          {
  96   1          Hook_IRQ_INT8_ADC();
  97   1      }
  98          
  99          //----------------------------------------------------------------------------
 100          // SMBus A Interrupt
 101          //----------------------------------------------------------------------------
 102          void IRQ_INT9_SMBusA(void)
 103          {
 104   1          Hook_IRQ_INT9_SMBusA();
 105   1      }
 106          
 107          //----------------------------------------------------------------------------
 108          // SMBus B Interrupt
 109          //----------------------------------------------------------------------------
 110          void IRQ_INT10_SMBusB(void)
 111          {
 112   1          Hook_IRQ_INT10_SMBusB();
 113   1      }
 114          
 115          //----------------------------------------------------------------------------
 116          // KB Matrix Scan Interrupt
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 3   

 117          //----------------------------------------------------------------------------
 118          void IRQ_INT11_KBMatrixScan(void)
 119          {
 120   1              CLEAR_MASK(IER1,Int_KB);
 121   1          ISR1 = Int_KB;
 122   1              F_Service_KEY = 1;      // Post service request to scan internal keyboard. 
 123   1      
 124   1          Hook_IRQ_INT11_KBMatrixScan();
 125   1      }
 126          
 127          //----------------------------------------------------------------------------
 128          // WKO[26]
 129          //----------------------------------------------------------------------------
 130          void IRQ_INT12_WKO26(void)
 131          {
 132   1          Hook_IRQ_INT12_WKO26();
 133   1      }
 134          
 135          //----------------------------------------------------------------------------
 136          // WKINTC
 137          //----------------------------------------------------------------------------
 138          void IRQ_INT13_WKINTC(void)
 139          {
 140   1          Hook_IRQ_INT13_WKINTC();
 141   1      }
 142          
 143          //----------------------------------------------------------------------------
 144          // WKO[25]
 145          //----------------------------------------------------------------------------
 146          void IRQ_INT14_WKO25(void)
 147          {
 148   1          Hook_IRQ_INT14_WKO25();
 149   1      }
 150          
 151          //----------------------------------------------------------------------------
 152          // CIR Interrupt
 153          //----------------------------------------------------------------------------
 154          void IRQ_INT15_CIR(void)
 155          {
 156   1          Hook_IRQ_INT15_CIR();
 157   1      }
 158          
 159          //----------------------------------------------------------------------------
 160          // SMBus C Interrupt
 161          //----------------------------------------------------------------------------
 162          void IRQ_INT16_SMBusC(void)
 163          {
 164   1          Hook_IRQ_INT16_SMBusC();
 165   1      }
 166          
 167          //----------------------------------------------------------------------------
 168          // WKO[24]
 169          //----------------------------------------------------------------------------
 170          void IRQ_INT17_WKO24(void)
 171          {
 172   1          Hook_IRQ_INT17_WKO24();
 173   1      }
 174          
 175          //----------------------------------------------------------------------------
 176          // PS/2 Interrupt 2
 177          //----------------------------------------------------------------------------
 178          void IRQ_INT18_PS2Interrupt2(void)
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 4   

 179          {
 180   1      
 181   1          #if TouchPad_only
 182   1          CLEAR_MASK(IER2,Int_PS2_2); // Disable PS2 interrupt 0
 183   1          ISR2 = Int_PS2_2;           // Write to clear pending interrupt
 184   1      
 185   1          if(SendtoAUXFlag)
 186   1          {
 187   2              for(PS2DataPinStatusCounter=0x00;PS2DataPinStatusCounter<5;PS2DataPinStatusCounter++)
 188   2              {
 189   3                  //if(IS_MASK_SET(PSSTS1, DLS))   // DATA Line Status is high
 190   3                  if(IS_MASK_SET(GPDRF, BIT5))   // DATA Line Status is high
 191   3                  {
 192   4                      break;
 193   4                  }
 194   3                  else
 195   3                  {
 196   4                      WNCKR = 0x00;   // Delay 15.26 us
 197   4                  }
 198   3              }
 199   2          }
 200   1      
 201   1              PSCTL1 = PS2_InhibitMode;   // Inhibit clock pin1
 202   1              PSCTL2 = PS2_InhibitMode;   // Inhibit clock pin2
 203   1              PSCTL3 = PS2_InhibitMode;   // Inhibit clock pin3
 204   1      
 205   1          PS2_IRQ_Channel = 2;        // Set PS2 0 service flag
 206   1              F_Service_PS2 = 1;          // Set main service flag
 207   1          PS2StartBit=0;                          // clear start bit flag
 208   1          PS2_SSIRQ_Channel = 0xFF;   //
 209   1              PS2PortxData[2]=PSDAT3;
 210   1          #else
                      
                      if(IS_MASK_SET(PSSTS3, TDS))    // Transaction done interrupt 
                      {
                              CLEAR_MASK(IER2,Int_PS2_2); // Disable PS2 interrupt 2  
                          ISR2 = Int_PS2_2;           // Write to clear pending interrupt
                          
                          if(SendtoAUXFlag)
                          {
                          for(PS2DataPinStatusCounter=0x00;PS2DataPinStatusCounter<5;PS2DataPinStatusCounter++)
                          {
                              if(IS_MASK_SET(PSSTS3, DLS))   // DATA Line Status is high
                              {
                                  break;
                              }
                              else
                              {
                                  WNCKR = 0x00;   // Delay 15.26 us
                              }
                          }
                      }
                      else
                      {
                          WNCKR = 0x00;           // Delay 15.26 us
                          WNCKR = 0x00;           // Delay 15.26 us
                          WNCKR = 0x00;           // Delay 15.26 us
                          WNCKR = 0x00;           // Delay 15.26 us
                          WNCKR = 0x00;           // Delay 15.26 us
                          WNCKR = 0x00;           // Delay 15.26 us
                          WNCKR = 0x00;           // Delay 15.26 us
                      }
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 5   

                      
                              PSCTL1 = PS2_InhibitMode;   // Inhibit clock pin1
                              PSCTL2 = PS2_InhibitMode;   // Inhibit clock pin2
                              PSCTL3 = PS2_InhibitMode;   // Inhibit clock pin3
              
                              PS2_IRQ_Channel = 2;        // Set PS2 2 service flag
                              F_Service_PS2 = 1;          // Set main service flag
                              PS2StartBit=0;                  // clear start bit flag
                          PS2_SSIRQ_Channel = 0xFF;   //
                          PS2PortxData[2]=PSDAT3;
                      }
                  else                                                // Start bit interrupt 
                  {
                      PSCTL1 = PS2_InhibitMode;   // Inhibit clock pin1
                      PSCTL2 = PS2_InhibitMode;   // Inhibit clock pin2
                      IER2&= ~(Int_PS2_0+Int_PS2_1+Int_PS2_2);    // Disable all PS2 interrupt
                      ISR2=(Int_PS2_0+Int_PS2_1+Int_PS2_2);       // Write to clear all PS2 pending interrupt
                      PS2StartBit = 1;                // Set start bit flag
                      PS2_SSIRQ_Channel = 2;      //
                      SET_MASK(IER2,Int_PS2_2);   // Enable PS2 interrupt 2
                  }   
                  #endif
 263   1      
 264   1          Hook_IRQ_INT18_PS2Interrupt2();
 265   1      }
 266          
 267          //----------------------------------------------------------------------------
 268          // PS/2 Interrupt 1
 269          //----------------------------------------------------------------------------
 270          void IRQ_INT19_PS2Interrupt1(void)
 271          {
 272   1              if(IS_MASK_SET(PSSTS2, TDS))    // Transaction done interrupt 
 273   1              {
 274   2                      CLEAR_MASK(IER2,Int_PS2_1); // Disable PS2 interrupt 1  
 275   2                  ISR2 = Int_PS2_1;           // Write to clear pending interrupt 
 276   2                  
 277   2                  if(SendtoAUXFlag)
 278   2                  {
 279   3                  for(PS2DataPinStatusCounter=0x00;PS2DataPinStatusCounter<5;PS2DataPinStatusCounter++)
 280   3                  {
 281   4                      if(IS_MASK_SET(PSSTS2, DLS))   // DATA Line Status is high
 282   4                      {
 283   5                          break;
 284   5                      }
 285   4                      else
 286   4                      {
 287   5                          WNCKR = 0x00;   // Delay 15.26 us
 288   5                      }
 289   4                  }
 290   3              }
 291   2              else
 292   2              {
 293   3                  WNCKR = 0x00;           // Delay 15.26 us
 294   3                  WNCKR = 0x00;           // Delay 15.26 us
 295   3                  WNCKR = 0x00;           // Delay 15.26 us
 296   3                  WNCKR = 0x00;           // Delay 15.26 us
 297   3                  WNCKR = 0x00;           // Delay 15.26 us
 298   3                  WNCKR = 0x00;           // Delay 15.26 us
 299   3                  WNCKR = 0x00;           // Delay 15.26 us
 300   3              }
 301   2              
 302   2                      PSCTL1 = PS2_InhibitMode;   // Inhibit clock pin1
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 6   

 303   2                      PSCTL2 = PS2_InhibitMode;   // Inhibit clock pin2
 304   2                      PSCTL3 = PS2_InhibitMode;   // Inhibit clock pin3
 305   2         
 306   2                  PS2_IRQ_Channel = 1;        // Set PS2 1 service flag
 307   2                      F_Service_PS2 = 1;          // Set main service flag
 308   2              PS2StartBit=0;                  // clear start bit flag
 309   2              PS2_SSIRQ_Channel = 0xFF;   //
 310   2                  PS2PortxData[1]=PSDAT2;
 311   2              }
 312   1          else                                                // Start bit interrupt 
 313   1          {
 314   2              PSCTL1 = PS2_InhibitMode;   // Inhibit clock pin1
 315   2              PSCTL3 = PS2_InhibitMode;   // Inhibit clock pin3
 316   2              IER2&= ~(Int_PS2_0+Int_PS2_1+Int_PS2_2);    // Disable all PS2 interrupt
 317   2              ISR2=(Int_PS2_0+Int_PS2_1+Int_PS2_2);       // Write to clear all PS2 pending interrupt
 318   2              PS2StartBit = 1;                // Set start bit flag
 319   2              PS2_SSIRQ_Channel = 1;      //
 320   2              SET_MASK(IER2,Int_PS2_1);   // Enable PS2 interrupt 1
 321   2          }   
 322   1      
 323   1          Hook_IRQ_INT19_PS2Interrupt1();
 324   1      }
 325          
 326          //----------------------------------------------------------------------------
 327          // PS/2 Interrupt 0
 328          //----------------------------------------------------------------------------
 329          void IRQ_INT20_PS2Interrupt0(void)
 330          {
 331   1          #if TouchPad_only
 332   1          CLEAR_MASK(IER2,Int_PS2_0); // Disable PS2 interrupt 0
 333   1          ISR2 = Int_PS2_0;           // Write to clear pending interrupt
 334   1      
 335   1          if(SendtoAUXFlag)
 336   1          {
 337   2              for(PS2DataPinStatusCounter=0x00;PS2DataPinStatusCounter<5;PS2DataPinStatusCounter++)
 338   2              {
 339   3                  //if(IS_MASK_SET(PSSTS1, DLS))   // DATA Line Status is high
 340   3                  if(IS_MASK_SET(GPDRF, BIT1))   // DATA Line Status is high
 341   3                  {
 342   4                      break;
 343   4                  }
 344   3                  else
 345   3                  {
 346   4                      WNCKR = 0x00;   // Delay 15.26 us
 347   4                  }
 348   3              }
 349   2          }
 350   1      
 351   1              PSCTL1 = PS2_InhibitMode;   // Inhibit clock pin1
 352   1              PSCTL2 = PS2_InhibitMode;   // Inhibit clock pin2
 353   1              PSCTL3 = PS2_InhibitMode;   // Inhibit clock pin3
 354   1      
 355   1          PS2_IRQ_Channel = 0;        // Set PS2 0 service flag
 356   1              F_Service_PS2 = 1;          // Set main service flag
 357   1          PS2StartBit=0;                          // clear start bit flag
 358   1          PS2_SSIRQ_Channel = 0xFF;   //
 359   1              PS2PortxData[0]=PSDAT1;
 360   1          #else
                      if(IS_MASK_SET(PSSTS1, TDS))    // Transaction done interrupt 
                      {
                      CLEAR_MASK(IER2,Int_PS2_0); // Disable PS2 interrupt 0
                          ISR2 = Int_PS2_0;           // Write to clear pending interrupt
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 7   

              
                      if(SendtoAUXFlag)
                          {
                          for(PS2DataPinStatusCounter=0x00;PS2DataPinStatusCounter<5;PS2DataPinStatusCounter++)
                          {
                              if(IS_MASK_SET(PSSTS1, DLS))   // DATA Line Status is high
                              {
                                  break;
                              }
                              else
                              {
                                  WNCKR = 0x00;   // Delay 15.26 us
                              }
                          }
                      }
                      else
                      {
                          //WNCKR = 0x00;           // Delay 15.26 us
                          //WNCKR = 0x00;           // Delay 15.26 us
                          //WNCKR = 0x00;           // Delay 15.26 us
                          //WNCKR = 0x00;           // Delay 15.26 us
                          //WNCKR = 0x00;           // Delay 15.26 us
                          //WNCKR = 0x00;           // Delay 15.26 us
                          //WNCKR = 0x00;           // Delay 15.26 us
                      }
                      
                              PSCTL1 = PS2_InhibitMode;   // Inhibit clock pin1
                              PSCTL2 = PS2_InhibitMode;   // Inhibit clock pin2
                              PSCTL3 = PS2_InhibitMode;   // Inhibit clock pin3
              
                          PS2_IRQ_Channel = 0;        // Set PS2 0 service flag
                              F_Service_PS2 = 1;          // Set main service flag
                          PS2StartBit=0;                          // clear start bit flag
                          PS2_SSIRQ_Channel = 0xFF;   //
                              PS2PortxData[0]=PSDAT1;
                      }
                  else                                                    // Start bit interrupt 
                  {
                      PSCTL2 = PS2_InhibitMode;   // Inhibit clock pin2
                      PSCTL3 = PS2_InhibitMode;   // Inhibit clock pin3
                      IER2&= ~(Int_PS2_0+Int_PS2_1+Int_PS2_2);    // Disable all PS2 interrupt
                      ISR2=(Int_PS2_0+Int_PS2_1+Int_PS2_2);       // Write to clear all PS2 pending interrupt
                      PS2StartBit = 1;                    // Set start bit flag
                      PS2_SSIRQ_Channel = 0;      //
                      SET_MASK(IER2,Int_PS2_0);   // Enable PS2 interrupt 0
                  }   
                  #endif
 412   1          Hook_IRQ_INT20_PS2Interrupt0();
 413   1      }
 414          
 415          //----------------------------------------------------------------------------
 416          // WKO[22]
 417          //----------------------------------------------------------------------------
 418          void IRQ_INT21_WKO22(void)
 419          {
 420   1          Hook_IRQ_INT21_WKO22();
 421   1      }
 422          
 423          //----------------------------------------------------------------------------
 424          // SMFI Semaphore Interrupt
 425          //----------------------------------------------------------------------------
 426          void IRQ_INT22_SMFISemaphore(void)
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 8   

 427          {
 428   1          Hook_IRQ_INT22_SMFISemaphore();
 429   1      }
 430          
 431          //----------------------------------------------------------------------------
 432          //
 433          //----------------------------------------------------------------------------
 434          void IRQ_INT23_Null(void)
 435          {
 436   1          Hook_IRQ_INT23_Null();
 437   1      }
 438          
 439          //----------------------------------------------------------------------------
 440          // KBC Input Buffer Full Interrupt
 441          //----------------------------------------------------------------------------
 442          void IRQ_INT24_KBCIBF(void)
 443          {
 444   1              IrqLock_scan();
 445   1              CLEAR_MASK(IER3,Int_KBCIBF);
 446   1          ISR3 = Int_KBCIBF;
 447   1          F_Service_PCI = 1;
 448   1      
 449   1          Hook_IRQ_INT24_KBCIBF();
 450   1      }
 451          
 452          //----------------------------------------------------------------------------
 453          // PMC Input Buffer Full Interrupt PMC1 Input Buffer Full Interrupt
 454          //----------------------------------------------------------------------------
 455          void IRQ_INT25_PMCPMC1IBF(void)
 456          {
 457   1              if(IS_MASK_SET(PM2STS, P_IBF))  // 68/6C input buffer full
 458   1              {
 459   2                      F_Service_PCI3 = 1;
 460   2              }
 461   1              else                                            // 62/66 input buffer full
 462   1              {
 463   2                      F_Service_PCI2 = 1;
 464   2              }
 465   1              CLEAR_MASK(IER3,Int_PMCIBF);
 466   1          ISR3 = Int_PMCIBF;
 467   1      
 468   1          Hook_IRQ_INT25_PMCPMC1IBF();
 469   1      }
 470          
 471          //----------------------------------------------------------------------------
 472          // PMC2 Output Buffer Empty Intr.
 473          //----------------------------------------------------------------------------
 474          void IRQ_INT26_PMC2OBE(void)
 475          {
 476   1          Hook_IRQ_INT26_PMC2OBE();
 477   1      }
 478          
 479          //----------------------------------------------------------------------------
 480          // PMC2 Input Buffer Full Intr.
 481          //----------------------------------------------------------------------------
 482          void IRQ_INT27_PMC2IBF(void)
 483          {
 484   1          Hook_IRQ_INT27_PMC2IBF();
 485   1      }
 486          
 487          //----------------------------------------------------------------------------
 488          // GINT from function 1 of GPD5
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 9   

 489          //----------------------------------------------------------------------------
 490          void IRQ_INT28_GINTofGPD5(void)
 491          {
 492   1          Hook_IRQ_INT28_GINTofGPD5();
 493   1      }
 494          
 495          //----------------------------------------------------------------------------
 496          // EGPC Interrupt
 497          //----------------------------------------------------------------------------
 498          void IRQ_INT29_EGPC(void)
 499          {
 500   1          Hook_IRQ_INT29_EGPC();
 501   1      }
 502          
 503          //----------------------------------------------------------------------------
 504          // External Timer 1 Interrupt
 505          //----------------------------------------------------------------------------
 506          void IRQ_INT30_ET1(void)
 507          {
 508   1          Hook_IRQ_INT30_ET1();
 509   1      }
 510          
 511          //----------------------------------------------------------------------------
 512          // WKO[21]
 513          //----------------------------------------------------------------------------
 514          void IRQ_INT31_WKO21(void)
 515          {
 516   1          Hook_IRQ_INT31_WKO21();
 517   1      }
 518          
 519          //----------------------------------------------------------------------------
 520          // GPINT0
 521          //----------------------------------------------------------------------------
 522          void IRQ_INT32_GPINT0(void)
 523          {
 524   1          Hook_IRQ_INT32_GPINT0();
 525   1      }
 526          
 527          //----------------------------------------------------------------------------
 528          // GPINT1
 529          //----------------------------------------------------------------------------
 530          void IRQ_INT33_GPINT1(void)
 531          {
 532   1          Hook_IRQ_INT33_GPINT1();
 533   1      }
 534          
 535          //----------------------------------------------------------------------------
 536          // GPINT2
 537          //----------------------------------------------------------------------------
 538          void IRQ_INT34_GPINT2(void)
 539          {
 540   1          Hook_IRQ_INT34_GPINT2();
 541   1      }
 542          
 543          //----------------------------------------------------------------------------
 544          // GPINT3
 545          //----------------------------------------------------------------------------
 546          void IRQ_INT35_GPINT3(void)
 547          {
 548   1          Hook_IRQ_INT35_GPINT3();
 549   1      }
 550          
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 10  

 551          //----------------------------------------------------------------------------
 552          // CIR GPINT
 553          //----------------------------------------------------------------------------
 554          void IRQ_INT36_CIRGPINT(void)
 555          {
 556   1          Hook_IRQ_INT36_CIRGPINT();
 557   1      }
 558          
 559          //----------------------------------------------------------------------------
 560          // SSPI Interrupt
 561          //----------------------------------------------------------------------------
 562          void IRQ_INT37_SSPI(void)
 563          {
 564   1          Hook_IRQ_INT37_SSPI();
 565   1      }
 566          
 567          //----------------------------------------------------------------------------
 568          // UART1 Interrupt
 569          //----------------------------------------------------------------------------
 570          void IRQ_INT38_UART1(void)
 571          {
 572   1          Hook_IRQ_INT38_UART1();
 573   1      }
 574          
 575          //----------------------------------------------------------------------------
 576          // UART2 Interrupt
 577          //----------------------------------------------------------------------------
 578          void IRQ_INT39_UART2(void)
 579          {
 580   1          Hook_IRQ_INT39_UART2();
 581   1      }
 582          
 583          //----------------------------------------------------------------------------
 584          //
 585          //----------------------------------------------------------------------------
 586          void IRQ_INT40_Null(void)
 587          {
 588   1          Hook_IRQ_INT40_Null();
 589   1      }
 590          
 591          //----------------------------------------------------------------------------
 592          //
 593          //----------------------------------------------------------------------------
 594          void IRQ_INT41_Null(void)
 595          {
 596   1          Hook_IRQ_INT41_Null();
 597   1      }
 598          
 599          //----------------------------------------------------------------------------
 600          //
 601          //----------------------------------------------------------------------------
 602          void IRQ_INT42_Null(void)
 603          {
 604   1          Hook_IRQ_INT42_Null();
 605   1      }
 606          
 607          //----------------------------------------------------------------------------
 608          //
 609          //----------------------------------------------------------------------------
 610          void IRQ_INT43_Null(void)
 611          {
 612   1          Hook_IRQ_INT43_Null();
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 11  

 613   1      }
 614          
 615          //----------------------------------------------------------------------------
 616          //
 617          //----------------------------------------------------------------------------
 618          void IRQ_INT44_Null(void)
 619          {
 620   1          Hook_IRQ_INT44_Null();
 621   1      }
 622          
 623          //----------------------------------------------------------------------------
 624          //
 625          //----------------------------------------------------------------------------
 626          void IRQ_INT45_Null(void)
 627          {
 628   1          Hook_IRQ_INT45_Null();
 629   1      }
 630          
 631          //----------------------------------------------------------------------------
 632          //
 633          //----------------------------------------------------------------------------
 634          void IRQ_INT46_Null(void)
 635          {
 636   1          Hook_IRQ_INT46_Null();
 637   1      }
 638          
 639          //----------------------------------------------------------------------------
 640          //
 641          //----------------------------------------------------------------------------
 642          void IRQ_INT47_Null(void)
 643          {
 644   1          Hook_IRQ_INT47_Null();
 645   1      }
 646          
 647          //----------------------------------------------------------------------------
 648          // WKO[60]
 649          //----------------------------------------------------------------------------
 650          void IRQ_INT48_WKO60(void)
 651          {
 652   1      //BLD_TIPIA_20160921_009  (Disable GPIOH0 interrupt)
 653   1      /*
 654   1              //Label:BLD_TIPIA_20160827_005
 655   1              CLEAR_MASK(IER6,Int_WKO60);  // Disable interrupt
 656   1              ISR6 = Int_WKO60;            // clear interrupt
 657   1              F_Service_KEY = 1;           // Post service request to scan internal keyboard. 
 658   1      */
 659   1          Hook_IRQ_INT48_WKO60();
 660   1      }
 661          
 662          //----------------------------------------------------------------------------
 663          // WKO[61]
 664          //----------------------------------------------------------------------------
 665          void IRQ_INT49_WKO61(void)
 666          {
 667   1          Hook_IRQ_INT49_WKO61();
 668   1      }
 669          
 670          //----------------------------------------------------------------------------
 671          //WKO[62]
 672          //----------------------------------------------------------------------------
 673          void IRQ_INT50_WKO62(void)
 674          {
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 12  

 675   1          Hook_IRQ_INT50_WKO62();
 676   1      }
 677          
 678          //----------------------------------------------------------------------------
 679          // WKO[63]
 680          //----------------------------------------------------------------------------
 681          void IRQ_INT51_WKO63(void)
 682          {
 683   1          Hook_IRQ_INT51_WKO63();
 684   1      }
 685          
 686          //----------------------------------------------------------------------------
 687          // WKO[64]
 688          //----------------------------------------------------------------------------
 689          void IRQ_INT52_WKO64(void)
 690          {
 691   1          Hook_IRQ_INT52_WKO64();
 692   1      }
 693          
 694          //----------------------------------------------------------------------------
 695          // WKO[65]
 696          //----------------------------------------------------------------------------
 697          void IRQ_INT53_WKO65(void)
 698          {
 699   1          Hook_IRQ_INT53_WKO65();
 700   1      }
 701          
 702          //----------------------------------------------------------------------------
 703          // WKO[66]
 704          //----------------------------------------------------------------------------
 705          void IRQ_INT54_WKO66(void)
 706          {
 707   1          Hook_IRQ_INT54_WKO66();
 708   1      }
 709          
 710          //----------------------------------------------------------------------------
 711          // WKO[67]
 712          //----------------------------------------------------------------------------
 713          void IRQ_INT55_WKO67(void)
 714          {
 715   1          Hook_IRQ_INT55_WKO67();
 716   1      }
 717          
 718          //----------------------------------------------------------------------------
 719          //
 720          //----------------------------------------------------------------------------
 721          void IRQ_INT56_Null(void)
 722          {
 723   1          Hook_IRQ_INT56_Null();
 724   1      }
 725          
 726          //----------------------------------------------------------------------------
 727          //
 728          //----------------------------------------------------------------------------
 729          void IRQ_INT57_Null(void)
 730          {
 731   1          Hook_IRQ_INT57_Null();
 732   1      }
 733          
 734          //----------------------------------------------------------------------------
 735          // External Timer 2 Interrupt
 736          //----------------------------------------------------------------------------
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 13  

 737          void IRQ_INT58_ET2(void)
 738          {
 739   1          Hook_IRQ_INT58_ET2();
 740   1      }
 741          
 742          //----------------------------------------------------------------------------
 743          // Deferred SPI Instruction Interrupt
 744          //----------------------------------------------------------------------------
 745          void IRQ_INT59_DeferredSPIInstruction(void)
 746          {
 747   1          Hook_IRQ_INT59_DeferredSPIInstruction();
 748   1      }
 749          
 750          //----------------------------------------------------------------------------
 751          // TMRINTA0
 752          //----------------------------------------------------------------------------
 753          void IRQ_INT60_TMRINTA0(void)
 754          {
 755   1          Hook_IRQ_INT60_TMRINTA0();
 756   1      }
 757          
 758          //----------------------------------------------------------------------------
 759          // TMRINTA1
 760          //----------------------------------------------------------------------------
 761          void IRQ_INT61_TMRINTA1(void)
 762          {
 763   1          Hook_IRQ_INT61_TMRINTA1();
 764   1      }
 765          
 766          //----------------------------------------------------------------------------
 767          // TMRINTB0
 768          //----------------------------------------------------------------------------
 769          void IRQ_INT62_TMRINTB0(void)
 770          {
 771   1          Hook_IRQ_INT62_TMRINTB0();
 772   1      }
 773          
 774          //----------------------------------------------------------------------------
 775          // TMRINTB1
 776          //----------------------------------------------------------------------------
 777          void IRQ_INT63_TMRINTB1(void)
 778          {
 779   1          Hook_IRQ_INT63_TMRINTB1();
 780   1      }
 781          
 782          //----------------------------------------------------------------------------
 783          // PMC2EX Output Buffer Empty Intr.
 784          //----------------------------------------------------------------------------
 785          void IRQ_INT64_PMC2EXOBE(void)
 786          {
 787   1          Hook_IRQ_INT64_PMC2EXOBE();
 788   1      }
 789          
 790          //----------------------------------------------------------------------------
 791          // PMC2EX Input Buffer Full Intr.
 792          //----------------------------------------------------------------------------
 793          void IRQ_INT65_PMC2EXIBF(void)
 794          {
 795   1          Hook_IRQ_INT65_PMC2EXIBF();
 796   1      }
 797          
 798          //----------------------------------------------------------------------------
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 14  

 799          // PMC3 Output Buffer Empty Intr.
 800          //----------------------------------------------------------------------------
 801          void IRQ_INT66_PMC3OBE(void)
 802          {
 803   1          Hook_IRQ_INT66_PMC3OBE();
 804   1      }
 805          
 806          //----------------------------------------------------------------------------
 807          // PMC3 Input Buffer Full Intr.
 808          //----------------------------------------------------------------------------
 809          void IRQ_INT67_PMC3IBF(void)
 810          {
 811   1          Hook_IRQ_INT67_PMC3IBF();
 812   1      }
 813          
 814          //----------------------------------------------------------------------------
 815          // PMC4 Output Buffer Empty Intr.
 816          //----------------------------------------------------------------------------
 817          void IRQ_INT68_PMC4OBE(void)
 818          {
 819   1          Hook_IRQ_INT68_PMC4OBE();
 820   1      }
 821          
 822          //----------------------------------------------------------------------------
 823          // PMC4 Input Buffer Full Intr.
 824          //----------------------------------------------------------------------------
 825          void IRQ_INT69_PMC4IBF(void)
 826          {
 827   1          Hook_IRQ_INT69_PMC4IBF();
 828   1      }
 829          
 830          //----------------------------------------------------------------------------
 831          //
 832          //----------------------------------------------------------------------------
 833          void IRQ_INT70_Null(void)
 834          {
 835   1          Hook_IRQ_INT70_Null();
 836   1      }
 837          
 838          //----------------------------------------------------------------------------
 839          // I2BRAM Interrupt
 840          //----------------------------------------------------------------------------
 841          void IRQ_INT71_I2BRAM(void)
 842          {
 843   1          Hook_IRQ_INT71_I2BRAM();
 844   1      }
 845          
 846          //----------------------------------------------------------------------------
 847          // WKO[70]
 848          //----------------------------------------------------------------------------
 849          void IRQ_INT72_WKO70(void)
 850          {
 851   1          Hook_IRQ_INT72_WKO70();
 852   1      }
 853          
 854          //----------------------------------------------------------------------------
 855          // WKO[71]
 856          //----------------------------------------------------------------------------
 857          void IRQ_INT73_WKO71(void)
 858          {
 859   1          Hook_IRQ_INT73_WKO71();
 860   1      }
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 15  

 861          
 862          //----------------------------------------------------------------------------
 863          // WKO[72]
 864          //----------------------------------------------------------------------------
 865          void IRQ_INT74_WKO72(void)
 866          {
 867   1          Hook_IRQ_INT74_WKO72();
 868   1      }
 869          
 870          //----------------------------------------------------------------------------
 871          // WKO[73]
 872          //----------------------------------------------------------------------------
 873          void IRQ_INT75_WKO73(void)
 874          {
 875   1          Hook_IRQ_INT75_WKO73();
 876   1      }
 877          
 878          //----------------------------------------------------------------------------
 879          // WKO[74]
 880          //----------------------------------------------------------------------------
 881          void IRQ_INT76_WKO74(void)
 882          {
 883   1          Hook_IRQ_INT76_WKO74();
 884   1      }
 885          
 886          //----------------------------------------------------------------------------
 887          // WKO[75]
 888          //----------------------------------------------------------------------------
 889          void IRQ_INT77_WKO75(void)
 890          {
 891   1          Hook_IRQ_INT77_WKO75();
 892   1      }
 893          
 894          //----------------------------------------------------------------------------
 895          // WKO[76]
 896          //----------------------------------------------------------------------------
 897          void IRQ_INT78_WKO76(void)
 898          {
 899   1          Hook_IRQ_INT78_WKO76();
 900   1      }
 901          
 902          //----------------------------------------------------------------------------
 903          // WKO[77]
 904          //----------------------------------------------------------------------------
 905          void IRQ_INT79_WKO77(void)
 906          {
 907   1          Hook_IRQ_INT79_WKO77();
 908   1      }
 909          
 910          //----------------------------------------------------------------------------
 911          // FUNCTION:   Isr_Int0
 912          // ISR for INT0 (Key Scan Interrupt).
 913          //----------------------------------------------------------------------------
 914          void Isr_Int0(void) interrupt 0 using 2
 915          {
 916   1      
 917   1      }
 918          
 919          //----------------------------------------------------------------------------
 920          // Isr_Tmr0
 921          // ISR for TF0 (Timer 0 Interrupt).  Timer 0 is the 1mS Timer (Timer A).
 922          //----------------------------------------------------------------------------
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 16  

 923          /* ----------------------------------------------------------------------------
 924           * FUNCTION: Irq_Timer_A - Handle Timer A interrupts.
 925           *
 926           * Timer A has a time base of 1 mS.
 927           *
 928           * Input: On entry, "TIMER Timer_A" has the event(s) to handle. Valid Events:
 929           *     TMR_SCAN   -
 930           *     TMR_GENTMO - This timer is a timer that is used for timeout detection
 931           *                  of serial data transmissions to/from the auxiliary
 932           *                  keyboard/pointing devices.
 933           * ------------------------------------------------------------------------- */
 934          void Isr_Tmr0(void) interrupt 1 using 2
 935          {
 936   1          Load_Timer_A();
 937   1          F_Service_MS_1 = 1;   // Request 1 mS timer service.
 938   1      
 939   1              if(guoyong003 == 0x99)
 940   1              guoyong001 = guoyong001 + 1;
 941   1      }
 942          
 943          
 944          /* ----------------------------------------------------------------------------
 945           * FUNCTION:   Isr_Int1
 946           * ISR for INT1 (Interrupt Source A and B Interrupts).
 947           *
 948           * Interrupt Source A:  
 949           * ------------------------------------------------------------------------- */
 950          const FUNCT_PTR_V_V code IRQ_Service[] = 
 951          {
 952              IRQ_INT0_Null,                      //   INT0       Reserved
 953              IRQ_INT1_WKO20,                     //   INT1       WUC interrupt WUI0      
 954              IRQ_INT2_KBCOBE,                    //   INT2       KBC output buffer empty interrupt 
 955              IRQ_INT3_PMCPMC1OBE,                //   INT3       PMC output buffer empty interrupt 
 956              IRQ_INT4_SMBusD,                    //   INT4       SMBus D Interrupt
 957              IRQ_INT5_WKINTAD,                   //   INT5       WUC interrupt (WU10 ~ WU15)(WU40 ~ WU47)        
 958              IRQ_INT6_WKO23,                     //   INT6       WUC interrupt WUI3
 959              IRQ_INT7_PWM,                       //   INT7       PWM interrupt 
 960              
 961              IRQ_INT8_ADC,                           //   INT8   ADC Interrupt   
 962              IRQ_INT9_SMBusA,                            //   INT9       SMB0 Interrupt 
 963              IRQ_INT10_SMBusB,                   //   INT10      SMB1 Interrupt
 964              IRQ_INT11_KBMatrixScan,                 //   INT11  Key matrix scan Int
 965              IRQ_INT12_WKO26,                    //   INT12      WUC interrupt SWUC wake up
 966              IRQ_INT13_WKINTC,                   //   INT13      WUC interrupt KSI wake-up (WU30 ~ WU37)
 967              IRQ_INT14_WKO25,                    //   INT14      WUC interrupt Power switch
 968              IRQ_INT15_CIR,                          //   INT15  CIR interrupt 
 969              
 970              IRQ_INT16_SMBusC,                   //   INT16      SMB2 Interrupt
 971              IRQ_INT17_WKO24,                    //   INT17      WUC Interrupt WUI4
 972              IRQ_INT18_PS2Interrupt2,                //   INT18  PS2 P2 Interrupt
 973              IRQ_INT19_PS2Interrupt1,                //   INT19  PS2 P1 Interrupt
 974              IRQ_INT20_PS2Interrupt0,            //   INT20      PS2 P0 Interrupt
 975              IRQ_INT21_WKO22,                    //   INT21      WUC Interrupt WUI2
 976              IRQ_INT22_SMFISemaphore,            //   INT22  SMFI Semaphore Interrupt
 977              IRQ_INT23_Null,                     //   INT23  --
 978              
 979              IRQ_INT24_KBCIBF,                   //   INT24      KBC input buffer empty interrupt 
 980              IRQ_INT25_PMCPMC1IBF,                   //   INT25  PMC input buffer empty interrupt 
 981              IRQ_INT26_PMC2OBE,                  //   INT26  PMC2 Output Buffer Empty Intr.
 982              IRQ_INT27_PMC2IBF,                  //   INT27  PMC2 Input Buffer Full Intr.
 983              IRQ_INT28_GINTofGPD5,               //   INT28  GINT from function 1 of GPD5
 984              IRQ_INT29_EGPC,                     //   INT29  EGPC Interrupt
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 17  

 985              IRQ_INT30_ET1,                      //   INT30      External timer interrupt 
 986              IRQ_INT31_WKO21,                    //   INT31      WUC     interrupt WUI1
 987              
 988              IRQ_INT32_GPINT0,                       //   INT32  GPINT0  
 989              IRQ_INT33_GPINT1,                       //   INT33  GPINT1      
 990              IRQ_INT34_GPINT2,                   //   INT34  GPINT2
 991              IRQ_INT35_GPINT3,                   //   INT35  GPINT3
 992              IRQ_INT36_CIRGPINT,                 //   INT36  CIR GPINT
 993              IRQ_INT37_SSPI,                     //   INT37  SSPI Interrupt
 994              IRQ_INT38_UART1,                    //   INT38  UART1 Interrupt
 995              IRQ_INT39_UART2,                    //   INT39  UART2 Interrupt
 996              
 997              IRQ_INT40_Null,                             //   INT40      --
 998              IRQ_INT41_Null,                             //   INT41      --
 999              IRQ_INT42_Null,                     //   INT42  --
1000              IRQ_INT43_Null,                     //   INT43  --
1001              IRQ_INT44_Null,                     //   INT44  --
1002              IRQ_INT45_Null,                     //   INT45  --
1003              IRQ_INT46_Null,                     //   INT46      --
1004              IRQ_INT47_Null,                     //   INT47      --
1005              
1006              IRQ_INT48_WKO60,                        //   INT48  WKO[60] 
1007              IRQ_INT49_WKO61,                            //   INT49  WKO[61]     
1008              IRQ_INT50_WKO62,                    //   INT50  WKO[62]
1009              IRQ_INT51_WKO63,                    //   INT51  WKO[63]
1010              IRQ_INT52_WKO64,                    //   INT52  WKO[64]
1011              IRQ_INT53_WKO65,                    //   INT53  WKO[65]
1012              IRQ_INT54_WKO66,                    //   INT54  WKO[66]     
1013              IRQ_INT55_WKO67,                    //   INT55  WKO[67]    
1014          
1015              IRQ_INT56_Null,                             //   INT56  --  
1016              IRQ_INT57_Null,                     //   INT57  --
1017              IRQ_INT58_ET2,                      //   INT58  External Timer 2 Interrupt
1018              IRQ_INT59_DeferredSPIInstruction,   //   INT59  Deferred SPI Instruction Interrupt      
1019              IRQ_INT60_TMRINTA0,                 //   INT60  TMRINTA0
1020              IRQ_INT61_TMRINTA1,                 //   INT61  TMRINTA1
1021              IRQ_INT62_TMRINTB0,                 //   INT62  TMRINTB0  
1022                  IRQ_INT63_TMRINTB1,                 //   INT63  TMRINTB1
1023          
1024              IRQ_INT64_PMC2EXOBE,                    //   INT64  PMC2EX Output Buffer Empty Intr.
1025              IRQ_INT65_PMC2EXIBF,                    //   INT65  PMC2EX Input Buffer Full Intr.
1026              IRQ_INT66_PMC3OBE,                  //   INT66  PMC3 Output Buffer Empty Intr.
1027              IRQ_INT67_PMC3IBF,                  //   INT67  PMC3 Input Buffer Full Intr.
1028              IRQ_INT68_PMC4OBE,                  //   INT68  PMC4 Output Buffer Empty Intr.
1029              IRQ_INT69_PMC4IBF,                  //   INT69  PMC4 Input Buffer Full Intr.
1030              IRQ_INT70_Null,                     //   INT70  --
1031              IRQ_INT71_I2BRAM,                   //   INT71  I2BRAM Interrupt
1032          
1033              IRQ_INT72_WKO70,                        //   INT72  WKO[70] 
1034              IRQ_INT73_WKO71,                            //   INT73  WKO[71]     
1035              IRQ_INT74_WKO72,                    //   INT74  WKO[72]
1036              IRQ_INT75_WKO73,                    //   INT75  WKO[73]
1037              IRQ_INT76_WKO74,                    //   INT76  WKO[74]
1038              IRQ_INT77_WKO75,                    //   INT77  WKO[75]
1039              IRQ_INT78_WKO76,                    //   INT78  WKO[76]     
1040              IRQ_INT79_WKO77,                    //   INT79  WKO[77]   
1041          };
1042                                                                  
1043          void Isr_Int1 (void) interrupt 2 using 2
1044          {
1045   1          if(OEM_Isr_Int1_Request)
1046   1          {
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 18  

1047   2              Hook_OEM_Isr_Int1();
1048   2          }
1049   1          else
1050   1          {
1051   2              if(IVECT==PS2Interrupt2)            // PS/2 Interrupt 2
1052   2              {
1053   3                  IRQ_INT18_PS2Interrupt2();
1054   3              }
1055   2              else if(IVECT==PS2Interrupt1)       // PS/2 Interrupt 1
1056   2              {
1057   3                  IRQ_INT19_PS2Interrupt1();
1058   3              }
1059   2              else if(IVECT==PS2Interrupt0)       // PS/2 Interrupt 0
1060   2              {
1061   3                  IRQ_INT20_PS2Interrupt0();
1062   3              }
1063   2              else
1064   2              {
1065   3                  (IRQ_Service[(IVECT-0x10)&0x7F])();   // Dispatch to service handler.
1066   3              }
1067   2          }
1068   1      } 
1069              
1070          /* ----------------------------------------------------------------------------
1071           * FUNCTION:   Isr_Tmr1
1072           * ISR for TF1 (Timer 1 Interrupt).  Timer 1 is the 2ms Timer (Timer B).
1073           * ------------------------------------------------------------------------- */
1074          void Isr_Tmr1(void) interrupt 3 using 2
1075          {
1076   1              Stop_Timer_B();
1077   1              if ( Timer_B.fbit.SEND_ENABLE )  
1078   1              {   
1079   2                      F_Service_SEND = 1;                     // Post service request.
1080   2              Timer_B.fbit.SEND_ENABLE = 0;
1081   2                      Load_Timer_B();
1082   2              }
1083   1      }
1084          
1085          /* ----------------------------------------------------------------------------
1086           * FUNCTION:   Isr_UART
1087           * ISR for TI or RI (UART Interrupt).
1088           * ------------------------------------------------------------------------- */
1089          void Isr_UART(void) interrupt 4 using 2
1090          {
1091   1      #if UART_Debug
              
                      if (RI)
                      {
                              RI = 0;
                              UART_RX_Buffer[UART_RX_Buffer_In] = SBUF;
                              UART_RX_Buffer_In++;
                              if(UART_RX_MAX_LEN == UART_RX_Buffer_In)  // overflow
                              {
                                      UART_RX_Buffer_In--;
                              }
                      }
              
                      if (TI)
                      {
                              TI = 0;
                              SET_MASK(UART_Buffer_Status,_Send_Ready);     // Set send ready flag
                      }
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 19  

              
              #endif
1111   1      }
1112          
1113          
1114          /* ----------------------------------------------------------------------------
1115           * FUNCTION:   Isr_Tmr2
1116           * ISR for TF2 or EXF2 (Timer 2 Interrupt).
1117           * ------------------------------------------------------------------------- */
1118          void Isr_Tmr2(void) interrupt 5 using 2
1119          {
1120   1      
1121   1      }
1122          
1123          //------------------------------------------------------------------------------
1124          // The function of disable all interrupts
1125          //------------------------------------------------------------------------------
1126          void DisableAllInterrupt(void)
1127          {
1128   1              EA = 0;
1129   1              _nop_();
1130   1              _nop_();
1131   1              _nop_();
1132   1              _nop_();
1133   1      }
1134          
1135          //------------------------------------------------------------------------------
1136          // The function of enable all interrupts
1137          //------------------------------------------------------------------------------
1138          void EnableAllInterrupt(void)
1139          {
1140   1              EA = 1;
1141   1      }
1142          
1143          //------------------------------------------------------------------------------
1144          // The function of enabling KBC Input Buffer Full (60 64 port)Interrupt 
1145          //------------------------------------------------------------------------------
1146          void EnableKBCIBFInt(void)
1147          {
1148   1          SET_MASK(IER3,Int_KBCIBF);
1149   1      }
1150          
1151          //------------------------------------------------------------------------------
1152          // The function of enabling PMC Input Buffer Full (62 66 68 6C port)Interrupt 
1153          //------------------------------------------------------------------------------
1154          void EnablePMCIBFInt(void)
1155          {
1156   1              SET_MASK(IER3,Int_PMCIBF);      
1157   1      }
1158          
1159          //----------------------------------------------------------------------------
1160          // The function of enabling interrupts
1161          //----------------------------------------------------------------------------
1162          void InitEnableInterrupt(void)
1163          {
1164   1              ISR0 = 0xFF;
1165   1              ISR1 = 0xFF;
1166   1              ISR2 = 0xFF;
1167   1              ISR3 = 0xFF;
1168   1              ISR4 = 0xFF;
1169   1          ISR5 = 0xFF;
1170   1              ISR6 = 0xFF;
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 20  

1171   1          ISR7 = 0xFF;
1172   1          ISR8 = 0xFF;
1173   1          ISR9 = 0xFF;
1174   1              ISR15= 0xFF;    //TF_006++
1175   1              
1176   1              EX1=1;                                  // enable external 1 interrupt 
1177   1              EnableAllInterrupt();
1178   1      }
1179          
1180          //----------------------------------------------------------------------------
1181          // The function of enabling module interrupt
1182          //----------------------------------------------------------------------------
1183          void EnableModuleInterrupt(void)
1184          {
1185   1              EnableAllInterrupt();   // enable all interrupts
1186   1          EnableKBCIBFInt();      // Enable 60/64 port input buffer full interrup
1187   1              EnablePMCIBFInt();      // Enable PMC Input Buffer Full (62 66 68 6C port)Interrupt
1188   1      
1189   1              Hook_EnableInterrupt();
1190   1      }
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 21  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com007F (BEGIN)
0000         L?0128:
0000         L?0129:
0000 900000      E     MOV     DPTR,#PSCTL1
0003 7411              MOV     A,#011H
0005 F0                MOVX    @DPTR,A
0006 900000      E     MOV     DPTR,#PSCTL2
0009 F0                MOVX    @DPTR,A
000A 900000      E     MOV     DPTR,#PSCTL3
000D F0                MOVX    @DPTR,A
000E 22                RET     
000F         L?0130:
000F         L?0131:
000F D200        E     SETB    F_Service_PS2
0011 C200        E     CLR     PS2StartBit
0013 7800        E     MOV     R0,#LOW PS2_SSIRQ_Channel
0015 76FF              MOV     @R0,#0FFH
0017 22                RET     
0018         L?0132:
0018         L?0133:
0018 900000      E     MOV     DPTR,#PS2DataPinStatusCounter
001B E0                MOVX    A,@DPTR
001C 04                INC     A
001D F0                MOVX    @DPTR,A
001E E0                MOVX    A,@DPTR
001F 22                RET     
             ; FUNCTION Com007F (END)

             ; FUNCTION IrqLock_scan (BEGIN)
                                           ; SOURCE LINE # 21
                                           ; SOURCE LINE # 22
                                           ; SOURCE LINE # 23
0000 7800        E     MOV     R0,#LOW Int_Var
0002 E6                MOV     A,@R0
0003 4480              ORL     A,#080H
0005 F6                MOV     @R0,A
                                           ; SOURCE LINE # 25
0006 22                RET     
             ; FUNCTION IrqLock_scan (END)

             ; FUNCTION IRQ_INT0_Null (BEGIN)
                                           ; SOURCE LINE # 30
                                           ; SOURCE LINE # 31
                                           ; SOURCE LINE # 33
0000 22                RET     
             ; FUNCTION IRQ_INT0_Null (END)

             ; FUNCTION IRQ_INT1_WKO20 (BEGIN)
                                           ; SOURCE LINE # 38
                                           ; SOURCE LINE # 39
                                           ; SOURCE LINE # 40
0000 020000      E     LJMP    Hook_IRQ_INT1_WKO20
             ; FUNCTION IRQ_INT1_WKO20 (END)

             ; FUNCTION IRQ_INT2_KBCOBE (BEGIN)
                                           ; SOURCE LINE # 46
                                           ; SOURCE LINE # 47
                                           ; SOURCE LINE # 48
0000 020000      E     LJMP    Hook_IRQ_INT2_KBCOBE
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 22  

             ; FUNCTION IRQ_INT2_KBCOBE (END)

             ; FUNCTION IRQ_INT3_PMCPMC1OBE (BEGIN)
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 56
0000 020000      E     LJMP    Hook_IRQ_INT3_PMCPMC1OBE
             ; FUNCTION IRQ_INT3_PMCPMC1OBE (END)

             ; FUNCTION IRQ_INT4_SMBusD (BEGIN)
                                           ; SOURCE LINE # 62
                                           ; SOURCE LINE # 63
                                           ; SOURCE LINE # 64
0000 020000      E     LJMP    Hook_IRQ_INT4_SMBusD
             ; FUNCTION IRQ_INT4_SMBusD (END)

             ; FUNCTION IRQ_INT5_WKINTAD (BEGIN)
                                           ; SOURCE LINE # 70
                                           ; SOURCE LINE # 71
                                           ; SOURCE LINE # 72
0000 020000      E     LJMP    Hook_IRQ_INT5_WKINTAD
             ; FUNCTION IRQ_INT5_WKINTAD (END)

             ; FUNCTION IRQ_INT6_WKO23 (BEGIN)
                                           ; SOURCE LINE # 78
                                           ; SOURCE LINE # 79
                                           ; SOURCE LINE # 80
0000 020000      E     LJMP    Hook_IRQ_INT6_WKO23
             ; FUNCTION IRQ_INT6_WKO23 (END)

             ; FUNCTION IRQ_INT7_PWM (BEGIN)
                                           ; SOURCE LINE # 86
                                           ; SOURCE LINE # 87
                                           ; SOURCE LINE # 88
0000 020000      E     LJMP    Hook_IRQ_INT7_PWM
             ; FUNCTION IRQ_INT7_PWM (END)

             ; FUNCTION IRQ_INT8_ADC (BEGIN)
                                           ; SOURCE LINE # 94
                                           ; SOURCE LINE # 95
                                           ; SOURCE LINE # 96
0000 020000      E     LJMP    Hook_IRQ_INT8_ADC
             ; FUNCTION IRQ_INT8_ADC (END)

             ; FUNCTION IRQ_INT9_SMBusA (BEGIN)
                                           ; SOURCE LINE # 102
                                           ; SOURCE LINE # 103
                                           ; SOURCE LINE # 104
0000 020000      E     LJMP    Hook_IRQ_INT9_SMBusA
             ; FUNCTION IRQ_INT9_SMBusA (END)

             ; FUNCTION IRQ_INT10_SMBusB (BEGIN)
                                           ; SOURCE LINE # 110
                                           ; SOURCE LINE # 111
                                           ; SOURCE LINE # 112
0000 020000      E     LJMP    Hook_IRQ_INT10_SMBusB
             ; FUNCTION IRQ_INT10_SMBusB (END)

             ; FUNCTION IRQ_INT11_KBMatrixScan (BEGIN)
                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 120
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 23  

0000 900000      E     MOV     DPTR,#IER1
0003 E0                MOVX    A,@DPTR
0004 54F7              ANL     A,#0F7H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 121
0007 900000      E     MOV     DPTR,#ISR1
000A 7408              MOV     A,#08H
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 122
000D D200        E     SETB    F_Service_KEY
                                           ; SOURCE LINE # 124
000F 020000      E     LJMP    Hook_IRQ_INT11_KBMatrixScan
             ; FUNCTION IRQ_INT11_KBMatrixScan (END)

             ; FUNCTION IRQ_INT12_WKO26 (BEGIN)
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 132
0000 020000      E     LJMP    Hook_IRQ_INT12_WKO26
             ; FUNCTION IRQ_INT12_WKO26 (END)

             ; FUNCTION IRQ_INT13_WKINTC (BEGIN)
                                           ; SOURCE LINE # 138
                                           ; SOURCE LINE # 139
                                           ; SOURCE LINE # 140
0000 020000      E     LJMP    Hook_IRQ_INT13_WKINTC
             ; FUNCTION IRQ_INT13_WKINTC (END)

             ; FUNCTION IRQ_INT14_WKO25 (BEGIN)
                                           ; SOURCE LINE # 146
                                           ; SOURCE LINE # 147
                                           ; SOURCE LINE # 148
0000 020000      E     LJMP    Hook_IRQ_INT14_WKO25
             ; FUNCTION IRQ_INT14_WKO25 (END)

             ; FUNCTION IRQ_INT15_CIR (BEGIN)
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 155
                                           ; SOURCE LINE # 156
0000 020000      E     LJMP    Hook_IRQ_INT15_CIR
             ; FUNCTION IRQ_INT15_CIR (END)

             ; FUNCTION IRQ_INT16_SMBusC (BEGIN)
                                           ; SOURCE LINE # 162
                                           ; SOURCE LINE # 163
                                           ; SOURCE LINE # 164
0000 020000      E     LJMP    Hook_IRQ_INT16_SMBusC
             ; FUNCTION IRQ_INT16_SMBusC (END)

             ; FUNCTION IRQ_INT17_WKO24 (BEGIN)
                                           ; SOURCE LINE # 170
                                           ; SOURCE LINE # 171
                                           ; SOURCE LINE # 172
0000 020000      E     LJMP    Hook_IRQ_INT17_WKO24
             ; FUNCTION IRQ_INT17_WKO24 (END)

             ; FUNCTION IRQ_INT18_PS2Interrupt2 (BEGIN)
                                           ; SOURCE LINE # 178
                                           ; SOURCE LINE # 179
                                           ; SOURCE LINE # 182
0000 900000      E     MOV     DPTR,#IER2
0003 E0                MOVX    A,@DPTR
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 24  

0004 54FB              ANL     A,#0FBH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 183
0007 900000      E     MOV     DPTR,#ISR2
000A 7404              MOV     A,#04H
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 185
000D 300017      E     JNB     SendtoAUXFlag,?C0020
                                           ; SOURCE LINE # 186
                                           ; SOURCE LINE # 187
0010 E4                CLR     A
0011 900000      E     MOV     DPTR,#PS2DataPinStatusCounter
0014 F0                MOVX    @DPTR,A
0015         ?C0021:
                                           ; SOURCE LINE # 188
                                           ; SOURCE LINE # 190
0015 900000      E     MOV     DPTR,#GPDRF
0018 E0                MOVX    A,@DPTR
0019 20E50B            JB      ACC.5,?C0020
                                           ; SOURCE LINE # 191
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 193
001C         ?C0024:
                                           ; SOURCE LINE # 195
                                           ; SOURCE LINE # 196
001C E4                CLR     A
001D 900000      E     MOV     DPTR,#WNCKR
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 197
                                           ; SOURCE LINE # 198
0021         ?C0023:
0021 120000      R     LCALL   L?0132
0024 B405EE            CJNE    A,#05H,?C0021
                                           ; SOURCE LINE # 199
0027         ?C0020:
                                           ; SOURCE LINE # 201
                                           ; SOURCE LINE # 202
                                           ; SOURCE LINE # 203
0027 120000      R     LCALL   L?0128
                                           ; SOURCE LINE # 205
002A 7800        E     MOV     R0,#LOW PS2_IRQ_Channel
002C 7602              MOV     @R0,#02H
                                           ; SOURCE LINE # 206
                                           ; SOURCE LINE # 207
                                           ; SOURCE LINE # 208
002E 120000      R     LCALL   L?0130
                                           ; SOURCE LINE # 209
0031 900000      E     MOV     DPTR,#PSDAT3
0034 E0                MOVX    A,@DPTR
0035 7800        E     MOV     R0,#LOW PS2PortxData+02H
0037 F6                MOV     @R0,A
                                           ; SOURCE LINE # 264
0038 020000      E     LJMP    Hook_IRQ_INT18_PS2Interrupt2
             ; FUNCTION IRQ_INT18_PS2Interrupt2 (END)

             ; FUNCTION IRQ_INT19_PS2Interrupt1 (BEGIN)
                                           ; SOURCE LINE # 270
                                           ; SOURCE LINE # 271
                                           ; SOURCE LINE # 272
0000 900000      E     MOV     DPTR,#PSSTS2
0003 E0                MOVX    A,@DPTR
0004 30E347            JNB     ACC.3,?C0027
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 25  

                                           ; SOURCE LINE # 273
                                           ; SOURCE LINE # 274
0007 900000      E     MOV     DPTR,#IER2
000A E0                MOVX    A,@DPTR
000B 54F7              ANL     A,#0F7H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 275
000E 900000      E     MOV     DPTR,#ISR2
0011 7408              MOV     A,#08H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 277
0014 300019      E     JNB     SendtoAUXFlag,?C0028
                                           ; SOURCE LINE # 278
                                           ; SOURCE LINE # 279
0017 E4                CLR     A
0018 900000      E     MOV     DPTR,#PS2DataPinStatusCounter
001B F0                MOVX    @DPTR,A
001C         ?C0029:
                                           ; SOURCE LINE # 280
                                           ; SOURCE LINE # 281
001C 900000      E     MOV     DPTR,#PSSTS2
001F E0                MOVX    A,@DPTR
0020 20E018            JB      ACC.0,?C0034
                                           ; SOURCE LINE # 282
                                           ; SOURCE LINE # 283
                                           ; SOURCE LINE # 284
0023         ?C0032:
                                           ; SOURCE LINE # 286
                                           ; SOURCE LINE # 287
0023 E4                CLR     A
0024 900000      E     MOV     DPTR,#WNCKR
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 288
                                           ; SOURCE LINE # 289
0028         ?C0031:
0028 120000      R     LCALL   L?0132
002B B405EE            CJNE    A,#05H,?C0029
002E 800B              SJMP    ?C0034
                                           ; SOURCE LINE # 290
0030         ?C0028:
                                           ; SOURCE LINE # 292
                                           ; SOURCE LINE # 293
0030 E4                CLR     A
0031 900000      E     MOV     DPTR,#WNCKR
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 294
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 295
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 296
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 297
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 298
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 299
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 300
003B         ?C0034:
                                           ; SOURCE LINE # 302
                                           ; SOURCE LINE # 303
                                           ; SOURCE LINE # 304
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 26  

003B 120000      R     LCALL   L?0128
                                           ; SOURCE LINE # 306
003E 7800        E     MOV     R0,#LOW PS2_IRQ_Channel
0040 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 307
                                           ; SOURCE LINE # 308
                                           ; SOURCE LINE # 309
0042 120000      R     LCALL   L?0130
                                           ; SOURCE LINE # 310
0045 900000      E     MOV     DPTR,#PSDAT2
0048 E0                MOVX    A,@DPTR
0049 7800        E     MOV     R0,#LOW PS2PortxData+01H
004B F6                MOV     @R0,A
                                           ; SOURCE LINE # 311
004C 8024              SJMP    ?C0035
004E         ?C0027:
                                           ; SOURCE LINE # 313
                                           ; SOURCE LINE # 314
004E 900000      E     MOV     DPTR,#PSCTL1
0051 7411              MOV     A,#011H
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 315
0054 900000      E     MOV     DPTR,#PSCTL3
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 316
0058 900000      E     MOV     DPTR,#IER2
005B E0                MOVX    A,@DPTR
005C 54E3              ANL     A,#0E3H
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 317
005F 900000      E     MOV     DPTR,#ISR2
0062 741C              MOV     A,#01CH
0064 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 318
0065 D200        E     SETB    PS2StartBit
                                           ; SOURCE LINE # 319
0067 7800        E     MOV     R0,#LOW PS2_SSIRQ_Channel
0069 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 320
006B 900000      E     MOV     DPTR,#IER2
006E E0                MOVX    A,@DPTR
006F 4408              ORL     A,#08H
0071 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 321
0072         ?C0035:
                                           ; SOURCE LINE # 323
0072 020000      E     LJMP    Hook_IRQ_INT19_PS2Interrupt1
             ; FUNCTION IRQ_INT19_PS2Interrupt1 (END)

             ; FUNCTION IRQ_INT20_PS2Interrupt0 (BEGIN)
                                           ; SOURCE LINE # 329
                                           ; SOURCE LINE # 330
                                           ; SOURCE LINE # 332
0000 900000      E     MOV     DPTR,#IER2
0003 E0                MOVX    A,@DPTR
0004 54EF              ANL     A,#0EFH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 333
0007 900000      E     MOV     DPTR,#ISR2
000A 7410              MOV     A,#010H
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 335
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 27  

000D 300017      E     JNB     SendtoAUXFlag,?C0037
                                           ; SOURCE LINE # 336
                                           ; SOURCE LINE # 337
0010 E4                CLR     A
0011 900000      E     MOV     DPTR,#PS2DataPinStatusCounter
0014 F0                MOVX    @DPTR,A
0015         ?C0038:
                                           ; SOURCE LINE # 338
                                           ; SOURCE LINE # 340
0015 900000      E     MOV     DPTR,#GPDRF
0018 E0                MOVX    A,@DPTR
0019 20E10B            JB      ACC.1,?C0037
                                           ; SOURCE LINE # 341
                                           ; SOURCE LINE # 342
                                           ; SOURCE LINE # 343
001C         ?C0041:
                                           ; SOURCE LINE # 345
                                           ; SOURCE LINE # 346
001C E4                CLR     A
001D 900000      E     MOV     DPTR,#WNCKR
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 347
                                           ; SOURCE LINE # 348
0021         ?C0040:
0021 120000      R     LCALL   L?0133
0024 B405EE            CJNE    A,#05H,?C0038
                                           ; SOURCE LINE # 349
0027         ?C0037:
                                           ; SOURCE LINE # 351
                                           ; SOURCE LINE # 352
                                           ; SOURCE LINE # 353
0027 120000      R     LCALL   L?0129
                                           ; SOURCE LINE # 355
002A E4                CLR     A
002B 7800        E     MOV     R0,#LOW PS2_IRQ_Channel
002D F6                MOV     @R0,A
                                           ; SOURCE LINE # 356
                                           ; SOURCE LINE # 357
                                           ; SOURCE LINE # 358
002E 120000      R     LCALL   L?0131
                                           ; SOURCE LINE # 359
0031 900000      E     MOV     DPTR,#PSDAT1
0034 E0                MOVX    A,@DPTR
0035 7800        E     MOV     R0,#LOW PS2PortxData
0037 F6                MOV     @R0,A
                                           ; SOURCE LINE # 412
0038 020000      E     LJMP    Hook_IRQ_INT20_PS2Interrupt0
             ; FUNCTION IRQ_INT20_PS2Interrupt0 (END)

             ; FUNCTION IRQ_INT21_WKO22 (BEGIN)
                                           ; SOURCE LINE # 418
                                           ; SOURCE LINE # 419
                                           ; SOURCE LINE # 420
0000 020000      E     LJMP    Hook_IRQ_INT21_WKO22
             ; FUNCTION IRQ_INT21_WKO22 (END)

             ; FUNCTION IRQ_INT22_SMFISemaphore (BEGIN)
                                           ; SOURCE LINE # 426
                                           ; SOURCE LINE # 427
                                           ; SOURCE LINE # 428
0000 020000      E     LJMP    Hook_IRQ_INT22_SMFISemaphore
             ; FUNCTION IRQ_INT22_SMFISemaphore (END)
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 28  


             ; FUNCTION IRQ_INT23_Null (BEGIN)
                                           ; SOURCE LINE # 434
                                           ; SOURCE LINE # 435
                                           ; SOURCE LINE # 436
0000 020000      E     LJMP    Hook_IRQ_INT23_Null
             ; FUNCTION IRQ_INT23_Null (END)

             ; FUNCTION IRQ_INT24_KBCIBF (BEGIN)
                                           ; SOURCE LINE # 442
                                           ; SOURCE LINE # 443
                                           ; SOURCE LINE # 444
0000 120000      R     LCALL   IrqLock_scan
                                           ; SOURCE LINE # 445
0003 900000      E     MOV     DPTR,#IER3
0006 E0                MOVX    A,@DPTR
0007 54FE              ANL     A,#0FEH
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 446
000A 900000      E     MOV     DPTR,#ISR3
000D 7401              MOV     A,#01H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 447
0010 D200        E     SETB    F_Service_PCI
                                           ; SOURCE LINE # 449
0012 020000      E     LJMP    Hook_IRQ_INT24_KBCIBF
             ; FUNCTION IRQ_INT24_KBCIBF (END)

             ; FUNCTION IRQ_INT25_PMCPMC1IBF (BEGIN)
                                           ; SOURCE LINE # 455
                                           ; SOURCE LINE # 456
                                           ; SOURCE LINE # 457
0000 900000      E     MOV     DPTR,#PM2STS
0003 E0                MOVX    A,@DPTR
0004 30E104            JNB     ACC.1,?C0048
                                           ; SOURCE LINE # 458
                                           ; SOURCE LINE # 459
0007 D200        E     SETB    F_Service_PCI3
                                           ; SOURCE LINE # 460
0009 8002              SJMP    ?C0049
000B         ?C0048:
                                           ; SOURCE LINE # 462
                                           ; SOURCE LINE # 463
000B D200        E     SETB    F_Service_PCI2
                                           ; SOURCE LINE # 464
000D         ?C0049:
                                           ; SOURCE LINE # 465
000D 900000      E     MOV     DPTR,#IER3
0010 E0                MOVX    A,@DPTR
0011 54FD              ANL     A,#0FDH
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 466
0014 900000      E     MOV     DPTR,#ISR3
0017 7402              MOV     A,#02H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 468
001A 020000      E     LJMP    Hook_IRQ_INT25_PMCPMC1IBF
             ; FUNCTION IRQ_INT25_PMCPMC1IBF (END)

             ; FUNCTION IRQ_INT26_PMC2OBE (BEGIN)
                                           ; SOURCE LINE # 474
                                           ; SOURCE LINE # 475
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 29  

                                           ; SOURCE LINE # 476
0000 020000      E     LJMP    Hook_IRQ_INT26_PMC2OBE
             ; FUNCTION IRQ_INT26_PMC2OBE (END)

             ; FUNCTION IRQ_INT27_PMC2IBF (BEGIN)
                                           ; SOURCE LINE # 482
                                           ; SOURCE LINE # 483
                                           ; SOURCE LINE # 484
0000 020000      E     LJMP    Hook_IRQ_INT27_PMC2IBF
             ; FUNCTION IRQ_INT27_PMC2IBF (END)

             ; FUNCTION IRQ_INT28_GINTofGPD5 (BEGIN)
                                           ; SOURCE LINE # 490
                                           ; SOURCE LINE # 491
                                           ; SOURCE LINE # 492
0000 020000      E     LJMP    Hook_IRQ_INT28_GINTofGPD5
             ; FUNCTION IRQ_INT28_GINTofGPD5 (END)

             ; FUNCTION IRQ_INT29_EGPC (BEGIN)
                                           ; SOURCE LINE # 498
                                           ; SOURCE LINE # 499
                                           ; SOURCE LINE # 500
0000 020000      E     LJMP    Hook_IRQ_INT29_EGPC
             ; FUNCTION IRQ_INT29_EGPC (END)

             ; FUNCTION IRQ_INT30_ET1 (BEGIN)
                                           ; SOURCE LINE # 506
                                           ; SOURCE LINE # 507
                                           ; SOURCE LINE # 508
0000 020000      E     LJMP    Hook_IRQ_INT30_ET1
             ; FUNCTION IRQ_INT30_ET1 (END)

             ; FUNCTION IRQ_INT31_WKO21 (BEGIN)
                                           ; SOURCE LINE # 514
                                           ; SOURCE LINE # 515
                                           ; SOURCE LINE # 516
0000 020000      E     LJMP    Hook_IRQ_INT31_WKO21
             ; FUNCTION IRQ_INT31_WKO21 (END)

             ; FUNCTION IRQ_INT32_GPINT0 (BEGIN)
                                           ; SOURCE LINE # 522
                                           ; SOURCE LINE # 523
                                           ; SOURCE LINE # 524
0000 020000      E     LJMP    Hook_IRQ_INT32_GPINT0
             ; FUNCTION IRQ_INT32_GPINT0 (END)

             ; FUNCTION IRQ_INT33_GPINT1 (BEGIN)
                                           ; SOURCE LINE # 530
                                           ; SOURCE LINE # 531
                                           ; SOURCE LINE # 532
0000 020000      E     LJMP    Hook_IRQ_INT33_GPINT1
             ; FUNCTION IRQ_INT33_GPINT1 (END)

             ; FUNCTION IRQ_INT34_GPINT2 (BEGIN)
                                           ; SOURCE LINE # 538
                                           ; SOURCE LINE # 539
                                           ; SOURCE LINE # 540
0000 020000      E     LJMP    Hook_IRQ_INT34_GPINT2
             ; FUNCTION IRQ_INT34_GPINT2 (END)

             ; FUNCTION IRQ_INT35_GPINT3 (BEGIN)
                                           ; SOURCE LINE # 546
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 30  

                                           ; SOURCE LINE # 547
                                           ; SOURCE LINE # 548
0000 020000      E     LJMP    Hook_IRQ_INT35_GPINT3
             ; FUNCTION IRQ_INT35_GPINT3 (END)

             ; FUNCTION IRQ_INT36_CIRGPINT (BEGIN)
                                           ; SOURCE LINE # 554
                                           ; SOURCE LINE # 555
                                           ; SOURCE LINE # 556
0000 020000      E     LJMP    Hook_IRQ_INT36_CIRGPINT
             ; FUNCTION IRQ_INT36_CIRGPINT (END)

             ; FUNCTION IRQ_INT37_SSPI (BEGIN)
                                           ; SOURCE LINE # 562
                                           ; SOURCE LINE # 563
                                           ; SOURCE LINE # 564
0000 020000      E     LJMP    Hook_IRQ_INT37_SSPI
             ; FUNCTION IRQ_INT37_SSPI (END)

             ; FUNCTION IRQ_INT38_UART1 (BEGIN)
                                           ; SOURCE LINE # 570
                                           ; SOURCE LINE # 571
                                           ; SOURCE LINE # 572
0000 020000      E     LJMP    Hook_IRQ_INT38_UART1
             ; FUNCTION IRQ_INT38_UART1 (END)

             ; FUNCTION IRQ_INT39_UART2 (BEGIN)
                                           ; SOURCE LINE # 578
                                           ; SOURCE LINE # 579
                                           ; SOURCE LINE # 580
0000 020000      E     LJMP    Hook_IRQ_INT39_UART2
             ; FUNCTION IRQ_INT39_UART2 (END)

             ; FUNCTION IRQ_INT40_Null (BEGIN)
                                           ; SOURCE LINE # 586
                                           ; SOURCE LINE # 587
                                           ; SOURCE LINE # 588
0000 020000      E     LJMP    Hook_IRQ_INT40_Null
             ; FUNCTION IRQ_INT40_Null (END)

             ; FUNCTION IRQ_INT41_Null (BEGIN)
                                           ; SOURCE LINE # 594
                                           ; SOURCE LINE # 595
                                           ; SOURCE LINE # 596
0000 020000      E     LJMP    Hook_IRQ_INT41_Null
             ; FUNCTION IRQ_INT41_Null (END)

             ; FUNCTION IRQ_INT42_Null (BEGIN)
                                           ; SOURCE LINE # 602
                                           ; SOURCE LINE # 603
                                           ; SOURCE LINE # 604
0000 020000      E     LJMP    Hook_IRQ_INT42_Null
             ; FUNCTION IRQ_INT42_Null (END)

             ; FUNCTION IRQ_INT43_Null (BEGIN)
                                           ; SOURCE LINE # 610
                                           ; SOURCE LINE # 611
                                           ; SOURCE LINE # 612
0000 020000      E     LJMP    Hook_IRQ_INT43_Null
             ; FUNCTION IRQ_INT43_Null (END)

             ; FUNCTION IRQ_INT44_Null (BEGIN)
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 31  

                                           ; SOURCE LINE # 618
                                           ; SOURCE LINE # 619
                                           ; SOURCE LINE # 620
0000 020000      E     LJMP    Hook_IRQ_INT44_Null
             ; FUNCTION IRQ_INT44_Null (END)

             ; FUNCTION IRQ_INT45_Null (BEGIN)
                                           ; SOURCE LINE # 626
                                           ; SOURCE LINE # 627
                                           ; SOURCE LINE # 628
0000 020000      E     LJMP    Hook_IRQ_INT45_Null
             ; FUNCTION IRQ_INT45_Null (END)

             ; FUNCTION IRQ_INT46_Null (BEGIN)
                                           ; SOURCE LINE # 634
                                           ; SOURCE LINE # 635
                                           ; SOURCE LINE # 636
0000 020000      E     LJMP    Hook_IRQ_INT46_Null
             ; FUNCTION IRQ_INT46_Null (END)

             ; FUNCTION IRQ_INT47_Null (BEGIN)
                                           ; SOURCE LINE # 642
                                           ; SOURCE LINE # 643
                                           ; SOURCE LINE # 644
0000 020000      E     LJMP    Hook_IRQ_INT47_Null
             ; FUNCTION IRQ_INT47_Null (END)

             ; FUNCTION IRQ_INT48_WKO60 (BEGIN)
                                           ; SOURCE LINE # 650
                                           ; SOURCE LINE # 651
                                           ; SOURCE LINE # 659
0000 020000      E     LJMP    Hook_IRQ_INT48_WKO60
             ; FUNCTION IRQ_INT48_WKO60 (END)

             ; FUNCTION IRQ_INT49_WKO61 (BEGIN)
                                           ; SOURCE LINE # 665
                                           ; SOURCE LINE # 666
                                           ; SOURCE LINE # 667
0000 020000      E     LJMP    Hook_IRQ_INT49_WKO61
             ; FUNCTION IRQ_INT49_WKO61 (END)

             ; FUNCTION IRQ_INT50_WKO62 (BEGIN)
                                           ; SOURCE LINE # 673
                                           ; SOURCE LINE # 674
                                           ; SOURCE LINE # 675
0000 020000      E     LJMP    Hook_IRQ_INT50_WKO62
             ; FUNCTION IRQ_INT50_WKO62 (END)

             ; FUNCTION IRQ_INT51_WKO63 (BEGIN)
                                           ; SOURCE LINE # 681
                                           ; SOURCE LINE # 682
                                           ; SOURCE LINE # 683
0000 020000      E     LJMP    Hook_IRQ_INT51_WKO63
             ; FUNCTION IRQ_INT51_WKO63 (END)

             ; FUNCTION IRQ_INT52_WKO64 (BEGIN)
                                           ; SOURCE LINE # 689
                                           ; SOURCE LINE # 690
                                           ; SOURCE LINE # 691
0000 020000      E     LJMP    Hook_IRQ_INT52_WKO64
             ; FUNCTION IRQ_INT52_WKO64 (END)

C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 32  

             ; FUNCTION IRQ_INT53_WKO65 (BEGIN)
                                           ; SOURCE LINE # 697
                                           ; SOURCE LINE # 698
                                           ; SOURCE LINE # 699
0000 020000      E     LJMP    Hook_IRQ_INT53_WKO65
             ; FUNCTION IRQ_INT53_WKO65 (END)

             ; FUNCTION IRQ_INT54_WKO66 (BEGIN)
                                           ; SOURCE LINE # 705
                                           ; SOURCE LINE # 706
                                           ; SOURCE LINE # 707
0000 020000      E     LJMP    Hook_IRQ_INT54_WKO66
             ; FUNCTION IRQ_INT54_WKO66 (END)

             ; FUNCTION IRQ_INT55_WKO67 (BEGIN)
                                           ; SOURCE LINE # 713
                                           ; SOURCE LINE # 714
                                           ; SOURCE LINE # 715
0000 020000      E     LJMP    Hook_IRQ_INT55_WKO67
             ; FUNCTION IRQ_INT55_WKO67 (END)

             ; FUNCTION IRQ_INT56_Null (BEGIN)
                                           ; SOURCE LINE # 721
                                           ; SOURCE LINE # 722
                                           ; SOURCE LINE # 723
0000 020000      E     LJMP    Hook_IRQ_INT56_Null
             ; FUNCTION IRQ_INT56_Null (END)

             ; FUNCTION IRQ_INT57_Null (BEGIN)
                                           ; SOURCE LINE # 729
                                           ; SOURCE LINE # 730
                                           ; SOURCE LINE # 731
0000 020000      E     LJMP    Hook_IRQ_INT57_Null
             ; FUNCTION IRQ_INT57_Null (END)

             ; FUNCTION IRQ_INT58_ET2 (BEGIN)
                                           ; SOURCE LINE # 737
                                           ; SOURCE LINE # 738
                                           ; SOURCE LINE # 739
0000 020000      E     LJMP    Hook_IRQ_INT58_ET2
             ; FUNCTION IRQ_INT58_ET2 (END)

             ; FUNCTION IRQ_INT59_DeferredSPIInstruction (BEGIN)
                                           ; SOURCE LINE # 745
                                           ; SOURCE LINE # 746
                                           ; SOURCE LINE # 747
0000 020000      E     LJMP    Hook_IRQ_INT59_DeferredSPIInstruction
             ; FUNCTION IRQ_INT59_DeferredSPIInstruction (END)

             ; FUNCTION IRQ_INT60_TMRINTA0 (BEGIN)
                                           ; SOURCE LINE # 753
                                           ; SOURCE LINE # 754
                                           ; SOURCE LINE # 755
0000 020000      E     LJMP    Hook_IRQ_INT60_TMRINTA0
             ; FUNCTION IRQ_INT60_TMRINTA0 (END)

             ; FUNCTION IRQ_INT61_TMRINTA1 (BEGIN)
                                           ; SOURCE LINE # 761
                                           ; SOURCE LINE # 762
                                           ; SOURCE LINE # 763
0000 020000      E     LJMP    Hook_IRQ_INT61_TMRINTA1
             ; FUNCTION IRQ_INT61_TMRINTA1 (END)
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 33  


             ; FUNCTION IRQ_INT62_TMRINTB0 (BEGIN)
                                           ; SOURCE LINE # 769
                                           ; SOURCE LINE # 770
                                           ; SOURCE LINE # 771
0000 020000      E     LJMP    Hook_IRQ_INT62_TMRINTB0
             ; FUNCTION IRQ_INT62_TMRINTB0 (END)

             ; FUNCTION IRQ_INT63_TMRINTB1 (BEGIN)
                                           ; SOURCE LINE # 777
                                           ; SOURCE LINE # 778
                                           ; SOURCE LINE # 779
0000 020000      E     LJMP    Hook_IRQ_INT63_TMRINTB1
             ; FUNCTION IRQ_INT63_TMRINTB1 (END)

             ; FUNCTION IRQ_INT64_PMC2EXOBE (BEGIN)
                                           ; SOURCE LINE # 785
                                           ; SOURCE LINE # 786
                                           ; SOURCE LINE # 787
0000 020000      E     LJMP    Hook_IRQ_INT64_PMC2EXOBE
             ; FUNCTION IRQ_INT64_PMC2EXOBE (END)

             ; FUNCTION IRQ_INT65_PMC2EXIBF (BEGIN)
                                           ; SOURCE LINE # 793
                                           ; SOURCE LINE # 794
                                           ; SOURCE LINE # 795
0000 020000      E     LJMP    Hook_IRQ_INT65_PMC2EXIBF
             ; FUNCTION IRQ_INT65_PMC2EXIBF (END)

             ; FUNCTION IRQ_INT66_PMC3OBE (BEGIN)
                                           ; SOURCE LINE # 801
                                           ; SOURCE LINE # 802
                                           ; SOURCE LINE # 803
0000 020000      E     LJMP    Hook_IRQ_INT66_PMC3OBE
             ; FUNCTION IRQ_INT66_PMC3OBE (END)

             ; FUNCTION IRQ_INT67_PMC3IBF (BEGIN)
                                           ; SOURCE LINE # 809
                                           ; SOURCE LINE # 810
                                           ; SOURCE LINE # 811
0000 020000      E     LJMP    Hook_IRQ_INT67_PMC3IBF
             ; FUNCTION IRQ_INT67_PMC3IBF (END)

             ; FUNCTION IRQ_INT68_PMC4OBE (BEGIN)
                                           ; SOURCE LINE # 817
                                           ; SOURCE LINE # 818
                                           ; SOURCE LINE # 819
0000 020000      E     LJMP    Hook_IRQ_INT68_PMC4OBE
             ; FUNCTION IRQ_INT68_PMC4OBE (END)

             ; FUNCTION IRQ_INT69_PMC4IBF (BEGIN)
                                           ; SOURCE LINE # 825
                                           ; SOURCE LINE # 826
                                           ; SOURCE LINE # 827
0000 020000      E     LJMP    Hook_IRQ_INT69_PMC4IBF
             ; FUNCTION IRQ_INT69_PMC4IBF (END)

             ; FUNCTION IRQ_INT70_Null (BEGIN)
                                           ; SOURCE LINE # 833
                                           ; SOURCE LINE # 834
                                           ; SOURCE LINE # 835
0000 020000      E     LJMP    Hook_IRQ_INT70_Null
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 34  

             ; FUNCTION IRQ_INT70_Null (END)

             ; FUNCTION IRQ_INT71_I2BRAM (BEGIN)
                                           ; SOURCE LINE # 841
                                           ; SOURCE LINE # 842
                                           ; SOURCE LINE # 843
0000 020000      E     LJMP    Hook_IRQ_INT71_I2BRAM
             ; FUNCTION IRQ_INT71_I2BRAM (END)

             ; FUNCTION IRQ_INT72_WKO70 (BEGIN)
                                           ; SOURCE LINE # 849
                                           ; SOURCE LINE # 850
                                           ; SOURCE LINE # 851
0000 020000      E     LJMP    Hook_IRQ_INT72_WKO70
             ; FUNCTION IRQ_INT72_WKO70 (END)

             ; FUNCTION IRQ_INT73_WKO71 (BEGIN)
                                           ; SOURCE LINE # 857
                                           ; SOURCE LINE # 858
                                           ; SOURCE LINE # 859
0000 020000      E     LJMP    Hook_IRQ_INT73_WKO71
             ; FUNCTION IRQ_INT73_WKO71 (END)

             ; FUNCTION IRQ_INT74_WKO72 (BEGIN)
                                           ; SOURCE LINE # 865
                                           ; SOURCE LINE # 866
                                           ; SOURCE LINE # 867
0000 020000      E     LJMP    Hook_IRQ_INT74_WKO72
             ; FUNCTION IRQ_INT74_WKO72 (END)

             ; FUNCTION IRQ_INT75_WKO73 (BEGIN)
                                           ; SOURCE LINE # 873
                                           ; SOURCE LINE # 874
                                           ; SOURCE LINE # 875
0000 020000      E     LJMP    Hook_IRQ_INT75_WKO73
             ; FUNCTION IRQ_INT75_WKO73 (END)

             ; FUNCTION IRQ_INT76_WKO74 (BEGIN)
                                           ; SOURCE LINE # 881
                                           ; SOURCE LINE # 882
                                           ; SOURCE LINE # 883
0000 020000      E     LJMP    Hook_IRQ_INT76_WKO74
             ; FUNCTION IRQ_INT76_WKO74 (END)

             ; FUNCTION IRQ_INT77_WKO75 (BEGIN)
                                           ; SOURCE LINE # 889
                                           ; SOURCE LINE # 890
                                           ; SOURCE LINE # 891
0000 020000      E     LJMP    Hook_IRQ_INT77_WKO75
             ; FUNCTION IRQ_INT77_WKO75 (END)

             ; FUNCTION IRQ_INT78_WKO76 (BEGIN)
                                           ; SOURCE LINE # 897
                                           ; SOURCE LINE # 898
                                           ; SOURCE LINE # 899
0000 020000      E     LJMP    Hook_IRQ_INT78_WKO76
             ; FUNCTION IRQ_INT78_WKO76 (END)

             ; FUNCTION IRQ_INT79_WKO77 (BEGIN)
                                           ; SOURCE LINE # 905
                                           ; SOURCE LINE # 906
                                           ; SOURCE LINE # 907
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 35  

0000 020000      E     LJMP    Hook_IRQ_INT79_WKO77
             ; FUNCTION IRQ_INT79_WKO77 (END)

             ; FUNCTION Isr_Int0 (BEGIN)
                                           ; SOURCE LINE # 914
                                           ; SOURCE LINE # 917
0000 32                RETI    
             ; FUNCTION Isr_Int0 (END)

             ; FUNCTION Isr_Tmr0 (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C0D0              PUSH    PSW
000A 75D010            MOV     PSW,#010H
                                           ; SOURCE LINE # 934
                                           ; SOURCE LINE # 936
000D 120000      E     LCALL   Load_Timer_A
                                           ; SOURCE LINE # 937
0010 D200        E     SETB    F_Service_MS_1
                                           ; SOURCE LINE # 939
0012 900000      E     MOV     DPTR,#guoyong003
0015 E0                MOVX    A,@DPTR
0016 B4990A            CJNE    A,#099H,?C0107
                                           ; SOURCE LINE # 940
0019 900000      E     MOV     DPTR,#guoyong001
001C E4                CLR     A
001D 75F001            MOV     B,#01H
0020 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 941
0023         ?C0107:
0023 D0D0              POP     PSW
0025 D082              POP     DPL
0027 D083              POP     DPH
0029 D0F0              POP     B
002B D0E0              POP     ACC
002D 32                RETI    
             ; FUNCTION Isr_Tmr0 (END)

             ; FUNCTION Isr_Int1 (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C0D0              PUSH    PSW
000A 75D010            MOV     PSW,#010H
                                           ; SOURCE LINE # 1043
                                           ; SOURCE LINE # 1045
000D 300005      E     JNB     OEM_Isr_Int1_Request,?C0108
                                           ; SOURCE LINE # 1046
                                           ; SOURCE LINE # 1047
0010 120000      E     LCALL   Hook_OEM_Isr_Int1
                                           ; SOURCE LINE # 1048
0013 8044              SJMP    ?C0116
0015         ?C0108:
                                           ; SOURCE LINE # 1050
                                           ; SOURCE LINE # 1051
0015 900000      E     MOV     DPTR,#IVECT
0018 E0                MOVX    A,@DPTR
0019 B42205            CJNE    A,#022H,?C0110
                                           ; SOURCE LINE # 1052
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 36  

                                           ; SOURCE LINE # 1053
001C 120000      R     LCALL   IRQ_INT18_PS2Interrupt2
                                           ; SOURCE LINE # 1054
001F 8038              SJMP    ?C0116
0021         ?C0110:
                                           ; SOURCE LINE # 1055
0021 900000      E     MOV     DPTR,#IVECT
0024 E0                MOVX    A,@DPTR
0025 B42305            CJNE    A,#023H,?C0112
                                           ; SOURCE LINE # 1056
                                           ; SOURCE LINE # 1057
0028 120000      R     LCALL   IRQ_INT19_PS2Interrupt1
                                           ; SOURCE LINE # 1058
002B 802C              SJMP    ?C0116
002D         ?C0112:
                                           ; SOURCE LINE # 1059
002D 900000      E     MOV     DPTR,#IVECT
0030 E0                MOVX    A,@DPTR
0031 B42405            CJNE    A,#024H,?C0114
                                           ; SOURCE LINE # 1060
                                           ; SOURCE LINE # 1061
0034 120000      R     LCALL   IRQ_INT20_PS2Interrupt0
                                           ; SOURCE LINE # 1062
0037 8020              SJMP    ?C0116
0039         ?C0114:
                                           ; SOURCE LINE # 1064
                                           ; SOURCE LINE # 1065
0039 900000      E     MOV     DPTR,#IVECT
003C E0                MOVX    A,@DPTR
003D 24F0              ADD     A,#0F0H
003F 547F              ANL     A,#07FH
0041 25E0              ADD     A,ACC
0043 2400        R     ADD     A,#LOW IRQ_Service
0045 F582              MOV     DPL,A
0047 E4                CLR     A
0048 3400        R     ADDC    A,#HIGH IRQ_Service
004A F583              MOV     DPH,A
004C E4                CLR     A
004D 93                MOVC    A,@A+DPTR
004E FE                MOV     R6,A
004F 7401              MOV     A,#01H
0051 93                MOVC    A,@A+DPTR
0052 CA                XCH     A,R2
0053 EE                MOV     A,R6
0054 CA                XCH     A,R2
0055 F9                MOV     R1,A
0056 120000      E     LCALL   ?C?ICALL
                                           ; SOURCE LINE # 1066
                                           ; SOURCE LINE # 1067
                                           ; SOURCE LINE # 1068
0059         ?C0116:
0059 D0D0              POP     PSW
005B D082              POP     DPL
005D D083              POP     DPH
005F D0F0              POP     B
0061 D0E0              POP     ACC
0063 32                RETI    
             ; FUNCTION Isr_Int1 (END)

             ; FUNCTION Isr_Tmr1 (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 37  

0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C0D0              PUSH    PSW
000A 75D010            MOV     PSW,#010H
                                           ; SOURCE LINE # 1074
                                           ; SOURCE LINE # 1076
000D 120000      E     LCALL   Stop_Timer_B
                                           ; SOURCE LINE # 1077
0010 AF00        E     MOV     R7,Timer_B
0012 EF                MOV     A,R7
0013 C4                SWAP    A
0014 540F              ANL     A,#0FH
0016 30E00C            JNB     ACC.0,?C0118
                                           ; SOURCE LINE # 1078
                                           ; SOURCE LINE # 1079
0019 D200        E     SETB    F_Service_SEND
                                           ; SOURCE LINE # 1080
001B AF00        E     MOV     R7,Timer_B
001D EF                MOV     A,R7
001E 54EF              ANL     A,#0EFH
0020 F500        E     MOV     Timer_B,A
                                           ; SOURCE LINE # 1081
0022 120000      E     LCALL   Load_Timer_B
                                           ; SOURCE LINE # 1082
                                           ; SOURCE LINE # 1083
0025         ?C0118:
0025 D0D0              POP     PSW
0027 D082              POP     DPL
0029 D083              POP     DPH
002B D0F0              POP     B
002D D0E0              POP     ACC
002F 32                RETI    
             ; FUNCTION Isr_Tmr1 (END)

             ; FUNCTION Isr_UART (BEGIN)
                                           ; SOURCE LINE # 1089
                                           ; SOURCE LINE # 1111
0000 32                RETI    
             ; FUNCTION Isr_UART (END)

             ; FUNCTION Isr_Tmr2 (BEGIN)
                                           ; SOURCE LINE # 1118
                                           ; SOURCE LINE # 1121
0000 32                RETI    
             ; FUNCTION Isr_Tmr2 (END)

             ; FUNCTION DisableAllInterrupt (BEGIN)
                                           ; SOURCE LINE # 1126
                                           ; SOURCE LINE # 1127
                                           ; SOURCE LINE # 1128
0000 C2AF              CLR     EA
                                           ; SOURCE LINE # 1129
0002 00                NOP     
                                           ; SOURCE LINE # 1130
0003 00                NOP     
                                           ; SOURCE LINE # 1131
0004 00                NOP     
                                           ; SOURCE LINE # 1132
0005 00                NOP     
                                           ; SOURCE LINE # 1133
0006 22                RET     
             ; FUNCTION DisableAllInterrupt (END)
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 38  


             ; FUNCTION EnableAllInterrupt (BEGIN)
                                           ; SOURCE LINE # 1138
                                           ; SOURCE LINE # 1139
                                           ; SOURCE LINE # 1140
0000 D2AF              SETB    EA
                                           ; SOURCE LINE # 1141
0002 22                RET     
             ; FUNCTION EnableAllInterrupt (END)

             ; FUNCTION EnableKBCIBFInt (BEGIN)
                                           ; SOURCE LINE # 1146
                                           ; SOURCE LINE # 1147
                                           ; SOURCE LINE # 1148
0000 900000      E     MOV     DPTR,#IER3
0003 E0                MOVX    A,@DPTR
0004 4401              ORL     A,#01H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1149
0007 22                RET     
             ; FUNCTION EnableKBCIBFInt (END)

             ; FUNCTION EnablePMCIBFInt (BEGIN)
                                           ; SOURCE LINE # 1154
                                           ; SOURCE LINE # 1155
                                           ; SOURCE LINE # 1156
0000 900000      E     MOV     DPTR,#IER3
0003 E0                MOVX    A,@DPTR
0004 4402              ORL     A,#02H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1157
0007 22                RET     
             ; FUNCTION EnablePMCIBFInt (END)

             ; FUNCTION InitEnableInterrupt (BEGIN)
                                           ; SOURCE LINE # 1162
                                           ; SOURCE LINE # 1163
                                           ; SOURCE LINE # 1164
0000 900000      E     MOV     DPTR,#ISR0
0003 74FF              MOV     A,#0FFH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1165
0006 900000      E     MOV     DPTR,#ISR1
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1166
000A 900000      E     MOV     DPTR,#ISR2
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1167
000E 900000      E     MOV     DPTR,#ISR3
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1168
0012 900000      E     MOV     DPTR,#ISR4
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1169
0016 900000      E     MOV     DPTR,#ISR5
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1170
001A 900000      E     MOV     DPTR,#ISR6
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1171
001E 900000      E     MOV     DPTR,#ISR7
0021 F0                MOVX    @DPTR,A
C51 COMPILER V7.50   CORE_IRQ                                                              09/08/2020 15:56:18 PAGE 39  

                                           ; SOURCE LINE # 1172
0022 900000      E     MOV     DPTR,#ISR8
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1173
0026 900000      E     MOV     DPTR,#ISR9
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1174
002A 900000      E     MOV     DPTR,#ISR15
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1176
002E D2AA              SETB    EX1
                                           ; SOURCE LINE # 1177
0030 020000      R     LJMP    EnableAllInterrupt
             ; FUNCTION InitEnableInterrupt (END)

             ; FUNCTION EnableModuleInterrupt (BEGIN)
                                           ; SOURCE LINE # 1183
                                           ; SOURCE LINE # 1184
                                           ; SOURCE LINE # 1185
0000 120000      R     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 1186
0003 120000      R     LCALL   EnableKBCIBFInt
                                           ; SOURCE LINE # 1187
0006 120000      R     LCALL   EnablePMCIBFInt
                                           ; SOURCE LINE # 1189
0009 020000      E     LJMP    Hook_EnableInterrupt
             ; FUNCTION EnableModuleInterrupt (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    848    ----
   CONSTANT SIZE    =    160    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
