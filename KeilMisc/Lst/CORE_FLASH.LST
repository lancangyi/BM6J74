C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE CORE_FLASH
OBJECT MODULE PLACED IN Code\CORE\CORE_FLASH.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe Code\CORE\CORE_FLASH.C LA WL(1) CD OT(8,SIZE) NOAREGS OR INCDIR(.\Code\CORE
                    -\INCLUDE\;.\Code\OEM\INCLUDE\;.\Code\CHIP\INCLUDE\)

line level    source

   1          /*-----------------------------------------------------------------------------
   2           * TITLE: CORE_FLASH.C
   3           *
   4           * Author : Dino
   5           *
   6           * Copyright (c) ITE INC. All Rights Reserved.
   7           *
   8           *---------------------------------------------------------------------------*/
   9          
  10          #include <CORE_INCLUDE.H>
  11          #include <OEM_INCLUDE.H>
  12          
  13          //-----------------------------------------------------------------------------
  14          // Always at 0xFF00 of code space
  15          //-----------------------------------------------------------------------------
  16          void RamCode(void)
  17          {
  18   1      
  19   1      }
  20          
  21          //-----------------------------------------------------------------------------
  22          // The function start address always at 0xFE00 (refer to link file)
  23          //-----------------------------------------------------------------------------
  24          void FuncAt_0xFE00(void)
  25          {
  26   1          _nop_();
  27   1          _nop_();
  28   1          _nop_();
  29   1          _nop_();
  30   1          _nop_();
  31   1          _nop_();
  32   1          _nop_();
  33   1          _nop_();
  34   1          FlashECCode();
  35   1      }
  36          
  37          //-----------------------------------------------------------------------------
  38          // The function of EC flash
  39          //-----------------------------------------------------------------------------
  40          //Label:BLD_TIPIA_20160905_007
  41          void FlashECCode(void)
  42          {
  43   1              RamcodeCmd = 0x00;
  44   1              RamcodeSend = 0x00;
  45   1      
  46   1          FLASH_EC_PMxDO = 0x33;              // ACK
  47   1      
  48   1              while(1) 
  49   1              {       
  50   2                      if( IS_MASK_SET(KBHISR,IBF))
  51   2                      {
  52   3                              RamcodeCmd = KBHIDIR;
  53   3                              continue;
  54   3                      }
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 2   

  55   2                      if( IS_MASK_CLEAR(FLASH_EC_PMxSTS,P_IBF) ) continue;
  56   2                      if( IS_MASK_CLEAR(FLASH_EC_PMxSTS,P_C_D) ) continue;
  57   2                      RamcodeCmd = FLASH_EC_PMxDI;
  58   2      
  59   2                      if(RamcodeSend==1)
  60   2                      {
  61   3                              ECINDDR = RamcodeCmd;
  62   3                              RamcodeSend = 0x00;
  63   3                              continue;
  64   3                      }
  65   2      
  66   2                      if(RamcodeCmd==0x01)
  67   2                      {
  68   3                              ECINDAR3 = 0x0F;        // Enter follow mode
  69   3                              ECINDAR2 = 0xFF;
  70   3                              ECINDAR1 = 0xFE;
  71   3                              ECINDAR0 = 0x00;                // FFFFExx = 0xFF   
  72   3                              ECINDDR = 0x00;                 // SCE# high level
  73   3                      }
  74   2                      else if(RamcodeCmd==0x02)
  75   2                      {                                                       // Send SPI command
  76   3                              ECINDAR1 = 0xFD;
  77   3                              RamcodeSend = 1;
  78   3                      }
  79   2                      else if(RamcodeCmd==0x03)
  80   2                      {                                                       // write byte to spi
  81   3                              RamcodeSend = 1;
  82   3                      }
  83   2                      else if(RamcodeCmd==0x04)
  84   2                      {       
  85   3                              //while(IS_MASK_SET(PM1STS,P_OBF));
  86   3                              FLASH_EC_PMxDO=ECINDDR;                 // Read byte from spi                   
  87   3                      }
  88   2                      else if(RamcodeCmd==0x05)
  89   2                      {       
  90   3                              ECINDAR3 = 0x00;        //Exit follow mode
  91   3                              ECINDAR2 = 0x00;
  92   3                      }
  93   2                      else if(RamcodeCmd==0xFC)
  94   2                      {       
  95   3                              WinFlashMark = 0x33;
  96   3                              break;
  97   3                      }
  98   2                      else if(RamcodeCmd==0xFD)
  99   2                      {
 100   3                      WDTRST = 1;                             // Reset watch dog timer
 101   3                              WDTEB = 1;                              // Enable watch dog
 102   3                      while(1);                               // Wait for watch dog time-out                          
 103   3                      }
 104   2                      else if(RamcodeCmd==0xFE)
 105   2                      {       
 106   3                              BRAM[63]=0x55;
 107   3                      WDTRST = 1;                             // Reset watch dog timer
 108   3                              WDTEB = 1;                              // Enable watch dog
 109   3                      while(1);                               // Wait for watch dog time-out
 110   3                      }
 111   2              }
 112   1      
 113   1              main();
 114   1      }
 115          
 116          //-----------------------------------------------------------------------------
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 3   

 117          // The function of reading SPI status ( command 0x05)
 118          //      After this function, spi status will save to SPIReadStatus
 119          //-----------------------------------------------------------------------------
 120          void SPI_Read_Status(void)
 121          {
 122   1              ECINDAR3 = 0x0F; 
 123   1              ECINDAR2 = 0xFF;
 124   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 125   1      
 126   1              ECINDAR1 = 0xFE;
 127   1              ECINDDR = 0xFF;                                 // SCE# high level
 128   1              ECINDAR1 = 0xFD;
 129   1              ECINDDR = SPICmd_ReadStatus;    // Read status command
 130   1      
 131   1              SPIReadStatus = ECINDDR;                // Save status Register to SPIReadStatus
 132   1              
 133   1              ECINDAR3 = 0x00;                        //Exit follow mode
 134   1              ECINDAR2 = 0x00;
 135   1      }
 136          
 137          //-----------------------------------------------------------------------------
 138          // The function of Write SPI status ( command 0x01)
 139          //      After this function, the value of SPIWriteStatus will write to spi status
 140          //-----------------------------------------------------------------------------
 141          void SPI_Write_Status(void)
 142          {
 143   1              ECINDAR3 = 0x0F; 
 144   1              ECINDAR2 = 0xFF;
 145   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 146   1      
 147   1              ECINDAR1 = 0xFE;
 148   1              ECINDDR = 0xFF;                                 // SCE# high level
 149   1              ECINDAR1 = 0xFD;
 150   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 151   1              while(1)                                                // waiting spi free
 152   1              {
 153   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 154   2              {
 155   3                  break;
 156   3              } 
 157   2              }                                                               
 158   1      
 159   1              ECINDAR1 = 0xFE;
 160   1              ECINDDR = 0xFF;                                 // SCE# high level
 161   1              ECINDAR1 = 0xFD;
 162   1              ECINDDR = SPICmd_WREN;                  // Write enable 
 163   1              
 164   1          if(SPIID==SSTID)
 165   1              {
 166   2                      ECINDAR1 = 0xFE;
 167   2                      ECINDDR = 0xFF;                         // SCE# high level
 168   2                      ECINDAR1 = 0xFD;
 169   2                      ECINDDR = SPICmd_EWSR;          // Enable Write Status Register
 170   2              }    
 171   1              
 172   1              ECINDAR1 = 0xFE;
 173   1              ECINDDR = 0xFF;                                 // SCE# high level
 174   1              ECINDAR1 = 0xFD;
 175   1              ECINDDR = SPICmd_WRSR;                  // Write status command
 176   1              ECINDDR = SPIWriteStatus;               // Write SPIWriteStatus to spi status register
 177   1      
 178   1              ECINDAR1 = 0xFE;
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 4   

 179   1              ECINDDR = 0xFF;                                 // SCE# high level
 180   1              ECINDAR1 = 0xFD;
 181   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 182   1              while(1)                                                // waiting spi free
 183   1              {
 184   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 185   2              {
 186   3                  break;
 187   3              } 
 188   2              }
 189   1              
 190   1              ECINDAR3 = 0x00;                        //Exit follow mode
 191   1              ECINDAR2 = 0x00;
 192   1      }
 193          
 194          //-----------------------------------------------------------------------------
 195          // The function of reading SPI ID (command 0x9F)
 196          //      After this function, spi id will save to array SPIIDBuf[] 
 197          //-----------------------------------------------------------------------------
 198          void SPI_Read_ID(void)
 199          {
 200   1              ECINDAR3 = 0x0F; 
 201   1              ECINDAR2 = 0xFF;
 202   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 203   1              
 204   1              ECINDAR1 = 0xFE;
 205   1              ECINDDR = 0xFF;                                 // SCE# high level
 206   1              ECINDAR1 = 0xFD;
 207   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 208   1              while(1)                                                // waiting spi free
 209   1              {
 210   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 211   2              {
 212   3                  break;
 213   3              } 
 214   2              }                                                               
 215   1      
 216   1              ECINDAR1 = 0xFE;
 217   1              ECINDDR = 0xFF;                                 // SCE# high level
 218   1              ECINDAR1 = 0xFD;
 219   1              ECINDDR = SPICmd_DeviceID;  // Manufacture ID command
 220   1              for(SPIIndex=0x00;SPIIndex<4;SPIIndex++)
 221   1              {
 222   2                      SPIIDBuf[SPIIndex] = ECINDDR;
 223   2              }
 224   1              SPIID = SPIIDBuf[0];    
 225   1      
 226   1              ECINDAR1 = 0xFE;
 227   1              ECINDDR = 0xFF;                                 // SCE# high level
 228   1              ECINDAR1 = 0xFD;
 229   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 230   1      
 231   1              while(1)                                                // waiting spi free
 232   1              {
 233   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 234   2              {
 235   3                  break;
 236   3              } 
 237   2              }
 238   1              ECINDAR3 = 0x00;        //Exit follow mode
 239   1              ECINDAR2 = 0x00;
 240   1      }
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 5   

 241          
 242          //-----------------------------------------------------------------------------
 243          // The function of reading SPI ID (command 0xAB)
 244          //      After this function, spi id will save to array SPIIDBuf[] 
 245          //-----------------------------------------------------------------------------
 246          void SPI_Read_ID_CmdAB(void)
 247          {
 248   1              ECINDAR3 = 0x0F; 
 249   1              ECINDAR2 = 0xFF;
 250   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 251   1              
 252   1              ECINDAR1 = 0xFE;
 253   1              ECINDDR = 0xFF;                                 // SCE# high level
 254   1              ECINDAR1 = 0xFD;
 255   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 256   1              while(1)                                                // waiting spi free
 257   1              {
 258   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 259   2              {
 260   3                  break;
 261   3              } 
 262   2              }                                                               
 263   1      
 264   1              ECINDAR1 = 0xFE;
 265   1              ECINDDR = 0xFF;                                 // SCE# high level
 266   1              ECINDAR1 = 0xFD;
 267   1              ECINDDR = SPICmd_RDID;              // Read ID command
 268   1          ECINDDR = 0x00;                         // Read ID command addr2
 269   1          ECINDDR = 0x00;                         // Read ID command addr1
 270   1          ECINDDR = 0x00;                         // Read ID command addr0
 271   1          
 272   1              for(SPIIndex=0x00;SPIIndex<4;SPIIndex++)
 273   1              {
 274   2                      SPIIDBuf[SPIIndex] = ECINDDR; 
 275   2              }
 276   1              SPIID = SPIIDBuf[0];    
 277   1      
 278   1              ECINDAR1 = 0xFE;
 279   1              ECINDDR = 0xFF;                                 // SCE# high level
 280   1              ECINDAR1 = 0xFD;
 281   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 282   1      
 283   1              while(1)                                                // waiting spi free
 284   1              {
 285   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 286   2              {
 287   3                  break;
 288   3              } 
 289   2              }
 290   1              ECINDAR3 = 0x00;        //Exit follow mode
 291   1              ECINDAR2 = 0x00;
 292   1      }
 293          
 294          //-----------------------------------------------------------------------------
 295          // The function of Erasing SPI
 296          //-----------------------------------------------------------------------------
 297          void SPI_Erase(void)
 298          {
 299   1              ECINDAR3 = 0x0F; 
 300   1              ECINDAR2 = 0xFF;
 301   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 302   1              
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 6   

 303   1              ECINDAR1 = 0xFE;
 304   1              ECINDDR = 0xFF;                                 // SCE# high level
 305   1              ECINDAR1 = 0xFD;
 306   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 307   1              while(1)                                                // waiting spi free
 308   1              {
 309   2                      if((ECINDDR&(SPIStatus_BUSY+SPIStatus_WEL))==SPIStatus_WriteEnable)
 310   2              {
 311   3                  break;
 312   3              } 
 313   2              }                                                               
 314   1      
 315   1              ECINDAR1 = 0xFE;
 316   1              ECINDDR = 0xFF;                                 // SCE# high level
 317   1              ECINDAR1 = 0xFD;
 318   1              ECINDDR = SPIAEraseCmd;                 // Send erase command
 319   1              for(SPIIndex=0x00;SPIIndex<3;SPIIndex++)
 320   1              {
 321   2                      ECINDDR = SPIAddrCycle[SPIIndex];
 322   2              }                                                               // Send address cycle
 323   1      
 324   1              ECINDAR1 = 0xFE;
 325   1              ECINDDR = 0xFF;                                 // SCE# high level
 326   1      
 327   1              ECINDAR1 = 0xFD;
 328   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 329   1      
 330   1              while(1)                                                // waiting spi free
 331   1              {
 332   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 333   2              {
 334   3                  break;
 335   3              } 
 336   2              }
 337   1              ECINDAR3 = 0x00;                        //Exit follow mode
 338   1              ECINDAR2 = 0x00;
 339   1      }
 340          
 341          //-----------------------------------------------------------------------------
 342          // The function of SPI write enable
 343          //-----------------------------------------------------------------------------
 344          void SPI_Write_Enable(void)
 345          {
 346   1              ECINDAR3 = 0x0F; 
 347   1              ECINDAR2 = 0xFF;
 348   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 349   1              
 350   1              ECINDAR1 = 0xFE;
 351   1              ECINDDR = 0xFF;                                 // SCE# high level
 352   1              ECINDAR1 = 0xFD;
 353   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 354   1              while(1)                                                // waiting spi free
 355   1              {
 356   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 357   2              {
 358   3                  break;
 359   3              } 
 360   2              }                                                               
 361   1      
 362   1              ECINDAR1 = 0xFE;
 363   1              ECINDDR = 0xFF;                                 // SCE# high level
 364   1              ECINDAR1 = 0xFD;
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 7   

 365   1              ECINDDR = SPICmd_WREN;                  // Write enable 
 366   1              
 367   1          if(SPIID==SSTID)
 368   1          {
 369   2              ECINDAR1 = 0xFE;
 370   2              ECINDDR = 0xFF;                         // SCE# high level
 371   2              ECINDAR1 = 0xFD;
 372   2              ECINDDR = SPICmd_EWSR;          // Enable Write Status Register
 373   2          }
 374   1          
 375   1              ECINDAR1 = 0xFE;
 376   1              ECINDDR = 0xFF;                                 // SCE# high level
 377   1              ECINDAR1 = 0xFD;
 378   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 379   1              while(1)                                                // waiting spi free
 380   1              {
 381   2                      if((ECINDDR&(SPIStatus_WEL+SPIStatus_BUSY))==0x02) // Check write enable and spi not busy
 382   2              {
 383   3                  break;
 384   3              } 
 385   2              }
 386   1      
 387   1              ECINDAR3 = 0x00;                        //Exit follow mode
 388   1              ECINDAR2 = 0x00;
 389   1      }
 390          
 391          //-----------------------------------------------------------------------------
 392          // The function of SPI write disable
 393          //-----------------------------------------------------------------------------
 394          void SPI_Write_Disable(void)
 395          {
 396   1              ECINDAR3 = 0x0F; 
 397   1              ECINDAR2 = 0xFF;
 398   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 399   1              
 400   1              ECINDAR1 = 0xFE;
 401   1              ECINDDR = 0xFF;                                 // SCE# high level
 402   1              ECINDAR1 = 0xFD;
 403   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 404   1              while(1)                                                // waiting spi free
 405   1              {
 406   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 407   2              {
 408   3                  break;
 409   3              } 
 410   2              }                                                               
 411   1      
 412   1              ECINDAR1 = 0xFE;
 413   1              ECINDDR = 0xFF;                                 // SCE# high level
 414   1              ECINDAR1 = 0xFD;
 415   1              ECINDDR = SPICmd_WRDI;                  // Write disable        
 416   1      
 417   1              ECINDAR1 = 0xFE;
 418   1              ECINDDR = 0xFF;                                 // SCE# high level
 419   1              ECINDAR1 = 0xFD;
 420   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 421   1              while(1)                                                // waiting spi free
 422   1              {
 423   2                      if((ECINDDR&(SPIStatus_WEL+SPIStatus_BUSY))==0x00) // Check write disable and spi not busy
 424   2              {
 425   3                  break;
 426   3              } 
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 8   

 427   2              }
 428   1      
 429   1              ECINDAR3 = 0x00;                        //Exit follow mode
 430   1              ECINDAR2 = 0x00;
 431   1      }
 432          
 433          //-----------------------------------------------------------------------------
 434          // The function of other SPI write 256 bytes
 435          //-----------------------------------------------------------------------------
 436          void Other_SPI_Write_256Bytes(void)
 437          {
 438   1              ECINDAR3 = 0x0F; 
 439   1              ECINDAR2 = 0xFF;
 440   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 441   1              
 442   1              ECINDAR1 = 0xFE;
 443   1              ECINDDR = 0xFF;                                 // SCE# high level
 444   1              ECINDAR1 = 0xFD;
 445   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 446   1              while(1)                                                // waiting spi free
 447   1              {
 448   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 449   2              {
 450   3                  break;
 451   3              } 
 452   2              }                                                               
 453   1      
 454   1              ECINDAR1 = 0xFE;
 455   1              ECINDDR = 0xFF;                             // SCE# high level
 456   1              ECINDAR1 = 0xFD;
 457   1          ECINDDR = SPICmd_BYTEProgram;   // Send Program One Data Byte command
 458   1      
 459   1              ECINDDR = SPIAddrCycle[0];          // For 256 bytes function limite
 460   1              ECINDDR = SPIAddrCycle[1];
 461   1              ECINDDR = SPIAddrCycle[2];
 462   1              
 463   1              SPIIndex = 0x00;
 464   1              do
 465   1              {
 466   2                      ECINDDR = *SPIDataPointer;
 467   2                      SPIIndex++;
 468   2                      SPIDataPointerLowByte++;
 469   2              }while(SPIIndex!=0x00);             // Send 256 bytes
 470   1      
 471   1              ECINDAR1 = 0xFE;
 472   1              ECINDDR = 0xFF;                                 // SCE# high level
 473   1              ECINDAR1 = 0xFD;
 474   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 475   1              while(1)                                                // waiting spi free
 476   1              {
 477   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 478   2              {
 479   3                  break;
 480   3              } 
 481   2              }       
 482   1      
 483   1              ECINDAR3 = 0x00;                        // Exit follow mode
 484   1              ECINDAR2 = 0x00;                                // For 256 bytes function limite
 485   1      }
 486          
 487          //-----------------------------------------------------------------------------
 488          // The function of SST SPI write 256 bytes (for Word AAI command)
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 9   

 489          //-----------------------------------------------------------------------------
 490          void SST_SPI_Write_256Bytes(void)
 491          {
 492   1              ECINDAR3 = 0x0F; 
 493   1              ECINDAR2 = 0xFF;
 494   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 495   1              
 496   1              ECINDAR1 = 0xFE;
 497   1              ECINDDR = 0xFF;                                 // SCE# high level
 498   1              ECINDAR1 = 0xFD;
 499   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 500   1              while(1)                                                // waiting spi free
 501   1              {
 502   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 503   2              {
 504   3                  break;
 505   3              } 
 506   2              }                                                               
 507   1      
 508   1              ECINDAR1 = 0xFE;
 509   1              ECINDDR = 0xFF;                             // SCE# high level
 510   1              ECINDAR1 = 0xFD;
 511   1          ECINDDR = SPICmd_AAIWordProgram;    // Auto Address Increment Programming
 512   1      
 513   1              ECINDDR = SPIAddrCycle[0];          // For 256 bytes function limite
 514   1              ECINDDR = SPIAddrCycle[1];
 515   1              ECINDDR = SPIAddrCycle[2];
 516   1              
 517   1              SPIIndex = 0x00;
 518   1              do
 519   1              { 
 520   2                      ECINDDR = *SPIDataPointer;
 521   2                      SPIIndex++;
 522   2                      SPIDataPointerLowByte++;
 523   2      
 524   2                  if((SPIIndex%2)==0x00)
 525   2                  {
 526   3                          ECINDAR1 = 0xFE;
 527   3                          ECINDDR = 0xFF;                                     // SCE# high level
 528   3                          ECINDAR1 = 0xFD;
 529   3                          ECINDDR = SPICmd_ReadStatus;        // Read Status Register
 530   3                          while(1)                                            // waiting spi free
 531   3                          {
 532   4                                  if((ECINDDR&SPIStatus_BUSY)==0x00)
 533   4                          {
 534   5                          break;
 535   5                      } 
 536   4                          }   
 537   3                      
 538   3                  if(SPIIndex!=0x00)
 539   3                  {
 540   4                              ECINDAR1 = 0xFE;
 541   4                              ECINDDR = 0xFF;                                             // SCE# high level
 542   4                              ECINDAR1 = 0xFD;
 543   4                              ECINDDR = SPICmd_AAIWordProgram;                // Auto Address Increment Programming
 544   4                  }
 545   3                  }
 546   2              }while(SPIIndex!=0x00);                                 // Send 256 bytes
 547   1      
 548   1              ECINDAR1 = 0xFE;
 549   1              ECINDDR = 0xFF;                             // SCE# high level
 550   1              ECINDAR1 = 0xFD;
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 10  

 551   1          ECINDDR = SPICmd_WRDI;          // Write disable
 552   1      
 553   1          WNCKR = 0x00;                   // Delay 15.26 us
 554   1          WNCKR = 0x00;                   // Delay 15.26 us
 555   1          WNCKR = 0x00;                   // Delay 15.26 us
 556   1          WNCKR = 0x00;                   // Delay 15.26 us
 557   1      
 558   1              ECINDAR3 = 0x00;                        // Exit follow mode
 559   1              ECINDAR2 = 0x00;                                // For 256 bytes function limite
 560   1      }
 561          
 562          //-----------------------------------------------------------------------------
 563          // The function of old SST SPI write 256 bytes
 564          //-----------------------------------------------------------------------------
 565          void Old_SST_SPI_Write_256Bytes(void)
 566          {
 567   1              ECINDAR3 = 0x0F; 
 568   1              ECINDAR2 = 0xFF;
 569   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 570   1              
 571   1              ECINDAR1 = 0xFE;
 572   1              ECINDDR = 0xFF;                                 // SCE# high level
 573   1              ECINDAR1 = 0xFD;
 574   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 575   1              while(1)                                                // waiting spi free
 576   1              {
 577   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 578   2              {
 579   3                  break;
 580   3              } 
 581   2              }                                                               
 582   1      
 583   1              ECINDAR1 = 0xFE;
 584   1              ECINDDR = 0xFF;                             // SCE# high level
 585   1              ECINDAR1 = 0xFD;
 586   1          ECINDDR = SPICmd_AAIProgram;    // Auto Address Increment Programming
 587   1      
 588   1              ECINDDR = SPIAddrCycle[0];          // For 256 bytes function limite
 589   1              ECINDDR = SPIAddrCycle[1];
 590   1              ECINDDR = SPIAddrCycle[2];
 591   1              
 592   1              SPIIndex = 0x00;
 593   1              do
 594   1              {
 595   2                      ECINDDR = *SPIDataPointer;
 596   2                      SPIIndex++;
 597   2                      SPIDataPointerLowByte++;
 598   2      
 599   2                  ECINDAR1 = 0xFE;
 600   2                  ECINDDR = 0xFF;                                     // SCE# high level
 601   2                  ECINDAR1 = 0xFD;
 602   2                  ECINDDR = SPICmd_ReadStatus;        // Read Status Register
 603   2                  while(1)                                            // waiting spi free
 604   2                  {
 605   3                          if((ECINDDR&SPIStatus_BUSY)==0x00)
 606   3                  {
 607   4                      break;
 608   4                  } 
 609   3                  }   
 610   2      
 611   2              if(SPIIndex!=0x00)
 612   2              {
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 11  

 613   3                      ECINDAR1 = 0xFE;
 614   3                      ECINDDR = 0xFF;                     // SCE# high level
 615   3                      ECINDAR1 = 0xFD;       
 616   3                  ECINDDR = SPICmd_AAIProgram;    // Auto Address Increment Programming
 617   3              }
 618   2              }while(SPIIndex!=0x00);             // Send 256 bytes
 619   1      
 620   1              ECINDAR1 = 0xFE;
 621   1              ECINDDR = 0xFF;                             // SCE# high level
 622   1              ECINDAR1 = 0xFD;
 623   1          ECINDDR = SPICmd_WRDI;          // Write disable
 624   1      
 625   1      
 626   1          WNCKR = 0x00;                   // Delay 15.26 us
 627   1          WNCKR = 0x00;                   // Delay 15.26 us
 628   1          WNCKR = 0x00;                   // Delay 15.26 us
 629   1          WNCKR = 0x00;                   // Delay 15.26 us
 630   1              //ECINDAR1 = 0xFE;
 631   1              //ECINDDR = 0xFF;                                       // SCE# high level
 632   1              //ECINDAR1 = 0xFD;
 633   1              //ECINDDR = SPICmd_ReadStatus;  // Read Status Register
 634   1              //while(1)                                              // waiting spi free
 635   1              //{
 636   1              //      if((ECINDDR&(SPIStatus_BUSY+SSTSPIStatus_AAI))==0x00)
 637   1          //    {
 638   1          //        break;
 639   1          //    } 
 640   1              //}     
 641   1      
 642   1              ECINDAR3 = 0x00;                        // Exit follow mode
 643   1              ECINDAR2 = 0x00;                                // For 256 bytes function limite
 644   1      }
 645          
 646          //-----------------------------------------------------------------------------
 647          // The function of SPI write 256 bytes
 648          //-----------------------------------------------------------------------------
 649          void SPI_Write_256Bytes(void)
 650          {
 651   1          if(SPIID==SSTID)
 652   1          {
 653   2              if(SSTDeviceID==SSTID_Old) 
 654   2              {
 655   3                  LoadSPIFucnToRam(Old_SST_SPI_Write_256Bytes);   // Load function to ram
 656   3              }
 657   2              else
 658   2              {
 659   3                      LoadSPIFucnToRam(SST_SPI_Write_256Bytes);       // Load function to ram
 660   3              }
 661   2          }
 662   1          else
 663   1          {
 664   2                  LoadSPIFucnToRam(Other_SPI_Write_256Bytes); // Load function to ram
 665   2          }  
 666   1      }
 667          
 668          
 669          //-----------------------------------------------------------------------------
 670          // The function of SPI read 256 bytes
 671          //-----------------------------------------------------------------------------
 672          void SPI_Read_256Bytes(void)
 673          {
 674   1              ECINDAR3 = 0x0F; 
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 12  

 675   1              ECINDAR2 = 0xFF;
 676   1              ECINDAR0 = 0x00;                                // FFFFExx = 0xFF  
 677   1              
 678   1              ECINDAR1 = 0xFE;
 679   1              ECINDDR = 0xFF;                                 // SCE# high level
 680   1              ECINDAR1 = 0xFD;
 681   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 682   1              while(1)                                                // waiting spi free
 683   1              {
 684   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 685   2              {
 686   3                  break;
 687   3              } 
 688   2              }                                                               
 689   1      
 690   1              ECINDAR1 = 0xFE;
 691   1              ECINDDR = 0xFF;                                         // SCE# high level
 692   1              ECINDAR1 = 0xFD;
 693   1              ECINDDR = SPICmd_HighSpeedRead;         // High-Speed Read
 694   1      
 695   1              ECINDDR = SPIAddrCycle[0];                      // For 256 bytes function limite
 696   1              ECINDDR = SPIAddrCycle[1];
 697   1              ECINDDR = SPIAddrCycle[2];
 698   1              ECINDDR = 0x00;                                         // dummy byte
 699   1              
 700   1              SPIIndex = 0x00;
 701   1              do
 702   1              {
 703   2                      *SPIDataPointer = ECINDDR;;
 704   2                      SPIIndex++;
 705   2                      SPIDataPointerLowByte++;
 706   2              }while(SPIIndex!=0x00);                                 // Send 256 bytes
 707   1      
 708   1              ECINDAR1 = 0xFE;
 709   1              ECINDDR = 0xFF;                                 // SCE# high level
 710   1              ECINDAR1 = 0xFD;
 711   1              ECINDDR = SPICmd_ReadStatus;    // Read Status Register
 712   1              while(1)                                                // waiting spi free
 713   1              {
 714   2                      if((ECINDDR&SPIStatus_BUSY)==0x00)
 715   2              {
 716   3                  break;
 717   3              } 
 718   2              }       
 719   1      
 720   1              ECINDAR3 = 0x00;                        // Exit follow mode
 721   1              ECINDAR2 = 0x00;                                // For 256 bytes function limite
 722   1      }
 723          
 724          //-----------------------------------------------------------------------------
 725          // The function of loading function to external ram 0x600 ~ 0x6FF
 726          //-----------------------------------------------------------------------------
 727          void LoadSPIFucnToRam(FUNCT_PTR_V_V funcpoint)
 728          {
 729   1              Tmp_XPntr = 0x600;
 730   1              Tmp_code_pointer = funcpoint;
 731   1      
 732   1              ITempB01 = 0x00;
 733   1              do
 734   1              {
 735   2                      *Tmp_XPntr = *Tmp_code_pointer;
 736   2              Tmp_XPntr++;
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 13  

 737   2                      Tmp_code_pointer++;
 738   2                      ITempB01++;
 739   2              }while(ITempB01!=0x00);
 740   1      }
 741          
 742          //-----------------------------------------------------------------------------
 743          // The function for ITE flash utility
 744          //-----------------------------------------------------------------------------
 745          #pragma ot(7, SIZE)
 746          void ITE_Flash_Utility(void)
 747          {
 748   1              DisableAllInterrupt();                          // Disable all interrupt 
 749   1              LoadSPIFucnToRam(FlashECCode);          // Load function to ram
 750   1              SET_MASK(FBCFG,SSMC);                   // enable scatch ROM
 751   1              FuncAt_0xFE00();                                        // do function in extern ram 0x600
 752   1      }
 753          
 754          //*****************************************************************************
 755          // OEM FUNCTION CALL
 756          //*****************************************************************************
 757          //-----------------------------------------------------------------------------
 758          // The function for oem code write spi status
 759          //-----------------------------------------------------------------------------
 760          #pragma ot(7, SIZE)
 761          void Do_SPI_Write_Status(BYTE statusvalue)
 762          {
 763   1              SPIWriteStatus = statusvalue;
 764   1              
 765   1              DisableAllInterrupt();                          // Disable all interrupt 
 766   1              LoadSPIFucnToRam(SPI_Write_Status);     // Load function to ram
 767   1              SET_MASK(FBCFG,SSMC);                   // enable scatch ROM
 768   1              FuncAt_0xFE00();                                        // do function in extern ram 0x600
 769   1              EnableAllInterrupt();                           // Enable all interrupt 
 770   1              CLEAR_MASK(FBCFG,SSMC);                 // disable scatch ROM
 771   1      }
 772          
 773          //-----------------------------------------------------------------------------
 774          // The function for oem code read spi status
 775          //              Note : SPI status always save to SPIReadStatus
 776          //-----------------------------------------------------------------------------
 777          #pragma ot(7, SIZE)
 778          void Do_SPI_Read_Status(void)
 779          {
 780   1              DisableAllInterrupt();                          // Disable all interrupt 
 781   1              LoadSPIFucnToRam(SPI_Read_Status);      // Load function to ram
 782   1              SET_MASK(FBCFG,SSMC);                   // enable scatch ROM
 783   1              FuncAt_0xFE00();                                        // do function in extern ram 0x600
 784   1              EnableAllInterrupt();                           // Enable all interrupt 
 785   1              CLEAR_MASK(FBCFG,SSMC);                 // disable scatch ROM
 786   1      }
 787          
 788          //-----------------------------------------------------------------------------
 789          // The function for oem code read spi ID (command 0x9F)   
 790          //              Note : SPI ID always save to array SPIIDBuf[]
 791          //-----------------------------------------------------------------------------
 792          #pragma ot(7, SIZE)
 793          void Do_SPI_Read_ID(void)
 794          {
 795   1              DisableAllInterrupt();                  // Disable all interrupt 
 796   1              LoadSPIFucnToRam(SPI_Read_ID);  // Load function to ram
 797   1              SET_MASK(FBCFG,SSMC);           // enable scatch ROM
 798   1              FuncAt_0xFE00();                                // do function in extern ram 0x600
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 14  

 799   1              EnableAllInterrupt();               // Enable all interrupt 
 800   1              CLEAR_MASK(FBCFG,SSMC);         // disable scatch ROM
 801   1      }
 802          
 803          //-----------------------------------------------------------------------------
 804          // The function for oem code read spi ID (command 0xAB)
 805          //              Note : SPI ID always save to array SPIIDBuf[]
 806          //-----------------------------------------------------------------------------
 807          #pragma ot(7, SIZE)
 808          void Do_SPI_Read_ID_CmdAB(void)
 809          {
 810   1              DisableAllInterrupt();                  // Disable all interrupt 
 811   1              LoadSPIFucnToRam(SPI_Read_ID_CmdAB);    // Load function to ram
 812   1              SET_MASK(FBCFG,SSMC);           // enable scatch ROM
 813   1              FuncAt_0xFE00();                                // do function in extern ram 0x600
 814   1              EnableAllInterrupt();               // Enable all interrupt 
 815   1              CLEAR_MASK(FBCFG,SSMC);         // disable scatch ROM
 816   1      }
 817          
 818          //-----------------------------------------------------------------------------
 819          // The function for oem code erase spi
 820          //              Input : 1 EraseCmd --> Only support SPICmd_Erase4KByte, 
 821          //                                                              SPICmd_Erase32KByte, and SPICmd_Erase64KByte.
 822          //                              2 Addr2    --> A23 ~ A16
 823          //                              3 Addr1    --> A15 ~ A8
 824          //                              4 Addr0    --> A7  ~ A0
 825          //-----------------------------------------------------------------------------
 826          #pragma ot(7, SIZE)
 827          void Do_SPI_Erase(BYTE EraseCmd, BYTE Addr2, BYTE Addr1, BYTE Addr0)
 828          {
 829   1              SPIAEraseCmd = EraseCmd;
 830   1              SPIAddrCycle[0] = Addr2;
 831   1              SPIAddrCycle[1] = Addr1;
 832   1              SPIAddrCycle[2] = Addr0;
 833   1                              
 834   1              DisableAllInterrupt();                  // Disable all interrupt 
 835   1              LoadSPIFucnToRam(SPI_Erase);    // Load function to ram
 836   1              SET_MASK(FBCFG,SSMC);           // enable scatch ROM
 837   1              FuncAt_0xFE00();                                // do function in extern ram 0x600
 838   1              EnableAllInterrupt();               // Enable all interrupt 
 839   1              CLEAR_MASK(FBCFG,SSMC);         // disable scatch ROM
 840   1      }
 841          
 842          //-----------------------------------------------------------------------------
 843          // The function for oem code write spi 256 bytes
 844          //              Input : 1 DataPointer --> Pointe to external memory
 845          //                              2 Addr2    --> A23 ~ A16
 846          //                              3 Addr1    --> A15 ~ A8
 847          //                              4 Addr0    --> A7  ~ A0
 848          //-----------------------------------------------------------------------------
 849          #pragma ot(7, SIZE)
 850          void Do_SPI_Write_256Bytes(XBYTE *DataPointer, BYTE Addr2, BYTE Addr1, BYTE Addr0)
 851          {
 852   1              SPIDataPointer = DataPointer;
 853   1              SPIAddrCycle[0] = Addr2;
 854   1              SPIAddrCycle[1] = Addr1;
 855   1              SPIAddrCycle[2] = Addr0;
 856   1                              
 857   1              DisableAllInterrupt();                          // Disable all interrupt 
 858   1              SPI_Write_256Bytes();               // Load function to ram
 859   1              SET_MASK(FBCFG,SSMC);                   // enable scatch ROM
 860   1              FuncAt_0xFE00();                                        // do function in extern ram 0x600
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 15  

 861   1              EnableAllInterrupt();                           // Enable all interrupt 
 862   1              CLEAR_MASK(FBCFG,SSMC);                 // disable scatch ROM
 863   1      }
 864          
 865          //-----------------------------------------------------------------------------
 866          // The function for oem code read spi 256 bytes to external memory
 867          //              Input : 1 DataPointer --> Pointe to external memory
 868          //                              2 Addr2    --> A23 ~ A16
 869          //                              3 Addr1    --> A15 ~ A8
 870          //                              4 Addr0    --> A7  ~ A0
 871          //-----------------------------------------------------------------------------
 872          #pragma ot(7, SIZE)
 873          void Do_SPI_Read_256Bytes(XBYTE *DataPointer, BYTE Addr2, BYTE Addr1, BYTE Addr0)
 874          {
 875   1              SPIDataPointer = DataPointer;
 876   1              SPIAddrCycle[0] = Addr2;
 877   1              SPIAddrCycle[1] = Addr1;
 878   1              SPIAddrCycle[2] = Addr0;
 879   1                              
 880   1              DisableAllInterrupt();                          // Disable all interrupt 
 881   1              LoadSPIFucnToRam(SPI_Read_256Bytes);    // Load function to ram
 882   1              SET_MASK(FBCFG,SSMC);                   // enable scatch ROM
 883   1              FuncAt_0xFE00();                                        // do function in extern ram 0x600
 884   1              EnableAllInterrupt();                           // Enable all interrupt 
 885   1              CLEAR_MASK(FBCFG,SSMC);                 // disable scatch ROM
 886   1      }
 887          
 888          //-----------------------------------------------------------------------------
 889          // The function for oem code spi write enable
 890          //-----------------------------------------------------------------------------
 891          #pragma ot(7, SIZE)
 892          void Do_SPI_Write_Enable(void)
 893          {
 894   1              DisableAllInterrupt();                          // Disable all interrupt 
 895   1              LoadSPIFucnToRam(SPI_Write_Enable);     // Load function to ram
 896   1              SET_MASK(FBCFG,SSMC);                   // enable scatch ROM
 897   1              FuncAt_0xFE00();                                        // do function in extern ram 0x600
 898   1              EnableAllInterrupt();                           // Enable all interrupt 
 899   1              CLEAR_MASK(FBCFG,SSMC);                 // disable scatch ROM
 900   1      }
 901          
 902          //-----------------------------------------------------------------------------
 903          // The function for oem code spi write disable
 904          //-----------------------------------------------------------------------------
 905          #pragma ot(7, SIZE)
 906          void Do_SPI_Write_Disable(void)
 907          {
 908   1              DisableAllInterrupt();                          // Disable all interrupt 
 909   1              LoadSPIFucnToRam(SPI_Write_Disable);    // Load function to ram
 910   1              SET_MASK(FBCFG,SSMC);                   // enable scatch ROM
 911   1              FuncAt_0xFE00();                                        // do function in extern ram 0x600
 912   1              EnableAllInterrupt();                           // Enable all interrupt 
 913   1              CLEAR_MASK(FBCFG,SSMC);                 // disable scatch ROM
 914   1      }
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 16  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION RamCode (BEGIN)
                                           ; SOURCE LINE # 16
                                           ; SOURCE LINE # 17
                                           ; SOURCE LINE # 19
0000 22                RET     
             ; FUNCTION RamCode (END)

             ; FUNCTION FuncAt_0xFE00 (BEGIN)
                                           ; SOURCE LINE # 24
                                           ; SOURCE LINE # 25
                                           ; SOURCE LINE # 26
0000 00                NOP     
                                           ; SOURCE LINE # 27
0001 00                NOP     
                                           ; SOURCE LINE # 28
0002 00                NOP     
                                           ; SOURCE LINE # 29
0003 00                NOP     
                                           ; SOURCE LINE # 30
0004 00                NOP     
                                           ; SOURCE LINE # 31
0005 00                NOP     
                                           ; SOURCE LINE # 32
0006 00                NOP     
                                           ; SOURCE LINE # 33
0007 00                NOP     
                                           ; SOURCE LINE # 34
0008 020000      R     LJMP    FlashECCode
             ; FUNCTION FuncAt_0xFE00 (END)

             ; FUNCTION FlashECCode (BEGIN)
                                           ; SOURCE LINE # 41
                                           ; SOURCE LINE # 42
                                           ; SOURCE LINE # 43
0000 E4                CLR     A
0001 900000      E     MOV     DPTR,#RamcodeCmd
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 44
0005 900000      E     MOV     DPTR,#RamcodeSend
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 46
0009 900000      E     MOV     DPTR,#PM2DO
000C 7433              MOV     A,#033H
000E F0                MOVX    @DPTR,A
000F         ?C0003:
                                           ; SOURCE LINE # 48
                                           ; SOURCE LINE # 49
                                           ; SOURCE LINE # 50
000F 900000      E     MOV     DPTR,#KBHISR
0012 E0                MOVX    A,@DPTR
0013 30E10A            JNB     ACC.1,?C0005
                                           ; SOURCE LINE # 51
                                           ; SOURCE LINE # 52
0016 900000      E     MOV     DPTR,#KBHIDIR
0019 E0                MOVX    A,@DPTR
001A 900000      E     MOV     DPTR,#RamcodeCmd
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 53
001E 80EF              SJMP    ?C0003
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 17  

                                           ; SOURCE LINE # 54
0020         ?C0005:
                                           ; SOURCE LINE # 55
0020 900000      E     MOV     DPTR,#PM2STS
0023 E0                MOVX    A,@DPTR
0024 30E1E8            JNB     ACC.1,?C0003
0027         ?C0006:
                                           ; SOURCE LINE # 56
0027 900000      E     MOV     DPTR,#PM2STS
002A E0                MOVX    A,@DPTR
002B 30E3E1            JNB     ACC.3,?C0003
002E         ?C0007:
                                           ; SOURCE LINE # 57
002E 900000      E     MOV     DPTR,#PM2DI
0031 E0                MOVX    A,@DPTR
0032 900000      E     MOV     DPTR,#RamcodeCmd
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 59
0036 900000      E     MOV     DPTR,#RamcodeSend
0039 E0                MOVX    A,@DPTR
003A B4010F            CJNE    A,#01H,?C0008
                                           ; SOURCE LINE # 60
                                           ; SOURCE LINE # 61
003D 900000      E     MOV     DPTR,#RamcodeCmd
0040 E0                MOVX    A,@DPTR
0041 900000      E     MOV     DPTR,#ECINDDR
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 62
0045 E4                CLR     A
0046 900000      E     MOV     DPTR,#RamcodeSend
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 63
004A 80C3              SJMP    ?C0003
                                           ; SOURCE LINE # 64
004C         ?C0008:
                                           ; SOURCE LINE # 66
004C 900000      E     MOV     DPTR,#RamcodeCmd
004F E0                MOVX    A,@DPTR
0050 B4011C            CJNE    A,#01H,?C0009
                                           ; SOURCE LINE # 67
                                           ; SOURCE LINE # 68
0053 900000      E     MOV     DPTR,#ECINDAR3
0056 740F              MOV     A,#0FH
0058 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 69
0059 900000      E     MOV     DPTR,#ECINDAR2
005C 74FF              MOV     A,#0FFH
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 70
005F 900000      E     MOV     DPTR,#ECINDAR1
0062 14                DEC     A
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 71
0064 E4                CLR     A
0065 900000      E     MOV     DPTR,#ECINDAR0
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 72
0069 900000      E     MOV     DPTR,#ECINDDR
006C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 73
006D 80A0              SJMP    ?C0003
006F         ?C0009:
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 18  

                                           ; SOURCE LINE # 74
006F 900000      E     MOV     DPTR,#RamcodeCmd
0072 E0                MOVX    A,@DPTR
0073 B40208            CJNE    A,#02H,?C0011
                                           ; SOURCE LINE # 75
                                           ; SOURCE LINE # 76
0076 900000      E     MOV     DPTR,#ECINDAR1
0079 74FD              MOV     A,#0FDH
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 77
                                           ; SOURCE LINE # 78
007C 8007              SJMP    ?C0147
007E         ?C0011:
                                           ; SOURCE LINE # 79
007E 900000      E     MOV     DPTR,#RamcodeCmd
0081 E0                MOVX    A,@DPTR
0082 B40308            CJNE    A,#03H,?C0013
                                           ; SOURCE LINE # 80
                                           ; SOURCE LINE # 81
0085         ?C0147:
0085 900000      E     MOV     DPTR,#RamcodeSend
0088 7401              MOV     A,#01H
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 82
008B 8082              SJMP    ?C0003
008D         ?C0013:
                                           ; SOURCE LINE # 83
008D 900000      E     MOV     DPTR,#RamcodeCmd
0090 E0                MOVX    A,@DPTR
0091 B4040B            CJNE    A,#04H,?C0015
                                           ; SOURCE LINE # 84
                                           ; SOURCE LINE # 86
0094 900000      E     MOV     DPTR,#ECINDDR
0097 E0                MOVX    A,@DPTR
0098 900000      E     MOV     DPTR,#PM2DO
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 87
009C 020000      R     LJMP    ?C0003
009F         ?C0015:
                                           ; SOURCE LINE # 88
009F 900000      E     MOV     DPTR,#RamcodeCmd
00A2 E0                MOVX    A,@DPTR
00A3 B4050C            CJNE    A,#05H,?C0017
                                           ; SOURCE LINE # 89
                                           ; SOURCE LINE # 90
00A6 E4                CLR     A
00A7 900000      E     MOV     DPTR,#ECINDAR3
00AA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 91
00AB 900000      E     MOV     DPTR,#ECINDAR2
00AE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 92
00AF 020000      R     LJMP    ?C0003
00B2         ?C0017:
                                           ; SOURCE LINE # 93
00B2 900000      E     MOV     DPTR,#RamcodeCmd
00B5 E0                MOVX    A,@DPTR
00B6 B4FC08            CJNE    A,#0FCH,?C0019
                                           ; SOURCE LINE # 94
                                           ; SOURCE LINE # 95
00B9 900000      E     MOV     DPTR,#WinFlashMark
00BC 7433              MOV     A,#033H
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 19  

00BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 96
00BF 8024              SJMP    ?C0004
                                           ; SOURCE LINE # 97
00C1         ?C0019:
                                           ; SOURCE LINE # 98
00C1 900000      E     MOV     DPTR,#RamcodeCmd
00C4 E0                MOVX    A,@DPTR
00C5 B4FD06            CJNE    A,#0FDH,?C0021
                                           ; SOURCE LINE # 99
                                           ; SOURCE LINE # 100
00C8 D2D8              SETB    WDTRST
                                           ; SOURCE LINE # 101
00CA D2D9              SETB    WDTEB
00CC         ?C0022:
                                           ; SOURCE LINE # 102
00CC 80FE              SJMP    ?C0022
                                           ; SOURCE LINE # 103
00CE         ?C0021:
                                           ; SOURCE LINE # 104
00CE 900000      E     MOV     DPTR,#RamcodeCmd
00D1 E0                MOVX    A,@DPTR
00D2 64FE              XRL     A,#0FEH
00D4 6003              JZ      $ + 5H
00D6 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 106
00D9 900000      E     MOV     DPTR,#BRAM+03FH
00DC 7455              MOV     A,#055H
00DE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 107
00DF D2D8              SETB    WDTRST
                                           ; SOURCE LINE # 108
00E1 D2D9              SETB    WDTEB
00E3         ?C0026:
                                           ; SOURCE LINE # 109
00E3 80FE              SJMP    ?C0026
                                           ; SOURCE LINE # 110
                                           ; SOURCE LINE # 111
00E5         ?C0004:
                                           ; SOURCE LINE # 113
00E5 020000      E     LJMP    main
             ; FUNCTION FlashECCode (END)

             ; FUNCTION SPI_Read_Status (BEGIN)
                                           ; SOURCE LINE # 120
                                           ; SOURCE LINE # 121
                                           ; SOURCE LINE # 122
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 740F              MOV     A,#0FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 123
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 124
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 126
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 20  

0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 127
0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 128
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 129
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 131
0028 E0                MOVX    A,@DPTR
0029 900000      E     MOV     DPTR,#SPIReadStatus
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 133
002D E4                CLR     A
002E 900000      E     MOV     DPTR,#ECINDAR3
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 134
0032 900000      E     MOV     DPTR,#ECINDAR2
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 135
0036 22                RET     
             ; FUNCTION SPI_Read_Status (END)

             ; FUNCTION SPI_Write_Status (BEGIN)
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 142
                                           ; SOURCE LINE # 143
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 740F              MOV     A,#0FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 144
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 145
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 147
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 148
0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 149
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 150
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
0028         ?C0030:
                                           ; SOURCE LINE # 151
                                           ; SOURCE LINE # 152
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 21  

                                           ; SOURCE LINE # 153
0028 900000      E     MOV     DPTR,#ECINDDR
002B E0                MOVX    A,@DPTR
002C 20E0F9            JB      ACC.0,?C0030
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 155
                                           ; SOURCE LINE # 156
                                           ; SOURCE LINE # 157
002F         ?C0031:
                                           ; SOURCE LINE # 159
002F 900000      E     MOV     DPTR,#ECINDAR1
0032 74FE              MOV     A,#0FEH
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 160
0035 900000      E     MOV     DPTR,#ECINDDR
0038 04                INC     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 161
003A 900000      E     MOV     DPTR,#ECINDAR1
003D 74FD              MOV     A,#0FDH
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 162
0040 900000      E     MOV     DPTR,#ECINDDR
0043 7406              MOV     A,#06H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 164
0046 900000      E     MOV     DPTR,#SPIID
0049 E0                MOVX    A,@DPTR
004A B4BF17            CJNE    A,#0BFH,?C0033
                                           ; SOURCE LINE # 165
                                           ; SOURCE LINE # 166
004D 900000      E     MOV     DPTR,#ECINDAR1
0050 74FE              MOV     A,#0FEH
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 167
0053 900000      E     MOV     DPTR,#ECINDDR
0056 04                INC     A
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 168
0058 900000      E     MOV     DPTR,#ECINDAR1
005B 74FD              MOV     A,#0FDH
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 169
005E 900000      E     MOV     DPTR,#ECINDDR
0061 7450              MOV     A,#050H
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 170
0064         ?C0033:
                                           ; SOURCE LINE # 172
0064 900000      E     MOV     DPTR,#ECINDAR1
0067 74FE              MOV     A,#0FEH
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 173
006A 900000      E     MOV     DPTR,#ECINDDR
006D 04                INC     A
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 174
006F 900000      E     MOV     DPTR,#ECINDAR1
0072 74FD              MOV     A,#0FDH
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 175
0075 900000      E     MOV     DPTR,#ECINDDR
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 22  

0078 7401              MOV     A,#01H
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 176
007B 900000      E     MOV     DPTR,#SPIWriteStatus
007E E0                MOVX    A,@DPTR
007F 900000      E     MOV     DPTR,#ECINDDR
0082 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 178
0083 900000      E     MOV     DPTR,#ECINDAR1
0086 74FE              MOV     A,#0FEH
0088 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 179
0089 900000      E     MOV     DPTR,#ECINDDR
008C 04                INC     A
008D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 180
008E 900000      E     MOV     DPTR,#ECINDAR1
0091 74FD              MOV     A,#0FDH
0093 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 181
0094 900000      E     MOV     DPTR,#ECINDDR
0097 7405              MOV     A,#05H
0099 F0                MOVX    @DPTR,A
009A         ?C0034:
                                           ; SOURCE LINE # 182
                                           ; SOURCE LINE # 183
                                           ; SOURCE LINE # 184
009A 900000      E     MOV     DPTR,#ECINDDR
009D E0                MOVX    A,@DPTR
009E 20E0F9            JB      ACC.0,?C0034
                                           ; SOURCE LINE # 185
                                           ; SOURCE LINE # 186
                                           ; SOURCE LINE # 187
                                           ; SOURCE LINE # 188
00A1         ?C0035:
                                           ; SOURCE LINE # 190
00A1 E4                CLR     A
00A2 900000      E     MOV     DPTR,#ECINDAR3
00A5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 191
00A6 900000      E     MOV     DPTR,#ECINDAR2
00A9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 192
00AA 22                RET     
             ; FUNCTION SPI_Write_Status (END)

             ; FUNCTION SPI_Read_ID (BEGIN)
                                           ; SOURCE LINE # 198
                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 200
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 740F              MOV     A,#0FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 201
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 23  

0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 205
0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 206
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 207
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
0028         ?C0038:
                                           ; SOURCE LINE # 208
                                           ; SOURCE LINE # 209
                                           ; SOURCE LINE # 210
0028 900000      E     MOV     DPTR,#ECINDDR
002B E0                MOVX    A,@DPTR
002C 20E0F9            JB      ACC.0,?C0038
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 212
                                           ; SOURCE LINE # 213
                                           ; SOURCE LINE # 214
002F         ?C0039:
                                           ; SOURCE LINE # 216
002F 900000      E     MOV     DPTR,#ECINDAR1
0032 74FE              MOV     A,#0FEH
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 217
0035 900000      E     MOV     DPTR,#ECINDDR
0038 04                INC     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 218
003A 900000      E     MOV     DPTR,#ECINDAR1
003D 74FD              MOV     A,#0FDH
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 219
0040 900000      E     MOV     DPTR,#ECINDDR
0043 749F              MOV     A,#09FH
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 220
0046 E4                CLR     A
0047 900000      E     MOV     DPTR,#SPIIndex
004A F0                MOVX    @DPTR,A
004B         ?C0041:
                                           ; SOURCE LINE # 221
                                           ; SOURCE LINE # 222
004B 900000      E     MOV     DPTR,#ECINDDR
004E E0                MOVX    A,@DPTR
004F FF                MOV     R7,A
0050 900000      E     MOV     DPTR,#SPIIndex
0053 E0                MOVX    A,@DPTR
0054 2400        E     ADD     A,#LOW SPIIDBuf
0056 F582              MOV     DPL,A
0058 E4                CLR     A
0059 3400        E     ADDC    A,#HIGH SPIIDBuf
005B F583              MOV     DPH,A
005D EF                MOV     A,R7
005E F0                MOVX    @DPTR,A
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 24  

                                           ; SOURCE LINE # 223
005F 900000      E     MOV     DPTR,#SPIIndex
0062 E0                MOVX    A,@DPTR
0063 04                INC     A
0064 F0                MOVX    @DPTR,A
0065 E0                MOVX    A,@DPTR
0066 B404E2            CJNE    A,#04H,?C0041
0069         ?C0042:
                                           ; SOURCE LINE # 224
0069 900000      E     MOV     DPTR,#SPIIDBuf
006C E0                MOVX    A,@DPTR
006D 900000      E     MOV     DPTR,#SPIID
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 226
0071 900000      E     MOV     DPTR,#ECINDAR1
0074 74FE              MOV     A,#0FEH
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 227
0077 900000      E     MOV     DPTR,#ECINDDR
007A 04                INC     A
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 228
007C 900000      E     MOV     DPTR,#ECINDAR1
007F 74FD              MOV     A,#0FDH
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 229
0082 900000      E     MOV     DPTR,#ECINDDR
0085 7405              MOV     A,#05H
0087 F0                MOVX    @DPTR,A
0088         ?C0044:
                                           ; SOURCE LINE # 231
                                           ; SOURCE LINE # 232
                                           ; SOURCE LINE # 233
0088 900000      E     MOV     DPTR,#ECINDDR
008B E0                MOVX    A,@DPTR
008C 20E0F9            JB      ACC.0,?C0044
                                           ; SOURCE LINE # 234
                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 236
                                           ; SOURCE LINE # 237
008F         ?C0045:
                                           ; SOURCE LINE # 238
008F E4                CLR     A
0090 900000      E     MOV     DPTR,#ECINDAR3
0093 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 239
0094 900000      E     MOV     DPTR,#ECINDAR2
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 240
0098 22                RET     
             ; FUNCTION SPI_Read_ID (END)

             ; FUNCTION SPI_Read_ID_CmdAB (BEGIN)
                                           ; SOURCE LINE # 246
                                           ; SOURCE LINE # 247
                                           ; SOURCE LINE # 248
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 740F              MOV     A,#0FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 249
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 74FF              MOV     A,#0FFH
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 25  

000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 250
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 252
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 253
0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 254
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 255
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
0028         ?C0048:
                                           ; SOURCE LINE # 256
                                           ; SOURCE LINE # 257
                                           ; SOURCE LINE # 258
0028 900000      E     MOV     DPTR,#ECINDDR
002B E0                MOVX    A,@DPTR
002C 20E0F9            JB      ACC.0,?C0048
                                           ; SOURCE LINE # 259
                                           ; SOURCE LINE # 260
                                           ; SOURCE LINE # 261
                                           ; SOURCE LINE # 262
002F         ?C0049:
                                           ; SOURCE LINE # 264
002F 900000      E     MOV     DPTR,#ECINDAR1
0032 74FE              MOV     A,#0FEH
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 265
0035 900000      E     MOV     DPTR,#ECINDDR
0038 04                INC     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 266
003A 900000      E     MOV     DPTR,#ECINDAR1
003D 74FD              MOV     A,#0FDH
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 267
0040 900000      E     MOV     DPTR,#ECINDDR
0043 74AB              MOV     A,#0ABH
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 268
0046 E4                CLR     A
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 269
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 270
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 272
004A 900000      E     MOV     DPTR,#SPIIndex
004D F0                MOVX    @DPTR,A
004E         ?C0051:
                                           ; SOURCE LINE # 273
                                           ; SOURCE LINE # 274
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 26  

004E 900000      E     MOV     DPTR,#ECINDDR
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 900000      E     MOV     DPTR,#SPIIndex
0056 E0                MOVX    A,@DPTR
0057 2400        E     ADD     A,#LOW SPIIDBuf
0059 F582              MOV     DPL,A
005B E4                CLR     A
005C 3400        E     ADDC    A,#HIGH SPIIDBuf
005E F583              MOV     DPH,A
0060 EF                MOV     A,R7
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 275
0062 900000      E     MOV     DPTR,#SPIIndex
0065 E0                MOVX    A,@DPTR
0066 04                INC     A
0067 F0                MOVX    @DPTR,A
0068 E0                MOVX    A,@DPTR
0069 B404E2            CJNE    A,#04H,?C0051
006C         ?C0052:
                                           ; SOURCE LINE # 276
006C 900000      E     MOV     DPTR,#SPIIDBuf
006F E0                MOVX    A,@DPTR
0070 900000      E     MOV     DPTR,#SPIID
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 278
0074 900000      E     MOV     DPTR,#ECINDAR1
0077 74FE              MOV     A,#0FEH
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 279
007A 900000      E     MOV     DPTR,#ECINDDR
007D 04                INC     A
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 280
007F 900000      E     MOV     DPTR,#ECINDAR1
0082 74FD              MOV     A,#0FDH
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 281
0085 900000      E     MOV     DPTR,#ECINDDR
0088 7405              MOV     A,#05H
008A F0                MOVX    @DPTR,A
008B         ?C0054:
                                           ; SOURCE LINE # 283
                                           ; SOURCE LINE # 284
                                           ; SOURCE LINE # 285
008B 900000      E     MOV     DPTR,#ECINDDR
008E E0                MOVX    A,@DPTR
008F 20E0F9            JB      ACC.0,?C0054
                                           ; SOURCE LINE # 286
                                           ; SOURCE LINE # 287
                                           ; SOURCE LINE # 288
                                           ; SOURCE LINE # 289
0092         ?C0055:
                                           ; SOURCE LINE # 290
0092 E4                CLR     A
0093 900000      E     MOV     DPTR,#ECINDAR3
0096 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 291
0097 900000      E     MOV     DPTR,#ECINDAR2
009A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 292
009B 22                RET     
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 27  

             ; FUNCTION SPI_Read_ID_CmdAB (END)

             ; FUNCTION SPI_Erase (BEGIN)
                                           ; SOURCE LINE # 297
                                           ; SOURCE LINE # 298
                                           ; SOURCE LINE # 299
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 740F              MOV     A,#0FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 300
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 301
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 303
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 304
0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 305
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 306
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
0028         ?C0058:
                                           ; SOURCE LINE # 307
                                           ; SOURCE LINE # 308
                                           ; SOURCE LINE # 309
0028 900000      E     MOV     DPTR,#ECINDDR
002B E0                MOVX    A,@DPTR
002C 5403              ANL     A,#03H
002E FF                MOV     R7,A
002F BF02F6            CJNE    R7,#02H,?C0058
                                           ; SOURCE LINE # 310
                                           ; SOURCE LINE # 311
                                           ; SOURCE LINE # 312
                                           ; SOURCE LINE # 313
0032         ?C0059:
                                           ; SOURCE LINE # 315
0032 900000      E     MOV     DPTR,#ECINDAR1
0035 74FE              MOV     A,#0FEH
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 316
0038 900000      E     MOV     DPTR,#ECINDDR
003B 04                INC     A
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 317
003D 900000      E     MOV     DPTR,#ECINDAR1
0040 74FD              MOV     A,#0FDH
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 318
0043 900000      E     MOV     DPTR,#SPIAEraseCmd
0046 E0                MOVX    A,@DPTR
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 28  

0047 900000      E     MOV     DPTR,#ECINDDR
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 319
004B E4                CLR     A
004C 900000      E     MOV     DPTR,#SPIIndex
004F F0                MOVX    @DPTR,A
0050         ?C0061:
                                           ; SOURCE LINE # 320
                                           ; SOURCE LINE # 321
0050 900000      E     MOV     DPTR,#SPIIndex
0053 E0                MOVX    A,@DPTR
0054 2400        E     ADD     A,#LOW SPIAddrCycle
0056 F582              MOV     DPL,A
0058 E4                CLR     A
0059 3400        E     ADDC    A,#HIGH SPIAddrCycle
005B F583              MOV     DPH,A
005D E0                MOVX    A,@DPTR
005E 900000      E     MOV     DPTR,#ECINDDR
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 322
0062 900000      E     MOV     DPTR,#SPIIndex
0065 E0                MOVX    A,@DPTR
0066 04                INC     A
0067 F0                MOVX    @DPTR,A
0068 E0                MOVX    A,@DPTR
0069 B403E4            CJNE    A,#03H,?C0061
006C         ?C0062:
                                           ; SOURCE LINE # 324
006C 900000      E     MOV     DPTR,#ECINDAR1
006F 74FE              MOV     A,#0FEH
0071 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 325
0072 900000      E     MOV     DPTR,#ECINDDR
0075 04                INC     A
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 327
0077 900000      E     MOV     DPTR,#ECINDAR1
007A 74FD              MOV     A,#0FDH
007C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 328
007D 900000      E     MOV     DPTR,#ECINDDR
0080 7405              MOV     A,#05H
0082 F0                MOVX    @DPTR,A
0083         ?C0064:
                                           ; SOURCE LINE # 330
                                           ; SOURCE LINE # 331
                                           ; SOURCE LINE # 332
0083 900000      E     MOV     DPTR,#ECINDDR
0086 E0                MOVX    A,@DPTR
0087 20E0F9            JB      ACC.0,?C0064
                                           ; SOURCE LINE # 333
                                           ; SOURCE LINE # 334
                                           ; SOURCE LINE # 335
                                           ; SOURCE LINE # 336
008A         ?C0065:
                                           ; SOURCE LINE # 337
008A E4                CLR     A
008B 900000      E     MOV     DPTR,#ECINDAR3
008E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 338
008F 900000      E     MOV     DPTR,#ECINDAR2
0092 F0                MOVX    @DPTR,A
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 29  

                                           ; SOURCE LINE # 339
0093 22                RET     
             ; FUNCTION SPI_Erase (END)

             ; FUNCTION SPI_Write_Enable (BEGIN)
                                           ; SOURCE LINE # 344
                                           ; SOURCE LINE # 345
                                           ; SOURCE LINE # 346
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 740F              MOV     A,#0FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 347
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 348
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 350
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 351
0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 352
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 353
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
0028         ?C0068:
                                           ; SOURCE LINE # 354
                                           ; SOURCE LINE # 355
                                           ; SOURCE LINE # 356
0028 900000      E     MOV     DPTR,#ECINDDR
002B E0                MOVX    A,@DPTR
002C 20E0F9            JB      ACC.0,?C0068
                                           ; SOURCE LINE # 357
                                           ; SOURCE LINE # 358
                                           ; SOURCE LINE # 359
                                           ; SOURCE LINE # 360
002F         ?C0069:
                                           ; SOURCE LINE # 362
002F 900000      E     MOV     DPTR,#ECINDAR1
0032 74FE              MOV     A,#0FEH
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 363
0035 900000      E     MOV     DPTR,#ECINDDR
0038 04                INC     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 364
003A 900000      E     MOV     DPTR,#ECINDAR1
003D 74FD              MOV     A,#0FDH
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 365
0040 900000      E     MOV     DPTR,#ECINDDR
0043 7406              MOV     A,#06H
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 30  

0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 367
0046 900000      E     MOV     DPTR,#SPIID
0049 E0                MOVX    A,@DPTR
004A B4BF17            CJNE    A,#0BFH,?C0071
                                           ; SOURCE LINE # 368
                                           ; SOURCE LINE # 369
004D 900000      E     MOV     DPTR,#ECINDAR1
0050 74FE              MOV     A,#0FEH
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 370
0053 900000      E     MOV     DPTR,#ECINDDR
0056 04                INC     A
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 371
0058 900000      E     MOV     DPTR,#ECINDAR1
005B 74FD              MOV     A,#0FDH
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 372
005E 900000      E     MOV     DPTR,#ECINDDR
0061 7450              MOV     A,#050H
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 373
0064         ?C0071:
                                           ; SOURCE LINE # 375
0064 900000      E     MOV     DPTR,#ECINDAR1
0067 74FE              MOV     A,#0FEH
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 376
006A 900000      E     MOV     DPTR,#ECINDDR
006D 04                INC     A
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 377
006F 900000      E     MOV     DPTR,#ECINDAR1
0072 74FD              MOV     A,#0FDH
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 378
0075 900000      E     MOV     DPTR,#ECINDDR
0078 7405              MOV     A,#05H
007A F0                MOVX    @DPTR,A
007B         ?C0072:
                                           ; SOURCE LINE # 379
                                           ; SOURCE LINE # 380
                                           ; SOURCE LINE # 381
007B 900000      E     MOV     DPTR,#ECINDDR
007E E0                MOVX    A,@DPTR
007F 5403              ANL     A,#03H
0081 FF                MOV     R7,A
0082 BF02F6            CJNE    R7,#02H,?C0072
                                           ; SOURCE LINE # 382
                                           ; SOURCE LINE # 383
                                           ; SOURCE LINE # 384
                                           ; SOURCE LINE # 385
0085         ?C0073:
                                           ; SOURCE LINE # 387
0085 E4                CLR     A
0086 900000      E     MOV     DPTR,#ECINDAR3
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 388
008A 900000      E     MOV     DPTR,#ECINDAR2
008D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 389
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 31  

008E 22                RET     
             ; FUNCTION SPI_Write_Enable (END)

             ; FUNCTION SPI_Write_Disable (BEGIN)
                                           ; SOURCE LINE # 394
                                           ; SOURCE LINE # 395
                                           ; SOURCE LINE # 396
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 740F              MOV     A,#0FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 397
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 398
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 400
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 401
0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 402
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 403
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
0028         ?C0076:
                                           ; SOURCE LINE # 404
                                           ; SOURCE LINE # 405
                                           ; SOURCE LINE # 406
0028 900000      E     MOV     DPTR,#ECINDDR
002B E0                MOVX    A,@DPTR
002C 20E0F9            JB      ACC.0,?C0076
                                           ; SOURCE LINE # 407
                                           ; SOURCE LINE # 408
                                           ; SOURCE LINE # 409
                                           ; SOURCE LINE # 410
002F         ?C0077:
                                           ; SOURCE LINE # 412
002F 900000      E     MOV     DPTR,#ECINDAR1
0032 74FE              MOV     A,#0FEH
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 413
0035 900000      E     MOV     DPTR,#ECINDDR
0038 04                INC     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 414
003A 900000      E     MOV     DPTR,#ECINDAR1
003D 74FD              MOV     A,#0FDH
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 415
0040 900000      E     MOV     DPTR,#ECINDDR
0043 7404              MOV     A,#04H
0045 F0                MOVX    @DPTR,A
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 32  

                                           ; SOURCE LINE # 417
0046 900000      E     MOV     DPTR,#ECINDAR1
0049 74FE              MOV     A,#0FEH
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 418
004C 900000      E     MOV     DPTR,#ECINDDR
004F 04                INC     A
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 419
0051 900000      E     MOV     DPTR,#ECINDAR1
0054 74FD              MOV     A,#0FDH
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 420
0057 900000      E     MOV     DPTR,#ECINDDR
005A 7405              MOV     A,#05H
005C F0                MOVX    @DPTR,A
005D         ?C0079:
                                           ; SOURCE LINE # 421
                                           ; SOURCE LINE # 422
                                           ; SOURCE LINE # 423
005D 900000      E     MOV     DPTR,#ECINDDR
0060 E0                MOVX    A,@DPTR
0061 5403              ANL     A,#03H
0063 70F8              JNZ     ?C0079
                                           ; SOURCE LINE # 424
                                           ; SOURCE LINE # 425
                                           ; SOURCE LINE # 426
                                           ; SOURCE LINE # 427
0065         ?C0080:
                                           ; SOURCE LINE # 429
0065 E4                CLR     A
0066 900000      E     MOV     DPTR,#ECINDAR3
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 430
006A 900000      E     MOV     DPTR,#ECINDAR2
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 431
006E 22                RET     
             ; FUNCTION SPI_Write_Disable (END)

             ; FUNCTION Other_SPI_Write_256Bytes (BEGIN)
                                           ; SOURCE LINE # 436
                                           ; SOURCE LINE # 437
                                           ; SOURCE LINE # 438
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 740F              MOV     A,#0FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 439
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 440
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 442
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 443
0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 33  

001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 444
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 445
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
0028         ?C0083:
                                           ; SOURCE LINE # 446
                                           ; SOURCE LINE # 447
                                           ; SOURCE LINE # 448
0028 900000      E     MOV     DPTR,#ECINDDR
002B E0                MOVX    A,@DPTR
002C 20E0F9            JB      ACC.0,?C0083
                                           ; SOURCE LINE # 449
                                           ; SOURCE LINE # 450
                                           ; SOURCE LINE # 451
                                           ; SOURCE LINE # 452
002F         ?C0084:
                                           ; SOURCE LINE # 454
002F 900000      E     MOV     DPTR,#ECINDAR1
0032 74FE              MOV     A,#0FEH
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 455
0035 900000      E     MOV     DPTR,#ECINDDR
0038 04                INC     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 456
003A 900000      E     MOV     DPTR,#ECINDAR1
003D 74FD              MOV     A,#0FDH
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 457
0040 900000      E     MOV     DPTR,#ECINDDR
0043 7402              MOV     A,#02H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 459
0046 900000      E     MOV     DPTR,#SPIAddrCycle
0049 E0                MOVX    A,@DPTR
004A 900000      E     MOV     DPTR,#ECINDDR
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 460
004E 900000      E     MOV     DPTR,#SPIAddrCycle+01H
0051 E0                MOVX    A,@DPTR
0052 900000      E     MOV     DPTR,#ECINDDR
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 461
0056 900000      E     MOV     DPTR,#SPIAddrCycle+02H
0059 E0                MOVX    A,@DPTR
005A 900000      E     MOV     DPTR,#ECINDDR
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 463
005E E4                CLR     A
005F 900000      E     MOV     DPTR,#SPIIndex
0062 F0                MOVX    @DPTR,A
0063         ?C0088:
                                           ; SOURCE LINE # 465
                                           ; SOURCE LINE # 466
0063 900000      E     MOV     DPTR,#SPIDataPointer
0066 E0                MOVX    A,@DPTR
0067 FE                MOV     R6,A
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 34  

0068 A3                INC     DPTR
0069 E0                MOVX    A,@DPTR
006A F582              MOV     DPL,A
006C 8E83              MOV     DPH,R6
006E E0                MOVX    A,@DPTR
006F 900000      E     MOV     DPTR,#ECINDDR
0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 467
0073 900000      E     MOV     DPTR,#SPIIndex
0076 E0                MOVX    A,@DPTR
0077 04                INC     A
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 468
0079 90009C            MOV     DPTR,#09CH
007C E0                MOVX    A,@DPTR
007D 04                INC     A
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 469
007F 900000      E     MOV     DPTR,#SPIIndex
0082 E0                MOVX    A,@DPTR
0083 70DE              JNZ     ?C0088
                                           ; SOURCE LINE # 471
0085 900000      E     MOV     DPTR,#ECINDAR1
0088 74FE              MOV     A,#0FEH
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 472
008B 900000      E     MOV     DPTR,#ECINDDR
008E 04                INC     A
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 473
0090 900000      E     MOV     DPTR,#ECINDAR1
0093 74FD              MOV     A,#0FDH
0095 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 474
0096 900000      E     MOV     DPTR,#ECINDDR
0099 7405              MOV     A,#05H
009B F0                MOVX    @DPTR,A
009C         ?C0089:
                                           ; SOURCE LINE # 475
                                           ; SOURCE LINE # 476
                                           ; SOURCE LINE # 477
009C 900000      E     MOV     DPTR,#ECINDDR
009F E0                MOVX    A,@DPTR
00A0 20E0F9            JB      ACC.0,?C0089
                                           ; SOURCE LINE # 478
                                           ; SOURCE LINE # 479
                                           ; SOURCE LINE # 480
                                           ; SOURCE LINE # 481
00A3         ?C0090:
                                           ; SOURCE LINE # 483
00A3 E4                CLR     A
00A4 900000      E     MOV     DPTR,#ECINDAR3
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 484
00A8 900000      E     MOV     DPTR,#ECINDAR2
00AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 485
00AC 22                RET     
             ; FUNCTION Other_SPI_Write_256Bytes (END)

             ; FUNCTION SST_SPI_Write_256Bytes (BEGIN)
                                           ; SOURCE LINE # 490
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 35  

                                           ; SOURCE LINE # 491
                                           ; SOURCE LINE # 492
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 740F              MOV     A,#0FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 493
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 494
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 496
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 497
0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 498
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 499
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
0028         ?C0093:
                                           ; SOURCE LINE # 500
                                           ; SOURCE LINE # 501
                                           ; SOURCE LINE # 502
0028 900000      E     MOV     DPTR,#ECINDDR
002B E0                MOVX    A,@DPTR
002C 20E0F9            JB      ACC.0,?C0093
                                           ; SOURCE LINE # 503
                                           ; SOURCE LINE # 504
                                           ; SOURCE LINE # 505
                                           ; SOURCE LINE # 506
002F         ?C0094:
                                           ; SOURCE LINE # 508
002F 900000      E     MOV     DPTR,#ECINDAR1
0032 74FE              MOV     A,#0FEH
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 509
0035 900000      E     MOV     DPTR,#ECINDDR
0038 04                INC     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 510
003A 900000      E     MOV     DPTR,#ECINDAR1
003D 74FD              MOV     A,#0FDH
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 511
0040 900000      E     MOV     DPTR,#ECINDDR
0043 74AD              MOV     A,#0ADH
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 513
0046 900000      E     MOV     DPTR,#SPIAddrCycle
0049 E0                MOVX    A,@DPTR
004A 900000      E     MOV     DPTR,#ECINDDR
004D F0                MOVX    @DPTR,A
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 36  

                                           ; SOURCE LINE # 514
004E 900000      E     MOV     DPTR,#SPIAddrCycle+01H
0051 E0                MOVX    A,@DPTR
0052 900000      E     MOV     DPTR,#ECINDDR
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 515
0056 900000      E     MOV     DPTR,#SPIAddrCycle+02H
0059 E0                MOVX    A,@DPTR
005A 900000      E     MOV     DPTR,#ECINDDR
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 517
005E E4                CLR     A
005F 900000      E     MOV     DPTR,#SPIIndex
0062 F0                MOVX    @DPTR,A
0063         ?C0098:
                                           ; SOURCE LINE # 519
                                           ; SOURCE LINE # 520
0063 900000      E     MOV     DPTR,#SPIDataPointer
0066 E0                MOVX    A,@DPTR
0067 FE                MOV     R6,A
0068 A3                INC     DPTR
0069 E0                MOVX    A,@DPTR
006A F582              MOV     DPL,A
006C 8E83              MOV     DPH,R6
006E E0                MOVX    A,@DPTR
006F 900000      E     MOV     DPTR,#ECINDDR
0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 521
0073 900000      E     MOV     DPTR,#SPIIndex
0076 E0                MOVX    A,@DPTR
0077 04                INC     A
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 522
0079 90009C            MOV     DPTR,#09CH
007C E0                MOVX    A,@DPTR
007D 04                INC     A
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 524
007F 900000      E     MOV     DPTR,#SPIIndex
0082 E0                MOVX    A,@DPTR
0083 20E03B            JB      ACC.0,?C0096
                                           ; SOURCE LINE # 525
                                           ; SOURCE LINE # 526
0086 900000      E     MOV     DPTR,#ECINDAR1
0089 74FE              MOV     A,#0FEH
008B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 527
008C 900000      E     MOV     DPTR,#ECINDDR
008F 04                INC     A
0090 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 528
0091 900000      E     MOV     DPTR,#ECINDAR1
0094 74FD              MOV     A,#0FDH
0096 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 529
0097 900000      E     MOV     DPTR,#ECINDDR
009A 7405              MOV     A,#05H
009C F0                MOVX    @DPTR,A
009D         ?C0100:
                                           ; SOURCE LINE # 530
                                           ; SOURCE LINE # 531
                                           ; SOURCE LINE # 532
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 37  

009D 900000      E     MOV     DPTR,#ECINDDR
00A0 E0                MOVX    A,@DPTR
00A1 20E0F9            JB      ACC.0,?C0100
                                           ; SOURCE LINE # 533
                                           ; SOURCE LINE # 534
                                           ; SOURCE LINE # 535
                                           ; SOURCE LINE # 536
00A4         ?C0101:
                                           ; SOURCE LINE # 538
00A4 900000      E     MOV     DPTR,#SPIIndex
00A7 E0                MOVX    A,@DPTR
00A8 6017              JZ      ?C0096
                                           ; SOURCE LINE # 539
                                           ; SOURCE LINE # 540
00AA 900000      E     MOV     DPTR,#ECINDAR1
00AD 74FE              MOV     A,#0FEH
00AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 541
00B0 900000      E     MOV     DPTR,#ECINDDR
00B3 04                INC     A
00B4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 542
00B5 900000      E     MOV     DPTR,#ECINDAR1
00B8 74FD              MOV     A,#0FDH
00BA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 543
00BB 900000      E     MOV     DPTR,#ECINDDR
00BE 74AD              MOV     A,#0ADH
00C0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 544
                                           ; SOURCE LINE # 545
                                           ; SOURCE LINE # 546
00C1         ?C0096:
00C1 900000      E     MOV     DPTR,#SPIIndex
00C4 E0                MOVX    A,@DPTR
00C5 709C              JNZ     ?C0098
                                           ; SOURCE LINE # 548
00C7 900000      E     MOV     DPTR,#ECINDAR1
00CA 74FE              MOV     A,#0FEH
00CC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 549
00CD 900000      E     MOV     DPTR,#ECINDDR
00D0 04                INC     A
00D1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 550
00D2 900000      E     MOV     DPTR,#ECINDAR1
00D5 74FD              MOV     A,#0FDH
00D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 551
00D8 900000      E     MOV     DPTR,#ECINDDR
00DB 7404              MOV     A,#04H
00DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 553
00DE E4                CLR     A
00DF 900000      E     MOV     DPTR,#WNCKR
00E2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 554
00E3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 555
00E4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 556
00E5 F0                MOVX    @DPTR,A
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 38  

                                           ; SOURCE LINE # 558
00E6 900000      E     MOV     DPTR,#ECINDAR3
00E9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 559
00EA 900000      E     MOV     DPTR,#ECINDAR2
00ED F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 560
00EE 22                RET     
             ; FUNCTION SST_SPI_Write_256Bytes (END)

             ; FUNCTION Old_SST_SPI_Write_256Bytes (BEGIN)
                                           ; SOURCE LINE # 565
                                           ; SOURCE LINE # 566
                                           ; SOURCE LINE # 567
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 740F              MOV     A,#0FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 568
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 569
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 571
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 572
0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 573
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 574
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
0028         ?C0105:
                                           ; SOURCE LINE # 575
                                           ; SOURCE LINE # 576
                                           ; SOURCE LINE # 577
0028 900000      E     MOV     DPTR,#ECINDDR
002B E0                MOVX    A,@DPTR
002C 20E0F9            JB      ACC.0,?C0105
                                           ; SOURCE LINE # 578
                                           ; SOURCE LINE # 579
                                           ; SOURCE LINE # 580
                                           ; SOURCE LINE # 581
002F         ?C0106:
                                           ; SOURCE LINE # 583
002F 900000      E     MOV     DPTR,#ECINDAR1
0032 74FE              MOV     A,#0FEH
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 584
0035 900000      E     MOV     DPTR,#ECINDDR
0038 04                INC     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 585
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 39  

003A 900000      E     MOV     DPTR,#ECINDAR1
003D 74FD              MOV     A,#0FDH
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 586
0040 900000      E     MOV     DPTR,#ECINDDR
0043 74AF              MOV     A,#0AFH
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 588
0046 900000      E     MOV     DPTR,#SPIAddrCycle
0049 E0                MOVX    A,@DPTR
004A 900000      E     MOV     DPTR,#ECINDDR
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 589
004E 900000      E     MOV     DPTR,#SPIAddrCycle+01H
0051 E0                MOVX    A,@DPTR
0052 900000      E     MOV     DPTR,#ECINDDR
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 590
0056 900000      E     MOV     DPTR,#SPIAddrCycle+02H
0059 E0                MOVX    A,@DPTR
005A 900000      E     MOV     DPTR,#ECINDDR
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 592
005E E4                CLR     A
005F 900000      E     MOV     DPTR,#SPIIndex
0062 F0                MOVX    @DPTR,A
0063         ?C0110:
                                           ; SOURCE LINE # 594
                                           ; SOURCE LINE # 595
0063 900000      E     MOV     DPTR,#SPIDataPointer
0066 E0                MOVX    A,@DPTR
0067 FE                MOV     R6,A
0068 A3                INC     DPTR
0069 E0                MOVX    A,@DPTR
006A F582              MOV     DPL,A
006C 8E83              MOV     DPH,R6
006E E0                MOVX    A,@DPTR
006F 900000      E     MOV     DPTR,#ECINDDR
0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 596
0073 900000      E     MOV     DPTR,#SPIIndex
0076 E0                MOVX    A,@DPTR
0077 04                INC     A
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 597
0079 90009C            MOV     DPTR,#09CH
007C E0                MOVX    A,@DPTR
007D 04                INC     A
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 599
007F 900000      E     MOV     DPTR,#ECINDAR1
0082 74FE              MOV     A,#0FEH
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 600
0085 900000      E     MOV     DPTR,#ECINDDR
0088 04                INC     A
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 601
008A 900000      E     MOV     DPTR,#ECINDAR1
008D 74FD              MOV     A,#0FDH
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 602
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 40  

0090 900000      E     MOV     DPTR,#ECINDDR
0093 7405              MOV     A,#05H
0095 F0                MOVX    @DPTR,A
0096         ?C0111:
                                           ; SOURCE LINE # 603
                                           ; SOURCE LINE # 604
                                           ; SOURCE LINE # 605
0096 900000      E     MOV     DPTR,#ECINDDR
0099 E0                MOVX    A,@DPTR
009A 20E0F9            JB      ACC.0,?C0111
                                           ; SOURCE LINE # 606
                                           ; SOURCE LINE # 607
                                           ; SOURCE LINE # 608
                                           ; SOURCE LINE # 609
009D         ?C0112:
                                           ; SOURCE LINE # 611
009D 900000      E     MOV     DPTR,#SPIIndex
00A0 E0                MOVX    A,@DPTR
00A1 6017              JZ      ?C0108
                                           ; SOURCE LINE # 612
                                           ; SOURCE LINE # 613
00A3 900000      E     MOV     DPTR,#ECINDAR1
00A6 74FE              MOV     A,#0FEH
00A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 614
00A9 900000      E     MOV     DPTR,#ECINDDR
00AC 04                INC     A
00AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 615
00AE 900000      E     MOV     DPTR,#ECINDAR1
00B1 74FD              MOV     A,#0FDH
00B3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 616
00B4 900000      E     MOV     DPTR,#ECINDDR
00B7 74AF              MOV     A,#0AFH
00B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 617
                                           ; SOURCE LINE # 618
00BA         ?C0108:
00BA 900000      E     MOV     DPTR,#SPIIndex
00BD E0                MOVX    A,@DPTR
00BE 70A3              JNZ     ?C0110
                                           ; SOURCE LINE # 620
00C0 900000      E     MOV     DPTR,#ECINDAR1
00C3 74FE              MOV     A,#0FEH
00C5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 621
00C6 900000      E     MOV     DPTR,#ECINDDR
00C9 04                INC     A
00CA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 622
00CB 900000      E     MOV     DPTR,#ECINDAR1
00CE 74FD              MOV     A,#0FDH
00D0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 623
00D1 900000      E     MOV     DPTR,#ECINDDR
00D4 7404              MOV     A,#04H
00D6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 626
00D7 E4                CLR     A
00D8 900000      E     MOV     DPTR,#WNCKR
00DB F0                MOVX    @DPTR,A
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 41  

                                           ; SOURCE LINE # 627
00DC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 628
00DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 629
00DE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 642
00DF 900000      E     MOV     DPTR,#ECINDAR3
00E2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 643
00E3 900000      E     MOV     DPTR,#ECINDAR2
00E6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 644
00E7 22                RET     
             ; FUNCTION Old_SST_SPI_Write_256Bytes (END)

             ; FUNCTION SPI_Write_256Bytes (BEGIN)
                                           ; SOURCE LINE # 649
                                           ; SOURCE LINE # 650
                                           ; SOURCE LINE # 651
0000 900000      E     MOV     DPTR,#SPIID
0003 E0                MOVX    A,@DPTR
0004 B4BF13            CJNE    A,#0BFH,?C0116
                                           ; SOURCE LINE # 652
                                           ; SOURCE LINE # 653
0007 900000      E     MOV     DPTR,#SSTDeviceID
000A E0                MOVX    A,@DPTR
000B B40106            CJNE    A,#01H,?C0117
                                           ; SOURCE LINE # 654
                                           ; SOURCE LINE # 655
000E 7E00        R     MOV     R6,#HIGH Old_SST_SPI_Write_256Bytes
0010 7F00        R     MOV     R7,#LOW Old_SST_SPI_Write_256Bytes
                                           ; SOURCE LINE # 656
0012 800A              SJMP    ?C0149
0014         ?C0117:
                                           ; SOURCE LINE # 658
                                           ; SOURCE LINE # 659
0014 7E00        R     MOV     R6,#HIGH SST_SPI_Write_256Bytes
0016 7F00        R     MOV     R7,#LOW SST_SPI_Write_256Bytes
0018         ?C0148:
                                           ; SOURCE LINE # 660
                                           ; SOURCE LINE # 661
0018 8004              SJMP    ?C0149
001A         ?C0116:
                                           ; SOURCE LINE # 663
                                           ; SOURCE LINE # 664
001A 7E00        R     MOV     R6,#HIGH Other_SPI_Write_256Bytes
001C 7F00        R     MOV     R7,#LOW Other_SPI_Write_256Bytes
001E         ?C0149:
001E 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 665
                                           ; SOURCE LINE # 666
0021         ?C0120:
0021 22                RET     
             ; FUNCTION SPI_Write_256Bytes (END)

             ; FUNCTION SPI_Read_256Bytes (BEGIN)
                                           ; SOURCE LINE # 672
                                           ; SOURCE LINE # 673
                                           ; SOURCE LINE # 674
0000 900000      E     MOV     DPTR,#ECINDAR3
0003 740F              MOV     A,#0FH
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 42  

0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 675
0006 900000      E     MOV     DPTR,#ECINDAR2
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 676
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#ECINDAR0
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 678
0011 900000      E     MOV     DPTR,#ECINDAR1
0014 74FE              MOV     A,#0FEH
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 679
0017 900000      E     MOV     DPTR,#ECINDDR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 680
001C 900000      E     MOV     DPTR,#ECINDAR1
001F 74FD              MOV     A,#0FDH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 681
0022 900000      E     MOV     DPTR,#ECINDDR
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
0028         ?C0121:
                                           ; SOURCE LINE # 682
                                           ; SOURCE LINE # 683
                                           ; SOURCE LINE # 684
0028 900000      E     MOV     DPTR,#ECINDDR
002B E0                MOVX    A,@DPTR
002C 20E0F9            JB      ACC.0,?C0121
                                           ; SOURCE LINE # 685
                                           ; SOURCE LINE # 686
                                           ; SOURCE LINE # 687
                                           ; SOURCE LINE # 688
002F         ?C0122:
                                           ; SOURCE LINE # 690
002F 900000      E     MOV     DPTR,#ECINDAR1
0032 74FE              MOV     A,#0FEH
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 691
0035 900000      E     MOV     DPTR,#ECINDDR
0038 04                INC     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 692
003A 900000      E     MOV     DPTR,#ECINDAR1
003D 74FD              MOV     A,#0FDH
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 693
0040 900000      E     MOV     DPTR,#ECINDDR
0043 740B              MOV     A,#0BH
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 695
0046 900000      E     MOV     DPTR,#SPIAddrCycle
0049 E0                MOVX    A,@DPTR
004A 900000      E     MOV     DPTR,#ECINDDR
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 696
004E 900000      E     MOV     DPTR,#SPIAddrCycle+01H
0051 E0                MOVX    A,@DPTR
0052 900000      E     MOV     DPTR,#ECINDDR
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 43  

0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 697
0056 900000      E     MOV     DPTR,#SPIAddrCycle+02H
0059 E0                MOVX    A,@DPTR
005A 900000      E     MOV     DPTR,#ECINDDR
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 698
005E E4                CLR     A
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 700
0060 900000      E     MOV     DPTR,#SPIIndex
0063 F0                MOVX    @DPTR,A
0064         ?C0126:
                                           ; SOURCE LINE # 702
                                           ; SOURCE LINE # 703
0064 900000      E     MOV     DPTR,#ECINDDR
0067 E0                MOVX    A,@DPTR
0068 FF                MOV     R7,A
0069 900000      E     MOV     DPTR,#SPIDataPointer
006C E0                MOVX    A,@DPTR
006D FC                MOV     R4,A
006E A3                INC     DPTR
006F E0                MOVX    A,@DPTR
0070 F582              MOV     DPL,A
0072 8C83              MOV     DPH,R4
0074 EF                MOV     A,R7
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 704
0076 900000      E     MOV     DPTR,#SPIIndex
0079 E0                MOVX    A,@DPTR
007A 04                INC     A
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 705
007C 90009C            MOV     DPTR,#09CH
007F E0                MOVX    A,@DPTR
0080 04                INC     A
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 706
0082 900000      E     MOV     DPTR,#SPIIndex
0085 E0                MOVX    A,@DPTR
0086 70DC              JNZ     ?C0126
                                           ; SOURCE LINE # 708
0088 900000      E     MOV     DPTR,#ECINDAR1
008B 74FE              MOV     A,#0FEH
008D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 709
008E 900000      E     MOV     DPTR,#ECINDDR
0091 04                INC     A
0092 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 710
0093 900000      E     MOV     DPTR,#ECINDAR1
0096 74FD              MOV     A,#0FDH
0098 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 711
0099 900000      E     MOV     DPTR,#ECINDDR
009C 7405              MOV     A,#05H
009E F0                MOVX    @DPTR,A
009F         ?C0127:
                                           ; SOURCE LINE # 712
                                           ; SOURCE LINE # 713
                                           ; SOURCE LINE # 714
009F 900000      E     MOV     DPTR,#ECINDDR
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 44  

00A2 E0                MOVX    A,@DPTR
00A3 20E0F9            JB      ACC.0,?C0127
                                           ; SOURCE LINE # 715
                                           ; SOURCE LINE # 716
                                           ; SOURCE LINE # 717
                                           ; SOURCE LINE # 718
00A6         ?C0128:
                                           ; SOURCE LINE # 720
00A6 E4                CLR     A
00A7 900000      E     MOV     DPTR,#ECINDAR3
00AA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 721
00AB 900000      E     MOV     DPTR,#ECINDAR2
00AE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 722
00AF 22                RET     
             ; FUNCTION SPI_Read_256Bytes (END)

             ; FUNCTION _LoadSPIFucnToRam (BEGIN)
                                           ; SOURCE LINE # 727
;---- Variable 'funcpoint' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 728
                                           ; SOURCE LINE # 729
0000 7800        E     MOV     R0,#LOW Tmp_XPntr
0002 7606              MOV     @R0,#06H
0004 08                INC     R0
0005 7600              MOV     @R0,#00H
                                           ; SOURCE LINE # 730
0007 8E00        E     MOV     Tmp_code_pointer,R6
0009 8F00        E     MOV     Tmp_code_pointer+01H,R7
                                           ; SOURCE LINE # 732
000B E4                CLR     A
000C F500        E     MOV     ITempB01,A
000E         ?C0133:
                                           ; SOURCE LINE # 734
                                           ; SOURCE LINE # 735
000E 850082      E     MOV     DPL,Tmp_code_pointer+01H
0011 850083      E     MOV     DPH,Tmp_code_pointer
0014 E4                CLR     A
0015 93                MOVC    A,@A+DPTR
0016 FF                MOV     R7,A
0017 7800        E     MOV     R0,#LOW Tmp_XPntr
0019 E6                MOV     A,@R0
001A FC                MOV     R4,A
001B 08                INC     R0
001C E6                MOV     A,@R0
001D F582              MOV     DPL,A
001F 8C83              MOV     DPH,R4
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 736
0023 06                INC     @R0
0024 E6                MOV     A,@R0
0025 18                DEC     R0
0026 7001              JNZ     ?C0145
0028 06                INC     @R0
0029         ?C0145:
                                           ; SOURCE LINE # 737
0029 0500        E     INC     Tmp_code_pointer+01H
002B E500        E     MOV     A,Tmp_code_pointer+01H
002D 7002              JNZ     ?C0146
002F 0500        E     INC     Tmp_code_pointer
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 45  

0031         ?C0146:
                                           ; SOURCE LINE # 738
0031 0500        E     INC     ITempB01
                                           ; SOURCE LINE # 739
0033 E500        E     MOV     A,ITempB01
0035 70D7              JNZ     ?C0133
                                           ; SOURCE LINE # 740
0037 22                RET     
             ; FUNCTION _LoadSPIFucnToRam (END)

             ; FUNCTION ITE_Flash_Utility (BEGIN)
                                           ; SOURCE LINE # 746
                                           ; SOURCE LINE # 747
                                           ; SOURCE LINE # 748
0000 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 749
0003 7E00        R     MOV     R6,#HIGH FlashECCode
0005 7F00        R     MOV     R7,#LOW FlashECCode
0007 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 750
000A 900000      E     MOV     DPTR,#FBCFG
000D E0                MOVX    A,@DPTR
000E 4480              ORL     A,#080H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 751
0011 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 752
0014 22                RET     
             ; FUNCTION ITE_Flash_Utility (END)

             ; FUNCTION _Do_SPI_Write_Status (BEGIN)
                                           ; SOURCE LINE # 761
;---- Variable 'statusvalue' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 762
                                           ; SOURCE LINE # 763
0000 900000      E     MOV     DPTR,#SPIWriteStatus
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 765
0005 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 766
0008 7E00        R     MOV     R6,#HIGH SPI_Write_Status
000A 7F00        R     MOV     R7,#LOW SPI_Write_Status
000C 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 767
000F 900000      E     MOV     DPTR,#FBCFG
0012 E0                MOVX    A,@DPTR
0013 4480              ORL     A,#080H
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 768
0016 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 769
0019 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 770
001C 900000      E     MOV     DPTR,#FBCFG
001F E0                MOVX    A,@DPTR
0020 547F              ANL     A,#07FH
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 771
0023 22                RET     
             ; FUNCTION _Do_SPI_Write_Status (END)

C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 46  

             ; FUNCTION Do_SPI_Read_Status (BEGIN)
                                           ; SOURCE LINE # 778
                                           ; SOURCE LINE # 779
                                           ; SOURCE LINE # 780
0000 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 781
0003 7E00        R     MOV     R6,#HIGH SPI_Read_Status
0005 7F00        R     MOV     R7,#LOW SPI_Read_Status
0007 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 782
000A 900000      E     MOV     DPTR,#FBCFG
000D E0                MOVX    A,@DPTR
000E 4480              ORL     A,#080H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 783
0011 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 784
0014 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 785
0017 900000      E     MOV     DPTR,#FBCFG
001A E0                MOVX    A,@DPTR
001B 547F              ANL     A,#07FH
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 786
001E 22                RET     
             ; FUNCTION Do_SPI_Read_Status (END)

             ; FUNCTION Do_SPI_Read_ID (BEGIN)
                                           ; SOURCE LINE # 793
                                           ; SOURCE LINE # 794
                                           ; SOURCE LINE # 795
0000 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 796
0003 7E00        R     MOV     R6,#HIGH SPI_Read_ID
0005 7F00        R     MOV     R7,#LOW SPI_Read_ID
0007 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 797
000A 900000      E     MOV     DPTR,#FBCFG
000D E0                MOVX    A,@DPTR
000E 4480              ORL     A,#080H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 798
0011 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 799
0014 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 800
0017 900000      E     MOV     DPTR,#FBCFG
001A E0                MOVX    A,@DPTR
001B 547F              ANL     A,#07FH
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 801
001E 22                RET     
             ; FUNCTION Do_SPI_Read_ID (END)

             ; FUNCTION Do_SPI_Read_ID_CmdAB (BEGIN)
                                           ; SOURCE LINE # 808
                                           ; SOURCE LINE # 809
                                           ; SOURCE LINE # 810
0000 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 811
0003 7E00        R     MOV     R6,#HIGH SPI_Read_ID_CmdAB
0005 7F00        R     MOV     R7,#LOW SPI_Read_ID_CmdAB
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 47  

0007 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 812
000A 900000      E     MOV     DPTR,#FBCFG
000D E0                MOVX    A,@DPTR
000E 4480              ORL     A,#080H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 813
0011 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 814
0014 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 815
0017 900000      E     MOV     DPTR,#FBCFG
001A E0                MOVX    A,@DPTR
001B 547F              ANL     A,#07FH
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 816
001E 22                RET     
             ; FUNCTION Do_SPI_Read_ID_CmdAB (END)

             ; FUNCTION _Do_SPI_Erase (BEGIN)
                                           ; SOURCE LINE # 827
;---- Variable 'EraseCmd' assigned to Register 'R7' ----
;---- Variable 'Addr1' assigned to Register 'R3' ----
;---- Variable 'Addr2' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 828
                                           ; SOURCE LINE # 829
0000 900000      E     MOV     DPTR,#SPIAEraseCmd
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 830
0005 900000      E     MOV     DPTR,#SPIAddrCycle
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 831
000A A3                INC     DPTR
000B EB                MOV     A,R3
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 832
000D 900000      R     MOV     DPTR,#Addr0
0010 E0                MOVX    A,@DPTR
0011 900000      E     MOV     DPTR,#SPIAddrCycle+02H
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 834
0015 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 835
0018 7E00        R     MOV     R6,#HIGH SPI_Erase
001A 7F00        R     MOV     R7,#LOW SPI_Erase
001C 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 836
001F 900000      E     MOV     DPTR,#FBCFG
0022 E0                MOVX    A,@DPTR
0023 4480              ORL     A,#080H
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 837
0026 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 838
0029 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 839
002C 900000      E     MOV     DPTR,#FBCFG
002F E0                MOVX    A,@DPTR
0030 547F              ANL     A,#07FH
0032 F0                MOVX    @DPTR,A
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 48  

                                           ; SOURCE LINE # 840
0033 22                RET     
             ; FUNCTION _Do_SPI_Erase (END)

             ; FUNCTION _Do_SPI_Write_256Bytes (BEGIN)
                                           ; SOURCE LINE # 850
;---- Variable 'DataPointer' assigned to Register 'R6/R7' ----
;---- Variable 'Addr1' assigned to Register 'R3' ----
;---- Variable 'Addr2' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 851
                                           ; SOURCE LINE # 852
0000 900000      E     MOV     DPTR,#SPIDataPointer
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 853
0008 900000      E     MOV     DPTR,#SPIAddrCycle
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 854
000D A3                INC     DPTR
000E EB                MOV     A,R3
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 855
0010 900000      R     MOV     DPTR,#Addr0
0013 E0                MOVX    A,@DPTR
0014 900000      E     MOV     DPTR,#SPIAddrCycle+02H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 857
0018 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 858
001B 120000      R     LCALL   SPI_Write_256Bytes
                                           ; SOURCE LINE # 859
001E 900000      E     MOV     DPTR,#FBCFG
0021 E0                MOVX    A,@DPTR
0022 4480              ORL     A,#080H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 860
0025 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 861
0028 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 862
002B 900000      E     MOV     DPTR,#FBCFG
002E E0                MOVX    A,@DPTR
002F 547F              ANL     A,#07FH
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 863
0032 22                RET     
             ; FUNCTION _Do_SPI_Write_256Bytes (END)

             ; FUNCTION _Do_SPI_Read_256Bytes (BEGIN)
                                           ; SOURCE LINE # 873
;---- Variable 'DataPointer' assigned to Register 'R6/R7' ----
;---- Variable 'Addr1' assigned to Register 'R3' ----
;---- Variable 'Addr2' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 874
                                           ; SOURCE LINE # 875
0000 900000      E     MOV     DPTR,#SPIDataPointer
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 49  

0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 876
0008 900000      E     MOV     DPTR,#SPIAddrCycle
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 877
000D A3                INC     DPTR
000E EB                MOV     A,R3
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 878
0010 900000      R     MOV     DPTR,#Addr0
0013 E0                MOVX    A,@DPTR
0014 900000      E     MOV     DPTR,#SPIAddrCycle+02H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 880
0018 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 881
001B 7E00        R     MOV     R6,#HIGH SPI_Read_256Bytes
001D 7F00        R     MOV     R7,#LOW SPI_Read_256Bytes
001F 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 882
0022 900000      E     MOV     DPTR,#FBCFG
0025 E0                MOVX    A,@DPTR
0026 4480              ORL     A,#080H
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 883
0029 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 884
002C 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 885
002F 900000      E     MOV     DPTR,#FBCFG
0032 E0                MOVX    A,@DPTR
0033 547F              ANL     A,#07FH
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 886
0036 22                RET     
             ; FUNCTION _Do_SPI_Read_256Bytes (END)

             ; FUNCTION Do_SPI_Write_Enable (BEGIN)
                                           ; SOURCE LINE # 892
                                           ; SOURCE LINE # 893
                                           ; SOURCE LINE # 894
0000 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 895
0003 7E00        R     MOV     R6,#HIGH SPI_Write_Enable
0005 7F00        R     MOV     R7,#LOW SPI_Write_Enable
0007 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 896
000A 900000      E     MOV     DPTR,#FBCFG
000D E0                MOVX    A,@DPTR
000E 4480              ORL     A,#080H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 897
0011 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 898
0014 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 899
0017 900000      E     MOV     DPTR,#FBCFG
001A E0                MOVX    A,@DPTR
001B 547F              ANL     A,#07FH
C51 COMPILER V7.50   CORE_FLASH                                                            09/08/2020 15:56:20 PAGE 50  

001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 900
001E 22                RET     
             ; FUNCTION Do_SPI_Write_Enable (END)

             ; FUNCTION Do_SPI_Write_Disable (BEGIN)
                                           ; SOURCE LINE # 906
                                           ; SOURCE LINE # 907
                                           ; SOURCE LINE # 908
0000 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 909
0003 7E00        R     MOV     R6,#HIGH SPI_Write_Disable
0005 7F00        R     MOV     R7,#LOW SPI_Write_Disable
0007 120000      R     LCALL   _LoadSPIFucnToRam
                                           ; SOURCE LINE # 910
000A 900000      E     MOV     DPTR,#FBCFG
000D E0                MOVX    A,@DPTR
000E 4480              ORL     A,#080H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 911
0011 120000      R     LCALL   FuncAt_0xFE00
                                           ; SOURCE LINE # 912
0014 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 913
0017 900000      E     MOV     DPTR,#FBCFG
001A E0                MOVX    A,@DPTR
001B 547F              ANL     A,#07FH
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 914
001E 22                RET     
             ; FUNCTION Do_SPI_Write_Disable (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2461    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      14
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
