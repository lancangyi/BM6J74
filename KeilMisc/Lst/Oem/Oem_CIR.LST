C51 COMPILER V7.50   OEM_CIR                                                               09/17/2020 21:06:55 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE OEM_CIR
OBJECT MODULE PLACED IN Oem\Oem_CIR.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe Oem\Oem_CIR.c LA WL(1) CD OT(9,SIZE) NOAREGS OR INCDIR(.\Core\Include\;.\Oe
                    -m\Include\)

line level    source

   1          /*-----------------------------------------------------------------------------
   2           * Filename: OEM_CIR.C
   3           * Function: OEM CIR HANDLE
   4           *
   5           * Copyright (c) 2006-2009, ITE Tech. Inc. All Rights Reserved.
   6           *---------------------------------------------------------------------------*/
   7          #include "CORE_INC.H"
   8          #include "OEM_INC.H"
   9          
  10          #define RXEN_MASK               0x20
  11          #define RXACT_MASK              0x08
  12          #define RXFBC_MASK              0x3F
  13          
  14          const BYTE code RC6PowerKey[]={ 0x95,0x55,0xA5,0xF5 };  // RC6 power key
  15          
  16          //----------------------------------------------------------------------------
  17          // The function of CIR wake up system 
  18          //----------------------------------------------------------------------------
  19          
  20          
  21          //;;;BJ ,Start OEM>>> T014
  22          void Hook_CIRWakeUp(void)
  23          {
  24   1              BYTE index;
  25   1              BYTE cirdata;
  26   1              BYTE vector ;
  27   1              BYTE bytecount;
  28   1              BYTE i_cnt ;
  29   1      
  30   1              vector = CIR_IIR ;
  31   1      
  32   1              switch (vector) 
  33   1              {
  34   2                      case 0x2 :      
  35   2      
  36   2                              CIR_RCR &= ~(RXEN_MASK);
  37   2                              bClearCirFIFO();
  38   2                              CIR_RCR |= ( (RXEN_MASK) | (RXACT_MASK) ) ;
  39   2                              //RamDebug(0xCA);
  40   2      
  41   2                              break;
  42   2                              
  43   2                      case 0x4 :
  44   2                              
  45   2                              bytecount = CIR_RSR & (RXFBC_MASK)  ;
  46   2                              
  47   2                              for( i_cnt = 0 ; i_cnt < bytecount; i_cnt++ )
  48   2                              {
  49   3                                      CIR_Buffer[i_cnt] = CIR_DR ;
  50   3                                      //RamDebug(cirdata);
  51   3                              }
  52   2              
  53   2                              CIR_RCR  &= ~(RXEN_MASK);
  54   2                              bClearCirFIFO();
C51 COMPILER V7.50   OEM_CIR                                                               09/17/2020 21:06:55 PAGE 2   

  55   2                              CIR_RCR |= ( (RXEN_MASK) | (RXACT_MASK) ) ;
  56   2      
  57   2      
  58   2                              RamDebug(0x8E);
  59   2      
  60   2                              break;                  
  61   2                              
  62   2                      case 0x6 :      
  63   2      
  64   2                              CIR_RCR &= ~(RXEN_MASK);
  65   2                              bClearCirFIFO();
  66   2                              CIR_RCR |= ( (RXEN_MASK) | (RXACT_MASK) ) ;
  67   2                              RamDebug(0xCB);
  68   2      
  69   2                              break;
  70   2                              
  71   2                      default :
  72   2                              break;
  73   2      
  74   2              }
  75   1              
  76   1      
  77   1              SET_MASK(IER1, BIT7);           // Enable INT15 CIR Interrupt   
  78   1      }
  79          
  80          //;;;BJ ,End OEM<<< T014
  81          
  82          //----------------------------------------------------------------------------
  83          
  84          //----------------------------------------------------------------------------
  85          // The function of CIR Initialization
  86          //----------------------------------------------------------------------------
  87          //BJ    ,Start OEM+ T014        20111213
  88          void Init_CIR(void)
  89          {       
  90   1      
  91   1              Index_07H = 0x07 ; 
  92   1              if( SysPowState != _SYSTEM_S0 )
  93   1              {
  94   2                      SET_BIT(Index_23H, 0);
  95   2              }
  96   1              Index_07H = 0x0A ; 
  97   1              Index_30H = 0x01 ;
  98   1      
  99   1              SET_MASK(IELMR1, BIT7);         // CIR Interrupt must use Edge-Trig
 100   1              SET_MASK(IER1, BIT7);           // Enable INT15 CIR Interrupt
 101   1              ISR1 = Int_CIR;         // Clear INT15 pending Status
 102   1      
 103   1              EX1 = 1 ; 
 104   1              EA = 1 ;
 105   1              
 106   1              SET_BIT(CIR_IER, 5);
 107   1      
 108   1              CIR_IER = 0x00 ;
 109   1              
 110   1              SET_BIT(CIR_IER, 4);
 111   1              CIR_BDHR        =       0x00; 
 112   1              CIR_BDLR        =       0x33;
 113   1              
 114   1              CLR_BIT(CIR_IER, 4);
 115   1      
 116   1              CIR_RCR = 0x01;
C51 COMPILER V7.50   OEM_CIR                                                               09/17/2020 21:06:55 PAGE 3   

 117   1      
 118   1              bClearCirFIFO();                                // Clear FIFO
 119   1              SET_BIT(CIR_RCR, 5);
 120   1      
 121   1              CIR_IER |= 0x0A ;
 122   1      
 123   1              SET_BIT(CIR_RCR, 1);
 124   1      
 125   1              CLR_BIT(CIR_TCR1, 6);
 126   1              SET_BIT(CIR_TCR1, 5);
 127   1      
 128   1      
 129   1              //CIR_Enable = 0x01 ;
 130   1              
 131   1      }
 132          //BJ    ,End OEM+ T014  
 133          //----------------------------------------------------------------------------
 134          // The function of CIR module reset
 135          //----------------------------------------------------------------------------
 136          void Reset_CIR(void)
 137          {
 138   1      //      SET_MASK(RSTC2, BIT1);          // Reset CIR module
 139   1              CLEAR_MASK(IER1, BIT7);         // Disable INT15 CIR Interrupt
 140   1              ISR1 = Int_CIR;         // Clear INT15 pending Status                
 141   1      }
 142          //BJ    ,Start OEM+ T012
 143          void EN_EC_CIR(void)
 144          {
 145   1              Init_CIR() ;
 146   1              
 147   1              SET_MASK(IER1, BIT7);           // Set INT15 pending Status                  
 148   1              ISR1 = Int_CIR;         // Clear INT15 pending Status                
 149   1      }
 150          //BJ    ,End OEM+ T012
 151          //----------------------------------------------------------------------------
 152          // The function of clearing CIR FIFO
 153          //----------------------------------------------------------------------------
 154          void bClearCirFIFO(void)
 155          {
 156   1              CIR_TCR1 = BIT7;                        // Write 1 for Clearing FIFO data
 157   1              _nop_();
 158   1              while(IsFlag1(CIR_TCR1, BIT7))      // Wait FIFO Clear Done
 159   1              {
 160   2                      ;                                       
 161   2              }
 162   1      }
 163          
 164          
 165          //----------------------------------------------------------------------------
 166          // The function of clearing CIR
 167          //----------------------------------------------------------------------------
 168          void ClearCIR(void) 
 169          {
 170   1              CLEAR_MASK(CIR_RCR, BIT7);    // RX Disable   
 171   1              bClearCirFIFO();                        // Clear FIFO
 172   1              SET_MASK(CIR_RCR, BIT7);                // RX enable 
 173   1      } 
 174          
 175          //----------------------------------------------------------------------------
 176          // The function of CIR Interrupt service routine
 177          //----------------------------------------------------------------------------
 178          void Service_CIR(void)
C51 COMPILER V7.50   OEM_CIR                                                               09/17/2020 21:06:55 PAGE 4   

 179          {
 180   1      
 181   1          Hook_CIRWakeUp();
 182   1      
 183   1      }
 184          
 185          
 186          void Clear_CIR_Buffer(void)
 187          {
 188   1              BYTE i_cnt ;
 189   1              //clear CIR buffer
 190   1              for( i_cnt = 0 ; i_cnt < 0x11; i_cnt++ )
 191   1              {
 192   2                      CIR_Buffer[i_cnt] = 0x00;
 193   2              }
 194   1      
 195   1      }
 196          
 197          //=============================================================================
 198          
 199          
C51 COMPILER V7.50   OEM_CIR                                                               09/17/2020 21:06:55 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com001A (BEGIN)
0000         L?0027:
0000 900000      E     MOV     DPTR,#IER1
0003 E0                MOVX    A,@DPTR
0004 4480              ORL     A,#080H
0006         L?0028:
0006 F0                MOVX    @DPTR,A
0007 900000      E     MOV     DPTR,#ISR1
000A 7480              MOV     A,#080H
000C F0                MOVX    @DPTR,A
000D 22                RET     
             ; FUNCTION Com001A (END)

             ; FUNCTION Hook_CIRWakeUp (BEGIN)
                                           ; SOURCE LINE # 22
                                           ; SOURCE LINE # 23
                                           ; SOURCE LINE # 30
0000 900000      E     MOV     DPTR,#CIR_IIR
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
;---- Variable 'vector' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 32
0005 24FC              ADD     A,#0FCH
0007 600D              JZ      ?C0003
0009 24FE              ADD     A,#0FEH
000B 6032              JZ      ?C0007
000D 2404              ADD     A,#04H
000F 7044              JNZ     ?C0001
                                           ; SOURCE LINE # 33
                                           ; SOURCE LINE # 34
0011         ?C0002:
                                           ; SOURCE LINE # 36
                                           ; SOURCE LINE # 37
                                           ; SOURCE LINE # 38
0011 120000      R     LCALL   L?0025
                                           ; SOURCE LINE # 41
0014 803F              SJMP    ?C0001
                                           ; SOURCE LINE # 43
0016         ?C0003:
                                           ; SOURCE LINE # 45
0016 900000      E     MOV     DPTR,#CIR_RSR
0019 E0                MOVX    A,@DPTR
001A 543F              ANL     A,#03FH
001C FF                MOV     R7,A
;---- Variable 'bytecount' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 47
;---- Variable 'i_cnt' assigned to Register 'R6' ----
001D E4                CLR     A
001E FE                MOV     R6,A
001F         ?C0004:
001F EE                MOV     A,R6
0020 C3                CLR     C
0021 9F                SUBB    A,R7
0022 5014              JNC     ?C0005
                                           ; SOURCE LINE # 48
                                           ; SOURCE LINE # 49
0024 900000      E     MOV     DPTR,#CIR_DR
0027 E0                MOVX    A,@DPTR
0028 FD                MOV     R5,A
C51 COMPILER V7.50   OEM_CIR                                                               09/17/2020 21:06:55 PAGE 6   

0029 7400        E     MOV     A,#LOW CIR_Buffer
002B 2E                ADD     A,R6
002C F582              MOV     DPL,A
002E E4                CLR     A
002F 3400        E     ADDC    A,#HIGH CIR_Buffer
0031 F583              MOV     DPH,A
0033 ED                MOV     A,R5
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 51
0035 0E                INC     R6
0036 80E7              SJMP    ?C0004
0038         ?C0005:
                                           ; SOURCE LINE # 53
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 55
0038 120000      R     LCALL   L?0025
                                           ; SOURCE LINE # 58
003B 7F8E              MOV     R7,#08EH
                                           ; SOURCE LINE # 60
003D 8013              SJMP    ?C0024
                                           ; SOURCE LINE # 62
003F         ?C0007:
                                           ; SOURCE LINE # 64
003F 900000      E     MOV     DPTR,#CIR_RCR
0042 E0                MOVX    A,@DPTR
0043 54DF              ANL     A,#0DFH
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 65
0046 120000      R     LCALL   bClearCirFIFO
                                           ; SOURCE LINE # 66
0049 900000      E     MOV     DPTR,#CIR_RCR
004C E0                MOVX    A,@DPTR
004D 4428              ORL     A,#028H
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 67
0050 7FCB              MOV     R7,#0CBH
0052         ?C0024:
0052 120000      E     LCALL   _RamDebug
                                           ; SOURCE LINE # 69
                                           ; SOURCE LINE # 71
                                           ; SOURCE LINE # 72
                                           ; SOURCE LINE # 74
0055         ?C0001:
                                           ; SOURCE LINE # 77
0055 900000      E     MOV     DPTR,#IER1
0058 E0                MOVX    A,@DPTR
0059 4480              ORL     A,#080H
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 78
005C 22                RET     
005D         L?0025:
005D 900000      E     MOV     DPTR,#CIR_RCR
0060 E0                MOVX    A,@DPTR
0061 54DF              ANL     A,#0DFH
0063 F0                MOVX    @DPTR,A
0064 120000      R     LCALL   bClearCirFIFO
0067 900000      E     MOV     DPTR,#CIR_RCR
006A E0                MOVX    A,@DPTR
006B 4428              ORL     A,#028H
006D F0                MOVX    @DPTR,A
006E 22                RET     
             ; FUNCTION Hook_CIRWakeUp (END)
C51 COMPILER V7.50   OEM_CIR                                                               09/17/2020 21:06:55 PAGE 7   


             ; FUNCTION Init_CIR (BEGIN)
                                           ; SOURCE LINE # 88
                                           ; SOURCE LINE # 89
                                           ; SOURCE LINE # 91
0000 900000      E     MOV     DPTR,#Index_07H
0003 7407              MOV     A,#07H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 92
0006 900000      E     MOV     DPTR,#SysPowState
0009 E0                MOVX    A,@DPTR
000A 6401              XRL     A,#01H
000C 6007              JZ      ?C0010
                                           ; SOURCE LINE # 93
                                           ; SOURCE LINE # 94
000E 900000      E     MOV     DPTR,#Index_23H
0011 E0                MOVX    A,@DPTR
0012 4401              ORL     A,#01H
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 95
0015         ?C0010:
                                           ; SOURCE LINE # 96
0015 900000      E     MOV     DPTR,#Index_07H
0018 740A              MOV     A,#0AH
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 97
001B 900000      E     MOV     DPTR,#Index_30H
001E 7401              MOV     A,#01H
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 99
0021 900000      E     MOV     DPTR,#IELMR1
0024 E0                MOVX    A,@DPTR
0025 4480              ORL     A,#080H
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 100
                                           ; SOURCE LINE # 101
0028 120000      R     LCALL   L?0027
                                           ; SOURCE LINE # 103
002B D2AA              SETB    EX1
                                           ; SOURCE LINE # 104
002D D2AF              SETB    EA
                                           ; SOURCE LINE # 106
002F 900000      E     MOV     DPTR,#CIR_IER
0032 E0                MOVX    A,@DPTR
0033 4420              ORL     A,#020H
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 108
0036 E4                CLR     A
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 110
0038 E0                MOVX    A,@DPTR
0039 4410              ORL     A,#010H
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 111
003C E4                CLR     A
003D 900000      E     MOV     DPTR,#CIR_RSR
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 112
0041 900000      E     MOV     DPTR,#CIR_TSR
0044 7433              MOV     A,#033H
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 114
C51 COMPILER V7.50   OEM_CIR                                                               09/17/2020 21:06:55 PAGE 8   

0047 900000      E     MOV     DPTR,#CIR_IER
004A E0                MOVX    A,@DPTR
004B 54EF              ANL     A,#0EFH
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 116
004E 900000      E     MOV     DPTR,#CIR_RCR
0051 7401              MOV     A,#01H
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 118
0054 120000      R     LCALL   bClearCirFIFO
                                           ; SOURCE LINE # 119
0057 900000      E     MOV     DPTR,#CIR_RCR
005A E0                MOVX    A,@DPTR
005B 4420              ORL     A,#020H
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 121
005E 900000      E     MOV     DPTR,#CIR_IER
0061 E0                MOVX    A,@DPTR
0062 440A              ORL     A,#0AH
0064 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 123
0065 900000      E     MOV     DPTR,#CIR_RCR
0068 E0                MOVX    A,@DPTR
0069 4402              ORL     A,#02H
006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 125
006C 900000      E     MOV     DPTR,#CIR_TCR1
006F E0                MOVX    A,@DPTR
0070 54BF              ANL     A,#0BFH
0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 126
0073 E0                MOVX    A,@DPTR
0074 4420              ORL     A,#020H
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 131
0077 22                RET     
             ; FUNCTION Init_CIR (END)

             ; FUNCTION Reset_CIR (BEGIN)
                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 139
0000 900000      E     MOV     DPTR,#IER1
0003 E0                MOVX    A,@DPTR
0004 547F              ANL     A,#07FH
                                           ; SOURCE LINE # 140
0006 120000      R     LCALL   L?0028
                                           ; SOURCE LINE # 141
0009 22                RET     
             ; FUNCTION Reset_CIR (END)

             ; FUNCTION EN_EC_CIR (BEGIN)
                                           ; SOURCE LINE # 143
                                           ; SOURCE LINE # 144
                                           ; SOURCE LINE # 145
0000 120000      R     LCALL   Init_CIR
                                           ; SOURCE LINE # 147
                                           ; SOURCE LINE # 148
0003 120000      R     LCALL   L?0027
                                           ; SOURCE LINE # 149
0006 22                RET     
             ; FUNCTION EN_EC_CIR (END)
C51 COMPILER V7.50   OEM_CIR                                                               09/17/2020 21:06:55 PAGE 9   


             ; FUNCTION bClearCirFIFO (BEGIN)
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 155
                                           ; SOURCE LINE # 156
0000 900000      E     MOV     DPTR,#CIR_TCR1
0003 7480              MOV     A,#080H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 157
0006 00                NOP     
0007         ?C0014:
                                           ; SOURCE LINE # 158
0007 900000      E     MOV     DPTR,#CIR_TCR1
000A E0                MOVX    A,@DPTR
000B 20E7F9            JB      ACC.7,?C0014
                                           ; SOURCE LINE # 159
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 162
000E         ?C0016:
000E 22                RET     
             ; FUNCTION bClearCirFIFO (END)

             ; FUNCTION ClearCIR (BEGIN)
                                           ; SOURCE LINE # 168
                                           ; SOURCE LINE # 169
                                           ; SOURCE LINE # 170
0000 900000      E     MOV     DPTR,#CIR_RCR
0003 E0                MOVX    A,@DPTR
0004 547F              ANL     A,#07FH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 171
0007 120000      R     LCALL   bClearCirFIFO
                                           ; SOURCE LINE # 172
000A 900000      E     MOV     DPTR,#CIR_RCR
000D E0                MOVX    A,@DPTR
000E 4480              ORL     A,#080H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 173
0011 22                RET     
             ; FUNCTION ClearCIR (END)

             ; FUNCTION Service_CIR (BEGIN)
                                           ; SOURCE LINE # 178
                                           ; SOURCE LINE # 179
                                           ; SOURCE LINE # 181
0000 020000      R     LJMP    Hook_CIRWakeUp
             ; FUNCTION Service_CIR (END)

             ; FUNCTION Clear_CIR_Buffer (BEGIN)
                                           ; SOURCE LINE # 186
                                           ; SOURCE LINE # 187
                                           ; SOURCE LINE # 190
;---- Variable 'i_cnt' assigned to Register 'R7' ----
0000         ?C0019:
                                           ; SOURCE LINE # 191
                                           ; SOURCE LINE # 192
0000 7F11              MOV     R7,#011H
0002 900000      E     MOV     DPTR,#CIR_Buffer
0005 E4                CLR     A
0006         ?C0023:
0006 F0                MOVX    @DPTR,A
0007 A3                INC     DPTR
C51 COMPILER V7.50   OEM_CIR                                                               09/17/2020 21:06:55 PAGE 10  

0008 DFFC              DJNZ    R7,?C0023
                                           ; SOURCE LINE # 193
                                           ; SOURCE LINE # 195
000A         ?C0022:
000A 22                RET     
             ; FUNCTION Clear_CIR_Buffer (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    309    ----
   CONSTANT SIZE    =      4    ----
   XDATA SIZE       =   ----       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
