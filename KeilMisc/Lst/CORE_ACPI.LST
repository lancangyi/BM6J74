C51 COMPILER V7.50   CORE_ACPI                                                             09/08/2020 15:56:18 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE CORE_ACPI
OBJECT MODULE PLACED IN Code\CORE\CORE_ACPI.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe Code\CORE\CORE_ACPI.C LA WL(1) CD OT(9,SIZE) NOAREGS OR INCDIR(.\Code\CORE\
                    -INCLUDE\;.\Code\OEM\INCLUDE\;.\Code\CHIP\INCLUDE\)

line level    source

   1          /*----------------------------------------------------------------------------
   2           * TITLE: CORE_ACPI.C - ACPI Handler
   3           *
   4           * SCI event generation.
   5           * ACPI SMBus transfer initiated by ACPI command.
   6           *
   7           * Copyright (c) 1983-2007, Insyde Software Corporation. All Rights Reserved.
   8           *
   9           * You may not reproduce, distribute, publish, display, perform, modify, adapt,
  10           * transmit, broadcast, present, recite, release, license or otherwise exploit
  11           * any part of this publication in any form, by any means, without the prior
  12           * written permission of Insyde Software Corporation.
  13           *---------------------------------------------------------------------------*/
  14           
  15          #include <CORE_INCLUDE.H>
  16          #include <OEM_INCLUDE.H>
  17          
  18          //-----------------------------------------------------------------------------
  19          // FUNCTION: Loop Delay - Delay a number of microseconds.
  20          // Input:  0x00 - 0xFF for delay timing.
  21          //-----------------------------------------------------------------------------
  22          void Loop_Delay(BYTE delay)
  23          {
  24   1          while ( delay > 0 )
  25   1          {
  26   2              delay--;
  27   2          }
  28   1      
  29   1      }
  30          
  31          
  32          //----------------------------------------------------------------------------
  33          // Process Command/Data received from System via the 2nd Host interface
  34          //----------------------------------------------------------------------------
  35          void service_pci2(void)
  36          {
  37   1          if ( IS_MASK_CLEAR(PM1STS,P_IBF) )  
  38   1          {
  39   2                      return; 
  40   2          }
  41   1              SetTotalBurstTime();    // Set Burst mode total time (2ms)
  42   1              service_pci2f();                // Process Command/Data         
  43   1      }
  44          
  45          //----------------------------------------------------------------------------
  46          // Process Command/Data received from System via the 2nd Host interface
  47          //----------------------------------------------------------------------------
  48          /*void service_pci2f(void)
  49          {
  50                  do
  51                  {
  52                          if ( PM1STS & P_C_D )                   // Command port
  53                          {
  54                                  PM1Cmd  = PM1DI;                        // Load command
C51 COMPILER V7.50   CORE_ACPI                                                             09/08/2020 15:56:18 PAGE 2   

  55                          PM1Step =0x00;                          
  56                                  Core_66Port(PM1Cmd);
  57                      Hook_66Port(PM1Cmd);
  58                          }
  59                          else                                                    // Data port
  60                          {
  61                                  PM1Data = PM1DI;                        // Load data
  62                                  if (PM1Step!=0x00)
  63                                  {
  64                                          Core_62Port(PM1Cmd);    // Handle command data
  65                                          Hook_62Port(PM1Cmd);
  66                                          PM1Step--;
  67                                  }
  68                          }
  69                  }while((IS_MASK_SET(PM1STS,BURST)||ECCheckBurstMode)&&(CheckBurstMode()==1));
  70          
  71                  TR1 = 0;                        // disable timer1
  72                  TF1 = 0;                        // clear overflow flag
  73                  ET1 = 1;                        // Enable timer1 interrupt
  74                  EnableAllInterrupt();
  75                  EnablePMCIBFInt();
  76                  Hook_ACPICommand();
  77          }*/
  78          
  79          void ACPI_Cmd_06(void)
  80          {
  81   1              SendFromAcpi(0x00);
  82   1      }
  83          //----------------------------------------------------------------------------
  84          // Handle ACPI commands.
  85          //----------------------------------------------------------------------------
  86          //----------------------------------------------------------------------------
  87          // Handle ACPI command 8x.
  88          //----------------------------------------------------------------------------
  89          void ACPI_Cmd_80(void)        // Read Embedded Controller.
  90          {
  91   1              //ACPI_Gen_Int(ACPICmdSCI);
  92   1              PM1Step =0x01;
  93   1              //RamDebug(0X77);
  94   1      }
  95          
  96          void ACPI_Cmd_81(void)        // Write Embedded Controller.
  97          {
  98   1              //ACPI_Gen_Int(ACPICmdSCI);
  99   1              PM1Step =0x02;
 100   1      }
 101          
 102          void ACPI_Cmd_82(void)        // Burst Enable Embedded Controller.
 103          {
 104   1              //Delay1MS(1);                  //delay 1ms cause SYN TP fail!!
 105   1              SET_MASK(PM1STS,BURST); // PM1STS.4 Set Burst mode flag
 106   1              SendFromAcpi(0x90);             // Get Burst Acknowledge byte to send to Host. 
 107   1      }
 108          
 109          void ACPI_Cmd_83(void)        // Burst Disable Embedded Controller.
 110          {
 111   1              CLEAR_MASK(PM1STS,BURST);       // PM1STS.4 Set Burst mode flag
 112   1              //ACPI_Gen_Int(ACPICmdSCI);   // Clear Burst bit in secondary Host interface status register.
 113   1      }
 114          
 115          void ACPI_Cmd_84(void)        // Query Embedded Controller.
 116          {
C51 COMPILER V7.50   CORE_ACPI                                                             09/08/2020 15:56:18 PAGE 3   

 117   1      
 118   1      }
 119          
 120          //----------------------------------------------------------------------------
 121          // Handle ACPI command 9x.
 122          //----------------------------------------------------------------------------
 123          void ACPI_Cmd_92(void)          // Oem function of reading EC external ram
 124          {
 125   1              PM1Step = 0x02;
 126   1      }
 127          
 128          void ACPI_Cmd_93(void)          // Oem function of writing EC external ram
 129          {
 130   1              PM1Step =0x03;
 131   1      }
 132          
 133          //----------------------------------------------------------------------------
 134          // Handle ACPI command Dx.
 135          //----------------------------------------------------------------------------
 136          void ACPI_Cmd_DC(void)
 137          {       
 138   1              ITE_Flash_Utility();    // for 8500 
 139   1      }
 140          
 141          //----------------------------------------------------------------------------
 142          // Handle ACPI command Fx.
 143          //----------------------------------------------------------------------------
 144          void ACPI_Cmd_F0(void)
 145          {
 146   1              KeyScanACK = KU_ACK_Start;
 147   1      }
 148          
 149          //----------------------------------------------------------------------------
 150          // Handle ACPI command data.
 151          //----------------------------------------------------------------------------
 152          void SendFromAcpi(BYTE ecdata)
 153          {
 154   1              PM1DO = ecdata;
 155   1              //ACPI_Gen_Int(ACPICmdSCI);
 156   1      }
 157          
 158          //----------------------------------------------------------------------------
 159          // Handle the data of ACPI command 8x
 160          //----------------------------------------------------------------------------
 161          void ACPI_Cmd_80Data(void)
 162          {
 163   1              if (PM1Step == 1)
 164   1              {
 165   2                      SendFromAcpi(Hook_ReadMapECSpace(PM1Data));
 166   2              ECCheckBurstMode = 0;
 167   2              }
 168   1      }
 169          
 170          void ACPI_Cmd_81Data(void)
 171          {
 172   1              //ACPI_Gen_Int(ACPICmdSCI);
 173   1              if (PM1Step == 2)
 174   1              {
 175   2              PM1Data1=PM1Data;               
 176   2              }
 177   1              else if(PM1Step == 1)
 178   1              {
C51 COMPILER V7.50   CORE_ACPI                                                             09/08/2020 15:56:18 PAGE 4   

 179   2                      Hook_WriteMapECSpace(PM1Data1,PM1Data);
 180   2              ECCheckBurstMode = 0;
 181   2              }
 182   1      }
 183          
 184          void ACPI_Cmd_82Data(void)
 185          {
 186   1      
 187   1      }
 188          
 189          void ACPI_Cmd_83Data(void)
 190          {
 191   1      
 192   1      }
 193          
 194          void ACPI_Cmd_84Data(void)
 195          {
 196   1      
 197   1      }
 198          
 199          //----------------------------------------------------------------------------
 200          // Handle the data of ACPI command 9x
 201          //----------------------------------------------------------------------------
 202          void ACPI_Cmd_92Data(void)
 203          {
 204   1              switch(PM1Step)
 205   1              {
 206   2                      case 2:
 207   2                              PM1Data1=PM1Data;               // address high
 208   2                              break;
 209   2      
 210   2                      case 1:
 211   2                              Read_External_Ram();
 212   2                              break;
 213   2      
 214   2                      default:
 215   2                              break;
 216   2              }
 217   1      }
 218          
 219          void ACPI_Cmd_93Data(void)
 220          {
 221   1              if (PM1Step==0x03)
 222   1              {
 223   2                      PM1Data2=PM1Data;  // address high
 224   2              }
 225   1              else if (PM1Step==0x02)
 226   1              {
 227   2              PM1Data1=PM1Data;  // address low
 228   2              }
 229   1              else if (PM1Step==0x01)
 230   1              {
 231   2              Write_External_Ram();
 232   2              }
 233   1      }
 234          
 235          //----------------------------------------------------------------------------
 236          // Read external ram Space 
 237          //----------------------------------------------------------------------------
 238          void Read_External_Ram()
 239          {
 240   1              Tmp_XPntr=((PM1Data1<<8)+PM1Data);
C51 COMPILER V7.50   CORE_ACPI                                                             09/08/2020 15:56:18 PAGE 5   

 241   1              PM1DO = *Tmp_XPntr;
 242   1      }
 243          
 244          //----------------------------------------------------------------------------
 245          // Write external ram Space 
 246          //----------------------------------------------------------------------------
 247          void Write_External_Ram()
 248          {
 249   1              Tmp_XPntr=((PM1Data2<<8)+PM1Data1);
 250   1              *Tmp_XPntr=PM1Data;
 251   1      }
 252          
 253          //----------------------------------------------------------------------------
 254          // Burst mode or normal mode
 255          //----------------------------------------------------------------------------
 256          BYTE CheckBurstMode(void)
 257          {
 258   1              while(IS_MASK_CLEAR(PM1STS,P_IBF))  // wait input buffer full
 259   1              {
 260   2                      if(TF1)                                             // time-out
 261   2                      {
 262   3                  TR1 = 0;
 263   3                  TF1=0;
 264   3                          CLEAR_MASK(PM1STS,BURST);
 265   3                      //ACPI_Gen_Int(ACPICmdSCI);
 266   3                  ECCheckBurstMode = 0;
 267   3                              return(0);
 268   3                      }
 269   2              }
 270   1              return(1);
 271   1      }
 272          
 273          //----------------------------------------------------------------------------
 274          // Set Burst mode total time (1ms)
 275          //----------------------------------------------------------------------------
 276          void SetTotalBurstTime(void)
 277          {
 278   1          DisableAllInterrupt();
 279   1              TR1 = 0;                                                // disable timer1
 280   1              ET1 = 0;                                                // Disable timer1 interrupt
 281   1          _nop_();
 282   1          _nop_();
 283   1          _nop_();
 284   1          _nop_();
 285   1          TH1 = T_ACPI_BurstTime>>8;      // Set timer1 counter 2ms
 286   1          TL1 = T_ACPI_BurstTime;         // Set timer1 counter 2ms
 287   1          TF1 = 0;                                            // clear overflow flag
 288   1              TR1 = 1;                                                // enable timer1
 289   1      }
 290          
 291          /* ----------------------------------------------------------------------------
 292           * FUNCTION: ACPI_Gen_Int - Generate an SCI interrupt.
 293           *
 294           * For a pulsed SCI (edge triggered), the SCI signal is pulsed.
 295           *
 296           * For a level triggered SCI, the SCI signal is set or cleared.  The Host will
 297           * send a command to read the cause of the SCI. The signal will be deactivated
 298           * when no more causes exist.
 299           * ------------------------------------------------------------------------- */
 300          void ACPI_Gen_Int(BYTE Qevent)
 301          {
 302   1              BYTE temp = 0;
C51 COMPILER V7.50   CORE_ACPI                                                             09/08/2020 15:56:18 PAGE 6   

 303   1          if(Qevent==QeventSCI)
 304   1          {
 305   2              DisableAllInterrupt();
 306   2          }
 307   1              PM1IC &=~ PMIC_SCI;//Hook_SCION();   // 
 308   1          WNCKR = 0x00;               // Delay 15.26 us
 309   1              WNCKR = 0x00;
 310   1              WNCKR = 0x00;   
 311   1              WNCKR = 0x00;
 312   1              WNCKR = 0x00;
 313   1              WNCKR = 0x00;
 314   1              WNCKR = 0x00;
 315   1      
 316   1              PM1IC |= PMIC_SCI;//Hook_SCIOFF();
 317   1          if(Qevent==QeventSCI)
 318   1          {
 319   2              EnableAllInterrupt();
 320   2          }
 321   1              
 322   1              SCI_timer_cnt=0x09+1;   
 323   1      }
 324          
 325          //----------------------------------------------------------------------------
 326          // The function of processing 62 port data
 327          //----------------------------------------------------------------------------
 328          void Core_62Port(BYTE PM1Data)
 329          {
 330   1          switch(PM1Data)
 331   1          {
 332   2              case 0x80:
 333   2              ACPI_Cmd_80Data();
 334   2                  break;
 335   2      
 336   2                      case 0x81:
 337   2              ACPI_Cmd_81Data();
 338   2                  break;
 339   2      
 340   2              case 0x82:
 341   2              ACPI_Cmd_82Data();
 342   2                  break;
 343   2      
 344   2                      case 0x83:
 345   2              ACPI_Cmd_83Data();
 346   2                  break;    
 347   2      
 348   2              case 0x84:
 349   2              ACPI_Cmd_84Data();
 350   2                  break;  
 351   2      
 352   2              case 0x92:
 353   2              ACPI_Cmd_92Data();
 354   2              break;
 355   2      
 356   2              case 0x93:
 357   2              ACPI_Cmd_93Data();
 358   2              break;
 359   2      
 360   2                      default:
 361   2                  break;
 362   2          }
 363   1      }
 364          
C51 COMPILER V7.50   CORE_ACPI                                                             09/08/2020 15:56:18 PAGE 7   

 365          //----------------------------------------------------------------------------
 366          // The function of processing 66 port command.
 367          //----------------------------------------------------------------------------
 368          void Core_66Port(BYTE PM1Cmd)
 369          {
 370   1          switch(PM1Cmd)
 371   1          {
 372   2      
 373   2                      case 0x06:
 374   2                      ACPI_Cmd_06();  
 375   2                      break;
 376   2                      
 377   2                      case 0x80:
 378   2              ACPI_Cmd_80();
 379   2                  break;
 380   2      
 381   2                      case 0x81:
 382   2              ACPI_Cmd_81();
 383   2                  break;
 384   2      
 385   2              case 0x82:
 386   2              ACPI_Cmd_82();
 387   2                  break;
 388   2      
 389   2                      case 0x83:
 390   2              ACPI_Cmd_83();
 391   2                  break;    
 392   2      
 393   2              case 0x84:
 394   2              ACPI_Cmd_84();
 395   2                  break;  
 396   2      
 397   2              case 0x92:
 398   2              ACPI_Cmd_92();
 399   2              break;
 400   2      
 401   2              case 0x93:
 402   2              ACPI_Cmd_93();
 403   2              break;
 404   2      
 405   2              case 0xDC:
 406   2              ACPI_Cmd_DC();
 407   2              break;   
 408   2      
 409   2              case 0xF0:
 410   2              ACPI_Cmd_F0();
 411   2              break;  
 412   2      
 413   2                      default:
 414   2                  break;
 415   2          }
 416   1      }
 417          
 418          void service_pci2f(void)
 419          {
 420   1       do
 421   1       {
 422   2             if ( PM1STS & P_C_D )                      // Command port
 423   2             {
 424   3                 PM1Cmd  = PM1DI;                        // Load command
 425   3                 PM1Step =0x00;
 426   3                if(PM1Cmd == 0x80)
C51 COMPILER V7.50   CORE_ACPI                                                             09/08/2020 15:56:18 PAGE 8   

 427   3                {
 428   4                         ACPI_Cmd_80();
 429   4                         OEM_ACPI_Cmd_80();
 430   4                }
 431   3                else if(PM1Cmd == 0x81)
 432   3                {
 433   4                         ACPI_Cmd_81();
 434   4                         OEM_ACPI_Cmd_81();
 435   4                }
 436   3                else if(PM1Cmd == 0x82)
 437   3                {
 438   4                         ACPI_Cmd_82();
 439   4                         OEM_ACPI_Cmd_82();
 440   4                }
 441   3                else if(PM1Cmd == 0x83)
 442   3                {
 443   4                         ACPI_Cmd_83();
 444   4                         OEM_ACPI_Cmd_83();
 445   4                }
 446   3                else if(PM1Cmd == 0x84)
 447   3                {
 448   4                         ACPI_Cmd_84();
 449   4                         OEM_ACPI_Cmd_84();
 450   4                }
 451   3                else
 452   3                {
 453   4                         Core_66Port(PM1Cmd);
 454   4                         Hook_66Port(PM1Cmd);
 455   4                }
 456   3             }
 457   2             else                                                      // Data port
 458   2             {
 459   3                    PM1Data = PM1DI;                           // Load data
 460   3                    if (PM1Step!=0x00)
 461   3                    {
 462   4                         if(PM1Cmd == 0x80)
 463   4                         {
 464   5                                  ACPI_Cmd_80Data();
 465   5                         }
 466   4                         else if(PM1Cmd == 0x81)
 467   4                         {
 468   5                                  ACPI_Cmd_81Data();
 469   5                         }
 470   4                         else if(PM1Cmd == 0x82)
 471   4                         {
 472   5                                  ACPI_Cmd_82Data();
 473   5                         }
 474   4                         else if(PM1Cmd == 0x83)
 475   4                         {
 476   5                                  ACPI_Cmd_83Data();
 477   5                         }
 478   4                         else if(PM1Cmd == 0x84)
 479   4                         {
 480   5                                  ACPI_Cmd_84Data();
 481   5                         }
 482   4                         else
 483   4                         {
 484   5                                  Core_62Port(PM1Cmd);    // Handle command data
 485   5                                  Hook_62Port(PM1Cmd);
 486   5                         }
 487   4                         PM1Step--;
 488   4                    }
C51 COMPILER V7.50   CORE_ACPI                                                             09/08/2020 15:56:18 PAGE 9   

 489   3             }
 490   2       }while((IS_MASK_SET(PM1STS,BURST)||ECCheckBurstMode)&&(CheckBurstMode()==1));
 491   1               TR1 = 0;                    // disable timer1
 492   1               TF1 = 0;                     // clear overflow flag
 493   1               ET1 = 1;                     // Enable timer1 interrupt
 494   1               EnableAllInterrupt();
 495   1               EnablePMCIBFInt();
 496   1               Hook_ACPICommand();
 497   1      }
 498          
C51 COMPILER V7.50   CORE_ACPI                                                             09/08/2020 15:56:18 PAGE 10  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0063 (BEGIN)
0000         L?0100:
0000 EF                MOV     A,R7
0001 FE                MOV     R6,A
0002 7C00              MOV     R4,#00H
0004 E4                CLR     A
0005 2D                ADD     A,R5
0006 FF                MOV     R7,A
0007 EC                MOV     A,R4
0008 3E                ADDC    A,R6
0009 7800        E     MOV     R0,#LOW Tmp_XPntr
000B F6                MOV     @R0,A
000C 08                INC     R0
000D EF                MOV     A,R7
000E F6                MOV     @R0,A
000F 18                DEC     R0
0010 E6                MOV     A,@R0
0011 FE                MOV     R6,A
0012 08                INC     R0
0013 E6                MOV     A,@R0
0014 F582              MOV     DPL,A
0016 8E83              MOV     DPH,R6
0018 22                RET     
             ; FUNCTION Com0063 (END)

             ; FUNCTION _Loop_Delay (BEGIN)
                                           ; SOURCE LINE # 22
;---- Variable 'delay' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 23
0000         ?C0001:
                                           ; SOURCE LINE # 24
0000 EF                MOV     A,R7
0001 D3                SETB    C
0002 9400              SUBB    A,#00H
0004 4003              JC      ?C0003
                                           ; SOURCE LINE # 25
                                           ; SOURCE LINE # 26
0006 1F                DEC     R7
                                           ; SOURCE LINE # 27
0007 80F7              SJMP    ?C0001
                                           ; SOURCE LINE # 29
0009         ?C0003:
0009 22                RET     
             ; FUNCTION _Loop_Delay (END)

             ; FUNCTION service_pci2 (BEGIN)
                                           ; SOURCE LINE # 35
                                           ; SOURCE LINE # 36
                                           ; SOURCE LINE # 37
0000 900000      E     MOV     DPTR,#PM1STS
0003 E0                MOVX    A,@DPTR
0004 30E106            JNB     ACC.1,?C0005
                                           ; SOURCE LINE # 38
                                           ; SOURCE LINE # 40
0007         ?C0004:
                                           ; SOURCE LINE # 41
0007 120000      R     LCALL   SetTotalBurstTime
                                           ; SOURCE LINE # 42
000A 120000      R     LCALL   service_pci2f
C51 COMPILER V7.50   CORE_ACPI                                                             09/08/2020 15:56:18 PAGE 11  

                                           ; SOURCE LINE # 43
000D         ?C0005:
000D 22                RET     
             ; FUNCTION service_pci2 (END)

             ; FUNCTION ACPI_Cmd_06 (BEGIN)
                                           ; SOURCE LINE # 79
                                           ; SOURCE LINE # 80
                                           ; SOURCE LINE # 81
0000 E4                CLR     A
0001 FF                MOV     R7,A
0002 020000      R     LJMP    _SendFromAcpi
             ; FUNCTION ACPI_Cmd_06 (END)

             ; FUNCTION ACPI_Cmd_80 (BEGIN)
                                           ; SOURCE LINE # 89
                                           ; SOURCE LINE # 90
                                           ; SOURCE LINE # 92
0000 750001      E     MOV     PM1Step,#01H
                                           ; SOURCE LINE # 94
0003 22                RET     
             ; FUNCTION ACPI_Cmd_80 (END)

             ; FUNCTION ACPI_Cmd_81 (BEGIN)
                                           ; SOURCE LINE # 96
                                           ; SOURCE LINE # 97
                                           ; SOURCE LINE # 99
0000 750002      E     MOV     PM1Step,#02H
                                           ; SOURCE LINE # 100
0003 22                RET     
             ; FUNCTION ACPI_Cmd_81 (END)

             ; FUNCTION ACPI_Cmd_82 (BEGIN)
                                           ; SOURCE LINE # 102
                                           ; SOURCE LINE # 103
                                           ; SOURCE LINE # 105
0000 900000      E     MOV     DPTR,#PM1STS
0003 E0                MOVX    A,@DPTR
0004 4410              ORL     A,#010H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 106
0007 7F90              MOV     R7,#090H
0009 020000      R     LJMP    _SendFromAcpi
             ; FUNCTION ACPI_Cmd_82 (END)

             ; FUNCTION ACPI_Cmd_83 (BEGIN)
                                           ; SOURCE LINE # 109
                                           ; SOURCE LINE # 110
                                           ; SOURCE LINE # 111
0000 900000      E     MOV     DPTR,#PM1STS
0003 E0                MOVX    A,@DPTR
0004 54EF              ANL     A,#0EFH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 113
0007 22                RET     
             ; FUNCTION ACPI_Cmd_83 (END)

             ; FUNCTION ACPI_Cmd_84 (BEGIN)
                                           ; SOURCE LINE # 115
                                           ; SOURCE LINE # 116
                                           ; SOURCE LINE # 118
0000 22                RET     
C51 COMPILER V7.50   CORE_ACPI                                                             09/08/2020 15:56:18 PAGE 12  

             ; FUNCTION ACPI_Cmd_84 (END)

             ; FUNCTION ACPI_Cmd_92 (BEGIN)
                                           ; SOURCE LINE # 123
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 125
0000 750002      E     MOV     PM1Step,#02H
                                           ; SOURCE LINE # 126
0003 22                RET     
             ; FUNCTION ACPI_Cmd_92 (END)

             ; FUNCTION ACPI_Cmd_93 (BEGIN)
                                           ; SOURCE LINE # 128
                                           ; SOURCE LINE # 129
                                           ; SOURCE LINE # 130
0000 750003      E     MOV     PM1Step,#03H
                                           ; SOURCE LINE # 131
0003 22                RET     
             ; FUNCTION ACPI_Cmd_93 (END)

             ; FUNCTION ACPI_Cmd_DC (BEGIN)
                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 138
0000 020000      E     LJMP    ITE_Flash_Utility
             ; FUNCTION ACPI_Cmd_DC (END)

             ; FUNCTION ACPI_Cmd_F0 (BEGIN)
                                           ; SOURCE LINE # 144
                                           ; SOURCE LINE # 145
                                           ; SOURCE LINE # 146
0000 900000      E     MOV     DPTR,#KeyScanACK
0003 74FF              MOV     A,#0FFH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 147
0006 22                RET     
             ; FUNCTION ACPI_Cmd_F0 (END)

             ; FUNCTION _SendFromAcpi (BEGIN)
                                           ; SOURCE LINE # 152
;---- Variable 'ecdata' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 153
                                           ; SOURCE LINE # 154
0000 900000      E     MOV     DPTR,#PM1DO
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 156
0005 22                RET     
             ; FUNCTION _SendFromAcpi (END)

             ; FUNCTION ACPI_Cmd_80Data (BEGIN)
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 162
                                           ; SOURCE LINE # 163
0000 E500        E     MOV     A,PM1Step
0002 B4010A            CJNE    A,#01H,?C0018
                                           ; SOURCE LINE # 164
                                           ; SOURCE LINE # 165
0005 AF00        E     MOV     R7,PM1Data
0007 120000      E     LCALL   _Hook_ReadMapECSpace
000A 120000      R     LCALL   _SendFromAcpi
                                           ; SOURCE LINE # 166
C51 COMPILER V7.50   CORE_ACPI                                                             09/08/2020 15:56:18 PAGE 13  

000D C200        E     CLR     ECCheckBurstMode
                                           ; SOURCE LINE # 167
                                           ; SOURCE LINE # 168
000F         ?C0018:
000F 22                RET     
             ; FUNCTION ACPI_Cmd_80Data (END)

             ; FUNCTION ACPI_Cmd_81Data (BEGIN)
                                           ; SOURCE LINE # 170
                                           ; SOURCE LINE # 171
                                           ; SOURCE LINE # 173
0000 E500        E     MOV     A,PM1Step
0002 B40204            CJNE    A,#02H,?C0019
                                           ; SOURCE LINE # 174
                                           ; SOURCE LINE # 175
0005 850000      E     MOV     PM1Data1,PM1Data
                                           ; SOURCE LINE # 176
0008 22                RET     
0009         ?C0019:
                                           ; SOURCE LINE # 177
0009 E500        E     MOV     A,PM1Step
000B B40109            CJNE    A,#01H,?C0022
                                           ; SOURCE LINE # 178
                                           ; SOURCE LINE # 179
000E AD00        E     MOV     R5,PM1Data
0010 AF00        E     MOV     R7,PM1Data1
0012 120000      E     LCALL   _Hook_WriteMapECSpace
                                           ; SOURCE LINE # 180
0015 C200        E     CLR     ECCheckBurstMode
                                           ; SOURCE LINE # 181
                                           ; SOURCE LINE # 182
0017         ?C0022:
0017 22                RET     
             ; FUNCTION ACPI_Cmd_81Data (END)

             ; FUNCTION ACPI_Cmd_82Data (BEGIN)
                                           ; SOURCE LINE # 184
                                           ; SOURCE LINE # 185
                                           ; SOURCE LINE # 187
0000 22                RET     
             ; FUNCTION ACPI_Cmd_82Data (END)

             ; FUNCTION ACPI_Cmd_83Data (BEGIN)
                                           ; SOURCE LINE # 189
                                           ; SOURCE LINE # 190
                                           ; SOURCE LINE # 192
0000 22                RET     
             ; FUNCTION ACPI_Cmd_83Data (END)

             ; FUNCTION ACPI_Cmd_84Data (BEGIN)
                                           ; SOURCE LINE # 194
                                           ; SOURCE LINE # 195
                                           ; SOURCE LINE # 197
0000 22                RET     
             ; FUNCTION ACPI_Cmd_84Data (END)

             ; FUNCTION ACPI_Cmd_92Data (BEGIN)
                                           ; SOURCE LINE # 202
                                           ; SOURCE LINE # 203
                                           ; SOURCE LINE # 204
0000 E500        E     MOV     A,PM1Step
0002 14                DEC     A
C51 COMPILER V7.50   CORE_ACPI                                                             09/08/2020 15:56:18 PAGE 14  

0003 6007              JZ      ?C0028
0005 14                DEC     A
0006 7007              JNZ     ?C0030
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 206
0008         ?C0027:
                                           ; SOURCE LINE # 207
0008 850000      E     MOV     PM1Data1,PM1Data
                                           ; SOURCE LINE # 208
000B 22                RET     
                                           ; SOURCE LINE # 210
000C         ?C0028:
                                           ; SOURCE LINE # 211
000C 120000      R     LCALL   Read_External_Ram
                                           ; SOURCE LINE # 212
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
                                           ; SOURCE LINE # 217
000F         ?C0030:
000F 22                RET     
             ; FUNCTION ACPI_Cmd_92Data (END)

             ; FUNCTION ACPI_Cmd_93Data (BEGIN)
                                           ; SOURCE LINE # 219
                                           ; SOURCE LINE # 220
                                           ; SOURCE LINE # 221
0000 E500        E     MOV     A,PM1Step
0002 B40304            CJNE    A,#03H,?C0031
                                           ; SOURCE LINE # 222
                                           ; SOURCE LINE # 223
0005 850000      E     MOV     PM1Data2,PM1Data
                                           ; SOURCE LINE # 224
0008 22                RET     
0009         ?C0031:
                                           ; SOURCE LINE # 225
0009 E500        E     MOV     A,PM1Step
000B B40204            CJNE    A,#02H,?C0033
                                           ; SOURCE LINE # 226
                                           ; SOURCE LINE # 227
000E 850000      E     MOV     PM1Data1,PM1Data
                                           ; SOURCE LINE # 228
0011 22                RET     
0012         ?C0033:
                                           ; SOURCE LINE # 229
0012 E500        E     MOV     A,PM1Step
0014 B40103            CJNE    A,#01H,?C0036
                                           ; SOURCE LINE # 230
                                           ; SOURCE LINE # 231
0017 120000      R     LCALL   Write_External_Ram
                                           ; SOURCE LINE # 232
                                           ; SOURCE LINE # 233
001A         ?C0036:
001A 22                RET     
             ; FUNCTION ACPI_Cmd_93Data (END)

             ; FUNCTION Read_External_Ram (BEGIN)
                                           ; SOURCE LINE # 238
                                           ; SOURCE LINE # 239
                                           ; SOURCE LINE # 240
0000 AF00        E     MOV     R7,PM1Data1
0002 AD00        E     MOV     R5,PM1Data
C51 COMPILER V7.50   CORE_ACPI                                                             09/08/2020 15:56:18 PAGE 15  

                                           ; SOURCE LINE # 241
0004 120000      R     LCALL   L?0100
0007 E0                MOVX    A,@DPTR
0008 900000      E     MOV     DPTR,#PM1DO
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 242
000C 22                RET     
             ; FUNCTION Read_External_Ram (END)

             ; FUNCTION Write_External_Ram (BEGIN)
                                           ; SOURCE LINE # 247
                                           ; SOURCE LINE # 248
                                           ; SOURCE LINE # 249
0000 AF00        E     MOV     R7,PM1Data2
0002 AD00        E     MOV     R5,PM1Data1
                                           ; SOURCE LINE # 250
0004 120000      R     LCALL   L?0100
0007 E500        E     MOV     A,PM1Data
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 251
000A 22                RET     
             ; FUNCTION Write_External_Ram (END)

             ; FUNCTION CheckBurstMode (BEGIN)
                                           ; SOURCE LINE # 256
                                           ; SOURCE LINE # 257
0000         ?C0039:
                                           ; SOURCE LINE # 258
0000 900000      E     MOV     DPTR,#PM1STS
0003 E0                MOVX    A,@DPTR
0004 20E110            JB      ACC.1,?C0040
                                           ; SOURCE LINE # 259
                                           ; SOURCE LINE # 260
0007 308FF6            JNB     TF1,?C0039
                                           ; SOURCE LINE # 261
                                           ; SOURCE LINE # 262
000A C28E              CLR     TR1
                                           ; SOURCE LINE # 263
000C C28F              CLR     TF1
                                           ; SOURCE LINE # 264
000E E0                MOVX    A,@DPTR
000F 54EF              ANL     A,#0EFH
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 266
0012 C200        E     CLR     ECCheckBurstMode
                                           ; SOURCE LINE # 267
0014 7F00              MOV     R7,#00H
0016 22                RET     
                                           ; SOURCE LINE # 268
                                           ; SOURCE LINE # 269
0017         ?C0040:
                                           ; SOURCE LINE # 270
0017 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 271
0019         ?C0042:
0019 22                RET     
             ; FUNCTION CheckBurstMode (END)

             ; FUNCTION SetTotalBurstTime (BEGIN)
                                           ; SOURCE LINE # 276
                                           ; SOURCE LINE # 277
                                           ; SOURCE LINE # 278
C51 COMPILER V7.50   CORE_ACPI                                                             09/08/2020 15:56:18 PAGE 16  

0000 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 279
0003 C28E              CLR     TR1
                                           ; SOURCE LINE # 280
0005 C2AB              CLR     ET1
                                           ; SOURCE LINE # 281
0007 00                NOP     
                                           ; SOURCE LINE # 282
0008 00                NOP     
                                           ; SOURCE LINE # 283
0009 00                NOP     
                                           ; SOURCE LINE # 284
000A 00                NOP     
                                           ; SOURCE LINE # 285
000B 758DF9            MOV     TH1,#0F9H
                                           ; SOURCE LINE # 286
000E 758B7C            MOV     TL1,#07CH
                                           ; SOURCE LINE # 287
0011 C28F              CLR     TF1
                                           ; SOURCE LINE # 288
0013 D28E              SETB    TR1
                                           ; SOURCE LINE # 289
0015 22                RET     
             ; FUNCTION SetTotalBurstTime (END)

             ; FUNCTION _ACPI_Gen_Int (BEGIN)
                                           ; SOURCE LINE # 300
0000 900000      R     MOV     DPTR,#Qevent
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 301
                                           ; SOURCE LINE # 302
0005 E4                CLR     A
0006 A3                INC     DPTR
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 303
0008 BF0103            CJNE    R7,#01H,?C0044
                                           ; SOURCE LINE # 304
                                           ; SOURCE LINE # 305
000B 120000      E     LCALL   DisableAllInterrupt
                                           ; SOURCE LINE # 306
000E         ?C0044:
                                           ; SOURCE LINE # 307
000E 900000      E     MOV     DPTR,#PM1IC
0011 E0                MOVX    A,@DPTR
0012 54FB              ANL     A,#0FBH
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 308
0015 E4                CLR     A
0016 900000      E     MOV     DPTR,#WNCKR
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 309
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 310
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 311
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 312
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 313
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 314
C51 COMPILER V7.50   CORE_ACPI                                                             09/08/2020 15:56:18 PAGE 17  

001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 316
0020 900000      E     MOV     DPTR,#PM1IC
0023 E0                MOVX    A,@DPTR
0024 4404              ORL     A,#04H
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 317
0027 900000      R     MOV     DPTR,#Qevent
002A E0                MOVX    A,@DPTR
002B B40103            CJNE    A,#01H,?C0045
                                           ; SOURCE LINE # 318
                                           ; SOURCE LINE # 319
002E 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 320
0031         ?C0045:
                                           ; SOURCE LINE # 322
0031 900000      E     MOV     DPTR,#SCI_timer_cnt
0034 740A              MOV     A,#0AH
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 323
0037 22                RET     
             ; FUNCTION _ACPI_Gen_Int (END)

             ; FUNCTION _Core_62Port (BEGIN)
                                           ; SOURCE LINE # 328
;---- Variable 'PM1Data' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 329
                                           ; SOURCE LINE # 330
0000 EF                MOV     A,R7
0001 120000      E     LCALL   ?C?CCASE
0004 0000        R     DW      ?C0048
0006 80                DB      080H
0007 0000        R     DW      ?C0049
0009 81                DB      081H
000A 0000        R     DW      ?C0050
000C 82                DB      082H
000D 0000        R     DW      ?C0051
000F 83                DB      083H
0010 0000        R     DW      ?C0052
0012 84                DB      084H
0013 0000        R     DW      ?C0053
0015 92                DB      092H
0016 0000        R     DW      ?C0054
0018 93                DB      093H
0019 0000              DW      00H
001B 0000        R     DW      ?C0056
                                           ; SOURCE LINE # 331
                                           ; SOURCE LINE # 332
001D         ?C0048:
                                           ; SOURCE LINE # 333
001D 020000      R     LJMP    ACPI_Cmd_80Data
                                           ; SOURCE LINE # 334
                                           ; SOURCE LINE # 336
0020         ?C0049:
                                           ; SOURCE LINE # 337
0020 020000      R     LJMP    ACPI_Cmd_81Data
                                           ; SOURCE LINE # 338
                                           ; SOURCE LINE # 340
0023         ?C0050:
                                           ; SOURCE LINE # 341
0023 020000      R     LJMP    ACPI_Cmd_82Data
                                           ; SOURCE LINE # 342
C51 COMPILER V7.50   CORE_ACPI                                                             09/08/2020 15:56:18 PAGE 18  

                                           ; SOURCE LINE # 344
0026         ?C0051:
                                           ; SOURCE LINE # 345
0026 020000      R     LJMP    ACPI_Cmd_83Data
                                           ; SOURCE LINE # 346
                                           ; SOURCE LINE # 348
0029         ?C0052:
                                           ; SOURCE LINE # 349
0029 020000      R     LJMP    ACPI_Cmd_84Data
                                           ; SOURCE LINE # 350
                                           ; SOURCE LINE # 352
002C         ?C0053:
                                           ; SOURCE LINE # 353
002C 020000      R     LJMP    ACPI_Cmd_92Data
                                           ; SOURCE LINE # 354
                                           ; SOURCE LINE # 356
002F         ?C0054:
                                           ; SOURCE LINE # 357
002F 120000      R     LCALL   ACPI_Cmd_93Data
                                           ; SOURCE LINE # 358
                                           ; SOURCE LINE # 360
                                           ; SOURCE LINE # 361
                                           ; SOURCE LINE # 362
                                           ; SOURCE LINE # 363
0032         ?C0056:
0032 22                RET     
             ; FUNCTION _Core_62Port (END)

             ; FUNCTION _Core_66Port (BEGIN)
                                           ; SOURCE LINE # 368
;---- Variable 'PM1Cmd' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 369
                                           ; SOURCE LINE # 370
0000 EF                MOV     A,R7
0001 120000      E     LCALL   ?C?CCASE
0004 0000        R     DW      ?C0058
0006 06                DB      06H
0007 0000        R     DW      ?C0059
0009 80                DB      080H
000A 0000        R     DW      ?C0060
000C 81                DB      081H
000D 0000        R     DW      ?C0061
000F 82                DB      082H
0010 0000        R     DW      ?C0062
0012 83                DB      083H
0013 0000        R     DW      ?C0063
0015 84                DB      084H
0016 0000        R     DW      ?C0064
0018 92                DB      092H
0019 0000        R     DW      ?C0065
001B 93                DB      093H
001C 0000        R     DW      ?C0066
001E DC                DB      0DCH
001F 0000        R     DW      ?C0067
0021 F0                DB      0F0H
0022 0000              DW      00H
0024 0000        R     DW      ?C0069
                                           ; SOURCE LINE # 371
                                           ; SOURCE LINE # 373
0026         ?C0058:
                                           ; SOURCE LINE # 374
0026 020000      R     LJMP    ACPI_Cmd_06
C51 COMPILER V7.50   CORE_ACPI                                                             09/08/2020 15:56:18 PAGE 19  

                                           ; SOURCE LINE # 375
                                           ; SOURCE LINE # 377
0029         ?C0059:
                                           ; SOURCE LINE # 378
0029 020000      R     LJMP    ACPI_Cmd_80
                                           ; SOURCE LINE # 379
                                           ; SOURCE LINE # 381
002C         ?C0060:
                                           ; SOURCE LINE # 382
002C 020000      R     LJMP    ACPI_Cmd_81
                                           ; SOURCE LINE # 383
                                           ; SOURCE LINE # 385
002F         ?C0061:
                                           ; SOURCE LINE # 386
002F 020000      R     LJMP    ACPI_Cmd_82
                                           ; SOURCE LINE # 387
                                           ; SOURCE LINE # 389
0032         ?C0062:
                                           ; SOURCE LINE # 390
0032 020000      R     LJMP    ACPI_Cmd_83
                                           ; SOURCE LINE # 391
                                           ; SOURCE LINE # 393
0035         ?C0063:
                                           ; SOURCE LINE # 394
0035 020000      R     LJMP    ACPI_Cmd_84
                                           ; SOURCE LINE # 395
                                           ; SOURCE LINE # 397
0038         ?C0064:
                                           ; SOURCE LINE # 398
0038 020000      R     LJMP    ACPI_Cmd_92
                                           ; SOURCE LINE # 399
                                           ; SOURCE LINE # 401
003B         ?C0065:
                                           ; SOURCE LINE # 402
003B 020000      R     LJMP    ACPI_Cmd_93
                                           ; SOURCE LINE # 403
                                           ; SOURCE LINE # 405
003E         ?C0066:
                                           ; SOURCE LINE # 406
003E 020000      R     LJMP    ACPI_Cmd_DC
                                           ; SOURCE LINE # 407
                                           ; SOURCE LINE # 409
0041         ?C0067:
                                           ; SOURCE LINE # 410
0041 120000      R     LCALL   ACPI_Cmd_F0
                                           ; SOURCE LINE # 411
                                           ; SOURCE LINE # 413
                                           ; SOURCE LINE # 414
                                           ; SOURCE LINE # 415
                                           ; SOURCE LINE # 416
0044         ?C0069:
0044 22                RET     
             ; FUNCTION _Core_66Port (END)

             ; FUNCTION service_pci2f (BEGIN)
                                           ; SOURCE LINE # 418
                                           ; SOURCE LINE # 419
0000         ?C0072:
                                           ; SOURCE LINE # 421
                                           ; SOURCE LINE # 422
0000 900000      E     MOV     DPTR,#PM1STS
0003 E0                MOVX    A,@DPTR
C51 COMPILER V7.50   CORE_ACPI                                                             09/08/2020 15:56:18 PAGE 20  

0004 30E357            JNB     ACC.3,?C0073
                                           ; SOURCE LINE # 423
                                           ; SOURCE LINE # 424
0007 900000      E     MOV     DPTR,#PM1DI
000A E0                MOVX    A,@DPTR
000B F500        E     MOV     PM1Cmd,A
                                           ; SOURCE LINE # 425
000D E4                CLR     A
000E F500        E     MOV     PM1Step,A
                                           ; SOURCE LINE # 426
0010 E500        E     MOV     A,PM1Cmd
0012 B48009            CJNE    A,#080H,?C0074
                                           ; SOURCE LINE # 427
                                           ; SOURCE LINE # 428
0015 120000      R     LCALL   ACPI_Cmd_80
                                           ; SOURCE LINE # 429
0018 120000      E     LCALL   OEM_ACPI_Cmd_80
                                           ; SOURCE LINE # 430
001B 020000      R     LJMP    ?C0070
001E         ?C0074:
                                           ; SOURCE LINE # 431
001E E500        E     MOV     A,PM1Cmd
0020 B48108            CJNE    A,#081H,?C0076
                                           ; SOURCE LINE # 432
                                           ; SOURCE LINE # 433
0023 120000      R     LCALL   ACPI_Cmd_81
                                           ; SOURCE LINE # 434
0026 120000      E     LCALL   OEM_ACPI_Cmd_81
                                           ; SOURCE LINE # 435
0029 807B              SJMP    ?C0070
002B         ?C0076:
                                           ; SOURCE LINE # 436
002B E500        E     MOV     A,PM1Cmd
002D B48208            CJNE    A,#082H,?C0078
                                           ; SOURCE LINE # 437
                                           ; SOURCE LINE # 438
0030 120000      R     LCALL   ACPI_Cmd_82
                                           ; SOURCE LINE # 439
0033 120000      E     LCALL   OEM_ACPI_Cmd_82
                                           ; SOURCE LINE # 440
0036 806E              SJMP    ?C0070
0038         ?C0078:
                                           ; SOURCE LINE # 441
0038 E500        E     MOV     A,PM1Cmd
003A B48308            CJNE    A,#083H,?C0080
                                           ; SOURCE LINE # 442
                                           ; SOURCE LINE # 443
003D 120000      R     LCALL   ACPI_Cmd_83
                                           ; SOURCE LINE # 444
0040 120000      E     LCALL   OEM_ACPI_Cmd_83
                                           ; SOURCE LINE # 445
0043 8061              SJMP    ?C0070
0045         ?C0080:
                                           ; SOURCE LINE # 446
0045 E500        E     MOV     A,PM1Cmd
0047 B48408            CJNE    A,#084H,?C0082
                                           ; SOURCE LINE # 447
                                           ; SOURCE LINE # 448
004A 120000      R     LCALL   ACPI_Cmd_84
                                           ; SOURCE LINE # 449
004D 120000      E     LCALL   OEM_ACPI_Cmd_84
                                           ; SOURCE LINE # 450
C51 COMPILER V7.50   CORE_ACPI                                                             09/08/2020 15:56:18 PAGE 21  

0050 8054              SJMP    ?C0070
0052         ?C0082:
                                           ; SOURCE LINE # 452
                                           ; SOURCE LINE # 453
0052 AF00        E     MOV     R7,PM1Cmd
0054 120000      R     LCALL   _Core_66Port
                                           ; SOURCE LINE # 454
0057 AF00        E     MOV     R7,PM1Cmd
0059 120000      E     LCALL   _Hook_66Port
                                           ; SOURCE LINE # 455
                                           ; SOURCE LINE # 456
005C 8048              SJMP    ?C0070
005E         ?C0073:
                                           ; SOURCE LINE # 458
                                           ; SOURCE LINE # 459
005E 900000      E     MOV     DPTR,#PM1DI
0061 E0                MOVX    A,@DPTR
0062 F500        E     MOV     PM1Data,A
                                           ; SOURCE LINE # 460
0064 E500        E     MOV     A,PM1Step
0066 603E              JZ      ?C0070
                                           ; SOURCE LINE # 461
                                           ; SOURCE LINE # 462
0068 E500        E     MOV     A,PM1Cmd
006A B48005            CJNE    A,#080H,?C0086
                                           ; SOURCE LINE # 463
                                           ; SOURCE LINE # 464
006D 120000      R     LCALL   ACPI_Cmd_80Data
                                           ; SOURCE LINE # 465
0070 8032              SJMP    ?C0087
0072         ?C0086:
                                           ; SOURCE LINE # 466
0072 E500        E     MOV     A,PM1Cmd
0074 B48105            CJNE    A,#081H,?C0088
                                           ; SOURCE LINE # 467
                                           ; SOURCE LINE # 468
0077 120000      R     LCALL   ACPI_Cmd_81Data
                                           ; SOURCE LINE # 469
007A 8028              SJMP    ?C0087
007C         ?C0088:
                                           ; SOURCE LINE # 470
007C E500        E     MOV     A,PM1Cmd
007E B48205            CJNE    A,#082H,?C0090
                                           ; SOURCE LINE # 471
                                           ; SOURCE LINE # 472
0081 120000      R     LCALL   ACPI_Cmd_82Data
                                           ; SOURCE LINE # 473
0084 801E              SJMP    ?C0087
0086         ?C0090:
                                           ; SOURCE LINE # 474
0086 E500        E     MOV     A,PM1Cmd
0088 B48305            CJNE    A,#083H,?C0092
                                           ; SOURCE LINE # 475
                                           ; SOURCE LINE # 476
008B 120000      R     LCALL   ACPI_Cmd_83Data
                                           ; SOURCE LINE # 477
008E 8014              SJMP    ?C0087
0090         ?C0092:
                                           ; SOURCE LINE # 478
0090 E500        E     MOV     A,PM1Cmd
0092 B48405            CJNE    A,#084H,?C0094
                                           ; SOURCE LINE # 479
C51 COMPILER V7.50   CORE_ACPI                                                             09/08/2020 15:56:18 PAGE 22  

                                           ; SOURCE LINE # 480
0095 120000      R     LCALL   ACPI_Cmd_84Data
                                           ; SOURCE LINE # 481
0098 800A              SJMP    ?C0087
009A         ?C0094:
                                           ; SOURCE LINE # 483
                                           ; SOURCE LINE # 484
009A AF00        E     MOV     R7,PM1Cmd
009C 120000      R     LCALL   _Core_62Port
                                           ; SOURCE LINE # 485
009F AF00        E     MOV     R7,PM1Cmd
00A1 120000      E     LCALL   _Hook_62Port
                                           ; SOURCE LINE # 486
00A4         ?C0087:
                                           ; SOURCE LINE # 487
00A4 1500        E     DEC     PM1Step
                                           ; SOURCE LINE # 488
                                           ; SOURCE LINE # 489
                                           ; SOURCE LINE # 490
00A6         ?C0070:
00A6 900000      E     MOV     DPTR,#PM1STS
00A9 E0                MOVX    A,@DPTR
00AA 20E403            JB      ACC.4,?C0097
00AD 30000B      E     JNB     ECCheckBurstMode,?C0071
00B0         ?C0097:
00B0 120000      R     LCALL   CheckBurstMode
00B3 EF                MOV     A,R7
00B4 6401              XRL     A,#01H
00B6 7003              JNZ     $ + 5H
00B8 020000      R     LJMP    ?C0072
00BB         ?C0071:
                                           ; SOURCE LINE # 491
00BB C28E              CLR     TR1
                                           ; SOURCE LINE # 492
00BD C28F              CLR     TF1
                                           ; SOURCE LINE # 493
00BF D2AB              SETB    ET1
                                           ; SOURCE LINE # 494
00C1 120000      E     LCALL   EnableAllInterrupt
                                           ; SOURCE LINE # 495
00C4 120000      E     LCALL   EnablePMCIBFInt
                                           ; SOURCE LINE # 496
00C7 020000      E     LJMP    Hook_ACPICommand
             ; FUNCTION service_pci2f (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    643    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
