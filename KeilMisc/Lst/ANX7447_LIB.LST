C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE ANX7447_LIB
OBJECT MODULE PLACED IN Code\Oem\ANX7447_LIB.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe Code\Oem\ANX7447_LIB.C LA WL(1) CD OT(9,SIZE) NOAREGS OR INCDIR(.\Code\CORE
                    -\INCLUDE\;.\Code\OEM\INCLUDE\;.\Code\CHIP\INCLUDE\)

line level    source

   1          /******************************************************************************
   2          Copyright (c) 2017, Analogix Semiconductor, Inc.
   3          
   4          PKG Ver  : V1.1.1
   5          Filename : anx7447_lib.c
   6          Project  : ANX7447 EC UCSI
   7          Created  : 17 Jul 2017
   8          Devices  : ANX7447
   9          Toolchain: C51
  10          
  11          Description:
  12          Define ANX7447 chip operation interface.
  13          
  14          Revision History:
  15          V0.1
  16          1. Initial version
  17          
  18          v0.6.0
  19          1. Used 1ms hook and 50ms hook to check Async callback, event, GPIO interrupt.
  20          2. Used GPIO Port H.6 as Liberty Type-C port1 interrupt pin, configured as ¨INPUT〃, active is low.
  21          3. Used GPIO Port H.5 as Liberty Type-C port0 interrupt pin, configured as ¨INPUT〃, active is low.
  22          4. UCSI notify OPM by calling interface ¨ucsi_ppm_notify_opm〃.
  23          5. Once EC received event from OPM, EC should copy all related data to data structure ¨ppm2bios〃 which 
             -has been defined in ucsi.c.
  24          6. ANX7441_LIB.C will call all i2c_XXX_XXX_reg to access chip register space.
  25          7. All UCSI code takes ~15K memory size, XDATA takes around 600Bytes.
  26          
  27          v0.6.1
  28          1. Remove 50ms timer, add 10ms timer.
  29          2. Minor change for UCSI infrastructure.
  30          3. Resolve/Fix EC get unexpected voltage/current(0) while work as power sink.
  31          4. Resolve/Fix self-charging issue.
  32          5. Resolve/Fix EC will hang up if ANX7447 no OCM inside or ANX7447 damaged issue.
  33          6. Add OCM version for each port for BIOS checking.
  34          7. UCSI preliminary working, can properly receive PPM_RESET/NOTIFICATION_ENABLE/CONNECTOR_CAPABILITY/CAPAB
             -ILITY.
  35          
  36          v0.6.2
  37          1. Fix dead battery mode, system cannot power on with 40W type-c charger attached.
  38          2. PD Controller(ANX7447/ANX7411) will synchronize booting with EC (PD start to run after EC running).
  39          3. Add new interface to Re-driver (MUX) chip control for DP and USB3.X
  40          
  41          v0.6.3
  42          1. Add power/data role swap in the initial stage if OPM set fixed power/data role
  43          2. Fix error ack command didn't set "CommandCompletedIndicator" issue.
  44          3. Fix error command "Datalength" not 0x10 issue.
  45          4. Enlarge command timeout to 2.5s.
  46          
  47          v0.6.4
  48          1. Turn off DisplayPort Alt Mode support feature in sink identity & svid.
  49          2. Add send source/sink capability interface.
  50          3. Add connector partner type checking in data role swap callback.
  51          4. Add connector power role checking in power role swap callback.
  52          5. Fix HLK "Get alt mode command" test item.
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 2   

  53          6. Fix HLK "Connector status - Error" test item.
  54          7. Fix HLK "Connector status - fail connector reset in dead battery condition".
  55          
  56          v0.6.5
  57          1. Add battery out checking in "ppm_connector_reset" routing for UCSI "UCSI Get Connector Status - fail co
             -nnector reset in dead battery" test item.
  58          2. Fix JIRA LBT-215, Intel ID:1504599338 : GLK9(ANX7447 inside)+TAIKSEN adapter(HDMI+USB+Type-C charger)+A
             -OC I2267 HDMI monitor. Plug in the adapter, no video output on monitor.
  59          3. Fix USB TYPE-C ECR.
  60          
  61          v0.6.6
  62          1. support not calibrate chip, support AC chip.
  63          
  64          v0.6.7
  65          1.Fix apple dongle with Type-C charger attached, GLK cannot get high voltage charging.
  66          2.Set VSafe0V to 1.8V.
  67          
  68          v0.7.0
  69          1. FIX HLK test items.
  70          2. Add more UCSI connector capability.
  71          3. Add new send source capability interface.
  72          4. Adjust SET_UOR/SET_PDR swap timing control.
  73          
  74          v0.7.1
  75          1. Fix HLK test item, enlarge SET_PDR waiting time to 1.5s.
  76          
  77          v0.8.0
  78          1.Turn off Debug accessory support flag.
  79          2.Turn off Audio accessory support flag.
  80          3.Fix PD cannot power off/on, no action while attach/detach charger/dongle.
  81          4.Fix Mass interrupt issue.
  82          5.Release v0.8.0
  83          
  84          v0.8.1
  85          1. Fix not correctly clear PD interrupt issue.
  86          2. Fix power direction not correctly report issue.
  87          
  88          v0.8.2
  89          1. Checking UOM PDM flags while send source/sink caps, JIRA LBT-410.
  90          2. Send DP caps(source prefer) to firmware at chip initial stage, JIRA LBT-411.
  91          
  92          v0.8.3
  93          1. Fix JIRA:LBT-302(some kind of dongle cannot output 4K/60Hz video), Add PIN_ASSIGMENT_E support.
  94          2. Shrink SET_PDR waiting time to 750ms, JIRA LBT-412.
  95          
  96          v0.8.4
  97          1. Fix several USB Type-C PD 2.0 CTS failed items, JIRA LBT-413.
  98          2. Fix initialization message(such as SVID, DP_CAPS) didn't send to OCM on time issue, JIRA LBT-414.
  99          
 100          v1.0.1
 101          Based on v0.8.4.
 102          
 103          v1.0.2
 104          Fix JIRA LBT-366, LBT-404, LBT-429
 105          
 106          v1.0.3
 107          Add VDM interface, LBT-437
 108          
 109          v1.0.5
 110          1. Fix JIRA LBT-429
 111          2. Add PR_CONSUMER_GOT_POWER interrupt, JIRA LBT-539
 112          3. Code clean up
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 3   

 113          
 114          v1.0.6
 115          1. Fix JIRA LBT-501 PD 3.0 CTS
 116          
 117          v1.0.7
 118          1. Fix HLK item failed if the second Type-C port have no device attached.
 119          2. Add sending get_source_caps to request RDO control
 120          
 121          v1.0.8
 122          1. Disable SET_UOM feature
 123          
 124          v1.0.9
 125          1. Change the "Data Length" field in "GET_ALTERNATE_MODES" status from 4 times to 6 times.
 126          
 127          v1.0.a
 128          1. Add HPD/PIN ASSIGNMENT/CC STATUS/DETACH event callback interface, JIRA LBT-540
 129          
 130          v1.0.b
 131          1. remove OCM sending hardware reset event report, keep received, JIRA LBT-541.
 132          
 133          v1.0.c
 134          1. Enable SET_UOM feature, fix HLK failed item, JIRA LBT-552
 135          
 136          v1.1.1
 137          1. Change the version v1.0.c to v1.1.1.
 138          ******************************************************************************/
 139          #include <stdio.h>
 140          #include <string.h>
 141          
 142          #include <UCSI.H>
 143          #include <ANX7447_LIB.H>
 144          
 145          #define AUTO_RDO_ENABLE
 146          
 147          #define PATCH_NOT_CALIBRATED_CHIP
 148          
 149          #define _BIT0   0x01
 150          #define _BIT1   0x02
 151          #define _BIT2   0x04
 152          #define _BIT3   0x08
 153          #define _BIT4   0x10
 154          #define _BIT5   0x20
 155          #define _BIT6   0x40
 156          #define _BIT7   0x80
 157          /***************************************************************/
 158          /*Register definition of device address 0x58*/
 159          #define TCPC_ROLE_CONTROL        0x1A
 160          #define DRP_CONTROL              _BIT6
 161          #define RP_VALUE                 (_BIT5|_BIT4)
 162          #define CC2_CONTROL              (_BIT3|_BIT2)
 163          #define CC1_CONTROL              (_BIT1|_BIT0)
 164          #define DRP_EN                   _BIT6 // DRP_CONTROL
 165          
 166          #define TCPC_COMMAND             0x23
 167          
 168          #define ANALOG_CTRL_6            0xA6
 169          #define ADC_CTRL_2               0xC0
 170          
 171          #define ANALOG_CTRL_0            0xA0
 172          #define DFP_OR_UFP               _BIT6
 173          
 174          #define INTR_ALERT_0             0xCB
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 4   

 175          #define INTR_RECEIVED_MSG        _BIT7
 176          #define INTR_SOFTWARE_INT        _BIT6
 177          
 178          #define INTR_ALERT_1             0xCC
 179          #define INTR_INTP_POW_ON         _BIT7 // digital powerup indicator
 180          #define INTR_INTP_POW_OFF        _BIT6 
 181          
 182          
 183          #define TCPC_CTRL_2              0xCD
 184          #define SOFT_INTP_1              _BIT1
 185          
 186          #define  TCPC_CONTROL            0x19
 187          
 188          #define  POWER_CONTROL           0x1C
 189          
 190          #define TX_OBJ1_BYTE_0           0x54
 191          
 192          #define VBUS_VOLTAGE_0           0x70
 193          #define VBUS_VOLTAGE_BIT7_0      0xFF
 194          
 195          #define VBUS_VOLTAGE_1           0x71
 196          #define VBUS_VOLTAGE_BIT9_8      (_BIT0 | _BIT1)
 197          
 198          #define  PD_1US_PERIOD           0x80
 199          #define  PD_TX_BIT_PERIOD        0x86
 200          
 201          #define ANALOG_CTRL_1            0xA1
 202          #define R_TOGGLE_ENABLE          _BIT7
 203          #define R_LATCH_TOGGLE_ENABLE    _BIT6
 204          #define TOGGLE_CTRL_MODE         _BIT5
 205          #define CC2_VRD_USB              _BIT2
 206          #define CC2_VRD_1P5              _BIT1
 207          #define CC2_VRD_3P0              _BIT0
 208          
 209          #define  ANALOG_CTRL_9           0xA9
 210          
 211          #define ANALOG_CTRL_10           0xAA
 212          #define FRSWAP_CTRL              0xAB
 213          #define FR_SWAP                  _BIT7
 214          #define FR_SWAP_EN               _BIT6
 215          #define R_FRSWAP_CONTROL_SELECT  _BIT3
 216          #define R_SIGNAL_FRSWAP          _BIT2
 217          #define TRANSMIT_FRSWAP_SIGNAL   _BIT1
 218          #define FRSWAP_DETECT_ENABLE     _BIT0
 219          
 220          #define RING_OSC_CTRL            0xD9
 221          #define VBUS_OCP_0               0xE6 
 222          #define VBUS_OCP_1               0xE7
 223          #define VBUS_OCP_BIT9_8          (_BIT0 | _BIT1)
 224          
 225          /***************************************************************/
 226          /*Register definition of device address 0x7a*/
 227          #define TX_DATA_BYTE_30          0x00
 228           
 229          /***************************************************************/
 230          /*Register definition of device address 0x7e*/
 231          #define R_RAM_LEN_H              0x03
 232          #define FLASH_ADDR_EXTEND        _BIT7
 233           
 234          #define R_RAM_CTRL               0x05
 235          #define FLASH_DONE               _BIT7
 236          #define BOOT_LOAD_DONE           _BIT6
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 5   

 237          #define LOAD_CRC_OK              _BIT5 // CRC_OK
 238          #define LOAD_DONE                _BIT4
 239          
 240          #define R_FLASH_ADDR_H           0x0c
 241          #define R_FLASH_ADDR_L           0x0d
 242          
 243          #define FLASH_WRITE_DATA_0       0xe
 244          #define FLASH_READ_DATA_0        0x3c
 245          
 246          #define R_FLASH_LEN_H            0x2e
 247          #define R_FLASH_LEN_L            0x2f
 248          
 249          #define R_FLASH_RW_CTRL          0x30
 250          #define GENERAL_INSTRUCTION_EN   _BIT6
 251          #define FLASH_ERASE_EN           _BIT5
 252          #define WRITE_STATUS_EN          _BIT2
 253          #define FLASH_READ               _BIT1
 254          #define FLASH_WRITE              _BIT0
 255          
 256          #define R_FLASH_STATUS_0         0x31
 257          
 258          #define  FLASH_INSTRUCTION_TYPE  0x33
 259          #define FLASH_ERASE_TYPE         0x34
 260          
 261          #define R_FLASH_STATUS_REGISTER_READ_0  0x35
 262          #define WIP                      _BIT0
 263          
 264          #define R_I2C_0                  0x5C
 265          #define read_Status_en           _BIT7
 266          
 267          #define  OCM_CTRL_0              0x6e
 268          #define OCM_RESET                _BIT6
 269          
 270          #define ADDR_GPIO_CTRL_0         0x88
 271          #define SPI_WP                   _BIT7
 272          #define SPI_CLK_ENABLE           _BIT6
 273          /*
 274          * For SKIP highest voltage
 275          * Maximum Voltage for Request Data Object
 276          * 100mv units
 277          */
 278          #define MAX_VOLTAGE 0xAC // 0x7E:0xAC
 279          /*
 280          * For selection PDO
 281          * Maximum Power for Request Data Object
 282          * 500mW units
 283          */
 284          #define MAX_POWER 0xAD // 0x7E:0xAD
 285          /*
 286          * For mismatch
 287          * Minimum Power for Request Data Object
 288          * 500mW units
 289          */
 290          #define MIN_POWER 0xAE // 0x7E:0xAE
 291          /*Show Maximum voltage of RDO*/
 292          #define RDO_MAX_VOLTAGE 0xAF // 0x7E:0xAF
 293          /*Show Maximum Powe of RDO*/
 294          #define RDO_MAX_POWER 0xB0 // 0x7E:0xB0
 295          /*Show Maximum current of RDO*/
 296          #define RDO_MAX_CURRENT 0xB1 // 0x7E:0xB1
 297          
 298          #define FIRMWARE_CTRL 0xB2 // 0x7E:0xB2
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 6   

 299          #define disable_usb30 _BIT0
 300          #define auto_pd_en _BIT1
 301          #define trysrc_en _BIT2
 302          #define trysnk_en _BIT3
 303          #define support_goto_min_power _BIT4
 304          #define snk_remove_refer_cc _BIT5
 305          #define force_send_rdo _BIT6
 306          #define high_voltage_for_same_power _BIT7
 307          
 308          #define FW_STATE_MACHINE 0xB3 // 0x7E:0xB3
 309          
 310          #define OCM_VERSION_REG 0xB4
 311          
 312          #define INT_MASK 0xB6 // 0x7E:0xB6
 313          /*same with 0x28 interrupt mask*/
 314          #define CHANGE_INT 0xB7 // 0x7E:0xB7
 315          #define RESV0 _BIT0
 316          #define RECEIVED_ACK _BIT1
 317          #define VCONN_CHANGE _BIT2
 318          #define VBUS_CHANGE _BIT3
 319          #define CC_STATUS_CHANGE _BIT4
 320          #define DATA_ROLE_CHANGE _BIT5
 321          #define PR_CONSUMER_GOT_POWER _BIT6
 322          #define HPD_STATUS_CHANGE _BIT7
 323          
 324          #define SYSTEM_STSTUS 0xB8 // 0x7E:0xB8
 325          /*0: VCONN off; 1: VCONN on*/
 326          #define VCONN_STATUS _BIT2
 327          /*0: vbus off; 1: vbus on*/
 328          #define VBUS_STATUS _BIT3
 329          /*1: host; 0:device*/
 330          #define S_DATA_ROLE _BIT5
 331          /*0: Chunking; 1: Unchunked*/
 332          #define SUPPORT_UNCHUNKING _BIT6
 333          /*0: HPD low; 1: HPD high*/
 334          #define HPD_STATUS _BIT7
 335          
 336          #define NEW_CC_STATUS 0xB9 // 0x7E:0xB9
 337          
 338          // PD Revision configure
 339          // 0: default, 1:PD_REV20, 2:PD_REV30
 340          #define PD_REV_INIT 0xBA // 0x7E:0xBA
 341          
 342          #define PD_EXT_MSG_CTRL 0xBB // 0x7E:0xBB
 343          #define SRC_CAP_EXT_REPLY _BIT0
 344          #define MANUFACTURER_INFO_REPLY _BIT1
 345          #define BATTERY_STS_REPLY _BIT2
 346          #define BATTERY_CAP_REPLY _BIT3
 347          #define ALERT_REPLY _BIT4
 348          #define STATUS_REPLY _BIT5
 349          #define PPS_STATUS_REPLY _BIT6
 350          #define SNK_CAP_EXT_REPLY _BIT7
 351          
 352          
 353          #define PD_MAX_VOLTAGE 0xc8 /*20V, 100mv per unit*/     
 354          #define PD_MAX_POWER   0x82 /*65W, 500mW per unit*/
 355          #define PD_MIN_POWER   0x02 /* 1W */
 356          
 357          
 358          // Battery Status
 359          struct battery_status_data_obj
 360          {
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 7   

 361              u8 reserved; // Reserved
 362              u8 battery_info; // Battery Info
 363              u16 battery_pc; // Battery PC
 364          };
 365          
 366          // Alert Message
 367          struct alert_data_obj
 368          {
 369              u16 reserved     :16; // Reserved
 370              u8 hot_swappable_batteries :4; // Battery Info
 371              u8 fixed_batteries :4; // Battery Info
 372              u8 type_of_alert   :8; // Battery PC
 373          };
 374          
 375          // Source Capabilities Extended
 376          struct source_cap_extended
 377          {
 378              u16 VID;
 379              u16 PID;
 380              u32 XID;
 381              u8 fw_version;
 382              u8 hw_version;
 383              u8 voltage_regulation;
 384              u8 holdup_time;
 385              u8 compliance;
 386              u8 touch_current;
 387              u16 peak_current1;
 388              u16 peak_current2;
 389              u16 peak_current3;
 390              u8 touch_temp;
 391              u8 source_inputs;
 392              u8 batteries;
 393              u8 source_PDP;
 394          };
 395          
 396          // Sink Capabilities Extended
 397          struct sink_cap_extended
 398          {
 399              u16 VID;
 400              u16 PID;
 401              u32 XID;
 402              u8 fw_version;
 403              u8 hw_version;
 404              u8 Reserved[11];
 405              u8 sink_inputs;
 406              u8 batteries;
 407              u8 sink_PDP;
 408          };
 409          
 410          
 411          // Status Message
 412          struct status_data
 413          {
 414              u8 internal_temp;
 415              u8 present_input;
 416              u8 present_battery_input;
 417              u8 event_flags;
 418              u8 temperature_status;
 419          };
 420          
 421          // Battery Cap
 422          struct battery_cap
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 8   

 423          {
 424              u16 VID;
 425              u16 PID;
 426              u16 battery_design_cap;
 427              u16 battery_last_full_charge_cap;
 428              u8 battery_type;
 429          };
 430          
 431          // Manufacturer Info
 432          struct manufacturer_info
 433          {
 434              u8 manufacturer_info_target;
 435              u8 manufacturer_info_ref;
 436          };
 437          
 438          // Manufacturer Info Data
 439          struct manufacturer_info_data
 440          {
 441              u16 VID;
 442              u16 PID;
 443              u8 manufacturer_string[22];
 444          };
 445          
 446          // PPS Status Message
 447          struct pps_status_data
 448          {
 449              u16 output_voltage;
 450              u8 output_current;
 451              u8 real_time_flags;
 452          };
 453          
 454          struct ext_message_header
 455          {
 456              u16 data_size                  :9; // Data Size
 457              u16 reserved                   :1; // Reserved
 458              u16 request_chunk              :1; // Request Chunk
 459              u16 chunk_number               :4; // Chunk Number
 460              u16 chunked                    :1; // Chunked
 461          };
 462          
 463          #define BYTE_SWAP(word) do { (word) = ((word)<<8)|((word)>>8); } while(0)
 464          //low byte + high byte
 465          #define USB_PD_EXT_HEADER(sendbuf, size, request, number, chunk) \
 466              do { \
 467                  ((struct ext_message_header *)sendbuf)->data_size = size; \
 468                  ((struct ext_message_header *)sendbuf)->reserved = 0; \
 469                  ((struct ext_message_header *)sendbuf)->request_chunk = request; \
 470                  ((struct ext_message_header *)sendbuf)->chunk_number = number; \
 471                  ((struct ext_message_header *)sendbuf)->chunked = chunk; \
 472               } while(0)
 473          
 474          
 475          static u8 interface_send_ctr_msg();
 476          static u8 interface_send_msg();
 477          static u8 send_pd_msg(PD_MSG_TYPE type,
 478                  u8 *buf, u8 size, u8 type_sop);
 479          
 480          
 481          #define INTERFACE_SEND_BUF_SIZE 32
 482          #define INTERFACE_RECV_BUF_SIZE 32
 483          
 484          extern u8 InterfaceSendBuf[PD_MAX_INSTANCE][INTERFACE_SEND_BUF_SIZE];
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 9   

 485          extern u8 InterfaceRecvBuf[PD_MAX_INSTANCE][INTERFACE_RECV_BUF_SIZE];
 486          extern struct anx_context ANXXDATA context[PD_MAX_INSTANCE];
 487          extern u8 ANXXDATA i;
 488          extern u8 ANXXDATA j;
 489          extern u8 ANXXDATA k;
 490          extern u8 ANXXDATA l;
 491          extern struct ppm_ucsi_parameters ANXXDATA pup;
 492          extern u8 ANXXDATA role;
 493          extern u8 ANXXDATA c;
 494          extern u8 ANXXDATA len;
 495          extern u16 ANXXDATA count;
 496          extern u8 ANXXDATA port_id;
 497          extern u8 ANXXDATA change_int;
 498          extern u8 ANXXDATA change_status;
 499          extern u8 ANXXDATA intr_alert_0;
 500          extern u8 ANXXDATA intr_alert_1;
 501          extern u16 ANXXDATA pdo_h;
 502          extern u16 ANXXDATA pdo_l;
 503          extern u32 ANXXDATA pdo_max;
 504          extern u32 ANXXDATA pdo_max_tmp;
 505          extern u8 ANXXDATA supply_1500ma_flag;
 506          extern u8 ANXXDATA supply_1500ma_port;
 507          extern u8 ANXXDATA random_data;
 508          extern u8 ANXXDATA timer1msCount;
 509          extern u8 ANXXDATA self_charging_error;
 510          extern u8 ANXXDATA request_src_caps_flag[];
 511          
 512          /* Fix JIRA LBT-501 */
 513          #define VENDOR_ID  0x1F29
 514          #define PRODUCT_ID 0x7447
 515          #define HW_REV 0x01
 516          #define SI_REV 0x04
 517          #define FW_MAJOR_REV 0x02
 518          #define FW_MINOR_REV 0x01
 519          
 520          
 521          #define BYTE_CONST_SWAP(word) ((unsigned short int)(((word)<<8)|((word)>>8)))
 522          /***Define Global Variables***/
 523          // Battery Cap - Invalid Battery
 524          code struct battery_cap  pd_battery_cap_invalid = {
 525              BYTE_CONST_SWAP(VENDOR_ID), BYTE_CONST_SWAP(PRODUCT_ID), 0xFFFF, 0xFFFF, 1
 526          };
 527          
 528          // Battery Cap
 529          code struct battery_cap   pd_battery_cap[8] = {
 530                  { VENDOR_ID, PRODUCT_ID, 0xFFFF, 0xFFFF, 1 }, // Battery 0 
 531                  { VENDOR_ID, PRODUCT_ID, 0xFFFF, 0xFFFF, 1 }, // Battery 1 // Invalid Battery reference, Battery's cap un
             -known
 532                  { VENDOR_ID, PRODUCT_ID, 0xFFFF, 0xFFFF, 1 }, // Battery 2 // Hot Swappable Battery, Battery's cap unknow
             -n
 533                  { VENDOR_ID, PRODUCT_ID, 0xFFFF, 0xFFFF, 1 }, // Battery 3
 534                  { VENDOR_ID, PRODUCT_ID, 0xFFFF, 0xFFFF, 1 }, // Battery 4
 535                  { VENDOR_ID, PRODUCT_ID, 0xFFFF, 0xFFFF, 1 }, // Battery 5
 536                  { VENDOR_ID, PRODUCT_ID, 0xFFFF, 0xFFFF, 1 }, // Battery 6
 537                  { VENDOR_ID, PRODUCT_ID, 0xFFFF, 0xFFFF, 1 }, // Battery 7
 538          };
 539          
 540          //struct battery_cap recv_battery_cap;
 541          
 542          // Battery Status - Invalid Battery
 543          code struct battery_status_data_obj pd_battery_status_invalid = {
 544              0, 1, 0xFFFF // Reserved, Invalid Battery reference, Battery'sSOC unknown
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 10  

 545          };
 546          // Battery Status
 547          code struct battery_status_data_obj  pd_battery_status[8] = {
 548                  { 0, 0x01, 0xFFFF }, // Battery 0 
 549                  { 0, 0x01, 0xFFFF }, // Battery 1 // Reserved, Invalid Battery reference, Battery'sSOC unknown
 550                  { 0, 0x01, 0xFFFF }, // Battery 2 // Reserved, Battery charging, Battery'sSOC unknown
 551                  { 0, 0x1, 0xFFFF }, // Battery 3
 552                  { 0, 0x1, 0xFFFF }, // Battery 4
 553                  { 0, 0x1, 0xFFFF }, // Battery 5
 554                  { 0, 0x1, 0xFFFF }, // Battery 6
 555                  { 0, 0x1, 0xFFFF }, // Battery 7
 556          };
 557          
 558          //struct battery_status_data_obj  recv_battery_status;
 559          
 560          // Alert Message
 561          code struct alert_data_obj  pd_alert_data_obj = {
 562                  0, // Reserved
 563                  0, // Hot Swappable Battery 0~3
 564                  1, // Fixed Battery 0~3
 565                  2  // Battery Status Change
 566          };
 567          //struct alert_data_obj  recv_alert_data_obj;
 568          
 569          // Get Battery Status
 570          //unsigned char  pd_get_battery_status_ref = 4; // hot swap battery 0
 571          
 572          // Source Capabilities Extended
 573          code struct source_cap_extended  pd_source_cap_extended = {
 574                  BYTE_CONST_SWAP(VENDOR_ID), // VID
 575                  BYTE_CONST_SWAP(PRODUCT_ID), // PID
 576                  0, // XID
 577                  FW_MAJOR_REV, // FW Ver
 578                  HW_REV, // HW Ver
 579                  0,
 580                  0,
 581                  0,
 582                  0,
 583                  0,
 584                  0,
 585                  0,
 586                  0,
 587                  0,
 588                  0x0, //battery number
 589                  0x7  //PDP (4.5W)
 590          };
 591          //struct source_cap_extended  recv_source_cap_extended;
 592          
 593          // Sink Capabilities Extended
 594          code struct sink_cap_extended  pd_sink_cap_extended = {
 595                  VENDOR_ID, // VID
 596                  PRODUCT_ID, // PID
 597                  0, // XID
 598                  FW_MAJOR_REV, // FW Ver
 599                  HW_REV, // HW Ver
 600                  // ....
 601          };
 602          //struct sink_cap_extended  recv_sink_cap_extended;
 603          
 604          // Status Message
 605          code struct status_data  pd_status_data = {
 606              0, // not supported
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 11  

 607              2, // External DC power
 608              0, // no battery
 609              0, // Event Flags
 610              0  // not Supported
 611          };
 612          //struct status_data  recv_status_data;
 613          
 614          // Get Battery Cap
 615          //unsigned char  pd_get_battery_cap_ref = 4; // hot swap battery 0
 616          
 617          // Manufacturer Info
 618          code struct manufacturer_info  pd_manufacturer_info = {
 619                  0, // Port/Cable
 620                  0  // Not battery
 621          };
 622          
 623          // Manufacturer Info Data
 624          struct manufacturer_info_data  pd_manufacturer_info_data = {
 625                  VENDOR_ID, // VID
 626                  PRODUCT_ID, // PID
 627                  "Analogix(MCU)" // String
 628          };
 629          //struct manufacturer_info_data  recv_manufacturer_info_data;
 630          //Country code
 631          code unsigned char  pd_country_code_data[3 * 2 + 2] = {
 632              0x03, 0x00, // Number of country codes in the message
 633              'A', 'U',
 634              'B', 'R',
 635              'C', 'A',
 636          };
 637          //Country info
 638          code unsigned char  pd_country_code_info[8] = { //for test
 639             'A', 'U',
 640             0x00, 0x00,  //reserved
 641             0x00, 0x01, 
 642             0x02, 0x02, 
 643          };
 644          // PPS Status Message
 645          code struct pps_status_data  pd_pps_status_data = {
 646                  0xFFFF, // not supported
 647                  0xFF, // not supported
 648                  0, // PTF: 00 ?V Not Supported, Constant Voltage mode
 649          };
 650          //struct pps_status_data  recv_pps_status_data;
 651          
 652          code u32 dfp_caps = PDO_FIXED(PD_VOLTAGE_5V, PD_CURRENT_1500MA, PDO_FIXED_DATA_SWAP | PDO_FIXED_EXTERNAL);
 653          code u32 src_caps = PDO_FIXED(PD_VOLTAGE_5V, PD_CURRENT_1500MA, PDO_FIXED_COMM_CAP);
 654          code u32 dfp_caps_default_ma = PDO_FIXED(PD_VOLTAGE_5V, PD_CURRENT_1500MA, PDO_FIXED_DATA_SWAP | PDO_FIXED
             -_EXTERNAL);
 655          //code u32 src_caps_default_ma = PDO_FIXED(PD_VOLTAGE_5V, PD_CURRENT_1500MA, PDO_FIXED_COMM_CAP);
 656          code u32 src_caps_default_ma = PDO_FIXED(PD_VOLTAGE_5V, PD_CURRENT_3A, PDO_FIXED_COMM_CAP);
 657          code u8 set_variable_1[] = {IF_VAR_fw_var_reg, 0x00, 0x02, 0x01, 0x0d};
 658          
 659          code u8 src_pdo[] = {0x5A, 0x90, 0x01, 0x2A, 0x96, 0x90, 0x01, 0x2A};
 660          code u8 snk_identity[] = {
 661              //JIRA LBT-413
 662              #ifdef ANXDONGLE
                  0x00, 0x00, 0x00, 0xec,/*snk_id_hdr */
                  #else
 665              /* JIRA LBT-501 */
 666              0x00, 0x00, 0x00, 0x82,/*snk_id_hdr */
 667              #endif
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 12  

 668                  0x00, 0x00, 0x00, 0x00, /*snk_cert */
 669                  0x00, 0x00, 0x00, 0x00, /*snk_prd*/
 670              //JIRA LBT-413
 671              #ifdef ANXDONGLE
                      0x39, 0x00, 0x00, 0x51, /*5snk_ama*/
                  #endif
 674              };
 675          code u8 svid[] = {0x00, 0x00, 0x00, 0xff };
 676          code u8 enter_exit_svid[] = {0xff, 0x01, 0x01, 0x00};
 677          #if 0
              code u32 snk_cap[] = {/*5V, 0.9A, Fixed */PDO_FIXED(PD_VOLTAGE_5V, PD_CURRENT_900MA, PDO_FIXED_FLAGS | PDO
             -_FIXED_COMM_CAP),
                           /*min 5V, max 20V, power 40W, battery */PDO_BATT(PD_VOLTAGE_5V, PD_MAX_VOLTAGE_20V, PD_POWER_
             -40W),
                           /*min5V, max 20V, current 2A, variable */PDO_VAR(PD_VOLTAGE_5V, PD_MAX_VOLTAGE_20V, PD_CURREN
             -T_2A)
              };
              #endif
 683          code u32 snk_cap[] = {PDO_FIXED(PD_VOLTAGE_5V, PD_CURRENT_900MA, PDO_FIXED_COMM_CAP), /*5V, 0.9A, Fixed */
 684                                PDO_VAR(PD_VOLTAGE_5V, PD_MAX_VOLTAGE_20V, PD_CURRENT_3A) /*5V, 20V, 3A, variable */
 685          };
 686          
 687          //JIRA LBT-411
 688          code u8 dp_source_dp_caps[4] = {0xC6, 0x00, 0x00, 0x00};
 689          
 690          code u8 Liberty_i2c_address[PD_MAX_INSTANCE][4] = {
 691          #if Two_PD_Chip
                      {0x56, 0x6e, 0x78, 0x86},
                  {0x58, 0x7e, 0x7a, 0x84}
                  //{0x54, 0x64, 0x68, 0x6c},
                      //{0x58, 0x7e, 0x7a, 0x84}
              #else
 697              {0x58, 0x7e, 0x7a, 0x84}
 698                  //{0x56, 0x6e, 0x78, 0x86}
 699          #endif
 700          
 701          #ifdef ITE_EC_EVB_PORT1_TEST
              #message  "ANX IC Address on EVB configuration"
                  {0x52, 0x62, 0x6a, 0x74}  /* port 1: I2C address selected as 1 1 */
              #else
 705          #message  "ANX IC Address on MRD configuration"
*** MESSAGE C320 IN LINE 705 OF Code\Oem\ANX7447_LIB.C: "ANX IC Address on MRD configuration"
 706              //{0x54, 0x64, 0x68, 0x6c}  /* port 1: I2C address selected as 1 0 */
 707          #endif
 708          
 709          };
 710          
 711          #define is_unchunked() (anx_read_reg(context[port_id].spi, SYSTEM_STSTUS) & SUPPORT_UNCHUNKING)
 712          #define EXT_HEADER_CHUNKED      1
 713          #define EXT_HEADER_UNCHUNKED    0
 714          
 715          s8 *result_to_str(u8 result_type)
 716          {
 717   1          return  (result_type == CMD_SUCCESS) ? "Accept" :
 718   1              (result_type == CMD_FAIL) ? "Fail" :
 719   1              (result_type == CMD_BUSY) ? "Busy" :
 720   1              (result_type == CMD_REJECT) ? "Reject":         
 721   1              "Unknown";
 722   1      }
 723          
 724          s8 *interface_to_str(u8 header_type)
 725          {
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 13  

 726   1      #if 1
 727   1          s8 * str;
 728   1          switch (header_type) {
 729   2          case TYPE_PWR_SRC_CAP:
 730   2                  str = "PWR_SRC_CAP";
 731   2                  break;
 732   2          case TYPE_PWR_SNK_CAP:
 733   2                  str = "PWR_SNK_CAP";
 734   2                  break;
 735   2          case TYPE_PWR_OBJ_REQ:
 736   2                  str = "PWR_OBJ_REQ";
 737   2                  break;
 738   2          case TYPE_DP_SNK_IDENTITY:
 739   2                  str = "DP_SNK_IDENTITY";
 740   2                  break;
 741   2          case TYPE_SVID:
 742   2                  str = "SVID";
 743   2                  break;
 744   2          case TYPE_PSWAP_REQ:
 745   2                  str = "PSWAP_REQ";
 746   2                  break;
 747   2          case TYPE_DSWAP_REQ:
 748   2                  str = "DSWAP_REQ";
 749   2                  break;
 750   2          case TYPE_GOTO_MIN_REQ:
 751   2                  str = "GOTO_MIN_REQ";
 752   2                  break;
 753   2          case TYPE_DP_ALT_ENTER:
 754   2                  str = "DPALT_ENTER";
 755   2                  break;
 756   2          case TYPE_DP_ALT_EXIT:
 757   2                  str = "DPALT_EXIT";
 758   2                  break;
 759   2          case TYPE_GET_SRC_CAP:
 760   2                  str = "GET_SRC_CAP";
 761   2                  break;
 762   2          case TYPE_GET_RDO:
 763   2                  str = "GET_RDO";
 764   2                  break;
 765   2          case TYPE_GET_SNK_CAP:
 766   2                  str = "GET_SNK_CAP";
 767   2                  break;
 768   2          case TYPE_VCONN_SWAP_REQ:
 769   2                  str = "VCONN_SWAP_REQ";
 770   2                  break;
 771   2          case TYPE_GET_DP_SNK_CAP:
 772   2                  str = "GET_DP_SINK_CAP";
 773   2                  break;
 774   2          case TYPE_DP_SNK_CFG:
 775   2                  str = "DP_SNK_CFG";
 776   2                  break;
 777   2          case TYPE_SOFT_RST:
 778   2                  str = "Software Reset";
 779   2                  break;
 780   2          case TYPE_HARD_RST:
 781   2                  str = "Hardware Reset";
 782   2                  break;
 783   2          case TYPE_RESTART:
 784   2                  str = "Restart";
 785   2                  break;
 786   2          case TYPE_GET_PD_STATUS:
 787   2                  str = "PD_STATUS_REQ";
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 14  

 788   2                  break;
 789   2          case TYPE_ACCEPT:
 790   2                  str = "ACCEPT";
 791   2                  break;
 792   2          case TYPE_REJECT:
 793   2                  str = "REJECT";
 794   2                  break;
 795   2          case TYPE_VDM:
 796   2                  str = "VDM";
 797   2                  break;
 798   2          case TYPE_RESPONSE_TO_REQ:
 799   2                  str = "RESPONSE_TO_REQ";
 800   2                  break;
 801   2          case TYPE_EXT_SRC_CAP_EXT:
 802   2                  str = "PD3_SRC_CAP";
 803   2                  break;
 804   2          case TYPE_EXT_STS:
 805   2                  str = "PD3_STS";
 806   2                  break;
 807   2          case TYPE_EXT_GET_BATT_CAP:
 808   2                  str = "PD3_GET_BATT_CAP";
 809   2                  break;
 810   2          case TYPE_EXT_GET_BATT_STS:
 811   2                  str = "PD3_GET_BATT_STS";
 812   2                  break;
 813   2          case TYPE_EXT_BATT_CAP:
 814   2                  str = "PD3_BATT_CAP";
 815   2                  break;
 816   2          case TYPE_EXT_GET_MFR_INFO:
 817   2                  str = "PD3_GET_MFR_INFO";
 818   2                  break;
 819   2          case TYPE_EXT_MFR_INFO:
 820   2                  str = "PD3_MFR_INFO";
 821   2                  break;
 822   2          case TYPE_EXT_PDFU_REQUEST:
 823   2                  str = "PD3_PDFU_REQUEST";
 824   2                  break;
 825   2          case TYPE_EXT_PDFU_RESPONSE:
 826   2                  str = "PD3_PDFU_RESPONSE";
 827   2                  break;
 828   2          case TYPE_BATT_STS:
 829   2                  str = "PD3_BATT_STS";
 830   2                  break;
 831   2          case TYPE_ALERT:
 832   2                  str = "PD3_ALERT";
 833   2                  break;
 834   2          case TYPE_NOT_SUPPORTED:
 835   2                  str = "PD3_NOT_SUPPORTED";
 836   2                  break;
 837   2          case TYPE_GET_SRC_CAP_EXT:
 838   2                  str = "PD3_GET_SRC_CAP";
 839   2                  break;
 840   2          case TYPE_GET_STS:
 841   2                  str = "PD3_GET_SRC_STS";
 842   2                  break;
 843   2          case TYPE_FR_SWAP:
 844   2                  str = "PD3_FR_SWAP";
 845   2                  break;
 846   2          case TYPE_GET_PPS_STS:
 847   2                  str = "PD3_GET_PPS_STS";
 848   2                  break;
 849   2          case TYPE_FR_SWAP_SIGNAL:
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 15  

 850   2                  str = "PD3_FR_SWAP_SIGNAL";
 851   2                  break;
 852   2          case TYPE_GET_COUNTRY_INFO:
 853   2                  str = "PD3_GET_COUNTRY_INFO";
 854   2                  break;
 855   2          case TYPE_DP_DISCOVER_MODES_INFO:
 856   2                  str = "TYPE_DP_DISCOVER_MODES_INFO";
 857   2                  break;
 858   2          case TYPE_GET_DP_CONFIGURE:
 859   2                  str = "TYPE_GET_DP_CONFIGURE";
 860   2                  break;
 861   2          case TYPE_DP_CONFIGURE:
 862   2                  str = "TYPE_DP_CONFIGURE";
 863   2                  break;
 864   2          case TYPE_I2C_MASTER_WRITE:
 865   2                  str = "TYPE_I2C_MASTER_WRITE";
 866   2                  break;
 867   2          case TYPE_GET_COUNTRY_CODE:
 868   2                  str = "PD3_GET_COUNTRY_CODE";
 869   2                  break;
 870   2          case TYPE_GET_SINK_CAP_EXT:
 871   2                  str = "PD3_GET_SINK_CAP_EXT";
 872   2                  break;
 873   2          case TYPE_EXT_SINK_CAP_EXT:
 874   2                  str = "PD3_EXT_SINK_CAP_EXT";
 875   2                  break;
 876   2          case TYPE_EXT_PPS_STS:
 877   2                  str = "PD3_EXT_PPS_CAP_STS";
 878   2                  break;
 879   2          case TYPE_EXT_COUNTRY_INFO:
 880   2                  str = "PD3_EXT_COUNTRY_INFO";
 881   2                  break;
 882   2          case TYPE_EXT_COUNTRY_CODE:
 883   2                  str = "PD3_EXT_COUNTRY_CODE";
 884   2                  break;
 885   2          case TYPE_GET_VAR:
 886   2                  str = "TYPE_GET_VAR";
 887   2                  break;
 888   2          case TYPE_SET_VAR:
 889   2                  str = "TYPE_SET_VAR";
 890   2                  break;
 891   2          default:
 892   2                  str = "Unknown";
 893   2                  break;
 894   2          }
 895   1      #endif
 896   1          return str;
 897   1      }
 898          
 899          u8 get_data_role()
 900          {
 901   1          /*fetch the data role */
 902   1          k = anx_read_reg(context[port_id].spi, SYSTEM_STSTUS);
 903   1      
 904   1          return (k & S_DATA_ROLE) != 0;
 905   1      
 906   1      }
 907          
 908          
 909          u8 get_power_role()
 910          {
 911   1          /*fetch the power role */
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 16  

 912   1          k = anx_read_reg(context[port_id].spi, SYSTEM_STSTUS);
 913   1      
 914   1          return (k & VBUS_STATUS) != 0;
 915   1      }
 916          
 917          #define InterfaceSendBuf_Addr 0xC0
 918          #define InterfaceRecvBuf_Addr 0xE0
 919          
 920          #define recvd_msg_len()          ((context[port_id].InterfaceRecvBuf[0] & 0x1F) - 1)
 921          #define recvd_msg_sop_type()     (context[port_id].InterfaceRecvBuf[0]  >> 6 )
 922          #define recvd_msg_type()         (context[port_id].InterfaceRecvBuf[1])
 923          #define recvd_msg_buf()          (&context[port_id].InterfaceRecvBuf[2])
 924          #define send_msg_len()           (context[port_id].InterfaceSendBuf[0] & 0x1F)
 925          #define RESPONSE_REQ_TYPE()      (context[port_id].InterfaceRecvBuf[2])
 926          #define RESPONSE_REQ_RESULT()    (context[port_id].InterfaceRecvBuf[3])
 927          
 928          /* define max request current 3A and voltage 5V */
 929          #define MAX_REQUEST_VOLTAGE 20000
 930          #define MAX_REQUEST_CURRENT 3000
 931          #define set_rdo_value(v0, v1, v2, v3)   \
 932              do {                \
 933                  context[port_id].pd_rdo[0] = (v0);  \
 934                  context[port_id].pd_rdo[1] = (v1);  \
 935                  context[port_id].pd_rdo[2] = (v2);  \
 936                  context[port_id].pd_rdo[3] = (v3);  \
 937              } while (0)
 938          
 939          #ifdef ANXREDRIVER
 940          #define plug_orientation(port) (anx_read_reg(context[port].spi,NEW_CC_STATUS)& 0x0d)
 941          void redriver_mux_control(unsigned char mode, unsigned char cc_direction)  //redriver control 
 942          {
 943   1          unsigned char buf[3];
 944   1          buf[0] = REDRIVER_ADDRESS; //address
 945   1          buf[1] = REDRIVER_OFFSET; //offset
 946   1          if (cc_direction == CC1_CONNECTED) {
 947   2              if (mode == USB3_1_DP_2LANES) {
 948   3                  buf[2] = 0xf8; //data
 949   3              } else if (mode == DP_ALT_4LANES) {
 950   3                  buf[2] = 0xe8; //data
 951   3              }  else if (mode == USB3_1_CONNECTED) {
 952   3                  buf[2] = 0xb8; //data
 953   3              }
 954   2          } else {
 955   2              if (mode == USB3_1_DP_2LANES) {
 956   3                  buf[2] = 0xfc; //data
 957   3              } else if (mode == DP_ALT_4LANES) {
 958   3                  buf[2] = 0xec; //data
 959   3                      } else if (mode == USB3_1_CONNECTED) {
 960   3                  buf[2] = 0xbc; //data
 961   3              }
 962   2          }
 963   1          send_pd_msg((PD_MSG_TYPE)TYPE_I2C_MASTER_WRITE, buf, 3, 0);
 964   1      }
 965          void dp_configure_redriver(unsigned char mode) 
 966          {
 967   1          unsigned char mux_mode;
 968   1          //Fix JIRA LBT-302
 969   1          if((mode == SELECT_PIN_ASSIGMENT_C) || (mode == SELECT_PIN_ASSIGMENT_E) )
 970   1              mux_mode = DP_ALT_4LANES;
 971   1          else
 972   1              mux_mode = USB3_1_DP_2LANES;
 973   1          if(context[port_id].mux_mode != mux_mode) {
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 17  

 974   2              redriver_mux_control(mux_mode, context[port_id].cc_orientation);
 975   2              context[port_id].mux_mode = mux_mode;
 976   2          }
 977   1      }
 978          #endif
 979          /* default request max RDO */
 980          void build_rdo_from_source_caps_new(u8 obj_cnt, u8 *buf)
 981          {
 982   1              if(context[port_id].sel_voltage_pdo_index + 1 > obj_cnt)
 983   1              {
 984   2                      for (i= 0; i < obj_cnt; i++){
 985   3                      {
 986   4                              ((unsigned char *)&pdo_max_tmp)[0] = buf[4*i+3];
 987   4                              ((unsigned char *)&pdo_max_tmp)[1] = buf[4*i+2];
 988   4                              ((unsigned char *)&pdo_max_tmp)[2] = buf[4*i+1];
 989   4                              ((unsigned char *)&pdo_max_tmp)[3] = buf[4*i+0];
 990   4                              switch(GET_PDO_TYPE(pdo_max_tmp))
 991   4                              {       
 992   5                                      case (PDO_TYPE_FIXED >> 30):
 993   5                                              if((GET_PDO_FIXED_VOLT(pdo_max_tmp)) > pdo_max)
 994   5                                              {
 995   6                                                      pdo_max = GET_PDO_FIXED_VOLT(pdo_max_tmp);
 996   6                                                      context[port_id].sel_voltage_pdo_index = i;
 997   6                                              }
 998   5                                              break;
 999   5                                      case(PDO_TYPE_VARIABLE >> 30):
1000   5                                              if(GET_VAR_MAX_VOLT(pdo_max_tmp) > pdo_max)
1001   5                                              {
1002   6                                                      pdo_max = GET_VAR_MAX_VOLT(pdo_max_tmp);
1003   6                                                      context[port_id].sel_voltage_pdo_index = i;
1004   6                                              }
1005   5                                              break;
1006   5                                      case(PDO_TYPE_BATTERY >> 30):
1007   5                                              if(GET_BATT_MAX_VOLT(pdo_max_tmp) > pdo_max)
1008   5                                              {
1009   6                                                      pdo_max = GET_BATT_MAX_VOLT(pdo_max_tmp);
1010   6                                                      context[port_id].sel_voltage_pdo_index = i;
1011   6                                              }
1012   5                                              break;
1013   5                                      default:                                
1014   5                                              break;
1015   5                              }
1016   4                              }
1017   3                      }
1018   2              }
1019   1              else
1020   1              {
1021   2                      ((unsigned char *)&pdo_max_tmp)[0] = buf[context[port_id].sel_voltage_pdo_index*4+3];
1022   2                      ((unsigned char *)&pdo_max_tmp)[1] = buf[context[port_id].sel_voltage_pdo_index*4+2];
1023   2                      ((unsigned char *)&pdo_max_tmp)[2] = buf[context[port_id].sel_voltage_pdo_index*4+1];
1024   2                      ((unsigned char *)&pdo_max_tmp)[3] = buf[context[port_id].sel_voltage_pdo_index*4+0];
1025   2                      switch(GET_PDO_TYPE(pdo_max_tmp))
1026   2                      {
1027   3                              case(PDO_TYPE_FIXED >> 30):
1028   3                                      pdo_max = GET_PDO_FIXED_VOLT(pdo_max_tmp);
1029   3                                      break;
1030   3                              case(PDO_TYPE_VARIABLE >> 30):
1031   3                                      pdo_max = GET_VAR_MAX_VOLT(pdo_max_tmp);
1032   3                                      break;
1033   3                              case(PDO_TYPE_BATTERY >> 30):
1034   3                                      pdo_max = GET_BATT_MAX_VOLT(pdo_max_tmp);
1035   3                                      break;
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 18  

1036   3                              default:
1037   3                                      break;
1038   3                      }
1039   2              }
1040   1              ((unsigned char *)&pdo_max_tmp)[0] = buf[context[port_id].sel_voltage_pdo_index*4+3];
1041   1              ((unsigned char *)&pdo_max_tmp)[1] = buf[context[port_id].sel_voltage_pdo_index*4+2];
1042   1              ((unsigned char *)&pdo_max_tmp)[2] = buf[context[port_id].sel_voltage_pdo_index*4+1];
1043   1              ((unsigned char *)&pdo_max_tmp)[3] = buf[context[port_id].sel_voltage_pdo_index*4+0];
1044   1              switch(GET_PDO_TYPE(pdo_max_tmp))
1045   1              {
1046   2                      case(PDO_TYPE_FIXED >> 30):
1047   2                      case(PDO_TYPE_VARIABLE>>30):
1048   2                              if(GET_PDO_FIXED_CURR(pdo_max_tmp) >= MAX_REQUEST_CURRENT)
1049   2                              {
1050   3                                      context[port_id].ucsi_partner_rdo = RDO_FIXED(context[port_id].sel_voltage_pdo_index + 1, MAX_REQUEST_
             -CURRENT, MAX_REQUEST_CURRENT, 0);
1051   3                              }
1052   2                              else
1053   2                              {
1054   3                                      context[port_id].ucsi_partner_rdo = RDO_FIXED(context[port_id].sel_voltage_pdo_index + 1, GET_PDO_FIXE
             -D_CURR(pdo_max_tmp), GET_PDO_FIXED_CURR(pdo_max_tmp), RDO_CAP_MISMATCH);
1055   3                              }
1056   2                              break;
1057   2                      case (PDO_TYPE_BATTERY >> 30):
1058   2                              if((GET_BATT_OP_POWER(pdo_max_tmp)>>2) >= (MAX_REQUEST_CURRENT*(MAX_REQUEST_VOLTAGE/1000))>>2)
1059   2                              {
1060   3                                      context[port_id].ucsi_partner_rdo = RDO_BATT(context[port_id].sel_voltage_pdo_index + 1, MAX_REQUEST_C
             -URRENT*(MAX_REQUEST_VOLTAGE/1000), MAX_REQUEST_CURRENT*(MAX_REQUEST_VOLTAGE/1000), 0);
1061   3                              }
1062   2                              else
1063   2                              {
1064   3                                      context[port_id].ucsi_partner_rdo = RDO_BATT(context[port_id].sel_voltage_pdo_index + 1, (unsigned lon
             -g)(GET_BATT_OP_POWER(pdo_max_tmp)>>2)*4, (unsigned long)(GET_BATT_OP_POWER(pdo_max_tmp)>>2)*4, RDO_CAP_MISMATCH);
1065   3                              }
1066   2                              break;
1067   2                      default:
1068   2                              break;
1069   2              }
1070   1              
1071   1              
1072   1              //set_rdo_value(pd_rdo,sel_pdo & 0xff,(sel_pdo >> 8) & 0xff, (sel_pdo >> 16) & 0xff, (sel_pdo >> 24) & 0x
             -ff);
1073   1              
1074   1      }
1075          
1076          #ifndef AUTO_RDO_ENABLE
              static u8 build_rdo_from_source_caps(u8 obj_cnt, u8 *buf)
              {
                  pdo_max = 0;
                  obj_cnt &= 0x07;
              
                  /* find the max voltage pdo */
                  for (i = 0; i < obj_cnt; i++) {
              
                      /* get max voltage now */
                      pdo_max_tmp =
                          (u16) ((((((((u16) buf[i * 4 + 3] << 8) | (buf[i * 4 + 2])) & 0xf) << 6) | ((((u16) buf[i * 4 
             -+ 1] << 8) | (buf[i * 4 + 0])) >> 10)) &
                                  0x3ff) * 50);
                      if (pdo_max_tmp > pdo_max) {
                          pdo_max = pdo_max_tmp;
                          pdo_l = (((u16) buf[i * 4 + 1] << 8) | (buf[i * 4 + 0]));
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 19  

                          pdo_h = (((u16) buf[i * 4 + 3] << 8) | (buf[i * 4 + 2]));
                          context[port_id].sel_voltage_pdo_index = i;
                      }
                  }
                  #ifdef ANXDEBUG
                  ucsi_debug("maxV=%d, cnt %d index %d\n", pdo_max_tmp, obj_cnt,
                          context[port_id].sel_voltage_pdo_index);
                  #endif
                  if ((pdo_h & (3 << 14)) != (PDO_TYPE_BATTERY >> 16)) {
                      #ifdef ANXDEBUG
                      ucsi_debug("maxMa %d\n", (u16) ((pdo_l & 0x3ff) * 10));
                      #endif
                      /* less than 900mA */
                      if ((u16) ((pdo_l & 0x3ff) * 10) < MAX_REQUEST_CURRENT) {
                          pdo_max =
                              RDO_FIXED(context[port_id].sel_voltage_pdo_index + 1, (u16) ((pdo_l & 0x3ff) * 10),
                                        (u16) ((pdo_l & 0x3ff) * 10), 0);
                          pdo_max |= RDO_CAP_MISMATCH;
                          set_rdo_value(pdo_max & 0xff, (pdo_max >> 8) & 0xff,
                                        (pdo_max >> 16) & 0xff,
                                        (pdo_max >> 24) & 0xff);
                          return 1;
                      } else {
                          pdo_max =
                              RDO_FIXED(context[port_id].sel_voltage_pdo_index + 1,
                                        MAX_REQUEST_CURRENT, MAX_REQUEST_CURRENT,
                                        0);
                          set_rdo_value(pdo_max & 0xff, (pdo_max >> 8) & 0xff,
                                        (pdo_max >> 16) & 0xff,
                                        (pdo_max >> 24) & 0xff);
              
                          return 1;
                      }
                  } else {
                      pdo_max =
                          RDO_FIXED(context[port_id].sel_voltage_pdo_index + 1, MAX_REQUEST_CURRENT,
                                    MAX_REQUEST_CURRENT, 0);
                      set_rdo_value(pdo_max & 0xff, (pdo_max >> 8) & 0xff,
                                    (pdo_max >> 16) & 0xff, (pdo_max >> 24) & 0xff);
                      return 1;
                  }
                  #ifdef ANXDEBUG
                  ucsi_debug("RDO Mismatch !!!\n");
                  #endif
                  set_rdo_value(0x0A, 0x28, 0x00, 0x10);
              
                  return 0;
              }
              #endif
1141          
1142          static u32 change_bit_order(const u8 *pbuf)
1143          {
1144   1          return ((u32)pbuf[3] << 24) | ((u32)pbuf[2] << 16) 
1145   1              | ((u32)pbuf[1] << 8) | pbuf[0];
1146   1      }
1147          
1148          static u8 pd_check_requested_voltage()
1149          {
1150   1          if (!(context[port_id].ucsi_partner_rdo >> 28) || (context[port_id].ucsi_partner_rdo >> 28) > context[
             -port_id].pd_src_pdo_cnt) {
1151   2      #ifdef ANXDEBUG
                      ucsi_debug("rdo = %x, Requested RDO is %d, Provided RDO number is %d\n", context[port_id].ucsi_par
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 20  

             -tner_rdo, (u16)(context[port_id].ucsi_partner_rdo >> 28), (u8)context[port_id].pd_src_pdo_cnt);
              #endif
1154   2              return 0; /* Invalid index */
1155   2          }
1156   1      #ifdef ANXDEBUG
                  ucsi_debug("pdo_max = %x\n", (change_bit_order(context[port_id].pd_src_pdo + (((context[port_id].ucsi_
             -partner_rdo >> 28) - 1) * 4)) & 0x3ff));
              #endif
1159   1          /* check current ... */
1160   1          if (((context[port_id].ucsi_partner_rdo >> 10) & 0x3FF) > (change_bit_order(context[port_id].pd_src_pd
             -o + (((context[port_id].ucsi_partner_rdo >> 28) - 1) * 4)) & 0x3ff))//Update to pass TD.PD.SRC.E12 Reject Request
1161   1              return 0; /* too much op current */
1162   1          if ((context[port_id].ucsi_partner_rdo & 0x3FF) > (change_bit_order(context[port_id].pd_src_pdo + (((c
             -ontext[port_id].ucsi_partner_rdo >> 28) - 1) * 4)) & 0x3ff))//Update to pass TD.PD.SRC.E12 Reject Request
1163   1              return 0; /* too much max current */
1164   1      
1165   1          return 1;
1166   1      }
1167          
1168          void send_source_capability(void)
1169          {
1170   1          #ifdef ANX_OHO_DFP_ONLY
                  memcpy(context[port_id].pd_src_pdo, (u8 *)&dfp_caps, sizeof(dfp_caps));
                      #else
1173   1          #ifdef ECR_CHECKING
                  if ((supply_1500ma_port == port_id) && (supply_1500ma_flag == 1))
                      memcpy(context[port_id].pd_src_pdo, (u8 *)&src_caps, 4);
                  else
                  #endif
1178   1              memcpy(context[port_id].pd_src_pdo, (u8 *)&src_caps_default_ma, 4);
1179   1          #endif
1180   1          #ifdef EC_ANX_BIG_ENDIAN
1181   1          SWAP_DWORD(&context[port_id].pd_src_pdo);
1182   1          #endif
1183   1          //Fix JIRA LBT-410
1184   1          if ((context[port_id].data_operation_mode_uor & OP_DRP) &&
1185   1                      ((context[port_id].data_operation_mode_uom & OP_DRP))){
1186   2              if ((context[port_id].power_operation_mode_pdr & PW_DRP) &&
1187   2                              ((context[port_id].power_operation_mode_pdm & PW_DRP)))
1188   2                  context[port_id].pd_src_pdo[3] |=
1189   2                      PDO_FIXED_HIGH_BYTE_DATA_SWAP | PDO_FIXED_HIGH_BYTE_DUAL_ROLE;
1190   2              else
1191   2                  context[port_id].pd_src_pdo[3] |= PDO_FIXED_HIGH_BYTE_DATA_SWAP;
1192   2          } else {
1193   2              if ((context[port_id].power_operation_mode_pdr & PW_DRP) &&
1194   2                              ((context[port_id].power_operation_mode_pdm & PW_DRP)))
1195   2                  context[port_id].pd_src_pdo[3] |= PDO_FIXED_HIGH_BYTE_DUAL_ROLE;
1196   2              else
1197   2                  ;//default is no drp, no dual role
1198   2          }
1199   1          context[port_id].pd_src_pdo_cnt = 1;
1200   1          send_pd_msg(TYPE_CMD_SRC_CAP_1, (u8 *)&context[port_id].pd_src_pdo,
1201   1              4, SOP_TYPE);
1202   1          #ifdef ANXDEBUG
                  ucsi_debug("Resend 1.5A source caps byte 3 is %.bx.\n", context[port_id].pd_src_pdo[3]);
                  #endif
1205   1      }
1206          void send_sink_capability(void)
1207          {
1208   1          memcpy(context[port_id].pd_snk_pdo, (u8 *)&snk_cap, 8);
1209   1          #ifdef EC_ANX_BIG_ENDIAN
1210   1          SWAP_DWORD(&context[port_id].pd_snk_pdo);
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 21  

1211   1              SWAP_DWORD((u8 *)&context[port_id].pd_snk_pdo + 4);
1212   1          #endif
1213   1          //Fix JIRA LBT-410
1214   1          if ((context[port_id].data_operation_mode_uor & OP_DRP) &&
1215   1                      ((context[port_id].data_operation_mode_uom & OP_DRP))){
1216   2              if ((context[port_id].power_operation_mode_pdr & PW_DRP) &&
1217   2                              ((context[port_id].power_operation_mode_pdm & PW_DRP)))
1218   2                  context[port_id].pd_snk_pdo[3] |=
1219   2                      PDO_FIXED_HIGH_BYTE_DATA_SWAP | PDO_FIXED_HIGH_BYTE_DUAL_ROLE;
1220   2              else
1221   2                  context[port_id].pd_snk_pdo[3] |= PDO_FIXED_HIGH_BYTE_DATA_SWAP;
1222   2          } else {
1223   2              if ((context[port_id].power_operation_mode_pdr & PW_DRP) &&
1224   2                              ((context[port_id].power_operation_mode_pdm & PW_DRP)))
1225   2                  context[port_id].pd_snk_pdo[3] |= PDO_FIXED_HIGH_BYTE_DUAL_ROLE;
1226   2              else
1227   2                  ;//default is no drp, no dual role
1228   2          }
1229   1          #ifdef ANXDEBUG
                  ucsi_debug("Resend 1.5A sink caps, sink caps byte 3 is %.bx.\n",
                      context[port_id].pd_snk_pdo[3]);
                  #endif
1233   1          context[port_id].pd_snk_pdo_cnt = 2;
1234   1          send_pd_msg(TYPE_PWR_SNK_CAP, (u8 *)&context[port_id].pd_snk_pdo,
1235   1              8, SOP_TYPE);
1236   1      }
1237          void send_source_sink_capability(void)
1238          {
1239   1          send_sink_capability();
1240   1          send_source_capability();
1241   1      }
1242          #ifdef ECR_CHECKING
              static void Send_mismatch_source_caps(void)
              {
                  #ifdef ANXDEBUG
                  ucsi_debug("Send mismatch source caps, 1.5A source caps.\n");
                  #endif
                  supply_1500ma_flag = 1;
                  supply_1500ma_port = port_id;
              
                  send_source_capability();
              }
              #endif
1254          
1255          /*ChengLin: To integrate all recv_pd_xxxxxx_default_callback() functions to single one for reduce code siz
             -e*/
1256          static u8 Recv_PD_Commands_Default_Callback()
1257          {
1258   1      #ifdef ANXDEBUG
                  u8 *pdo;
                  u16 usb_vendor_id, usb_product_id;
              #endif
1262   1          
1263   1          l = 1; // 0: Fail, 1: Pass 
1264   1          
1265   1          if (TYPE_HARD_RST != recvd_msg_type())
1266   1              context[port_id].ct = CABLE_TYPE_C;
1267   1      
1268   1          /*ChengLin: Special Check for Specific Commands*/
1269   1          if(recvd_msg_type() == TYPE_PWR_SRC_CAP)
1270   1          {
1271   2              if ( recvd_msg_len()  %4 != 0)
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 22  

1272   2                  return 0;
1273   2          }
1274   1          else if(recvd_msg_type() == TYPE_PWR_SNK_CAP)
1275   1          {
1276   2          }
1277   1          else if(recvd_msg_type() == TYPE_PWR_OBJ_REQ)
1278   1          {
1279   2              if (recvd_msg_len()  != 4)
1280   2                  return 1;
1281   2          }
1282   1      
1283   1          switch(recvd_msg_type())
1284   1          {
1285   2              case TYPE_PWR_SRC_CAP: //0x00
1286   2                  #ifndef AUTO_RDO_ENABLE
                          build_rdo_from_source_caps_new(recvd_msg_len() /4, recvd_msg_buf());
                          set_rdo_value(context[port_id].ucsi_partner_rdo & 0xff,
                                    ((context[port_id].ucsi_partner_rdo >> 8) & 0xff),
                                    ((context[port_id].ucsi_partner_rdo >> 16) & 0xff),
                                    ((context[port_id].ucsi_partner_rdo >> 24) & 0xff))
                          send_pd_msg(TYPE_PWR_OBJ_REQ, &context[port_id].pd_rdo, 4, SOP_TYPE);
                          #endif
1294   2                  build_rdo_from_source_caps_new(recvd_msg_len() /4, recvd_msg_buf());
1295   2                  send_pd_msg(TYPE_GET_RDO, 0, 0, SOP_TYPE);
1296   2                  context[port_id].partner_pdo_length = recvd_msg_len() ;
1297   2                  context[port_id].partner_pdo_sink_or_source = 1; //partner as source
1298   2                  context[port_id].anx_power_role = 0;
1299   2                  /*voltage->0x7e:0xaf, current:0x7e:0xb1*/
1300   2                  context[port_id].anx_current_in_50ma = anx_read_reg(context[port_id].spi, 0xb1);
1301   2                  context[port_id].anx_voltage_in_100mv = anx_read_reg(context[port_id].spi, 0xaf);
1302   2                  #ifdef ReportNegotiatedPowerLevel
1303   2                  context[port_id].csc.csc.NegotiatedPowerLevel = 1;
1304   2                  #endif
1305   2                  #ifdef ReportSupportedProviderCap
1306   2                  context[port_id].csc.csc.SupportedProviderCap = 1;
1307   2                  #endif
1308   2                  #ifdef ReportExternalSupply
1309   2                  context[port_id].csc.csc.ExternalSupply = 1;
1310   2                  #endif
1311   2                  context[port_id].BatteryCharging = BCS_NOMINAL_CHARGING;
1312   2                  #ifdef ANXDEBUG
                          ucsi_debug("current:%x, voltage:%x, rdo :%lx, rdo length(%.bx)\n", (u16)context[port_id].anx_c
             -urrent_in_50ma,
                              (u16)context[port_id].anx_voltage_in_100mv, context[port_id].ucsi_partner_rdo, context[por
             -t_id].partner_pdo_length);
                          #endif
1316   2                  ucsi_async_notify_raise_up(100);
1317   2                  memcpy(context[port_id].partner_pdo, recvd_msg_buf(), min(VDO_SIZE, recvd_msg_len() ));
1318   2                  break;
1319   2              case TYPE_PWR_SNK_CAP://0x01
1320   2                  //received peer's sink caps, just store it in SINK_PDO array
1321   2                  context[port_id].partner_pdo_length = recvd_msg_len() ;
1322   2                  context[port_id].partner_pdo_sink_or_source = 0;
1323   2                  memcpy(context[port_id].partner_pdo, recvd_msg_buf(), min(VDO_SIZE, recvd_msg_len() ));
1324   2                  if(recvd_msg_len()  > VDO_SIZE)
1325   2                  {
1326   3                      l = 0;
1327   3                      break;
1328   3                  }
1329   2                  break;
1330   2              case TYPE_DP_SNK_IDENTITY://0x02
1331   2                  #ifdef ANXDEBUG
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 23  

                          pdo = (u8 *)recvd_msg_buf();
                          usb_vendor_id = (u16)pdo[1] << 8 | (u16)pdo[0];
                          usb_product_id = (u16)pdo[11] << 8 | (u16)pdo[10];
              
                          ucsi_debug("usb vendor id(0x%x), product id(0x%x).\n",
                          usb_vendor_id, usb_product_id);
                          #endif
1339   2                  break;
1340   2              case TYPE_SVID://0x03
1341   2                  break;
1342   2              case TYPE_ACCEPT://0x05
1343   2                  break;
1344   2              case TYPE_REJECT://0x06
1345   2                  break;
1346   2              case TYPE_PSWAP_REQ://0x10
1347   2                  context[port_id].power_role_swap_flag = 1;
1348   2                  context[port_id].anx_power_role = get_power_role();
1349   2                  context[port_id].csc.csc.PowerOperationMode = 1;
1350   2                  ucsi_async_notify_raise_up(50);
1351   2                  break;
1352   2              case TYPE_DSWAP_REQ://0x11
1353   2                  context[port_id].csc.csc.ConnectorPartner = 1;
1354   2                  if (get_data_role() == 1)
1355   2                      context[port_id].ucsi_connector_partner_type = CPT_UFP_ATTACHED;
1356   2                              else
1357   2                      context[port_id].ucsi_connector_partner_type = CPT_DFP_ATTACHED;
1358   2                  ucsi_async_notify_raise_up(50);
1359   2                  break;
1360   2              case TYPE_GOTO_MIN_REQ://0x12
1361   2                  break;
1362   2              case TYPE_DP_SNK_CFG:
1363   2                  break;
1364   2              case TYPE_DP_DISCOVER_MODES_INFO:
1365   2                  context[port_id].peer_svid_length += 4;
1366   2                  #ifdef ReportSupportedCAM
1367   2                  context[port_id].csc.csc.SupportedCAM = 1;
1368   2                  #endif
1369   2                  context[port_id].ac[context[port_id].peer_svid_length/4 - 1].svid = 0xFF01;
1370   2                  memcpy(&context[port_id].ac[context[port_id].peer_svid_length/4 - 1].mid, recvd_msg_buf(), 4);
1371   2                  break;
1372   2              case TYPE_DP_ALT_ENTER://0x19
1373   2                  send_pd_msg(TYPE_GET_DP_CONFIGURE, 0, 0, SOP_TYPE);
1374   2                  context[port_id].ConnectorPartner |= CP_ALT_MODE;
1375   2                  context[port_id].csc.csc.ConnectorPartner = 1;
1376   2                  #ifdef ReportSupportedCAM
1377   2                  context[port_id].csc.csc.SupportedCAM = 1;
1378   2                  #endif
1379   2                  ucsi_async_notify_raise_up(50);
1380   2                  break;
1381   2              case TYPE_DP_ALT_EXIT://0x1A
1382   2                  //TODO....
1383   2                  break;
1384   2              case TYPE_PWR_OBJ_REQ:  //0x16
1385   2                  //pdo = (u8 *)para;
1386   2      
1387   2                  if (recvd_msg_len() != 4)
1388   2                      break;
1389   2                  context[port_id].ucsi_partner_rdo = recvd_msg_buf()[0] | ((u32)recvd_msg_buf()[1] << 8) | ((u3
             -2)recvd_msg_buf()[2] << 16) | ((u32)recvd_msg_buf()[3] << 24);
1390   2                  #ifdef ECR_CHECKING
                          if ((context[port_id].anx_vbus_status == 1) &&
                                  (recvd_msg_buf()[3] & _BIT2) && supply_1500ma_flag == 0)
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 24  

                              Send_mismatch_source_caps();
                          #ifdef ANXDEBUG
                          ucsi_debug("RDO : %lx, vbus(%.bx), supply_flag(%.bx).\n",
                              context[port_id].ucsi_partner_rdo, context[port_id].anx_vbus_status, supply_1500ma_flag);
                          #endif
                          #endif
1399   2                  #ifdef ReportNegotiatedPowerLevel
1400   2                  context[port_id].csc.csc.NegotiatedPowerLevel = 1;
1401   2                  #endif
1402   2                  #ifdef ReportSupportedProviderCap
1403   2                  context[port_id].csc.csc.SupportedProviderCap = 1;
1404   2                  #endif
1405   2                  #ifdef AUTO_RDO_ENABLE
1406   2                  //ucsi_async_notify_raise_up(50);
1407   2                  break;
1408   2                  #endif
1409   2                  if (pd_check_requested_voltage()) {
1410   3                      l = send_pd_msg(TYPE_ACCEPT, NULL, 0, SOP_TYPE);
1411   3                  } else {
1412   3                      l = send_pd_msg(TYPE_REJECT, NULL, 0, SOP_TYPE);
1413   3                  }
1414   2                  context[port_id].downstream_pd_cap = 1;
1415   2                  break;
1416   2              case TYPE_GET_PPS_STS: //0x21
1417   2                  break;
1418   2              case TYPE_BATT_STS://0x24
1419   2                  break;
1420   2              case TYPE_ALERT: //0x25
1421   2                  /* Fix JIRA LBT-501 */
1422   2                  l = recvd_msg_buf()[2];
1423   2                  
1424   2                  if (recvd_msg_buf()[3] & 0x02) {
1425   3                      if (l & 0x1) {
1426   4                          k = 0x04;
1427   4                          send_pd_msg(TYPE_EXT_GET_BATT_STS,&k,1,SOP_TYPE);
1428   4                      }
1429   3                      if (l & 0x2) {
1430   4                          k = 0x05;
1431   4                          send_pd_msg(TYPE_EXT_GET_BATT_STS,&k,1,SOP_TYPE);
1432   4                      }
1433   3                      if (l & 0x4) {
1434   4                          k = 0x06;
1435   4                          send_pd_msg(TYPE_EXT_GET_BATT_STS,&k,1,SOP_TYPE);
1436   4                      }
1437   3                      if (l & 0x8) {
1438   4                          k = 0x07;
1439   4                          send_pd_msg(TYPE_EXT_GET_BATT_STS,&k,1,SOP_TYPE);
1440   4                      }
1441   3                      if (l & 0x10) {
1442   4                          k = 0x00;
1443   4                          send_pd_msg(TYPE_EXT_GET_BATT_STS,&k,1,SOP_TYPE);
1444   4                      }
1445   3                      if (l & 0x20) {
1446   4                          k = 0x01;
1447   4                          send_pd_msg(TYPE_EXT_GET_BATT_STS,&k,1,SOP_TYPE);
1448   4                      }
1449   3                      if (l & 0x40) {
1450   4                          k = 0x02;
1451   4                          send_pd_msg(TYPE_EXT_GET_BATT_STS,&k,1,SOP_TYPE);
1452   4                      }
1453   3                      if (l & 0x80) {
1454   4                          k = 0x03;
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 25  

1455   4                          send_pd_msg(TYPE_EXT_GET_BATT_STS,&k,1,SOP_TYPE);
1456   4                      }
1457   3                  } else {
1458   3                      send_pd_msg(TYPE_GET_STS, NULL, 0, SOP_TYPE);
1459   3                  }
1460   2                  break;
1461   2              #ifdef ANXREDRIVER
1462   2              case TYPE_DP_CONFIGURE: //0x2a  redriver control                
1463   2                  if ((context[port_id].pd_capability & PD_HAS_REDRIVER) &&
1464   2                        ((recvd_msg_buf()[0] != 0) || (recvd_msg_buf()[1] != 0) ||
1465   2                        (recvd_msg_buf()[2] != 0) || (recvd_msg_buf()[3] != 0)))
1466   2                      dp_configure_redriver(recvd_msg_buf()[1]);
1467   2                  /* LBT-540 */
1468   2                  anx_ucsi_pin_assignment_event(port_id, recvd_msg_buf()[1]);
1469   2                  break;
1470   2              #endif
1471   2              case TYPE_GET_SRC_CAP_EXT: //0x1d
1472   2                  //Fix JIRA LBT-501
1473   2                  send_pd_msg(TYPE_EXT_SRC_CAP_EXT, (unsigned char*)&pd_source_cap_extended, 24, SOP_TYPE);
1474   2                  break;
1475   2              case TYPE_GET_STS: //0x1e
1476   2                  send_pd_msg(TYPE_EXT_STS, (unsigned char*)&pd_status_data, 5, SOP_TYPE);
1477   2                  break;
1478   2              case TYPE_EXT_SRC_CAP_EXT: //0x30
1479   2                  break;
1480   2              case TYPE_GET_SINK_CAP_EXT:
1481   2                  /* Fix JIRA LBT-501 */
1482   2                  send_pd_msg(TYPE_EXT_SINK_CAP_EXT, (unsigned char*)&pd_sink_cap_extended, 24, SOP_TYPE);
1483   2                  break;
1484   2              case TYPE_EXT_STS://0x31        
1485   2                  break;
1486   2              case TYPE_EXT_GET_BATT_CAP://0x32
1487   2                  /* Fix JIRA LBT-501 */
1488   2                  if (recvd_msg_buf()[0] > 7)
1489   2                      send_pd_msg(TYPE_EXT_BATT_CAP, (unsigned char*)&(pd_battery_cap_invalid), 9, SOP_TYPE);
1490   2                  else
1491   2                      send_pd_msg(TYPE_EXT_BATT_CAP, (unsigned char*)&pd_battery_cap, 9, SOP_TYPE);
1492   2                  break;
1493   2              case TYPE_EXT_GET_BATT_STS://0x33
1494   2                  if(recvd_msg_buf()[0] > 7)
1495   2                      send_pd_msg(TYPE_BATT_STS, (unsigned char*)&(pd_battery_status_invalid), 4, SOP_TYPE);
1496   2                  else
1497   2                      send_pd_msg(TYPE_BATT_STS, (unsigned char*)&(pd_battery_status[recvd_msg_buf()[0]]), 4, SO
             -P_TYPE);
1498   2                  break;
1499   2              case TYPE_EXT_BATT_CAP://0x34
1500   2                  break;
1501   2              case TYPE_EXT_GET_MFR_INFO://0x35
1502   2                  /* Fix JIRA LBT-501 */
1503   2                  //RamDebug(0xAA); RamDebug(recvd_msg_buf()[0]);
1504   2                  if(recvd_msg_buf()[0] == 0)
1505   2                      send_pd_msg(TYPE_EXT_MFR_INFO, (unsigned char*)&pd_manufacturer_info_data, 26, SOP_TYPE);
1506   2                  else // 1:Battery, 2~255:Reserved
1507   2                      send_pd_msg(TYPE_NOT_SUPPORTED, NULL, 0, SOP_TYPE);
1508   2                  break;
1509   2              case TYPE_EXT_MFR_INFO: //0x36
1510   2                  break;
1511   2              case TYPE_GET_COUNTRY_INFO: //0x38
1512   2                  send_pd_msg(TYPE_EXT_COUNTRY_INFO, (unsigned char*)&pd_country_code_info, 8, SOP_TYPE);
1513   2                  break;          
1514   2              case TYPE_GET_COUNTRY_CODE: //0x39
1515   2                  send_pd_msg(TYPE_EXT_COUNTRY_CODE, (unsigned char*)&pd_country_code_data, 8, SOP_TYPE);
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 26  

1516   2                  break;
1517   2              case TYPE_EXT_COUNTRY_CODE:
1518   2                  break;
1519   2              case TYPE_EXT_COUNTRY_INFO:
1520   2                  break;
1521   2              case TYPE_EXT_PPS_STS://0x37        
1522   2                  break;
1523   2              case TYPE_EXT_SINK_CAP_EXT: //0x3a          
1524   2                  break;
1525   2              case TYPE_NOT_SUPPORTED: //0x1c
1526   2                  break;
1527   2              case TYPE_SOFT_RST:
1528   2                              RamDebug(0x33);
1529   2                  #ifdef ReportPDResetComplete
1530   2                              RamDebug(0x34);
1531   2                  context[port_id].csc.csc.PDResetComplete = 1;
1532   2                  ucsi_async_notify_raise_up(4);
1533   2                  #endif
1534   2                  break;
1535   2              case TYPE_HARD_RST:
1536   2                              RamDebug(0x35);
1537   2                  #ifdef ReportPDResetComplete
1538   2                  #ifdef ANXDEBUG
                              ucsi_debug("received hardware reset event.\n");
                          #endif
1541   2                  /* Fix LBT-541 */
1542   2                  if ((recvd_msg_len() == 0) || recvd_msg_buf()[0]& _BIT1) {
1543   3                      context[port_id].csc.csc.PDResetComplete = 1;
1544   3                      ucsi_async_notify_raise_up(4);
1545   3                                      RamDebug(0x36);
1546   3                      #ifdef ANXDEBUG
                              ucsi_debug("notify hardware reset event to ucsi.\n");
                              #endif
1549   3                  }
1550   2                  #endif
1551   2                  break;
1552   2              case TYPE_FR_SWAP: //0x1f
1553   2              default:
1554   2                  break;
1555   2          }
1556   1      
1557   1       return l;
1558   1      
1559   1      }
1560          
1561          /* Recieve response message's callback function.
1562            * it can be rewritten by customer just reimmplement this function,
1563            * through register_default_pd_message_callbacku_func  
1564            *  void *para : should be null
1565            *   para_len : 0
1566            * return:  0, fail;   1, success
1567            */
1568          static u8 Recv_PD_Cmd_Rsp_Default_Callback()
1569          {
1570   1          #ifdef ANXDEBUG
                  ucsi_debug("RESPONSE for %s is %s\n",
                      interface_to_str(RESPONSE_REQ_TYPE()),result_to_str(RESPONSE_REQ_RESULT()));
                  #endif
1574   1      
1575   1          switch(RESPONSE_REQ_TYPE()){
1576   2              case TYPE_DSWAP_REQ:
1577   2                  //need_notice_pd_cmd  =1;
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 27  

1578   2                  //usb_pd_cmd_status = RESPONSE_REQ_RESULT();
1579   2                  //dswap_response_got = 1;
1580   2      
1581   2                  context[port_id].csc.csc.ConnectorPartner = 1;
1582   2                  break;
1583   2                  
1584   2              case TYPE_PSWAP_REQ:
1585   2                  context[port_id].power_role_swap_flag = 1;
1586   2      
1587   2                  break;
1588   2              case TYPE_VCONN_SWAP_REQ:
1589   2                  //vswap_response_got = 1;
1590   2                  //need_notice_pd_cmd = 1;           
1591   2                  //usb_pd_cmd_status = RESPONSE_REQ_RESULT();
1592   2                  break;
1593   2              case TYPE_GOTO_MIN_REQ:
1594   2                  //gotomin_response_got = 1;
1595   2                  //need_notice_pd_cmd = 1;           
1596   2                  //usb_pd_cmd_status = RESPONSE_REQ_RESULT();
1597   2                  break;
1598   2              case TYPE_PWR_OBJ_REQ:
1599   2                  //rdo_response_got = 1;
1600   2                  //need_notice_pd_cmd = 1;           
1601   2                  //usb_pd_cmd_status = RESPONSE_REQ_RESULT();
1602   2                  break;
1603   2              case TYPE_SOFT_RST:
1604   2                  #ifdef ReportPDResetComplete
1605   2                  context[port_id].csc.csc.PDResetComplete = 1;
1606   2                  #endif
1607   2                  break;
1608   2              case TYPE_HARD_RST:
1609   2                  #ifdef ReportPDResetComplete
1610   2                  context[port_id].csc.csc.PDResetComplete = 1;
1611   2                  #endif
1612   2                  break;
1613   2                  
1614   2              default:
1615   2                  break;
1616   2          } 
1617   1      
1618   1          return 1;
1619   1      }
1620          
1621          /* Recieve Power Delivery Unstructured VDM message's callback function.
1622            * it can be rewritten by customer just reimmplement this function,
1623            * through register_default_pd_message_callbacku_func  
1624            *  void *para : in this function it means PDO pointer
1625            *   para_len : means PDO length
1626            * return:  0, fail;   1, success
1627            */
1628          static u8 Recv_PD_VDM_Defalut_Callback()
1629          {
1630   1              if ((recvd_msg_sop_type() == SOP_TYPE) && (recvd_msg_type() == TYPE_VDM)) {
1631   2              if (memcmp(svid, recvd_msg_buf(), 4) == 0) {
1632   3                  //Add customer self defined parse code here.
1633   3                  //
1634   3              } else {
1635   3                  /* Fix JIRA LBT-501 return unsupport msg */
1636   3                  send_pd_msg(TYPE_NOT_SUPPORTED, NULL, 0, SOP_TYPE);
1637   3              }
1638   2              return 1;
1639   2          }
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 28  

1640   1              
1641   1          if ((recvd_msg_sop_type() == SOP1_TYPE) && ((recvd_msg_buf()[0]&0x0F) == 0x1)) {
1642   2              if (recvd_msg_len() < 20) {
1643   3                  #ifdef ANXDEBUG
                          ucsi_debug("no cable vdo.\n");
                          #endif
1646   3                  return 1;
1647   3              }
1648   2      
1649   2              *(u32 *)&context[port_id].cv = ((u32)recvd_msg_buf()[19] << 24) | ((u32)recvd_msg_buf()[18] << 16)
             - |
1650   2                  ((u32)recvd_msg_buf()[17] << 8) | recvd_msg_buf()[16];
1651   2              return 1;
1652   2          }
1653   1      
1654   1          return 1;
1655   1      }
1656          
1657          static u8 Recv_Debug_Callback()
1658          {
1659   1          switch(recvd_msg_type()) {
1660   2          case TYPE_GET_VAR:
1661   2              if(recvd_msg_buf()[0] == 0) // idata
1662   2              {
1663   3                  #ifdef ANXDEBUG
                          ucsi_debug("read 0x%x idata = ",((u16)recvd_msg_buf()[1]<<8) + recvd_msg_buf()[2]);
                          #endif
1666   3              }
1667   2              else if(recvd_msg_buf()[0] == 1) // xdata
1668   2              {
1669   3                  #ifdef ANXDEBUG
                          ucsi_debug("read 0x%x xdata = ",((u16)recvd_msg_buf()[1]<<8) + recvd_msg_buf()[2]);
                          #endif
1672   3              }
1673   2              else if(recvd_msg_buf()[0] == IF_VAR_fw_var_reg) // REG_FW_VAR
1674   2              {
1675   3                  #ifdef ANXDEBUG
                          ucsi_debug("read REG_FW_VAR[0x%x] = ",((u16)recvd_msg_buf()[1]<<8) + recvd_msg_buf()[2]);
                          #endif
1678   3              }
1679   2              else if(recvd_msg_buf()[0] == IF_VAR_pd_src_pdo)
1680   2              {
1681   3                  #ifdef ANXDEBUG
                          ucsi_debug("read pd_src_pdo[0x%x] = ",((u16)recvd_msg_buf()[1]<<8) + recvd_msg_buf()[2]);
                          #endif
1684   3              }
1685   2              else if(recvd_msg_buf()[0] == IF_VAR_pd_snk_pdo)
1686   2              {
1687   3                  #ifdef ANXDEBUG
                          ucsi_debug("read pd_snk_pdo[0x%x] = ",((u16)recvd_msg_buf()[1]<<8) + recvd_msg_buf()[2]);
                          #endif
1690   3              }
1691   2              else if(recvd_msg_buf()[0] == IF_VAR_pd_rdo_bak)
1692   2              {
1693   3                  #ifdef ANXDEBUG
                          ucsi_debug("read pd_rdo_bak[0x%x] = ",((u16)recvd_msg_buf()[1]<<8) + recvd_msg_buf()[2]);
                          #endif
1696   3              }
1697   2              else if(recvd_msg_buf()[0] == IF_VAR_pd_rdo)
1698   2              {
1699   3                  #ifdef ANXDEBUG
                          ucsi_debug("read pd_rdo[0x%x] = ",((u16)recvd_msg_buf()[1]<<8) + recvd_msg_buf()[2]);
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 29  

                          #endif
1702   3              }
1703   2              else if(recvd_msg_buf()[0] == IF_VAR_DP_caps)
1704   2              {
1705   3                  #ifdef ANXDEBUG
                          ucsi_debug("read DP_cap[0x%x] = ",((u16)recvd_msg_buf()[1]<<8) + recvd_msg_buf()[2]);
                          #endif
1708   3              }
1709   2              else if(recvd_msg_buf()[0] == IF_VAR_configure_DP_caps) // REG_FW_VAR
1710   2              {
1711   3                  #ifdef ANXDEBUG
                          ucsi_debug("read configure_DP_caps[0x%x] = ",((u16)recvd_msg_buf()[1]<<8) + recvd_msg_buf()[2]
             -);
                          #endif
1714   3              }
1715   2              else if(recvd_msg_buf()[0] == IF_VAR_src_dp_status) // REG_FW_VAR
1716   2              {
1717   3                  #ifdef ANXDEBUG
                          ucsi_debug("read src_dp_status[0x%x] = ",((u16)recvd_msg_buf()[1]<<8) + recvd_msg_buf()[2]);
                          #endif
1720   3              }
1721   2              else if(recvd_msg_buf()[0] == IF_VAR_sink_svid_vdo) // REG_FW_VAR
1722   2              {
1723   3                  #ifdef ANXDEBUG
                          ucsi_debug("read sink_svid_vdo[0x%x] = ",((u16)recvd_msg_buf()[1]<<8) + recvd_msg_buf()[2]);
                          #endif
1726   3              }
1727   2              else if(recvd_msg_buf()[0] == IF_VAR_sink_identity) // REG_FW_VAR
1728   2              {
1729   3                  #ifdef ANXDEBUG
                          ucsi_debug("read sink_identity[0x%x] = ",((u16)recvd_msg_buf()[1]<<8) + recvd_msg_buf()[2]);
                          #endif
1732   3              }
1733   2              else // ?data
1734   2              {
1735   3                  #ifdef ANXDEBUG
                          ucsi_debug("read 0x%x ?data = ",((u16)recvd_msg_buf()[1]<<8) + recvd_msg_buf()[2]);
                          #endif
1738   3              }
1739   2              break;
1740   2          default:
1741   2              break;
1742   2          }
1743   1      
1744   1          return 1;
1745   1      }
1746          
1747          /*ChengLin: To integrate all send_xxx DATA Messages to one function for reduce code size*/
1748          static u8 Send_PD_Data_Messages(u8 type_msg, u8 *DataBuff, u8 size)
1749          {
1750   1          if ( NULL == DataBuff )
1751   1              return CMD_FAIL;
1752   1      
1753   1          if(type_msg == TYPE_DP_SNK_CFG)
1754   1          {
1755   2              memcpy(context[port_id].configure_DP_caps, DataBuff, 4);
1756   2              memcpy(context[port_id].InterfaceSendBuf + 2, DataBuff, 4); 
1757   2              memset(context[port_id].InterfaceSendBuf + 2 + 4, 0, 4);
1758   2              context[port_id].InterfaceSendBuf[0] = 4 + 4 + 1; // + cmd
1759   2          }
1760   1          else
1761   1          {
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 30  

1762   2              if (type_msg == TYPE_DP_SNK_IDENTITY)
1763   2                  memcpy(context[port_id].src_dp_caps, DataBuff, size);
1764   2              memcpy(context[port_id].InterfaceSendBuf + 2, DataBuff, size);
1765   2              context[port_id].InterfaceSendBuf[0] = size + 1; // + cmd
1766   2          }
1767   1          
1768   1          context[port_id].InterfaceSendBuf[1] = type_msg;
1769   1      
1770   1          return interface_send_msg();
1771   1      }
1772          
1773          /* Fix JIRA LBT-501 */
1774          static u8 Send_PD_Extend_Messages(u8 type_msg, u8 *buff_ref, u8 size, u8 type_sop)
1775          {
1776   1              if(type_msg == TYPE_EXT_PDFU_REQUEST || type_msg == TYPE_EXT_COUNTRY_INFO || type_msg == TYPE_EXT_COUNTRY
             -_CODE)
1777   1              {
1778   2                      if(size > 26)
1779   2                      {
1780   3                              context[port_id].InterfaceSendBuf[0] =(26 + 2 + 1) | (type_sop << 6); //        + ext_header + cmd
1781   3                              memcpy(context[port_id].InterfaceSendBuf + 4, buff_ref, 26);
1782   3                              
1783   3                              if(type_msg == TYPE_EXT_COUNTRY_INFO || type_msg == TYPE_EXT_COUNTRY_CODE)
1784   3                      anx_write_block_reg(context[port_id].PD_EMTB_slave_id, 0 , size-26, (unsigned char *)(buff
             -_ref+26));
1785   3                      }
1786   2                      else
1787   2                      {
1788   3                              context[port_id].InterfaceSendBuf[0] =(size + 2 + 1) | (type_sop << 6); //      + ext_header + cmd
1789   3                              memcpy(context[port_id].InterfaceSendBuf + 4, buff_ref, size);
1790   3                      }
1791   2      
1792   2              }
1793   1              else
1794   1              {
1795   2                      context[port_id].InterfaceSendBuf[0] = (size + 2 + 1) | (type_sop << 6); // + ext_header + cmd
1796   2                      memcpy(context[port_id].InterfaceSendBuf + 4, buff_ref, size);          
1797   2              }
1798   1              
1799   1              context[port_id].InterfaceSendBuf[1] = type_msg;
1800   1              USB_PD_EXT_HEADER((context[port_id].InterfaceSendBuf + 2), size,0,0,0);
1801   1      
1802   1          SWAP_WORD((context[port_id].InterfaceSendBuf + 2));
1803   1              return interface_send_msg();
1804   1      }
1805          
1806          
1807          unsigned char Send_Interface_Messages(u8 type_msg, u8 *DataBuff, u8 size)
1808          {
1809   1          memcpy(context[port_id].InterfaceSendBuf + 2, DataBuff, size);
1810   1          context[port_id].InterfaceSendBuf[0] = size + 1; // + cmd
1811   1          context[port_id].InterfaceSendBuf[1] = type_msg;
1812   1          return interface_send_msg();
1813   1      }
1814          /**
1815           * @desc:   The Interface AP set the VDM packet to Ohio 
1816           *
1817           * @param:  vdm:  object buffer pointer of VDM,
1818           *                              
1819           *                
1820           * 
1821           *                size: vdm packet size
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 31  

1822           *                  
1823           * @return:  0: success 1: fail 
1824           *  
1825           */ 
1826          
1827          /* Add VDM interface, LBT-437 */
1828           u8 send_vdm(u8 type_sop, u8 *vdm, unsigned char size)
1829          {
1830   1              if ( NULL == vdm )
1831   1                      return CMD_FAIL;
1832   1              if((size<4) || (size>28) || (size%4 != 0))
1833   1                      return CMD_FAIL;
1834   1      
1835   1              context[port_id].InterfaceSendBuf[0] = (size + 1) | (type_sop << 6); // + cmd
1836   1          context[port_id].InterfaceSendBuf[1] = TYPE_VDM;
1837   1          memcpy(context[port_id].InterfaceSendBuf + 2, vdm, size);
1838   1              return interface_send_msg();//updated to fix OHO-423
1839   1      }
1840          
1841          /*ChengLin: To integrate all send_xxx_ control messages to one function for reduce code size*/
1842          static u8 Send_PD_Control_Messages(u8 type_msg)
1843          {
1844   1          context[port_id].InterfaceSendBuf[1] = type_msg;
1845   1          return interface_send_ctr_msg(); 
1846   1      }
1847          
1848          #define cac_checksum(buf, len) {\
1849              j = 0;\
1850              for (k = 0; k < len; k++)\
1851                  j += *(buf + k);\
1852          }
1853          
1854          
1855          u8 send_pd_msg(PD_MSG_TYPE type,
1856                  u8 *buf, u8 size, u8 type_sop)
1857          {
1858   1          #ifdef ANXDEBUG
                  ucsi_debug("SendMSG ->%s: \n", interface_to_str(type));
                  #endif
1861   1          #if 1
1862   1          switch (type) {
1863   2              //Send Control Messages
1864   2              case TYPE_GET_DP_SNK_CAP: //send 4      
1865   2              case TYPE_ACCEPT://send 5   
1866   2              case TYPE_REJECT://send 6
1867   2              case TYPE_GET_SRC_CAP://send 9
1868   2              case TYPE_GET_PD_STATUS://send 17   
1869   2              case TYPE_GET_SNK_CAP://0x1B
1870   2              case TYPE_GET_SRC_CAP_EXT://send 1d
1871   2              case TYPE_GET_STS://send 1e
1872   2              case TYPE_FR_SWAP_SIGNAL://send 20  
1873   2              case TYPE_GET_PPS_STS: // send 21
1874   2              case TYPE_GET_COUNTRY_CODE://send 22
1875   2              case TYPE_GET_SINK_CAP_EXT://send 23
1876   2              case TYPE_NOT_SUPPORTED:
1877   2              case TYPE_SOFT_RST://send f1
1878   2              case TYPE_HARD_RST://send f2        
1879   2                  Send_PD_Control_Messages(type);
1880   2                  break;
1881   2              case TYPE_GET_RDO:
1882   2              case TYPE_GET_DP_CONFIGURE:
1883   2              case TYPE_PSWAP_REQ://send 10
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 32  

1884   2              case TYPE_DSWAP_REQ://send 11
1885   2              case TYPE_GOTO_MIN_REQ://send 12
1886   2              case TYPE_VCONN_SWAP_REQ://send 13      
1887   2                  if(Send_PD_Control_Messages(type) == CMD_SUCCESS)
1888   2                      l = CMD_SUCCESS;
1889   2                  else
1890   2                      l = CMD_FAIL;
1891   2                  break;
1892   2      
1893   2              //Send Data Messages
1894   2              case TYPE_PWR_SRC_CAP: //send 0
1895   2              case TYPE_PWR_SNK_CAP: //send 1
1896   2              case TYPE_DP_SNK_IDENTITY: //send 2
1897   2              case TYPE_SVID: //send 3
1898   2              case TYPE_SET_SNK_DP_CAP: //send 8
1899   2              case TYPE_DP_SNK_CFG://send 15
1900   2              case TYPE_BATT_STS://send 24
1901   2              case TYPE_ALERT://send 25   
1902   2              case TYPE_GET_COUNTRY_INFO://send 26
1903   2              case TYPE_GET_VAR://send 0xfc
1904   2              case TYPE_SET_VAR://send 0xfd
1905   2              case TYPE_CMD_SRC_CAP_1:
1906   2                  l = Send_PD_Data_Messages(type, buf, size);
1907   2                  break;
1908   2              case TYPE_PWR_OBJ_REQ://send 16
1909   2                  if(Send_PD_Data_Messages(type, buf, size) == CMD_SUCCESS)
1910   2                      l = CMD_SUCCESS;
1911   2                  else
1912   2                      l = CMD_FAIL;
1913   2                  break;
1914   2      
1915   2              //Send VDM Messages
1916   2              case TYPE_VDM://send 14
1917   2                  l =  send_vdm(type_sop, buf, size);
1918   2                  break;
1919   2              case TYPE_I2C_MASTER_WRITE: //send 0x3e
1920   2                  Send_Interface_Messages(type, buf, size);
1921   2                  break;
1922   2      
1923   2              //Send Extend Messages 
1924   2              case TYPE_EXT_SRC_CAP_EXT: //send 30 //Added by ChengLin
1925   2              case TYPE_EXT_STS: //send 31 //Added by ChengLin
1926   2              case TYPE_EXT_SINK_CAP_EXT://send 3a //Added by ChengLin
1927   2              case TYPE_EXT_PPS_STS: //send 37 //Added by ChengLin
1928   2              case TYPE_EXT_GET_BATT_CAP://send 32   size = 1
1929   2              case TYPE_EXT_GET_BATT_STS://send 33
1930   2              case TYPE_EXT_BATT_CAP://send 34
1931   2              case TYPE_EXT_GET_MFR_INFO://send 35
1932   2              case TYPE_EXT_MFR_INFO://send 36
1933   2              case TYPE_EXT_COUNTRY_INFO://send 38
1934   2              case TYPE_EXT_COUNTRY_CODE://send 39
1935   2              case TYPE_EXT_PDFU_REQUEST://send 3b
1936   2                  Send_PD_Extend_Messages(type,buf,size,type_sop);
1937   2                  break;
1938   2              default:
1939   2                  #ifdef ANXDEBUG
                          ucsi_debug("unknown type %2X\n", type);
                          #endif
1942   2                  l = CMD_FAIL;
1943   2                  break;
1944   2          }
1945   1      #endif
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 33  

1946   1            return l;
1947   1      }
1948          
1949          
1950          /**
1951           * @desc:   The Interface that AP handle the specific USB PD command from Ohio 
1952           *
1953           * @param: 
1954           *      type: PD message type, define enum PD_MSG_TYPE. 
1955           *      buf: the sepecific paramter pointer according to the message type:
1956           *                      eg: when AP update its source capability type=TYPE_PWR_SRC_CAP, 
1957           *          "buf" contains the content of PDO object,its format USB PD spec
1958           *                      customer can easily packeted it through PDO_FIXED_XXX macro:
1959           *                     default5Vsafe 5V, 0.9A fixed --> PDO_FIXED(5000,900, PDO_FIXED_FLAGS) 
1960           *                size: the paramter ponter's content length, if buf is null, it should be 0 
1961           *                  
1962           * @return:  0: success 1: fail 
1963           *  
1964           */ 
1965          static u8 dispatch_rcvd_pd_msg()
1966          {
1967   1          switch (recvd_msg_type()) {
1968   2              case TYPE_VDM: //0x14
1969   2                  l = Recv_PD_VDM_Defalut_Callback();
1970   2                  break;
1971   2              case TYPE_EXT_PDFU_RESPONSE: //0x3c
1972   2                  break;
1973   2              case TYPE_RESPONSE_TO_REQ://0xf0
1974   2                  l =  Recv_PD_Cmd_Rsp_Default_Callback();           
1975   2                      break;
1976   2              case TYPE_GET_VAR://0xfc
1977   2                  l = Recv_Debug_Callback();     
1978   2                  break;
1979   2              default:
1980   2                  l = Recv_PD_Commands_Default_Callback();
1981   2                  break;
1982   2          }
1983   1          
1984   1          return l;
1985   1      }
1986          
1987          
1988          static void pd_cc_status_default_func(u8 cc_status)
1989          {
1990   1          /* cc status */
1991   1          #ifdef ANXDEBUG
                  ucsi_debug("cc status %x\n", (u16)cc_status);
                  #endif
1994   1          context[port_id].power_op_mode = PO_USB_DEFAULT;
1995   1          role = get_data_role();
1996   1              context[port_id].anx_data_role = role;
1997   1      
1998   1          /* LBT-540 */
1999   1          anx_ucsi_cc_status_event(port_id, cc_status);
2000   1      
2001   1          if (role == 0)
2002   1              context[port_id].ucsi_connector_partner_type = CPT_DFP_ATTACHED;
2003   1          else
2004   1              context[port_id].ucsi_connector_partner_type = CPT_UFP_ATTACHED;
2005   1      
2006   1          switch ((cc_status & 0xF)) {
2007   2          case 1:
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 34  

2008   2              switch (((cc_status >> 4) & 0xF)) {
2009   3              case 0:
2010   3              // CC1 Rd
2011   3                  //UFP, CC2 Open
2012   3                  context[port_id].ucsi_connector_partner_type = CPT_UFP_ATTACHED;
2013   3                  break;
2014   3              case 1:
2015   3                  //CC2 Rd, Debug
2016   3                  context[port_id].ucsi_connector_partner_type = CPT_CAB_DEBUG_ACC;
2017   3                  break;
2018   3              case 2:
2019   3                  //CC2 Ra
2020   3                  context[port_id].ucsi_connector_partner_type = CPT_CAB_UFP_ATTACHED;
2021   3                  break;
2022   3              }
2023   2              break;
2024   2          case 2:
2025   2              switch (((cc_status >> 4) & 0xF)) {
2026   3              case 0:
2027   3              //CC1 Ra
2028   3                  //UFP, CC2 Open
2029   3                  context[port_id].ucsi_connector_partner_type = CPT_CAB_NO_UFP_ATTACHED;
2030   3                  break;
2031   3              case 1:
2032   3                  //CC2 Rd, Debug
2033   3                  context[port_id].ucsi_connector_partner_type = CPT_CAB_UFP_ATTACHED;
2034   3                  break;
2035   3              case 2:
2036   3                  //CC2 Ra
2037   3                  context[port_id].ucsi_connector_partner_type = CPT_AUDIO_ACC;
2038   3                  break;
2039   3              }
2040   2              break;
2041   2          case 0:
2042   2              switch (((cc_status >> 4) & 0xF)) {
2043   3              case 1:
2044   3              //CC1 Open
2045   3                  //CC2 Rd
2046   3                  context[port_id].ucsi_connector_partner_type = CPT_UFP_ATTACHED;
2047   3                  break;
2048   3              case 2:
2049   3                      //CC2 Ra
2050   3                  context[port_id].ucsi_connector_partner_type = CPT_CAB_NO_UFP_ATTACHED;
2051   3                  break;
2052   3              case 0:
2053   3                  //context[port_id].ucsi_connector_partner_type = CPT_RESERVED;
2054   3                  break;
2055   3              }
2056   2              break;
2057   2          case 0x04:
2058   2              context[port_id].power_op_mode = PO_USB_DEFAULT;
2059   2              break;
2060   2          case 0x08:
2061   2              context[port_id].power_op_mode = PO_TYPE_C_1_5A;
2062   2              break;
2063   2          case 0x0c:
2064   2              context[port_id].power_op_mode = PO_TYPE_C_3A;
2065   2              break;
2066   2          }
2067   1      
2068   1          switch (((cc_status >> 4) & 0xF)) {
2069   2          case 0x04:
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 35  

2070   2              context[port_id].power_op_mode = PO_USB_DEFAULT;
2071   2              break;
2072   2          case 0x08:
2073   2              context[port_id].power_op_mode = PO_TYPE_C_1_5A;
2074   2              break;
2075   2          case 0x0c:
2076   2              context[port_id].power_op_mode = PO_TYPE_C_3A;
2077   2              break;
2078   2          }
2079   1      
2080   1      }
2081          
2082          static u8 interface_send_msg()
2083          {
2084   1          cac_checksum(context[port_id].InterfaceSendBuf, send_msg_len()+1);
2085   1          context[port_id].InterfaceSendBuf[send_msg_len() + 1] = 0 - j; //cmd + checksum
2086   1          len = send_msg_len() + 2;
2087   1          c = anx_read_reg(context[port_id].spi, InterfaceSendBuf_Addr);
2088   1          // retry
2089   1          if(c) {
2090   2              count = 250;
2091   2              while(count) { 
2092   3                  mdelay(2);
2093   3                  c = anx_read_reg(context[port_id].spi, InterfaceSendBuf_Addr);
2094   3                  if (c == 0)
2095   3                      break;
2096   3                  count--;
2097   3              }
2098   2          }
2099   1          if (c == 0) {
2100   2              anx_write_block_reg(context[port_id].spi, InterfaceSendBuf_Addr+1 , len-1, &context[port_id].Inter
             -faceSendBuf[1]);
2101   2              anx_write_reg(context[port_id].spi,InterfaceSendBuf_Addr, context[port_id].InterfaceSendBuf[0]);
2102   2          } else {
2103   2              #ifdef ANXDEBUG
                      ucsi_debug("Tx Buf Full\n");
                      #endif
2106   2              return CMD_FAIL;
2107   2          }
2108   1      
2109   1          return CMD_SUCCESS;
2110   1      }
2111          
2112          static u8 interface_send_ctr_msg()
2113          {
2114   1          context[port_id].InterfaceSendBuf[0] = 1;
2115   1          context[port_id].InterfaceSendBuf[2] = 0-(context[port_id].InterfaceSendBuf[0]+context[port_id].Interf
             -aceSendBuf[1]);//cac_checksum(InterfaceSendBuf, 1 + 1); //cmd + checksum
2116   1          len = 3;
2117   1          c = anx_read_reg(context[port_id].spi, InterfaceSendBuf_Addr);
2118   1          // retry
2119   1          if(c) {
2120   2              count = 250;
2121   2              while(count) { 
2122   3                 mdelay(1);
2123   3                 c = anx_read_reg(context[port_id].spi, InterfaceSendBuf_Addr);
2124   3                 if (c == 0)
2125   3                  break;
2126   3                 count--;
2127   3              }
2128   2          }
2129   1          if (c == 0) {
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 36  

2130   2              anx_write_block_reg(context[port_id].spi, InterfaceSendBuf_Addr+1 , len-1, &context[port_id].Inter
             -faceSendBuf[1]);
2131   2              anx_write_reg(context[port_id].spi,InterfaceSendBuf_Addr, context[port_id].InterfaceSendBuf[0]);
2132   2          } else {
2133   2              #ifdef ANXDEBUG
                      ucsi_debug("Tx Buf Full\n");
                      #endif
2136   2              return CMD_FAIL;
2137   2          }
2138   1      
2139   1          return CMD_SUCCESS;
2140   1      }
2141          
2142          void dp_alt_enter_mode()
2143          {
2144   1          Send_PD_Data_Messages(TYPE_DP_ALT_ENTER, enter_exit_svid, 4);
2145   1      }
2146          
2147          void dp_alt_exit_mode()
2148          {
2149   1          Send_PD_Data_Messages(TYPE_DP_ALT_EXIT, enter_exit_svid, 4);
2150   1      }
2151          
2152          static u8 interface_recvd_msg()
2153          {
2154   1          #ifdef ANX_I2C_BUFF_FAST_READ
                  anx_read_block_reg(context[port_id].spi, InterfaceRecvBuf_Addr, 7, (u8 *)context[port_id].InterfaceRec
             -vBuf);
                  #else
2157   1          anx_read_block_reg(context[port_id].spi, InterfaceRecvBuf_Addr, 32, (u8 *)context[port_id].InterfaceRe
             -cvBuf);
2158   1          #endif
2159   1          if (context[port_id].InterfaceRecvBuf[0]!=0) {
2160   2              #ifdef ANX_I2C_BUFF_FAST_READ
                      if (recvd_msg_len() > 4)
                          anx_read_block_reg(context[port_id].spi, InterfaceRecvBuf_Addr+7, recvd_msg_len()-4, context[p
             -ort_id].InterfaceRecvBuf + 7);
                      #endif
2164   2              anx_write_reg(context[port_id].spi,InterfaceRecvBuf_Addr,0);
2165   2              j = 0;
2166   2              for(i = 0; i < recvd_msg_len() + 2 + 1; i++) {
2167   3                  j += context[port_id].InterfaceRecvBuf[i];
2168   3              }
2169   2              if(j == 0) {
2170   3                  return CMD_SUCCESS;
2171   3              } else {
2172   3                  #ifdef ANXDEBUG
                          ucsi_debug("checksum error: \n");
                          #endif
2175   3              }
2176   2          }
2177   1          return CMD_FAIL;
2178   1      }
2179          
2180          static void handle_intr_vector()
2181          {
2182   1          if (interface_recvd_msg() == CMD_SUCCESS)
2183   1          {
2184   2              #ifdef ANXDEBUG
                      ucsi_debug("rev <- %s\n", interface_to_str((PD_MSG_TYPE)context[port_id].InterfaceRecvBuf[1]));
                      #endif
2187   2              dispatch_rcvd_pd_msg();
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 37  

2188   2          }
2189   1      }
2190          
2191          #ifdef PATCH_NOT_CALIBRATED_CHIP
2192          #define ANALOG_CTRL_6                           0xA6
2193          #define ADC_CTRL_2                              0xC0
2194          #define EFUSE_CTRL_10                           0x7C
2195          #define EFUSE_CTRL_11                           0x7D
2196          #define EFUSE_PROGRAM_DONE_CLR _BIT7
2197          #define EFUSE_READ_DONE_CLR _BIT6
2198          #define EFUSE_READ_DONE _BIT4
2199          #define EFUSE_READ_DATA_0                       0x8D
2200          void eFuseRead(unsigned char offset, unsigned char len, unsigned char *buf)
2201          {
2202   1              anx_read_block_reg(context[port_id].spi,EFUSE_READ_DATA_0+offset,len,buf);
2203   1      }
2204          unsigned char isCalibrated()
2205          {
2206   1        unsigned char buf[3];
2207   1        eFuseRead(0,3,buf);
2208   1        if(!buf[0] || !buf[1] || !buf[2])
2209   1              return 0;
2210   1        return 1;
2211   1      }
2212          #endif
2213          static u8 wait_ocm_ready(u8 fource_use_pd_20)
2214          {
2215   1          count = 3200;
2216   1      
2217   1          do {
2218   2              count--;
2219   2          } while(!(anx_read_reg(context[port_id].spi, R_RAM_CTRL)&BOOT_LOAD_DONE));
2220   1      
2221   1         #ifdef PATCH_NOT_CALIBRATED_CHIP
2222   1              c = anx_read_reg(context[port_id].spi, 0x95);
2223   1         if(!isCalibrated())
2224   1         {
2225   2         #ifdef ANXDEBUG
                      ucsi_debug("Not calibrate chip.\n");
                 #endif
2228   2               anx_write_reg(context[port_id].addr, RING_OSC_CTRL, 0xb7); //27M clock
2229   2             if (c >= 0xAC && c != 0xFF) {
2230   3               anx_write_reg(context[port_id].addr, ADC_CTRL_2, 0x26);  ////adc                AA: 0x0f    AC:0x26
2231   3             }else{
2232   3          anx_write_reg(context[port_id].addr, ADC_CTRL_2, 0x0f);  //adc
2233   3              }
2234   2          anx_write_reg(context[port_id].addr, ANALOG_CTRL_6, 0x11);  //5.1K
2235   2         }
2236   1         #endif
2237   1          // configure OCM init use PD2.0 
2238   1          if(fource_use_pd_20)
2239   1              anx_write_reg(context[port_id].spi, PD_REV_INIT, 0x01);
2240   1          else
2241   1              anx_write_reg(context[port_id].spi, PD_REV_INIT, 0x00);
2242   1      
2243   1          do{
2244   2              if(!count)
2245   2              {
2246   3                  #ifdef ANXDEBUG
                          ucsi_debug("ocm not ready!\n");
                          #endif
2249   3                  break;
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 38  

2250   3              }
2251   2              count--;
2252   2              k = anx_read_reg(context[port_id].spi, OCM_VERSION_REG);
2253   2          } while((k == 0));
2254   1      
2255   1      #ifdef ANXDEBUG
                  ucsi_debug("ocm ready(%d)!\n",(3200-count));
              #endif
2258   1         
2259   1          return((k & BOOT_LOAD_DONE) ? 1:0);
2260   1      }
2261          code unsigned char pdss_src_pdo[4] = {
2262              /*5V 1.5A dual-role data-swap usb-comm */
2263              0x96,0x90,0x01,0x26
2264          };
2265          
2266          void send_initialized_setting()
2267          {
2268   1              RamDebug(0x77);
2269   1          switch (context[port_id].anx_initial_status) {
2270   2          case INIT_STAGE_1:
2271   2      #ifdef ANXDEBUG
                      ucsi_debug("Sending srouce capability\n");
              #endif
2274   2              //send_source_capability();
2275   2              context[port_id].anx_initial_status++;
2276   2              break;
2277   2         case INIT_STAGE_2:
2278   2              #ifdef ANXDEBUG
                      ucsi_debug("Sending sink capability\n");
                      #endif
2281   2      
2282   2              //send_sink_capability();
2283   2              context[port_id].anx_initial_status++;
2284   2              break;
2285   2          case INIT_STAGE_3:
2286   2              #ifdef ANXDEBUG
                      ucsi_debug("Sending sink identity\n");
                      #endif
2289   2      
2290   2              /* send TYPE_DP_SNK_IDENTITY init setting */
2291   2              send_pd_msg(TYPE_DP_SNK_IDENTITY, &snk_identity,
2292   2                     sizeof(snk_identity), SOP_TYPE);
2293   2              context[port_id].anx_initial_status++;
2294   2              break;
2295   2          case INIT_STAGE_4:
2296   2              #ifdef ANXDEBUG
                      ucsi_debug("Sending svid\n");
                      #endif
2299   2              context[port_id].anx_initial_status++;
2300   2              break;
2301   2          case INIT_STAGE_5:
2302   2              //send_pd_msg(TYPE_SET_VAR,set_variable_1,5,0);
2303   2              //send_pd_msg(TYPE_SET_SNK_DP_CAP, dp_source_dp_caps, 4, SOP_TYPE);
2304   2              context[port_id].anx_initial_status++;
2305   2              break;
2306   2          case 55:
2307   2              context[port_id].anx_initial_status++;
2308   2              RamDebug(0x20);
2309   2              #ifdef ANXDEBUG
                      ucsi_debug("___________  data operation mode is %.bx.\n",
                          context[port_id].data_operation_mode_uom);
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 39  

                      #endif
2313   2              RamDebug(context[port_id].data_operation_mode_uom);
2314   2              #if 1
2315   2              if ((context[port_id].data_operation_mode_uom == 0) ||
2316   2                      (context[port_id].data_operation_mode_uom & OP_DRP))
2317   2                  break;
2318   2              switch (get_data_role()) {
2319   3              case 1: //DFP
2320   3                  role = OP_DFP;
2321   3                  RamDebug(0x1);
2322   3                  break;
2323   3              case 0: //UFP
2324   3                  role = OP_UFP;
2325   3                  RamDebug(0x2);
2326   3                  break;
2327   3              }
2328   2              if (context[port_id].data_operation_mode_uom & role)
2329   2                  break;
2330   2              RamDebug(0x40);
2331   2              //send_pd_msg(TYPE_DSWAP_REQ, 0, 0, SOP_TYPE);
2332   2              /* fix JIRA LBT-552 */
2333   2              chip_power_down(port_id);
2334   2              anx_initial_context(port_id);
2335   2              #endif
2336   2              break;
2337   2          case 56:
2338   2              context[port_id].anx_initial_status ++;
2339   2              #ifdef ANXDEBUG
                      ucsi_debug("___________  power operation mode is %.bx.\n",
                          context[port_id].power_operation_mode_pdm);
                      #endif
2343   2              if ((context[port_id].power_operation_mode_pdm == 0) ||
2344   2                      (context[port_id].power_operation_mode_pdm & PW_DRP))
2345   2                  break;
2346   2              switch (get_power_role()) {
2347   3              case 1: //PW_PROVIDER
2348   3                  role = PW_PROVIDER;
2349   3                  break;
2350   3              case 0: //PW_CONSUMER
2351   3                  role = PW_CONSUMER;
2352   3                  break;
2353   3              }
2354   2              if (context[port_id].power_operation_mode_pdm & role)
2355   2                  break;
2356   2              send_pd_msg(TYPE_PSWAP_REQ, 0, 0, SOP_TYPE);
2357   2              break;
2358   2          case 80:
2359   2              context[port_id].anx_initial_status = 0;
2360   2              //Fix JIRA LBT-404
2361   2              #ifdef ANX_SEND_GET_SOURCE_CAPS
                      if (request_src_caps_flag[port_id] == 1) {
                          request_src_caps_flag[port_id] = 0;
                          send_pd_msg(TYPE_GET_SRC_CAP, 0, 0, SOP_TYPE);
                                      RamDebug(0x88);
                      }
                      #endif
2368   2              context[port_id].enable_report_power_on = 1;
2369   2              break;
2370   2          default:
2371   2              context[port_id].anx_initial_status++;
2372   2              break;
2373   2          case 0:
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 40  

2374   2              break;
2375   2          }
2376   1      
2377   1      }
2378          
2379          static void drp_toggle_enable() 
2380          {     
2381   1              c = anx_read_reg(context[port_id].spi, 0x95);
2382   1          if (context[port_id].data_operation_mode_uom & OP_DFP) {
2383   2              anx_write_reg(context[port_id].addr, TCPC_ROLE_CONTROL, 0x5); //CC with  Rp + 1.5A
2384   2              #ifdef ANXDEBUG
                      ucsi_debug("-------  set tcpc role as Rp(0x5), reg 0xaa(%.bx)\n", c);
                      #endif
2387   2              RamDebug(0xdd);
2388   2          } else if (context[port_id].data_operation_mode_uom & OP_UFP) {
2389   2              anx_write_reg(context[port_id].addr, TCPC_ROLE_CONTROL, 0xA); //CC with  RD
2390   2              #ifdef ANXDEBUG
                      ucsi_debug("-------  set tcpc role as Rd(0xa), reg 0xaa(%.bx)\n", c);
                      #endif
2393   2              RamDebug(0xdc);
2394   2          } else {
2395   2              RamDebug(0xdb);
2396   2              anx_write_reg(context[port_id].addr, ANALOG_CTRL_10, 0x80);
2397   2              anx_write_reg(context[port_id].addr, TCPC_ROLE_CONTROL, 0x4A); //CC with  RD
2398   2              #ifdef ANXDEBUG
                      ucsi_debug("-------  set tcpc role as Rd + DRP en(0x4A), %.bx chip\n", c);
                      #endif
2401   2             if (c >= 0xAC && c != 0xFF) {     
2402   3                      anx_write_reg(context[port_id].addr,TCPC_COMMAND , 0x99);  //DRP en
2403   3              } else {
2404   3                  anx_write_reg(context[port_id].addr, ANALOG_CTRL_1, 
2405   3                      (anx_read_reg(context[port_id].addr, ANALOG_CTRL_1) | TOGGLE_CTRL_MODE | R_TOGGLE_ENABLE))
             -; 
2406   3                  anx_write_reg(context[port_id].addr, ANALOG_CTRL_1,
2407   3                      (anx_read_reg(context[port_id].addr, ANALOG_CTRL_1) | R_LATCH_TOGGLE_ENABLE)); 
2408   3                  }
2409   2              }
2410   1      }
2411          
2412          static void pd_ovp_set()
2413          {
2414   1          /* disable VBUS protection */
2415   1          anx_write_reg(context[port_id].addr, 0xcd, 0x80);
2416   1          count = (PD_MAX_VOLTAGE * (100/25)) + 32;
2417   1          anx_write_reg(context[port_id].addr, 0x76, count & 0xFF);
2418   1          anx_write_reg(context[port_id].addr, 0x77, (count >> 8) & 0xFF);
2419   1      
2420   1          /* clear interrupt */
2421   1          anx_write_reg(context[port_id].addr, 0x10, 0x80);
2422   1      
2423   1          /* enable VBUS protection */
2424   1          anx_write_reg(context[port_id].addr, 0xcd, 0xA0);
2425   1      }
2426          
2427          static void usb_pd_function_init()
2428          {
2429   1          wait_ocm_ready(0);
2430   1      
2431   1          #ifdef ANX_OVP_RE_SET
                  pd_ovp_set();
                  #endif
2434   1          //anx_write_reg(context[port_id].spi, MAX_VOLTAGE, PD_MAX_VOLTAGE);
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 41  

2435   1          //anx_write_reg(context[port_id].spi, MAX_POWER, PD_MAX_POWER);
2436   1          anx_write_reg(context[0].spi, MAX_VOLTAGE, 0x32);
2437   1          anx_write_reg(context[0].spi, MAX_POWER, 0x1E);
2438   1              #if Two_PD_Chip
                      anx_write_reg(context[1].spi, MAX_VOLTAGE, 0x32);       // 5V
                  anx_write_reg(context[1].spi, MAX_POWER, 0x1E);             // 15W
                      #endif
2442   1      
2443   1          /*Minimum Power in 500mW units*/
2444   1          anx_write_reg(context[port_id].spi, MIN_POWER, PD_MIN_POWER);
2445   1          #if (PD_MAX_INSTANCE == 2)
                  if (context[0].anx_power_status == 0 && context[1].anx_power_status == 0)
                      random_data = (timer1msCount % 256);
                  anx_write_reg(context[port_id].addr, 0xef, random_data);
                  #endif
2450   1          k = 0;
2451   1          /*
2452   1              * bit 0: enable unstructure VDM(fix self charging) 
2453   1              * bit 1: dead battery mode, OCM maximum delay 200ms
2454   1              * bit 3 & 2 : 00:vsafe 0v, 01:vsafe 1v, 10:vsafe 2v, 11:vsafe 3v
2455   1              */
2456   1          k = k | 0x3;
2457   1              k = k | (0x1 << 2);
2458   1          if (anx_read_reg(context[port_id].spi, OCM_VERSION_REG) < 0x11)
2459   1              anx_write_reg(context[port_id].addr, 0xee, k);
2460   1          else
2461   1              anx_write_reg(context[port_id].addr, 0xf0, k);
2462   1      
2463   1          k = anx_read_reg(context[port_id].spi, FIRMWARE_CTRL);
2464   1          /* Default enable auto pd mode */
2465   1          #ifdef ANXDEBUG
                  ucsi_debug("enable auto pd function\n");
                  #endif
2468   1          #ifdef AUTO_RDO_ENABLE
2469   1          k = k | auto_pd_en | high_voltage_for_same_power;
2470   1          #endif
2471   1          //Fix JIRA LBT-366
2472   1          k = k | 0x40;
2473   1          // trySrc_trySnk_setting
2474   1          k = k & (~(trysrc_en | trysnk_en));
2475   1      
2476   1          if((!context[port_id].trysnk_enable)&&(context[port_id].trysrc_enable)) {
2477   2              //k = k | trysrc_en;
2478   2              #ifdef ANXDEBUG
                      //ucsi_debug("Prefer Try.Src\n");
                      #endif
2481   2          } else if((!context[port_id].trysrc_enable) &&(context[port_id].trysnk_enable)) {
2482   2              //k = k | trysnk_en;
2483   2              #ifdef ANXDEBUG
                      //ucsi_debug("Prefer Try.Snk\n");
                      #endif
2486   2          } 
2487   1      
2488   1          anx_write_reg(context[port_id].spi, FIRMWARE_CTRL, k);
2489   1          //Disable OVP
2490   1          anx_write_reg(context[port_id].addr, 0xdd, 0xff);
2491   1          anx_write_reg(context[port_id].addr, 0xde, 0x03);
2492   1          //interrupt mask initial
2493   1          mdelay(2);
2494   1          /* LBT-539 */
2495   1          anx_write_reg(context[port_id].spi, INT_MASK,
2496   1              (anx_read_reg(context[port_id].spi, INT_MASK) &
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 42  

2497   1              (~CC_STATUS_CHANGE) & (~PR_CONSUMER_GOT_POWER)));
2498   1      
2499   1          // config OCM reply message
2500   1          anx_write_reg(context[port_id].spi, PD_EXT_MSG_CTRL, 0xFF);
2501   1      
2502   1      }
2503          void chip_power_on(u8 port)
2504          {
2505   1          anx_read_reg(context[port].addr,TCPC_COMMAND);
2506   1          RamDebug(0xE3);
2507   1          #ifdef ANXDEBUG
                  ucsi_debug("-------  ppm_init power on port %.bx.\n", port);
                  #endif
2510   1      }
2511          void chip_power_down(u8 port) 
2512          {
2513   1          if (port == 0)
2514   1              RamDebug(0xE1);
2515   1          else
2516   1              RamDebug(0xF1);
2517   1          anx_write_reg(context[port].spi, OCM_CTRL_0,
2518   1              (anx_read_reg(context[port].spi, OCM_CTRL_0) | OCM_RESET));
2519   1          drp_toggle_enable() ;
2520   1          anx_write_reg(context[port].addr, TCPC_COMMAND , 0xff);  //lpower down
2521   1      }
2522          
2523          #ifdef ECR_CHECKING
              static void anx_ecr_checking(void)
              {
                  if (((context[port_id].ucsi_partner_rdo >> 10) & 0x3ff) == (PD_CURRENT_1500MA / 10)) {
                      supply_1500ma_flag = 0;
                      context[port_id].ucsi_partner_rdo = 0;
                  }
              }
              #endif
2532          
2533          static void anx_detect_voltage_and_current(u8 port){
2534   1              change_status = anx_read_reg(context[port].spi, SYSTEM_STSTUS);
2535   1          change_int = anx_read_reg(context[port_id].spi, CHANGE_INT);
2536   1          #ifdef ANXDEBUG
                  ucsi_debug("port[%.bx], system_status[%.bx], int_status[%.bx].\n",
                      port, change_status, change_int);
                  #endif
2540   1          if (change_status & _BIT4) {
2541   2              self_charging_error = 1;
2542   2              return;
2543   2          }
2544   1      
2545   1              if (((change_status & VBUS_STATUS) == 0) || (change_int & PR_CONSUMER_GOT_POWER)) {
2546   2                      context[port].anx_power_role = 0;
2547   2              context[port].BatteryCharging = BCS_NOMINAL_CHARGING;
2548   2                      context[port].anx_current_in_50ma = anx_read_reg(context[port].spi, 0xb1);
2549   2                      context[port].anx_voltage_in_100mv = anx_read_reg(context[port].spi, 0xaf);
2550   2                      if ((context[port].anx_current_in_50ma == 0) || (context[port].anx_voltage_in_100mv == 0)) {
2551   3                              change_status = anx_read_reg(context[port].spi, NEW_CC_STATUS);
2552   3                              pd_cc_status_default_func(change_status);
2553   3                              context[port].anx_voltage_in_100mv = 50;
2554   3                              switch (context[port].power_op_mode) {
2555   4                              default:
2556   4                              case PO_USB_DEFAULT:
2557   4                                      context[port].anx_current_in_50ma = 10;
2558   4                                      break;
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 43  

2559   4                              case PO_TYPE_C_1_5A:
2560   4                                      context[port].anx_current_in_50ma = 30;
2561   4                                      break;
2562   4                              case PO_TYPE_C_3A:
2563   4                                      context[port].anx_current_in_50ma = 60;
2564   4                                      break;
2565   4                              }
2566   3                      }
2567   2              } else {
2568   2              context[port].BatteryCharging = BCS_NOT_CHARGING;
2569   2                      context[port].anx_power_role = 1;
2570   2              }
2571   1      }
2572          void anx_dead_battery_checking_2(u8 port)
2573          {
2574   1          if (context[port].anx_power_status == 0) {
2575   2                      change_status = anx_read_reg(context[port].spi, NEW_CC_STATUS);
2576   2                      if (change_status == 0)
2577   2                              return; //return if no cc connection
2578   2                              context[port].anx_power_status = 1;
2579   2                      }
2580   1              anx_detect_voltage_and_current(port);
2581   1      }
2582          
2583          void anx_dead_battery_checking_1()
2584          {
2585   1          for (i = 0; i < PD_MAX_INSTANCE; i++) {
2586   2              if (context[i].anx_power_status == 0) {
2587   3                  change_status = anx_read_reg(context[i].spi, NEW_CC_STATUS);
2588   3                  if (change_status != 0) {
2589   4                      context[i].anx_power_status = 1;
2590   4                      pd_cc_status_default_func(change_status);
2591   4                      change_status = anx_read_reg(context[i].spi, SYSTEM_STSTUS);
2592   4                      if (change_status & VBUS_CHANGE)
2593   4                          context[i].anx_power_role = 1;
2594   4                      else
2595   4                          //debug only
2596   4                          context[i].anx_power_role = 0;
2597   4      
2598   4                      if (change_status & _BIT4) {
2599   5                          self_charging_error = 1;
2600   5                          return;
2601   5                      }
2602   4      
2603   4                      if (context[i].anx_power_role == 0) {
2604   5                          context[i].anx_current_in_50ma = anx_read_reg(context[port_id].spi, 0xb1);
2605   5                          context[i].anx_voltage_in_100mv = anx_read_reg(context[port_id].spi, 0xaf);
2606   5                          if (context[i].anx_current_in_50ma == 0 ||
2607   5                                  context[i].anx_voltage_in_100mv == 0) {
2608   6                              context[i].anx_voltage_in_100mv = 50;
2609   6                              switch (context[port_id].power_op_mode) {
2610   7                              default:
2611   7                              case PO_USB_DEFAULT:
2612   7                                  context[i].anx_current_in_50ma = 10;
2613   7                                  break;
2614   7                              case PO_TYPE_C_1_5A:
2615   7                                  context[i].anx_current_in_50ma = 30;
2616   7                                  break;
2617   7                              case PO_TYPE_C_3A:
2618   7                                  context[i].anx_current_in_50ma = 60;
2619   7                                  break;
2620   7                              }
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 44  

2621   6                          }
2622   5                      }
2623   4                      #ifdef ANXDEBUG
                              ucsi_debug("%s:%d  --- voltage : %.bx, current : %.bx.\n",
                                  __func__, __LINE__, context[i].anx_voltage_in_100mv, context[i].anx_current_in_50ma);
                              #endif
2627   4                  }
2628   3              }
2629   2          }
2630   1      }
2631          void anx_alert_message_isr()
2632          {
2633   1          if (0 == context[port_id].anx_power_status) {
2634   2              if (anx_read_reg(context[port_id].spi, OCM_VERSION_REG) == 0x00) {
2635   3                              anx_write_reg(context[port_id].addr, 0x10, 0xFF);
2636   3                              anx_write_reg(context[port_id].addr, 0x11, 0xFF);
2637   3                              return;
2638   3              }
2639   2              }
2640   1      
2641   1          /* Fix JIRA LBT-501 */
2642   1          anx_read_block_reg(context[port_id].spi, CHANGE_INT, 2, &change_int);
2643   1          //change_status = anx_read_reg(context[port_id].spi, SYSTEM_STSTUS);
2644   1          anx_read_block_reg(context[port_id].addr, INTR_ALERT_0, 2, &intr_alert_0);
2645   1          //intr_alert_1 = anx_read_reg(context[port_id].addr, INTR_ALERT_1);
2646   1          //clear
2647   1          anx_write_reg(context[port_id].spi, CHANGE_INT, 0x00);
2648   1          anx_write_block_reg(context[port_id].addr, INTR_ALERT_0, 2, &intr_alert_0);
2649   1          //anx_write_reg(context[port_id].addr, INTR_ALERT_1, intr_alert_1);
2650   1      
2651   1          #ifdef ANXDEBUG
                  //ucsi_debug("\nalert 1 register is %x, change_status %x.\n", (u16)intr_alert_1, (u16)change_status);
                  #endif
2654   1          /* power on process */
2655   1          if(intr_alert_1 & INTR_INTP_POW_ON) {
2656   2              usb_pd_function_init();
2657   2              j = anx_read_reg(context[port_id].spi, OCM_VERSION_REG);
2658   2              k = anx_read_reg(context[port_id].spi, OCM_VERSION_REG + 1);
2659   2              if (port_id == 0) {
2660   3                  xEC_PDPort0MainVersion = j;
2661   3                  xEC_PDPort0SubVersion = k;
2662   3              } else {
2663   3                  xEC_PDPort1MainVersion = j;
2664   3                  xEC_PDPort1SubVersion = k;
2665   3              }
2666   2              #ifdef ANXDEBUG
                      ucsi_debug("\nliberty (port %.bx) power on, ocm version v%bx.%bx.%bx.\n",
                          port_id, (j>>4)&0xf, j&0xf, k);
                      #endif
2670   2      
2671   2              //send_initialized_setting();
2672   2              anx_initial_context(port_id);
2673   2              context[port_id].anx_power_status = 1;
2674   2              context[port_id].csc.csc.Connect = 1;
2675   2              context[port_id].ConnectorPartner = CP_USB;
2676   2              context[port_id].csc.csc.ConnectorPartner = 1;
2677   2              context[port_id].csc.csc.BatteryChargingStatus = 1;
2678   2              context[port_id].anx_initial_status = INIT_STAGE_1;
2679   2              //Fix JIRA LBT-215
2680   2                      send_pd_msg(TYPE_SVID, &svid, sizeof(svid), SOP_TYPE);
2681   2                      send_pd_msg(TYPE_SET_VAR,set_variable_1,5,0);
2682   2              //Fix JIRA LBT-411
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 45  

2683   2                      send_pd_msg(TYPE_SET_SNK_DP_CAP, dp_source_dp_caps, 4, SOP_TYPE);
2684   2              //Fix JIRA LBT-414
2685   2                      send_source_capability();
2686   2                      send_sink_capability();
2687   2              anx_ucsi_pin_assignment_event(port_id, SELECT_PIN_ASSIGMENT_U);
2688   2              //send_initialized_setting();
2689   2                  ucsi_async_notify_raise_up(150);
2690   2          }
2691   1          if (intr_alert_1 & INTR_INTP_POW_OFF) {
2692   2              if (port_id == 0)
2693   2                  RamDebug(0xE2);
2694   2              else
2695   2                  RamDebug(0xF2);
2696   2              chip_power_down(port_id);
2697   2              #ifdef ANXDEBUG
                      ucsi_debug("\nliberty(port %.bx) interrupt power off, alert0(%.bx), alert1(%.bx).\n",
                          port_id, intr_alert_0, intr_alert_1);
                      #endif
2701   2              context[port_id].anx_power_status = 0;
2702   2              anx_initial_context(port_id);
2703   2              context[port_id].csc.csc.Connect = 1;
2704   2              ucsi_async_notify_raise_up(2);
2705   2              //anx_vbus_ctrl(context[port_id].vbus_gpio, 0);
2706   2              #ifdef ECR_CHECKING
                      anx_ecr_checking();
                      #endif
2709   2              context[port_id].anx_vbus_status = 0;
2710   2              anx_ucsi_detach_event(port_id);
2711   2              return;
2712   2          }
2713   1      
2714   1          /*Received interface message*/
2715   1          if (intr_alert_0 & INTR_RECEIVED_MSG) {
2716   2              handle_intr_vector();
2717   2          }
2718   1          /*Received software interrupt*/
2719   1          if (intr_alert_0 & INTR_SOFTWARE_INT) {
2720   2              
2721   2              if (change_int & HPD_STATUS_CHANGE) {
2722   3                  context[port_id].hpd_status = change_status & HPD_STATUS;
2723   3                  /* LBT-540 */
2724   3                  anx_ucsi_hpd_event(port_id, context[port_id].hpd_status);
2725   3              }
2726   2      
2727   2              if (change_int & VBUS_CHANGE) {
2728   3                  context[port_id].csc.csc.PowerDirection = 1;
2729   3                  if (change_status & VBUS_CHANGE)
2730   3                  {
2731   4                      context[port_id].anx_vbus_status = 1;
2732   4                      context[port_id].anx_power_role = 1;
2733   4                      context[port_id].csc.csc.BatteryChargingStatus = 1;
2734   4                      context[port_id].BatteryCharging = BCS_NOT_CHARGING;
2735   4                      #ifdef ANXDEBUG
                              ucsi_debug("VBUS 5V OUT.\n");
                              #endif
2738   4                  }
2739   3                  else
2740   3                  {
2741   4                      //DISABLE_5V_VBUS_OUT();
2742   4                      #ifdef ANXDEBUG
                              ucsi_debug("VBUS change to input.\n");
                              #endif
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 46  

2745   4                      #ifdef SUP_VBUS_CTL
                              //anx_vbus_ctrl(context[port_id].vbus_gpio, 0);
                              #endif
2748   4                      context[port_id].anx_power_role = 0;
2749   4                      context[port_id].anx_vbus_status = 0;
2750   4                      #ifdef ReportExternalSupply
2751   4                      context[port_id].csc.csc.ExternalSupply = 1;
2752   4                      #endif
2753   4                      context[port_id].csc.csc.BatteryChargingStatus = 1;
2754   4                      context[port_id].BatteryCharging = BCS_NOMINAL_CHARGING;
2755   4                  }
2756   3                  ucsi_async_notify_raise_up(100);
2757   3              }
2758   2              if (change_int & CC_STATUS_CHANGE) {
2759   3                  change_status = anx_read_reg(context[port_id].spi, NEW_CC_STATUS);
2760   3                  if(plug_orientation(port_id))
2761   3                      context[port_id].cc_orientation = CC1_CONNECTED;
2762   3                  else
2763   3                      context[port_id].cc_orientation = CC2_CONNECTED;
2764   3                  /* LBT-540  */
2765   3                  pd_cc_status_default_func(change_status);
2766   3                  #ifdef ANXREDRIVER
2767   3                  if (context[port_id].pd_capability & PD_HAS_REDRIVER) {
2768   4                      if(context[port_id].mux_mode == NO_CONNECT) { //usb3.0 only mode at default
2769   5                          redriver_mux_control(USB3_1_CONNECTED, context[port_id].cc_orientation);
2770   5                          context[port_id].mux_mode = USB3_1_CONNECTED;
2771   5                      }
2772   4                  }
2773   3                  #endif
2774   3              }
2775   2          }
2776   1          
2777   1          anx_dead_battery_checking_2(port_id);
2778   1      }
2779          
2780          static void anx7447_context_initial()
2781          {
2782   1          //Addr select as : 0 0
2783   1          context[port_id].PD_standalone_slave_id1 = Liberty_i2c_address[port_id][0];
2784   1          context[port_id].PD_SPI_slave_id = Liberty_i2c_address[port_id][1];
2785   1          context[port_id].PD_EMTB_slave_id = Liberty_i2c_address[port_id][2];
2786   1          context[port_id].PD_EMRB_slave_id = Liberty_i2c_address[port_id][3];
2787   1      
2788   1          //context[port_id].alert_gpio = 1;
2789   1          #ifdef ANX_OHO_DFP_ONLY
                  context[port_id].dfp_only = 1;
                  #else
2792   1          context[port_id].dfp_only = 0;
2793   1          #endif
2794   1          context[port_id].pd_src_pdo_cnt = 2;
2795   1          context[port_id].anx_power_status = 0;
2796   1          context[port_id].sel_voltage_pdo_index = 0x2;
2797   1      
2798   1          context[port_id].pd_capability = PD_HAS_RETURN_STATUS | PD_HAS_SVID_MID | PD_HAS_CABLE_VDO;
2799   1          #ifdef ANXREDRIVER
2800   1          if (port_id == 1) {
2801   2              context[port_id].pd_capability |= PD_HAS_REDRIVER;
2802   2          }
2803   1          #endif
2804   1      
2805   1          context[port_id].error_count = 0;
2806   1      }
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 47  

2807          
2808          static void anx7447_pup_initial()
2809          {
2810   1          pup.alt_mode[0].SVID0 = 0xFF01; 
2811   1          pup.alt_mode[0].MID0 = 0x00000405; 
2812   1          pup.alt_mode_support_num = 1;
2813   1          pup.alt_mode_support_bitmap = 0;
2814   1          pup.current_alt_mode = 0;
2815   1      }
2816          
2817          /*
2818           * @desc   : ANX7447 ucsi module initialize all data structure.
2819           * @param  : none
2820           * @return :
2821           *           UCSI_COMMAND_SUCC : success
2822           *           UCSI_COMMAND_FAIL : fail
2823           */
2824          void anx7447_ucsi_init()
2825          {
2826   1      #ifdef ANXDEBUG
                  ucsi_debug("************************************************************\n");
              #endif
2829   1          //ucsi_debug("* %s:%d anx initialization, version %d.%d . *\n", __func__, __LINE__,
2830   1          //  ANX_UCSI_VERSION_MAJOR, ANX_UCSI_VERSION_MINOR);
2831   1          i = 0;
2832   1          anx7447_pup_initial();
2833   1          for (i = 0; i < PD_MAX_INSTANCE; i++) {
2834   2              port_id = i;
2835   2              anx7447_context_initial();
2836   2              context[i].InterfaceRecvBuf = &InterfaceRecvBuf[i];
2837   2              context[i].InterfaceSendBuf = &InterfaceSendBuf[i];
2838   2              context[i].connector_index = i+1;
2839   2          }
2840   1      
2841   1      }
2842          
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 48  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0283 (BEGIN)
0000         L?0644:
0000         L?0645:
0000 900000      E     MOV     DPTR,#port_id
0003 E0                MOVX    A,@DPTR
0004         L?0646:
0004 75F0BB            MOV     B,#0BBH
0007 A4                MUL     AB
0008 2400        E     ADD     A,#LOW context+0A8H
000A F582              MOV     DPL,A
000C E4                CLR     A
000D 3400        E     ADDC    A,#HIGH context+0A8H
000F F583              MOV     DPH,A
0011 020000      E     LJMP    ?C?PLDXDATA
0014         L?0647:
0014 900000      E     MOV     DPTR,#count
0017 74FF              MOV     A,#0FFH
0019 F5F0              MOV     B,A
001B 120000      E     LCALL   ?C?IILDX
001E         L?0648:
001E 900000      E     MOV     DPTR,#port_id
0021         L?0649:
0021 E0                MOVX    A,@DPTR
0022         L?0650:
0022 75F0BB            MOV     B,#0BBH
0025 A4                MUL     AB
0026 2400        E     ADD     A,#LOW context+0B6H
0028 F582              MOV     DPL,A
002A E4                CLR     A
002B 3400        E     ADDC    A,#HIGH context+0B6H
002D F583              MOV     DPH,A
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 22                RET     
0032         L?0651:
0032 E0                MOVX    A,@DPTR
0033         L?0652:
0033 04                INC     A
0034         L?0653:
0034 FF                MOV     R7,A
0035         L?0654:
0035 900000      E     MOV     DPTR,#port_id
0038 E0                MOVX    A,@DPTR
0039         L?0655:
0039 75F0BB            MOV     B,#0BBH
003C A4                MUL     AB
003D 2400        E     ADD     A,#LOW context+0ABH
003F F582              MOV     DPL,A
0041 E4                CLR     A
0042 3400        E     ADDC    A,#HIGH context+0ABH
0044 F583              MOV     DPH,A
0046 020000      E     LJMP    ?C?PLDXDATA
0049         L?0656:
0049         L?0657:
0049 900000      E     MOV     DPTR,#port_id
004C         L?0658:
004C E0                MOVX    A,@DPTR
004D         L?0659:
004D 75F0BB            MOV     B,#0BBH
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 49  

0050         L?0660:
0050 A4                MUL     AB
0051 2400        E     ADD     A,#LOW context+0B2H
0053 F582              MOV     DPL,A
0055 E4                CLR     A
0056 3400        E     ADDC    A,#HIGH context+0B2H
0058 F583              MOV     DPH,A
005A E0                MOVX    A,@DPTR
005B FF                MOV     R7,A
005C 22                RET     
005D         L?0661:
005D E0                MOVX    A,@DPTR
005E FF                MOV     R7,A
005F         L?0662:
005F 900000      E     MOV     DPTR,#port_id
0062 E0                MOVX    A,@DPTR
0063 75F0BB            MOV     B,#0BBH
0066 A4                MUL     AB
0067 22                RET     
0068         L?0663:
0068 120000      E     LCALL   ?C?CLDPTR
006B 541F              ANL     A,#01FH
006D 14                DEC     A
006E FE                MOV     R6,A
006F EF                MOV     A,R7
0070 75F0BB            MOV     B,#0BBH
0073 A4                MUL     AB
0074 2400        E     ADD     A,#LOW context+07BH
0076 F582              MOV     DPL,A
0078 E4                CLR     A
0079 3400        E     ADDC    A,#HIGH context+07BH
007B         L?0664:
007B F583              MOV     DPH,A
007D EE                MOV     A,R6
007E         L?0665:
007E F0                MOVX    @DPTR,A
007F         L?0666:
007F 900000      E     MOV     DPTR,#port_id
0082         L?0667:
0082 E0                MOVX    A,@DPTR
0083 FF                MOV     R7,A
0084 75F0BB            MOV     B,#0BBH
0087 A4                MUL     AB
0088 22                RET     
0089         L?0668:
0089 2400        E     ADD     A,#LOW context+09AH
008B F582              MOV     DPL,A
008D E4                CLR     A
008E 3400        E     ADDC    A,#HIGH context+09AH
0090 F583              MOV     DPH,A
0092 E0                MOVX    A,@DPTR
0093 FE                MOV     R6,A
0094 75F004            MOV     B,#04H
0097 900003            MOV     DPTR,#03H
009A 120000      E     LCALL   ?C?OFFXADD
009D 120000      E     LCALL   ?C?CLDOPTR
00A0 900000      E     MOV     DPTR,#pdo_max_tmp
00A3 F0                MOVX    @DPTR,A
00A4 900000      R     MOV     DPTR,#buf
00A7 120000      E     LCALL   ?C?PLDXDATA
00AA 75F004            MOV     B,#04H
00AD EE                MOV     A,R6
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 50  

00AE 900002            MOV     DPTR,#02H
00B1 120000      E     LCALL   ?C?OFFXADD
00B4 120000      E     LCALL   ?C?CLDOPTR
00B7 900000      E     MOV     DPTR,#pdo_max_tmp+01H
00BA F0                MOVX    @DPTR,A
00BB 900000      R     MOV     DPTR,#buf
00BE 120000      E     LCALL   ?C?PLDXDATA
00C1 EF                MOV     A,R7
00C2 75F0BB            MOV     B,#0BBH
00C5 A4                MUL     AB
00C6 2400        E     ADD     A,#LOW context+09AH
00C8 F582              MOV     DPL,A
00CA E4                CLR     A
00CB 3400        E     ADDC    A,#HIGH context+09AH
00CD F583              MOV     DPH,A
00CF E0                MOVX    A,@DPTR
00D0 FF                MOV     R7,A
00D1         L?0669:
00D1 75F004            MOV     B,#04H
00D4 900001            MOV     DPTR,#01H
00D7 120000      E     LCALL   ?C?OFFXADD
00DA 120000      E     LCALL   ?C?CLDOPTR
00DD 900000      E     MOV     DPTR,#pdo_max_tmp+02H
00E0 F0                MOVX    @DPTR,A
00E1 900000      R     MOV     DPTR,#buf
00E4 120000      E     LCALL   ?C?PLDXDATA
00E7 75F004            MOV     B,#04H
00EA EF                MOV     A,R7
00EB A4                MUL     AB
00EC F582              MOV     DPL,A
00EE 85F083            MOV     DPH,B
00F1 120000      E     LCALL   ?C?CLDOPTR
00F4 900000      E     MOV     DPTR,#pdo_max_tmp+03H
00F7 F0                MOVX    @DPTR,A
00F8         L?0670:
00F8 900000      E     MOV     DPTR,#pdo_max_tmp
00FB 020000      E     LJMP    ?C?LLDXDATA
00FE         L?0671:
00FE 900000      E     MOV     DPTR,#k
0101         L?0672:
0101 F0                MOVX    @DPTR,A
0102 7401              MOV     A,#01H
0104         L?0673:
0104 7B01              MOV     R3,#01H
0106         L?0674:
0106 7A00        E     MOV     R2,#HIGH k
0108 7900        E     MOV     R1,#LOW k
010A 900000      R     MOV     DPTR,#?_send_pd_msg?BYTE+04H
010D F0                MOVX    @DPTR,A
010E E4                CLR     A
010F A3                INC     DPTR
0110 F0                MOVX    @DPTR,A
0111 22                RET     
0112         L?0675:
0112         L?0676:
0112 900001            MOV     DPTR,#01H
0115         L?0677:
0115 E9                MOV     A,R1
0116 2402              ADD     A,#02H
0118 F9                MOV     R1,A
0119 E4                CLR     A
011A 3A                ADDC    A,R2
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 51  

011B FA                MOV     R2,A
011C 020000      E     LJMP    ?C?CLDOPTR
011F         L?0678:
011F 7814              MOV     R0,#014H
0121         L?0679:
0121 120000      E     LCALL   ?C?ULSHR
0124 7B32              MOV     R3,#032H
0126         L?0680:
0126 EE                MOV     A,R6
0127 5403              ANL     A,#03H
0129 FE                MOV     R6,A
012A E4                CLR     A
012B FD                MOV     R5,A
012C FC                MOV     R4,A
012D         L?0681:
012D FA                MOV     R2,A
012E F9                MOV     R1,A
012F F8                MOV     R0,A
0130 020000      E     LJMP    ?C?LMUL
0133         L?0682:
0133 E0                MOVX    A,@DPTR
0134 FE                MOV     R6,A
0135 75F0BB            MOV     B,#0BBH
0138 A4                MUL     AB
0139 2400        E     ADD     A,#LOW context+04H
013B F582              MOV     DPL,A
013D E4                CLR     A
013E 3400        E     ADDC    A,#HIGH context+04H
0140 F583              MOV     DPH,A
0142 EF                MOV     A,R7
0143 F0                MOVX    @DPTR,A
0144         L?0683:
0144 EE                MOV     A,R6
0145         L?0684:
0145 75F0BB            MOV     B,#0BBH
0148 A4                MUL     AB
0149 2400        E     ADD     A,#LOW context+03H
014B F582              MOV     DPL,A
014D E4                CLR     A
014E 3400        E     ADDC    A,#HIGH context+03H
0150 F583              MOV     DPH,A
0152 22                RET     
0153         L?0685:
0153 F583              MOV     DPH,A
0155 7401              MOV     A,#01H
0157         L?0686:
0157 F0                MOVX    @DPTR,A
0158         L?0687:
0158 EF                MOV     A,R7
0159         L?0688:
0159 75F0BB            MOV     B,#0BBH
015C A4                MUL     AB
015D         L?0689:
015D 2400        E     ADD     A,#LOW context+0A3H
015F F582              MOV     DPL,A
0161 E4                CLR     A
0162 3400        E     ADDC    A,#HIGH context+0A3H
0164 F583              MOV     DPH,A
0166 E0                MOVX    A,@DPTR
0167 22                RET     
0168         L?0690:
0168 F583              MOV     DPH,A
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 52  

016A EF                MOV     A,R7
016B         L?0691:
016B F0                MOVX    @DPTR,A
016C EE                MOV     A,R6
016D         L?0692:
016D 75F0BB            MOV     B,#0BBH
0170 A4                MUL     AB
0171         L?0693:
0171 2400        E     ADD     A,#LOW context+0A2H
0173 F582              MOV     DPL,A
0175 E4                CLR     A
0176 3400        E     ADDC    A,#HIGH context+0A2H
0178 F583              MOV     DPH,A
017A E0                MOVX    A,@DPTR
017B 22                RET     
017C         L?0694:
017C 900002            MOV     DPTR,#02H
017F         L?0695:
017F E9                MOV     A,R1
0180 2402              ADD     A,#02H
0182 F9                MOV     R1,A
0183 E4                CLR     A
0184 3A                ADDC    A,R2
0185 FA                MOV     R2,A
0186 020000      E     LJMP    ?C?CLDOPTR
0189         L?0696:
0189 900000      E     MOV     DPTR,#port_id
018C E0                MOVX    A,@DPTR
018D FB                MOV     R3,A
018E 75F0BB            MOV     B,#0BBH
0191 A4                MUL     AB
0192         L?0697:
0192 2400        E     ADD     A,#LOW context+09AH
0194 F582              MOV     DPL,A
0196 E4                CLR     A
0197 3400        E     ADDC    A,#HIGH context+09AH
0199 F583              MOV     DPH,A
019B E0                MOVX    A,@DPTR
019C 2401              ADD     A,#01H
019E FF                MOV     R7,A
019F E4                CLR     A
01A0 33                RLC     A
01A1 E4                CLR     A
01A2 FC                MOV     R4,A
01A3 FD                MOV     R5,A
01A4 EF                MOV     A,R7
01A5 5407              ANL     A,#07H
01A7 FF                MOV     R7,A
01A8 E4                CLR     A
01A9 FE                MOV     R6,A
01AA 781C              MOV     R0,#01CH
01AC 020000      E     LJMP    ?C?LSHL
01AF         L?0698:
01AF 7BFF              MOV     R3,#0FFH
01B1         L?0699:
01B1 7404              MOV     A,#04H
01B3         L?0700:
01B3 900000      R     MOV     DPTR,#?_send_pd_msg?BYTE+04H
01B6 F0                MOVX    @DPTR,A
01B7 E4                CLR     A
01B8 A3                INC     DPTR
01B9 F0                MOVX    @DPTR,A
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 53  

01BA 22                RET     
01BB         L?0701:
01BB 2400        E     ADD     A,#LOW context+01H
01BD F582              MOV     DPL,A
01BF E4                CLR     A
01C0 3400        E     ADDC    A,#HIGH context+01H
01C2         L?0702:
01C2 F583              MOV     DPH,A
01C4 E4                CLR     A
01C5         L?0703:
01C5 F0                MOVX    @DPTR,A
01C6 EF                MOV     A,R7
01C7 75F0BB            MOV     B,#0BBH
01CA A4                MUL     AB
01CB 22                RET     
01CC         L?0704:
01CC         L?0705:
01CC F583              MOV     DPH,A
01CE E0                MOVX    A,@DPTR
01CF FF                MOV     R7,A
01D0 900000      E     MOV     DPTR,#SWAP_BYTE
01D3         L?0706:
01D3 F0                MOVX    @DPTR,A
01D4 ED                MOV     A,R5
01D5 75F0BB            MOV     B,#0BBH
01D8 A4                MUL     AB
01D9 22                RET     
01DA         L?0707:
01DA         L?0708:
01DA E9                MOV     A,R1
01DB 2402              ADD     A,#02H
01DD F9                MOV     R1,A
01DE E4                CLR     A
01DF 3A                ADDC    A,R2
01E0 FA                MOV     R2,A
01E1 22                RET     
01E2         L?0709:
01E2 7B0A              MOV     R3,#0AH
01E4         L?0710:
01E4 E4                CLR     A
01E5         L?0711:
01E5 FA                MOV     R2,A
01E6 F9                MOV     R1,A
01E7 F8                MOV     R0,A
01E8 120000      E     LCALL   ?C?ULDIV
01EB         L?0712:
01EB EE                MOV     A,R6
01EC 5403              ANL     A,#03H
01EE FE                MOV     R6,A
01EF E4                CLR     A
01F0 FD                MOV     R5,A
01F1 FC                MOV     R4,A
01F2 22                RET     
01F3         L?0713:
01F3 900000      E     MOV     DPTR,#port_id
01F6 E0                MOVX    A,@DPTR
01F7 FB                MOV     R3,A
01F8         L?0714:
01F8 75F0BB            MOV     B,#0BBH
01FB A4                MUL     AB
01FC         L?0715:
01FC 2400        E     ADD     A,#LOW context+075H
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 54  

01FE F582              MOV     DPL,A
0200 E4                CLR     A
0201 3400        E     ADDC    A,#HIGH context+075H
0203 F583              MOV     DPH,A
0205 22                RET     
0206         L?0716:
0206 900000      R     MOV     DPTR,#DataBuff
0209         L?0717:
0209 E9                MOV     A,R1
020A 2402              ADD     A,#02H
020C F9                MOV     R1,A
020D E4                CLR     A
020E 3A                ADDC    A,R2
020F C8                XCH     A,R0
0210 E9                MOV     A,R1
0211 C8                XCH     A,R0
0212 FC                MOV     R4,A
0213 CD                XCH     A,R5
0214 EB                MOV     A,R3
0215 CD                XCH     A,R5
0216 020000      E     LJMP    ?C?PLDXDATA
0219         L?0718:
0219 7BFF              MOV     R3,#0FFH
021B         L?0719:
021B 7408              MOV     A,#08H
021D         L?0720:
021D 900000      R     MOV     DPTR,#?_send_pd_msg?BYTE+04H
0220 F0                MOVX    @DPTR,A
0221 E4                CLR     A
0222 A3                INC     DPTR
0223 F0                MOVX    @DPTR,A
0224 22                RET     
0225         L?0721:
0225         L?0722:
0225 7B00              MOV     R3,#00H
0227 7A00              MOV     R2,#00H
0229 7900              MOV     R1,#00H
022B E4                CLR     A
022C 900000      R     MOV     DPTR,#?_send_pd_msg?BYTE+04H
022F F0                MOVX    @DPTR,A
0230 A3                INC     DPTR
0231 F0                MOVX    @DPTR,A
0232 22                RET     
0233         L?0723:
0233 ED                MOV     A,R5
0234         L?0724:
0234 75F0BB            MOV     B,#0BBH
0237 A4                MUL     AB
0238         L?0725:
0238 2400        E     ADD     A,#LOW context+09EH
023A F582              MOV     DPL,A
023C E4                CLR     A
023D 3400        E     ADDC    A,#HIGH context+09EH
023F F583              MOV     DPH,A
0241 E0                MOVX    A,@DPTR
0242 22                RET     
0243         L?0726:
0243 120000      E     LCALL   ?C?CLDOPTR
0246         L?0727:
0246 7810              MOV     R0,#010H
0248         L?0728:
0248 FF                MOV     R7,A
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 55  

0249 E4                CLR     A
024A FC                MOV     R4,A
024B FD                MOV     R5,A
024C FE                MOV     R6,A
024D 020000      E     LJMP    ?C?LSHL
0250         L?0729:
0250 ED                MOV     A,R5
0251 75F0BB            MOV     B,#0BBH
0254 A4                MUL     AB
0255         L?0730:
0255 2400        E     ADD     A,#LOW context+09DH
0257 F582              MOV     DPL,A
0259 E4                CLR     A
025A 3400        E     ADDC    A,#HIGH context+09DH
025C F583              MOV     DPH,A
025E E0                MOVX    A,@DPTR
025F 22                RET     
0260         L?0731:
0260         L?0732:
0260 E0                MOVX    A,@DPTR
0261         L?0733:
0261 75F0BB            MOV     B,#0BBH
0264 A4                MUL     AB
0265         L?0734:
0265 2400        E     ADD     A,#LOW context+01H
0267 F582              MOV     DPL,A
0269 E4                CLR     A
026A 3400        E     ADDC    A,#HIGH context+01H
026C F583              MOV     DPH,A
026E 22                RET     
026F         L?0735:
026F E0                MOVX    A,@DPTR
0270 75F0BB            MOV     B,#0BBH
0273         L?0736:
0273 A4                MUL     AB
0274         L?0737:
0274 2400        E     ADD     A,#LOW context+072H
0276 F582              MOV     DPL,A
0278 E4                CLR     A
0279 3400        E     ADDC    A,#HIGH context+072H
027B F583              MOV     DPH,A
027D 22                RET     
027E         L?0738:
027E E0                MOVX    A,@DPTR
027F         L?0739:
027F 75F0BB            MOV     B,#0BBH
0282 A4                MUL     AB
0283         L?0740:
0283 2400        E     ADD     A,#LOW context
0285 F582              MOV     DPL,A
0287 E4                CLR     A
0288 3400        E     ADDC    A,#HIGH context
028A F583              MOV     DPH,A
028C 22                RET     
028D         L?0741:
028D EF                MOV     A,R7
028E 75F0BB            MOV     B,#0BBH
0291 A4                MUL     AB
0292 2400        E     ADD     A,#LOW context+07EH
0294 F9                MOV     R1,A
0295 7400        E     MOV     A,#HIGH context+07EH
0297         L?0742:
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 56  

0297 35F0              ADDC    A,B
0299 C8                XCH     A,R0
029A E9                MOV     A,R1
029B C8                XCH     A,R0
029C FC                MOV     R4,A
029D 7D01              MOV     R5,#01H
029F 22                RET     
02A0         L?0743:
02A0         L?0744:
02A0 2400        E     ADD     A,#LOW context+079H
02A2 F582              MOV     DPL,A
02A4 E4                CLR     A
02A5 3400        E     ADDC    A,#HIGH context+079H
02A7 F583              MOV     DPH,A
02A9 22                RET     
02AA         L?0745:
02AA         L?0746:
02AA 900000      R     MOV     DPTR,#type
02AD E0                MOVX    A,@DPTR
02AE A3                INC     DPTR
02AF         L?0747:
02AF FF                MOV     R7,A
02B0 120000      E     LCALL   ?C?PLDXDATA
02B3 900000      R     MOV     DPTR,#size
02B6 E0                MOVX    A,@DPTR
02B7 22                RET     
02B8         L?0748:
02B8 7BFF              MOV     R3,#0FFH
02BA 7418              MOV     A,#018H
02BC         L?0749:
02BC 900000      R     MOV     DPTR,#?_send_pd_msg?BYTE+04H
02BF F0                MOVX    @DPTR,A
02C0 E4                CLR     A
02C1 A3                INC     DPTR
02C2 F0                MOVX    @DPTR,A
02C3 22                RET     
02C4         L?0750:
02C4         L?0751:
02C4 EE                MOV     A,R6
02C5         L?0752:
02C5 75F0BB            MOV     B,#0BBH
02C8 A4                MUL     AB
02C9         L?0753:
02C9 2400        E     ADD     A,#LOW context+04H
02CB F582              MOV     DPL,A
02CD E4                CLR     A
02CE 3400        E     ADDC    A,#HIGH context+04H
02D0 22                RET     
02D1         L?0754:
02D1 ED                MOV     A,R5
02D2 75F0BB            MOV     B,#0BBH
02D5 A4                MUL     AB
02D6         L?0755:
02D6 2400        E     ADD     A,#LOW context+058H
02D8 F582              MOV     DPL,A
02DA E4                CLR     A
02DB 3400        E     ADDC    A,#HIGH context+058H
02DD F583              MOV     DPH,A
02DF 22                RET     
02E0         L?0756:
02E0 ED                MOV     A,R5
02E1 75F0BB            MOV     B,#0BBH
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 57  

02E4 A4                MUL     AB
02E5         L?0757:
02E5 2400        E     ADD     A,#LOW context+09H
02E7 F582              MOV     DPL,A
02E9 E4                CLR     A
02EA 3400        E     ADDC    A,#HIGH context+09H
02EC F583              MOV     DPH,A
02EE 22                RET     
02EF         L?0758:
02EF         L?0759:
02EF 900001            MOV     DPTR,#01H
02F2 020000      E     LJMP    ?C?CLDOPTR
02F5         L?0760:
02F5         L?0761:
02F5 120000      E     LCALL   ?C?CLDPTR
02F8 541F              ANL     A,#01FH
02FA 14                DEC     A
02FB 22                RET     
02FC         L?0762:
02FC         L?0763:
02FC 900002            MOV     DPTR,#02H
02FF 020000      E     LJMP    ?C?CLDOPTR
0302         L?0764:
0302 E0                MOVX    A,@DPTR
0303         L?0765:
0303 75F0BB            MOV     B,#0BBH
0306 A4                MUL     AB
0307         L?0766:
0307 2400        E     ADD     A,#LOW context+0B9H
0309 F582              MOV     DPL,A
030B E4                CLR     A
030C 3400        E     ADDC    A,#HIGH context+0B9H
030E F583              MOV     DPH,A
0310 22                RET     
0311         L?0767:
0311 ED                MOV     A,R5
0312 75F0BB            MOV     B,#0BBH
0315 A4                MUL     AB
0316         L?0768:
0316 2400        E     ADD     A,#LOW context+0A0H
0318 F582              MOV     DPL,A
031A E4                CLR     A
031B 3400        E     ADDC    A,#HIGH context+0A0H
031D F583              MOV     DPH,A
031F E0                MOVX    A,@DPTR
0320 22                RET     
0321         L?0769:
0321         L?0770:
0321 F583              MOV     DPH,A
0323 EE                MOV     A,R6
0324 F0                MOVX    @DPTR,A
0325         L?0771:
0325 900000      E     MOV     DPTR,#port_id
0328 E0                MOVX    A,@DPTR
0329 FF                MOV     R7,A
032A 25E0              ADD     A,ACC
032C 25E0              ADD     A,ACC
032E 22                RET     
032F         L?0772:
032F         L?0773:
032F 7808              MOV     R0,#08H
0331         L?0774:
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 58  

0331 FF                MOV     R7,A
0332 E4                CLR     A
0333 FC                MOV     R4,A
0334 FD                MOV     R5,A
0335 FE                MOV     R6,A
0336 020000      E     LJMP    ?C?LSHL
0339         L?0775:
0339 120000      E     LCALL   ?C?LLDXDATA
033C 781C              MOV     R0,#01CH
033E 120000      E     LCALL   ?C?ULSHR
0341 EF                MOV     A,R7
0342 24FF              ADD     A,#0FFH
0344 FF                MOV     R7,A
0345 EE                MOV     A,R6
0346 34FF              ADDC    A,#0FFH
0348 FE                MOV     R6,A
0349 ED                MOV     A,R5
034A 34FF              ADDC    A,#0FFH
034C FD                MOV     R5,A
034D EC                MOV     A,R4
034E 34FF              ADDC    A,#0FFH
0350 FC                MOV     R4,A
0351 E4                CLR     A
0352 7B04              MOV     R3,#04H
0354 22                RET     
0355         L?0776:
0355         L?0777:
0355 2400        E     ADD     A,#LOW context+0A5H
0357 F582              MOV     DPL,A
0359 E4                CLR     A
035A 3400        E     ADDC    A,#HIGH context+0A5H
035C F583              MOV     DPH,A
035E 22                RET     
035F         L?0778:
035F 75F0BB            MOV     B,#0BBH
0362 A4                MUL     AB
0363         L?0779:
0363 2400        E     ADD     A,#LOW context+0B8H
0365 F582              MOV     DPL,A
0367 E4                CLR     A
0368 3400        E     ADDC    A,#HIGH context+0B8H
036A F583              MOV     DPH,A
036C 22                RET     
036D         L?0780:
036D         L?0781:
036D F583              MOV     DPH,A
036F E4                CLR     A
0370 93                MOVC    A,@A+DPTR
0371 FE                MOV     R6,A
0372 EF                MOV     A,R7
0373 75F0BB            MOV     B,#0BBH
0376 A4                MUL     AB
0377 22                RET     
0378         L?0782:
0378         L?0783:
0378 E4                CLR     A
0379 FF                MOV     R7,A
037A FE                MOV     R6,A
037B FD                MOV     R5,A
037C EC                MOV     A,R4
037D 54C0              ANL     A,#0C0H
037F FC                MOV     R4,A
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 59  

0380 781E              MOV     R0,#01EH
0382 020000      E     LJMP    ?C?ULSHR
0385         L?0784:
0385 E9                MOV     A,R1
0386 2401              ADD     A,#01H
0388         L?0785:
0388 F9                MOV     R1,A
0389 E4                CLR     A
038A 3A                ADDC    A,R2
038B FA                MOV     R2,A
038C         L?0786:
038C 900000      E     MOV     DPTR,#?_i2c_write_block_reg_b?BYTE+03H
038F 020000      E     LJMP    ?C?PSTXDATA
0392         L?0787:
0392 E9                MOV     A,R1
0393 2404              ADD     A,#04H
0395 F9                MOV     R1,A
0396 E4                CLR     A
0397 3A                ADDC    A,R2
0398 C8                XCH     A,R0
0399 E9                MOV     A,R1
039A C8                XCH     A,R0
039B FC                MOV     R4,A
039C CD                XCH     A,R5
039D EB                MOV     A,R3
039E CD                XCH     A,R5
039F         L?0788:
039F 900000      R     MOV     DPTR,#buff_ref
03A2 020000      E     LJMP    ?C?PLDXDATA
03A5         L?0789:
03A5         L?0790:
03A5 F583              MOV     DPH,A
03A7 E0                MOVX    A,@DPTR
03A8 FE                MOV     R6,A
03A9 ED                MOV     A,R5
03AA 75F0BB            MOV     B,#0BBH
03AD A4                MUL     AB
03AE 22                RET     
03AF         L?0791:
03AF         L?0792:
03AF 2400        E     ADD     A,#LOW context+074H
03B1 F582              MOV     DPL,A
03B3 E4                CLR     A
03B4 3400        E     ADDC    A,#HIGH context+074H
03B6 F583              MOV     DPH,A
03B8 22                RET     
03B9         L?0793:
03B9         L?0794:
03B9 2400        E     ADD     A,#LOW context+0B1H
03BB F582              MOV     DPL,A
03BD E4                CLR     A
03BE 3400        E     ADDC    A,#HIGH context+0B1H
03C0 F583              MOV     DPH,A
03C2 22                RET     
03C3         L?0795:
03C3         L?0796:
03C3 EF                MOV     A,R7
03C4         L?0797:
03C4 900001            MOV     DPTR,#01H
03C7 020000      E     LJMP    ?C?CSTOPTR
03CA         L?0798:
03CA         L?0799:
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 60  

03CA 900000      E     MOV     DPTR,#pdo_max
03CD 120000      E     LCALL   ?C?LLDXDATA0
03D0 C3                CLR     C
03D1 020000      E     LJMP    ?C?ULCMP
03D4         L?0800:
03D4         L?0801:
03D4 2400        E     ADD     A,#LOW context+055H
03D6 F9                MOV     R1,A
03D7 7400        E     MOV     A,#HIGH context+055H
03D9 35F0              ADDC    A,B
03DB FA                MOV     R2,A
03DC 7B01              MOV     R3,#01H
03DE 22                RET     
03DF         L?0802:
03DF         L?0803:
03DF 2400        E     ADD     A,#LOW context+053H
03E1 F582              MOV     DPL,A
03E3 E4                CLR     A
03E4 3400        E     ADDC    A,#HIGH context+053H
03E6 F583              MOV     DPH,A
03E8 E0                MOVX    A,@DPTR
03E9 22                RET     
03EA         L?0804:
03EA         L?0805:
03EA 8FF0              MOV     B,R7
03EC 120000      E     LCALL   ?C?ISTPTR
03EF 900000      E     MOV     DPTR,#port_id
03F2 E0                MOVX    A,@DPTR
03F3 FF                MOV     R7,A
03F4 22                RET     
03F5         L?0806:
03F5 7BFF              MOV     R3,#0FFH
03F7 900000      R     MOV     DPTR,#?_send_pd_msg?BYTE+04H
03FA F0                MOVX    @DPTR,A
03FB E4                CLR     A
03FC A3                INC     DPTR
03FD F0                MOVX    @DPTR,A
03FE 22                RET     
03FF         L?0807:
03FF F0                MOVX    @DPTR,A
0400         L?0808:
0400 900000      R     MOV     DPTR,#buf
0403 020000      E     LJMP    ?C?PLDXDATA
0406         L?0809:
0406 E0                MOVX    A,@DPTR
0407 F582              MOV     DPL,A
0409 758300            MOV     DPH,#00H
040C 120000      E     LCALL   ?C?CLDOPTR
040F FF                MOV     R7,A
0410 900000      E     MOV     DPTR,#j
0413 E0                MOVX    A,@DPTR
0414 2F                ADD     A,R7
0415 F0                MOVX    @DPTR,A
0416 22                RET     
0417         L?0810:
0417         L?0811:
0417 2400        E     ADD     A,#LOW context+09AH
0419 F582              MOV     DPL,A
041B E4                CLR     A
041C 3400        E     ADDC    A,#HIGH context+09AH
041E F583              MOV     DPH,A
0420 22                RET     
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 61  

0421         L?0812:
0421         L?0813:
0421 2400        E     ADD     A,#LOW context+054H
0423 F582              MOV     DPL,A
0425 E4                CLR     A
0426 3400        E     ADDC    A,#HIGH context+054H
0428 F583              MOV     DPH,A
042A 22                RET     
042B         L?0814:
042B 7BFF              MOV     R3,#0FFH
042D 7E00              MOV     R6,#00H
042F 020000      E     LJMP    ?C?COPY
0432         L?0815:
0432         L?0816:
0432 2400        E     ADD     A,#LOW context+0A4H
0434 F582              MOV     DPL,A
0436 E4                CLR     A
0437 3400        E     ADDC    A,#HIGH context+0A4H
0439 F583              MOV     DPH,A
043B 22                RET     
043C         L?0817:
043C E0                MOVX    A,@DPTR
043D FF                MOV     R7,A
043E 900000      E     MOV     DPTR,#port_id
0441         L?0818:
0441 E0                MOVX    A,@DPTR
0442 FD                MOV     R5,A
0443 75F0BB            MOV     B,#0BBH
0446 A4                MUL     AB
0447 22                RET     
0448         L?0819:
0448 FF                MOV     R7,A
0449 E4                CLR     A
044A 33                RLC     A
044B FE                MOV     R6,A
044C E0                MOVX    A,@DPTR
044D C3                CLR     C
044E 9F                SUBB    A,R7
044F EE                MOV     A,R6
0450 6480              XRL     A,#080H
0452 F8                MOV     R0,A
0453 7480              MOV     A,#080H
0455 98                SUBB    A,R0
0456 22                RET     
0457         L?0820:
0457 900000      E     MOV     DPTR,#count
045A 74FF              MOV     A,#0FFH
045C F5F0              MOV     B,A
045E 120000      E     LCALL   ?C?IILDX
0461 900000      E     MOV     DPTR,#count
0464 E0                MOVX    A,@DPTR
0465 22                RET     
0466         L?0821:
0466 7B01              MOV     R3,#01H
0468         L?0822:
0468 900000      E     MOV     DPTR,#?_i2c_read_block_reg?BYTE+03H
046B 020000      E     LJMP    ?C?PSTXDATA
046E         L?0824:
046E         L?0825:
046E 900000      E     MOV     DPTR,#k
0471 EF                MOV     A,R7
0472 F0                MOVX    @DPTR,A
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 62  

0473 E0                MOVX    A,@DPTR
0474 22                RET     
0475         L?0826:
0475         L?0827:
0475 900000      E     MOV     DPTR,#i
0478 E0                MOVX    A,@DPTR
0479 04                INC     A
047A F0                MOVX    @DPTR,A
047B 22                RET     
047C         L?0828:
047C         L?0829:
047C 900000      R     MOV     DPTR,#pbuf
047F 020000      E     LJMP    ?C?PLDXDATA
0482         L?0830:
0482 2400        E     ADD     A,#LOW context+07AH
0484 F582              MOV     DPL,A
0486 E4                CLR     A
0487 3400        E     ADDC    A,#HIGH context+07AH
0489 F583              MOV     DPH,A
048B 7401              MOV     A,#01H
048D F0                MOVX    @DPTR,A
048E 22                RET     
048F         L?0831:
048F 7BFF              MOV     R3,#0FFH
0491 7A00        R     MOV     R2,#HIGH enter_exit_svid
0493 7900        R     MOV     R1,#LOW enter_exit_svid
0495 900000      R     MOV     DPTR,#?_Send_PD_Data_Messages?BYTE+04H
0498 7404              MOV     A,#04H
049A F0                MOVX    @DPTR,A
049B 22                RET     
049C         L?0832:
049C 7401              MOV     A,#01H
049E         L?0833:
049E F0                MOVX    @DPTR,A
049F 900000      E     MOV     DPTR,#port_id
04A2 E0                MOVX    A,@DPTR
04A3 FF                MOV     R7,A
04A4 22                RET     
04A5         L?0834:
04A5         L?0835:
04A5 900000      R     MOV     DPTR,#cc_status
04A8 E0                MOVX    A,@DPTR
04A9 C4                SWAP    A
04AA 540F              ANL     A,#0FH
04AC 22                RET     
04AD         L?0836:
04AD 2400        E     ADD     A,#LOW context+09FH
04AF F582              MOV     DPL,A
04B1 E4                CLR     A
04B2 3400        E     ADDC    A,#HIGH context+09FH
04B4 F583              MOV     DPH,A
04B6 E0                MOVX    A,@DPTR
04B7 22                RET     
04B8         L?0839:
04B8         L?0840:
04B8 900003            MOV     DPTR,#03H
04BB 020000      E     LJMP    ?C?CLDOPTR
04BE         L?0841:
04BE EF                MOV     A,R7
04BF FB                MOV     R3,A
04C0 EE                MOV     A,R6
04C1 5403              ANL     A,#03H
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 63  

04C3 FA                MOV     R2,A
04C4 E4                CLR     A
04C5 F9                MOV     R1,A
04C6 F8                MOV     R0,A
04C7 22                RET     
04C8         L?0842:
04C8 2400        E     ADD     A,#LOW context+055H
04CA F582              MOV     DPL,A
04CC E4                CLR     A
04CD 3400        E     ADDC    A,#HIGH context+055H
04CF F583              MOV     DPH,A
04D1 22                RET     
04D2         L?0843:
04D2 2400        E     ADD     A,#LOW context+06H
04D4 F582              MOV     DPL,A
04D6 E4                CLR     A
04D7 3400        E     ADDC    A,#HIGH context+06H
04D9 F583              MOV     DPH,A
04DB 22                RET     
04DC         L?0844:
04DC 2400        E     ADD     A,#LOW context+07DH
04DE F582              MOV     DPL,A
04E0 E4                CLR     A
04E1 3400        E     ADDC    A,#HIGH context+07DH
04E3 F583              MOV     DPH,A
04E5 22                RET     
04E6         L?0845:
04E6         L?0846:
04E6 900000      R     MOV     DPTR,#DataBuff
04E9 020000      E     LJMP    ?C?PLDXDATA
04EC         L?0847:
04EC 900000      E     MOV     DPTR,#count
04EF E4                CLR     A
04F0 F0                MOVX    @DPTR,A
04F1 A3                INC     DPTR
04F2 74FA              MOV     A,#0FAH
04F4 F0                MOVX    @DPTR,A
04F5 22                RET     
04F6         L?0848:
04F6 2400        E     ADD     A,#LOW context+0A1H
04F8 F582              MOV     DPL,A
04FA E4                CLR     A
04FB 3400        E     ADDC    A,#HIGH context+0A1H
04FD F583              MOV     DPH,A
04FF 22                RET     
             ; FUNCTION Com0283 (END)

             ; FUNCTION _result_to_str (BEGIN)
                                           ; SOURCE LINE # 715
;---- Variable 'result_type' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 716
                                           ; SOURCE LINE # 717
0000 EF                MOV     A,R7
0001 7008              JNZ     ?C0001
0003 7BFF              MOV     R3,#0FFH
0005 7A00        R     MOV     R2,#HIGH ?SC_0
0007 7900        R     MOV     R1,#LOW ?SC_0
0009 8028              SJMP    ?C0002
000B         ?C0001:
000B EF                MOV     A,R7
000C B40208            CJNE    A,#02H,?C0003
000F 7BFF              MOV     R3,#0FFH
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 64  

0011 7A00        R     MOV     R2,#HIGH ?SC_7
0013 7900        R     MOV     R1,#LOW ?SC_7
0015 801C              SJMP    ?C0004
0017         ?C0003:
0017 EF                MOV     A,R7
0018 B40308            CJNE    A,#03H,?C0005
001B 7BFF              MOV     R3,#0FFH
001D 7A00        R     MOV     R2,#HIGH ?SC_12
001F 7900        R     MOV     R1,#LOW ?SC_12
0021 8010              SJMP    ?C0006
0023         ?C0005:
0023 EF                MOV     A,R7
0024 7BFF              MOV     R3,#0FFH
0026 B40106            CJNE    A,#01H,?C0007
0029 7A00        R     MOV     R2,#HIGH ?SC_17
002B 7900        R     MOV     R1,#LOW ?SC_17
002D 8004              SJMP    ?C0008
002F         ?C0007:
002F 7A00        R     MOV     R2,#HIGH ?SC_24
0031 7900        R     MOV     R1,#LOW ?SC_24
0033         ?C0008:
0033         ?C0006:
0033         ?C0004:
0033         ?C0002:
                                           ; SOURCE LINE # 722
0033         ?C0009:
0033 22                RET     
             ; FUNCTION _result_to_str (END)

             ; FUNCTION _interface_to_str (BEGIN)
                                           ; SOURCE LINE # 724
;---- Variable 'header_type' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 725
                                           ; SOURCE LINE # 728
0000 EF                MOV     A,R7
0001 120000      E     LCALL   ?C?CCASE
0004 0000        R     DW      ?C0011
0006 00                DB      00H
0007 0000        R     DW      ?C0012
0009 01                DB      01H
000A 0000        R     DW      ?C0014
000C 02                DB      02H
000D 0000        R     DW      ?C0015
000F 03                DB      03H
0010 0000        R     DW      ?C0025
0012 04                DB      04H
0013 0000        R     DW      ?C0031
0015 05                DB      05H
0016 0000        R     DW      ?C0032
0018 06                DB      06H
0019 0000        R     DW      ?C0021
001B 09                DB      09H
001C 0000        R     DW      ?C0022
001E 0A                DB      0AH
001F 0000        R     DW      ?C0016
0021 10                DB      010H
0022 0000        R     DW      ?C0017
0024 11                DB      011H
0025 0000        R     DW      ?C0018
0027 12                DB      012H
0028 0000        R     DW      ?C0024
002A 13                DB      013H
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 65  

002B 0000        R     DW      ?C0033
002D 14                DB      014H
002E 0000        R     DW      ?C0026
0030 15                DB      015H
0031 0000        R     DW      ?C0013
0033 16                DB      016H
0034 0000        R     DW      ?C0030
0036 17                DB      017H
0037 0000        R     DW      ?C0019
0039 19                DB      019H
003A 0000        R     DW      ?C0020
003C 1A                DB      01AH
003D 0000        R     DW      ?C0023
003F 1B                DB      01BH
0040 0000        R     DW      ?C0046
0042 1C                DB      01CH
0043 0000        R     DW      ?C0047
0045 1D                DB      01DH
0046 0000        R     DW      ?C0048
0048 1E                DB      01EH
0049 0000        R     DW      ?C0049
004B 1F                DB      01FH
004C 0000        R     DW      ?C0051
004E 20                DB      020H
004F 0000        R     DW      ?C0050
0051 21                DB      021H
0052 0000        R     DW      ?C0057
0054 22                DB      022H
0055 0000        R     DW      ?C0058
0057 23                DB      023H
0058 0000        R     DW      ?C0044
005A 24                DB      024H
005B 0000        R     DW      ?C0045
005D 25                DB      025H
005E 0000        R     DW      ?C0052
0060 26                DB      026H
0061 0000        R     DW      ?C0053
0063 27                DB      027H
0064 0000        R     DW      ?C0054
0066 29                DB      029H
0067 0000        R     DW      ?C0055
0069 2A                DB      02AH
006A 0000        R     DW      ?C0035
006C 30                DB      030H
006D 0000        R     DW      ?C0036
006F 31                DB      031H
0070 0000        R     DW      ?C0037
0072 32                DB      032H
0073 0000        R     DW      ?C0038
0075 33                DB      033H
0076 0000        R     DW      ?C0039
0078 34                DB      034H
0079 0000        R     DW      ?C0040
007B 35                DB      035H
007C 0000        R     DW      ?C0041
007E 36                DB      036H
007F 0000        R     DW      ?C0060
0081 37                DB      037H
0082 0000        R     DW      ?C0061
0084 38                DB      038H
0085 0000        R     DW      ?C0062
0087 39                DB      039H
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 66  

0088 0000        R     DW      ?C0059
008A 3A                DB      03AH
008B 0000        R     DW      ?C0042
008D 3B                DB      03BH
008E 0000        R     DW      ?C0043
0090 3C                DB      03CH
0091 0000        R     DW      ?C0056
0093 3E                DB      03EH
0094 0000        R     DW      ?C0034
0096 F0                DB      0F0H
0097 0000        R     DW      ?C0027
0099 F1                DB      0F1H
009A 0000        R     DW      ?C0028
009C F2                DB      0F2H
009D 0000        R     DW      ?C0029
009F F3                DB      0F3H
00A0 0000        R     DW      ?C0063
00A2 FC                DB      0FCH
00A3 0000        R     DW      ?C0064
00A5 FD                DB      0FDH
00A6 0000              DW      00H
00A8 0000        R     DW      ?C0065
                                           ; SOURCE LINE # 729
00AA         ?C0011:
                                           ; SOURCE LINE # 730
00AA 7BFF              MOV     R3,#0FFH
00AC 7A00        R     MOV     R2,#HIGH ?SC_32
00AE 7900        R     MOV     R1,#LOW ?SC_32
                                           ; SOURCE LINE # 731
00B0 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 732
00B3         ?C0012:
                                           ; SOURCE LINE # 733
00B3 7BFF              MOV     R3,#0FFH
00B5 7A00        R     MOV     R2,#HIGH ?SC_44
00B7 7900        R     MOV     R1,#LOW ?SC_44
00B9         ?C0538:
                                           ; SOURCE LINE # 734
00B9 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 735
00BC         ?C0013:
                                           ; SOURCE LINE # 736
00BC 7BFF              MOV     R3,#0FFH
00BE 7A00        R     MOV     R2,#HIGH ?SC_56
00C0 7900        R     MOV     R1,#LOW ?SC_56
00C2         ?C0539:
                                           ; SOURCE LINE # 737
00C2 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 738
00C5         ?C0014:
                                           ; SOURCE LINE # 739
00C5 7BFF              MOV     R3,#0FFH
00C7 7A00        R     MOV     R2,#HIGH ?SC_68
00C9 7900        R     MOV     R1,#LOW ?SC_68
00CB         ?C0540:
                                           ; SOURCE LINE # 740
00CB 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 741
00CE         ?C0015:
                                           ; SOURCE LINE # 742
00CE 7BFF              MOV     R3,#0FFH
00D0 7A00        R     MOV     R2,#HIGH ?SC_84
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 67  

00D2 7900        R     MOV     R1,#LOW ?SC_84
00D4         ?C0541:
                                           ; SOURCE LINE # 743
00D4 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 744
00D7         ?C0016:
                                           ; SOURCE LINE # 745
00D7 7BFF              MOV     R3,#0FFH
00D9 7A00        R     MOV     R2,#HIGH ?SC_89
00DB 7900        R     MOV     R1,#LOW ?SC_89
00DD         ?C0542:
                                           ; SOURCE LINE # 746
00DD 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 747
00E0         ?C0017:
                                           ; SOURCE LINE # 748
00E0 7BFF              MOV     R3,#0FFH
00E2 7A00        R     MOV     R2,#HIGH ?SC_99
00E4 7900        R     MOV     R1,#LOW ?SC_99
00E6         ?C0543:
                                           ; SOURCE LINE # 749
00E6 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 750
00E9         ?C0018:
                                           ; SOURCE LINE # 751
00E9 7BFF              MOV     R3,#0FFH
00EB 7A00        R     MOV     R2,#HIGH ?SC_109
00ED 7900        R     MOV     R1,#LOW ?SC_109
00EF         ?C0544:
                                           ; SOURCE LINE # 752
00EF 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 753
00F2         ?C0019:
                                           ; SOURCE LINE # 754
00F2 7BFF              MOV     R3,#0FFH
00F4 7A00        R     MOV     R2,#HIGH ?SC_122
00F6 7900        R     MOV     R1,#LOW ?SC_122
00F8         ?C0545:
                                           ; SOURCE LINE # 755
00F8 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 756
00FB         ?C0020:
                                           ; SOURCE LINE # 757
00FB 7BFF              MOV     R3,#0FFH
00FD 7A00        R     MOV     R2,#HIGH ?SC_134
00FF 7900        R     MOV     R1,#LOW ?SC_134
0101         ?C0546:
                                           ; SOURCE LINE # 758
0101 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 759
0104         ?C0021:
                                           ; SOURCE LINE # 760
0104 7BFF              MOV     R3,#0FFH
0106 7A00        R     MOV     R2,#HIGH ?SC_145
0108 7900        R     MOV     R1,#LOW ?SC_145
010A         ?C0547:
                                           ; SOURCE LINE # 761
010A 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 762
010D         ?C0022:
                                           ; SOURCE LINE # 763
010D 7BFF              MOV     R3,#0FFH
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 68  

010F 7A00        R     MOV     R2,#HIGH ?SC_157
0111 7900        R     MOV     R1,#LOW ?SC_157
0113         ?C0548:
                                           ; SOURCE LINE # 764
0113 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 765
0116         ?C0023:
                                           ; SOURCE LINE # 766
0116 7BFF              MOV     R3,#0FFH
0118 7A00        R     MOV     R2,#HIGH ?SC_165
011A 7900        R     MOV     R1,#LOW ?SC_165
011C         ?C0549:
                                           ; SOURCE LINE # 767
011C 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 768
011F         ?C0024:
                                           ; SOURCE LINE # 769
011F 7BFF              MOV     R3,#0FFH
0121 7A00        R     MOV     R2,#HIGH ?SC_177
0123 7900        R     MOV     R1,#LOW ?SC_177
0125         ?C0550:
                                           ; SOURCE LINE # 770
0125 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 771
0128         ?C0025:
                                           ; SOURCE LINE # 772
0128 7BFF              MOV     R3,#0FFH
012A 7A00        R     MOV     R2,#HIGH ?SC_192
012C 7900        R     MOV     R1,#LOW ?SC_192
012E         ?C0551:
                                           ; SOURCE LINE # 773
012E 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 774
0131         ?C0026:
                                           ; SOURCE LINE # 775
0131 7BFF              MOV     R3,#0FFH
0133 7A00        R     MOV     R2,#HIGH ?SC_208
0135 7900        R     MOV     R1,#LOW ?SC_208
0137         ?C0552:
                                           ; SOURCE LINE # 776
0137 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 777
013A         ?C0027:
                                           ; SOURCE LINE # 778
013A 7BFF              MOV     R3,#0FFH
013C 7A00        R     MOV     R2,#HIGH ?SC_219
013E 7900        R     MOV     R1,#LOW ?SC_219
0140         ?C0553:
                                           ; SOURCE LINE # 779
0140 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 780
0143         ?C0028:
                                           ; SOURCE LINE # 781
0143 7BFF              MOV     R3,#0FFH
0145 7A00        R     MOV     R2,#HIGH ?SC_234
0147 7900        R     MOV     R1,#LOW ?SC_234
0149         ?C0554:
                                           ; SOURCE LINE # 782
0149 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 783
014C         ?C0029:
                                           ; SOURCE LINE # 784
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 69  

014C 7BFF              MOV     R3,#0FFH
014E 7A00        R     MOV     R2,#HIGH ?SC_249
0150 7900        R     MOV     R1,#LOW ?SC_249
0152         ?C0555:
                                           ; SOURCE LINE # 785
0152 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 786
0155         ?C0030:
                                           ; SOURCE LINE # 787
0155 7BFF              MOV     R3,#0FFH
0157 7A00        R     MOV     R2,#HIGH ?SC_257
0159 7900        R     MOV     R1,#LOW ?SC_257
015B         ?C0556:
                                           ; SOURCE LINE # 788
015B 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 789
015E         ?C0031:
                                           ; SOURCE LINE # 790
015E 7BFF              MOV     R3,#0FFH
0160 7A00        R     MOV     R2,#HIGH ?SC_271
0162 7900        R     MOV     R1,#LOW ?SC_271
0164         ?C0557:
                                           ; SOURCE LINE # 791
0164 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 792
0167         ?C0032:
                                           ; SOURCE LINE # 793
0167 7BFF              MOV     R3,#0FFH
0169 7A00        R     MOV     R2,#HIGH ?SC_278
016B 7900        R     MOV     R1,#LOW ?SC_278
016D         ?C0558:
                                           ; SOURCE LINE # 794
016D 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 795
0170         ?C0033:
                                           ; SOURCE LINE # 796
0170 7BFF              MOV     R3,#0FFH
0172 7A00        R     MOV     R2,#HIGH ?SC_285
0174 7900        R     MOV     R1,#LOW ?SC_285
0176         ?C0559:
                                           ; SOURCE LINE # 797
0176 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 798
0179         ?C0034:
                                           ; SOURCE LINE # 799
0179 7BFF              MOV     R3,#0FFH
017B 7A00        R     MOV     R2,#HIGH ?SC_289
017D 7900        R     MOV     R1,#LOW ?SC_289
017F         ?C0560:
                                           ; SOURCE LINE # 800
017F 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 801
0182         ?C0035:
                                           ; SOURCE LINE # 802
0182 7BFF              MOV     R3,#0FFH
0184 7A00        R     MOV     R2,#HIGH ?SC_305
0186 7900        R     MOV     R1,#LOW ?SC_305
0188         ?C0561:
                                           ; SOURCE LINE # 803
0188 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 804
018B         ?C0036:
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 70  

                                           ; SOURCE LINE # 805
018B 7BFF              MOV     R3,#0FFH
018D 7A00        R     MOV     R2,#HIGH ?SC_317
018F 7900        R     MOV     R1,#LOW ?SC_317
0191         ?C0562:
                                           ; SOURCE LINE # 806
0191 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 807
0194         ?C0037:
                                           ; SOURCE LINE # 808
0194 7BFF              MOV     R3,#0FFH
0196 7A00        R     MOV     R2,#HIGH ?SC_325
0198 7900        R     MOV     R1,#LOW ?SC_325
019A         ?C0563:
                                           ; SOURCE LINE # 809
019A 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 810
019D         ?C0038:
                                           ; SOURCE LINE # 811
019D 7BFF              MOV     R3,#0FFH
019F 7A00        R     MOV     R2,#HIGH ?SC_342
01A1 7900        R     MOV     R1,#LOW ?SC_342
01A3         ?C0564:
                                           ; SOURCE LINE # 812
01A3 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 813
01A6         ?C0039:
                                           ; SOURCE LINE # 814
01A6 7BFF              MOV     R3,#0FFH
01A8 7A00        R     MOV     R2,#HIGH ?SC_359
01AA 7900        R     MOV     R1,#LOW ?SC_359
01AC         ?C0565:
                                           ; SOURCE LINE # 815
01AC 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 816
01AF         ?C0040:
                                           ; SOURCE LINE # 817
01AF 7BFF              MOV     R3,#0FFH
01B1 7A00        R     MOV     R2,#HIGH ?SC_372
01B3 7900        R     MOV     R1,#LOW ?SC_372
01B5         ?C0566:
                                           ; SOURCE LINE # 818
01B5 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 819
01B8         ?C0041:
                                           ; SOURCE LINE # 820
01B8 7BFF              MOV     R3,#0FFH
01BA 7A00        R     MOV     R2,#HIGH ?SC_389
01BC 7900        R     MOV     R1,#LOW ?SC_389
01BE         ?C0567:
                                           ; SOURCE LINE # 821
01BE 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 822
01C1         ?C0042:
                                           ; SOURCE LINE # 823
01C1 7BFF              MOV     R3,#0FFH
01C3 7A00        R     MOV     R2,#HIGH ?SC_402
01C5 7900        R     MOV     R1,#LOW ?SC_402
01C7         ?C0568:
                                           ; SOURCE LINE # 824
01C7 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 825
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 71  

01CA         ?C0043:
                                           ; SOURCE LINE # 826
01CA 7BFF              MOV     R3,#0FFH
01CC 7A00        R     MOV     R2,#HIGH ?SC_419
01CE 7900        R     MOV     R1,#LOW ?SC_419
01D0         ?C0569:
                                           ; SOURCE LINE # 827
01D0 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 828
01D3         ?C0044:
                                           ; SOURCE LINE # 829
01D3 7BFF              MOV     R3,#0FFH
01D5 7A00        R     MOV     R2,#HIGH ?SC_437
01D7 7900        R     MOV     R1,#LOW ?SC_437
01D9         ?C0570:
                                           ; SOURCE LINE # 830
01D9 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 831
01DC         ?C0045:
                                           ; SOURCE LINE # 832
01DC 7BFF              MOV     R3,#0FFH
01DE 7A00        R     MOV     R2,#HIGH ?SC_450
01E0 7900        R     MOV     R1,#LOW ?SC_450
01E2         ?C0571:
                                           ; SOURCE LINE # 833
01E2 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 834
01E5         ?C0046:
                                           ; SOURCE LINE # 835
01E5 7BFF              MOV     R3,#0FFH
01E7 7A00        R     MOV     R2,#HIGH ?SC_460
01E9 7900        R     MOV     R1,#LOW ?SC_460
01EB         ?C0572:
                                           ; SOURCE LINE # 836
01EB 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 837
01EE         ?C0047:
                                           ; SOURCE LINE # 838
01EE 7BFF              MOV     R3,#0FFH
01F0 7A00        R     MOV     R2,#HIGH ?SC_478
01F2 7900        R     MOV     R1,#LOW ?SC_478
01F4         ?C0573:
                                           ; SOURCE LINE # 839
01F4 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 840
01F7         ?C0048:
                                           ; SOURCE LINE # 841
01F7 7BFF              MOV     R3,#0FFH
01F9 7A00        R     MOV     R2,#HIGH ?SC_494
01FB 7900        R     MOV     R1,#LOW ?SC_494
01FD         ?C0574:
                                           ; SOURCE LINE # 842
01FD 020000      R     LJMP    ?C0591
                                           ; SOURCE LINE # 843
0200         ?C0049:
                                           ; SOURCE LINE # 844
0200 7BFF              MOV     R3,#0FFH
0202 7A00        R     MOV     R2,#HIGH ?SC_510
0204 7900        R     MOV     R1,#LOW ?SC_510
0206         ?C0575:
                                           ; SOURCE LINE # 845
0206 807E              SJMP    ?C0591
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 72  

                                           ; SOURCE LINE # 846
0208         ?C0050:
                                           ; SOURCE LINE # 847
0208 7BFF              MOV     R3,#0FFH
020A 7A00        R     MOV     R2,#HIGH ?SC_522
020C 7900        R     MOV     R1,#LOW ?SC_522
020E         ?C0576:
                                           ; SOURCE LINE # 848
020E 8076              SJMP    ?C0591
                                           ; SOURCE LINE # 849
0210         ?C0051:
                                           ; SOURCE LINE # 850
0210 7BFF              MOV     R3,#0FFH
0212 7A00        R     MOV     R2,#HIGH ?SC_538
0214 7900        R     MOV     R1,#LOW ?SC_538
0216         ?C0577:
                                           ; SOURCE LINE # 851
0216 806E              SJMP    ?C0591
                                           ; SOURCE LINE # 852
0218         ?C0052:
                                           ; SOURCE LINE # 853
0218 7BFF              MOV     R3,#0FFH
021A 7A00        R     MOV     R2,#HIGH ?SC_557
021C 7900        R     MOV     R1,#LOW ?SC_557
021E         ?C0578:
                                           ; SOURCE LINE # 854
021E 8066              SJMP    ?C0591
                                           ; SOURCE LINE # 855
0220         ?C0053:
                                           ; SOURCE LINE # 856
0220 7BFF              MOV     R3,#0FFH
0222 7A00        R     MOV     R2,#HIGH ?SC_578
0224 7900        R     MOV     R1,#LOW ?SC_578
0226         ?C0579:
                                           ; SOURCE LINE # 857
0226 805E              SJMP    ?C0591
                                           ; SOURCE LINE # 858
0228         ?C0054:
                                           ; SOURCE LINE # 859
0228 7BFF              MOV     R3,#0FFH
022A 7A00        R     MOV     R2,#HIGH ?SC_606
022C 7900        R     MOV     R1,#LOW ?SC_606
022E         ?C0580:
                                           ; SOURCE LINE # 860
022E 8056              SJMP    ?C0591
                                           ; SOURCE LINE # 861
0230         ?C0055:
                                           ; SOURCE LINE # 862
0230 7BFF              MOV     R3,#0FFH
0232 7A00        R     MOV     R2,#HIGH ?SC_628
0234 7900        R     MOV     R1,#LOW ?SC_628
0236         ?C0581:
                                           ; SOURCE LINE # 863
0236 804E              SJMP    ?C0591
                                           ; SOURCE LINE # 864
0238         ?C0056:
                                           ; SOURCE LINE # 865
0238 7BFF              MOV     R3,#0FFH
023A 7A00        R     MOV     R2,#HIGH ?SC_646
023C 7900        R     MOV     R1,#LOW ?SC_646
023E         ?C0582:
                                           ; SOURCE LINE # 866
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 73  

023E 8046              SJMP    ?C0591
                                           ; SOURCE LINE # 867
0240         ?C0057:
                                           ; SOURCE LINE # 868
0240 7BFF              MOV     R3,#0FFH
0242 7A00        R     MOV     R2,#HIGH ?SC_668
0244 7900        R     MOV     R1,#LOW ?SC_668
0246         ?C0583:
                                           ; SOURCE LINE # 869
0246 803E              SJMP    ?C0591
                                           ; SOURCE LINE # 870
0248         ?C0058:
                                           ; SOURCE LINE # 871
0248 7BFF              MOV     R3,#0FFH
024A 7A00        R     MOV     R2,#HIGH ?SC_689
024C 7900        R     MOV     R1,#LOW ?SC_689
024E         ?C0584:
                                           ; SOURCE LINE # 872
024E 8036              SJMP    ?C0591
                                           ; SOURCE LINE # 873
0250         ?C0059:
                                           ; SOURCE LINE # 874
0250 7BFF              MOV     R3,#0FFH
0252 7A00        R     MOV     R2,#HIGH ?SC_710
0254 7900        R     MOV     R1,#LOW ?SC_710
0256         ?C0585:
                                           ; SOURCE LINE # 875
0256 802E              SJMP    ?C0591
                                           ; SOURCE LINE # 876
0258         ?C0060:
                                           ; SOURCE LINE # 877
0258 7BFF              MOV     R3,#0FFH
025A 7A00        R     MOV     R2,#HIGH ?SC_731
025C 7900        R     MOV     R1,#LOW ?SC_731
025E         ?C0586:
                                           ; SOURCE LINE # 878
025E 8026              SJMP    ?C0591
                                           ; SOURCE LINE # 879
0260         ?C0061:
                                           ; SOURCE LINE # 880
0260 7BFF              MOV     R3,#0FFH
0262 7A00        R     MOV     R2,#HIGH ?SC_751
0264 7900        R     MOV     R1,#LOW ?SC_751
0266         ?C0587:
                                           ; SOURCE LINE # 881
0266 801E              SJMP    ?C0591
                                           ; SOURCE LINE # 882
0268         ?C0062:
                                           ; SOURCE LINE # 883
0268 7BFF              MOV     R3,#0FFH
026A 7A00        R     MOV     R2,#HIGH ?SC_772
026C 7900        R     MOV     R1,#LOW ?SC_772
026E         ?C0588:
                                           ; SOURCE LINE # 884
026E 8016              SJMP    ?C0591
                                           ; SOURCE LINE # 885
0270         ?C0063:
                                           ; SOURCE LINE # 886
0270 7BFF              MOV     R3,#0FFH
0272 7A00        R     MOV     R2,#HIGH ?SC_793
0274 7900        R     MOV     R1,#LOW ?SC_793
0276         ?C0589:
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 74  

                                           ; SOURCE LINE # 887
0276 800E              SJMP    ?C0591
                                           ; SOURCE LINE # 888
0278         ?C0064:
                                           ; SOURCE LINE # 889
0278 7BFF              MOV     R3,#0FFH
027A 7A00        R     MOV     R2,#HIGH ?SC_806
027C 7900        R     MOV     R1,#LOW ?SC_806
027E         ?C0590:
                                           ; SOURCE LINE # 890
027E 8006              SJMP    ?C0591
                                           ; SOURCE LINE # 891
0280         ?C0065:
                                           ; SOURCE LINE # 892
0280 7BFF              MOV     R3,#0FFH
0282 7A00        R     MOV     R2,#HIGH ?SC_24
0284 7900        R     MOV     R1,#LOW ?SC_24
0286         ?C0591:
0286 900000      R     MOV     DPTR,#str
0289 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 893
                                           ; SOURCE LINE # 894
028C         ?C0010:
                                           ; SOURCE LINE # 896
028C 900000      R     MOV     DPTR,#str
028F 120000      E     LCALL   ?C?PLDXDATA
                                           ; SOURCE LINE # 897
0292         ?C0066:
0292 22                RET     
             ; FUNCTION _interface_to_str (END)

             ; FUNCTION get_data_role (BEGIN)
                                           ; SOURCE LINE # 899
                                           ; SOURCE LINE # 900
                                           ; SOURCE LINE # 902
0000 120000      R     LCALL   L?0648
0003 7DB8              MOV     R5,#0B8H
0005 120000      E     LCALL   _i2c_read_reg
                                           ; SOURCE LINE # 904
0008 120000      R     LCALL   L?0824
000B 30E504            JNB     ACC.5,?C0067
000E 7F01              MOV     R7,#01H
0010 8002              SJMP    ?C0068
0012         ?C0067:
0012 7F00              MOV     R7,#00H
0014         ?C0068:
                                           ; SOURCE LINE # 906
0014         ?C0069:
0014 22                RET     
             ; FUNCTION get_data_role (END)

             ; FUNCTION get_power_role (BEGIN)
                                           ; SOURCE LINE # 909
                                           ; SOURCE LINE # 910
                                           ; SOURCE LINE # 912
0000 120000      R     LCALL   L?0648
0003 7DB8              MOV     R5,#0B8H
0005 120000      E     LCALL   _i2c_read_reg
                                           ; SOURCE LINE # 914
0008 120000      R     LCALL   L?0824
000B 30E304            JNB     ACC.3,?C0070
000E 7F01              MOV     R7,#01H
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 75  

0010 8002              SJMP    ?C0071
0012         ?C0070:
0012 7F00              MOV     R7,#00H
0014         ?C0071:
                                           ; SOURCE LINE # 915
0014         ?C0072:
0014 22                RET     
             ; FUNCTION get_power_role (END)

             ; FUNCTION _redriver_mux_control (BEGIN)
                                           ; SOURCE LINE # 941
;---- Variable 'mode' assigned to Register 'R7' ----
;---- Variable 'cc_direction' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 942
                                           ; SOURCE LINE # 944
0000 900000      R     MOV     DPTR,#buf
0003 7420              MOV     A,#020H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 945
0006 E4                CLR     A
0007 A3                INC     DPTR
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 946
0009 ED                MOV     A,R5
000A 7023              JNZ     ?C0073
                                           ; SOURCE LINE # 947
000C EF                MOV     A,R7
000D B40306            CJNE    A,#03H,?C0074
                                           ; SOURCE LINE # 948
0010 A3                INC     DPTR
0011 74F8              MOV     A,#0F8H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 949
0014 803B              SJMP    ?C0079
0016         ?C0074:
0016 EF                MOV     A,R7
0017 B40208            CJNE    A,#02H,?C0076
                                           ; SOURCE LINE # 950
001A 900000      R     MOV     DPTR,#buf+02H
001D 74E8              MOV     A,#0E8H
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 951
0020 802F              SJMP    ?C0079
0022         ?C0076:
0022 EF                MOV     A,R7
0023 6401              XRL     A,#01H
0025 702A              JNZ     ?C0079
                                           ; SOURCE LINE # 952
0027 900000      R     MOV     DPTR,#buf+02H
002A 74B8              MOV     A,#0B8H
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 953
                                           ; SOURCE LINE # 954
002D 8022              SJMP    ?C0079
002F         ?C0073:
                                           ; SOURCE LINE # 955
002F EF                MOV     A,R7
0030 B40308            CJNE    A,#03H,?C0080
                                           ; SOURCE LINE # 956
0033 900000      R     MOV     DPTR,#buf+02H
0036 74FC              MOV     A,#0FCH
0038 F0                MOVX    @DPTR,A
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 76  

                                           ; SOURCE LINE # 957
0039 8016              SJMP    ?C0079
003B         ?C0080:
003B EF                MOV     A,R7
003C B40208            CJNE    A,#02H,?C0082
                                           ; SOURCE LINE # 958
003F 900000      R     MOV     DPTR,#buf+02H
0042 74EC              MOV     A,#0ECH
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 959
0045 800A              SJMP    ?C0079
0047         ?C0082:
0047 EF                MOV     A,R7
0048 B40106            CJNE    A,#01H,?C0079
                                           ; SOURCE LINE # 960
004B 900000      R     MOV     DPTR,#buf+02H
004E 74BC              MOV     A,#0BCH
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 961
                                           ; SOURCE LINE # 962
0051         ?C0079:
                                           ; SOURCE LINE # 963
0051 7B01              MOV     R3,#01H
0053 7A00        R     MOV     R2,#HIGH buf
0055 7900        R     MOV     R1,#LOW buf
0057 7403              MOV     A,#03H
0059 120000      R     LCALL   L?0700
005C 7F3E              MOV     R7,#03EH
005E 020000      R     LJMP    _send_pd_msg
             ; FUNCTION _redriver_mux_control (END)

             ; FUNCTION _dp_configure_redriver (BEGIN)
                                           ; SOURCE LINE # 965
;---- Variable 'mode' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 966
                                           ; SOURCE LINE # 969
0000 EF                MOV     A,R7
0001 6404              XRL     A,#04H
0003 6004              JZ      ?C0087
0005 EF                MOV     A,R7
0006 B41008            CJNE    A,#010H,?C0086
0009         ?C0087:
                                           ; SOURCE LINE # 970
0009 900000      R     MOV     DPTR,#mux_mode
000C 7402              MOV     A,#02H
000E F0                MOVX    @DPTR,A
000F 8006              SJMP    ?C0088
0011         ?C0086:
                                           ; SOURCE LINE # 972
0011 900000      R     MOV     DPTR,#mux_mode
0014 7403              MOV     A,#03H
0016 F0                MOVX    @DPTR,A
0017         ?C0088:
                                           ; SOURCE LINE # 973
0017 900000      E     MOV     DPTR,#port_id
001A E0                MOVX    A,@DPTR
001B FE                MOV     R6,A
001C 120000      R     LCALL   L?0778
001F E0                MOVX    A,@DPTR
0020 FD                MOV     R5,A
0021 900000      R     MOV     DPTR,#mux_mode
0024 E0                MOVX    A,@DPTR
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 77  

0025 FF                MOV     R7,A
0026 ED                MOV     A,R5
0027 6F                XRL     A,R7
0028 6014              JZ      ?C0090
                                           ; SOURCE LINE # 974
002A EE                MOV     A,R6
002B 120000      R     LCALL   L?0765
002E E0                MOVX    A,@DPTR
002F FD                MOV     R5,A
0030 120000      R     LCALL   _redriver_mux_control
                                           ; SOURCE LINE # 975
0033 900000      R     MOV     DPTR,#mux_mode
0036 120000      R     LCALL   L?0661
0039 120000      R     LCALL   L?0779
003C EF                MOV     A,R7
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 976
                                           ; SOURCE LINE # 977
003E         ?C0090:
003E 22                RET     
             ; FUNCTION _dp_configure_redriver (END)

             ; FUNCTION _build_rdo_from_source_caps_new (BEGIN)
                                           ; SOURCE LINE # 980
0000 900000      R     MOV     DPTR,#buf
0003 120000      E     LCALL   ?C?PSTXDATA
0006 900000      R     MOV     DPTR,#obj_cnt
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 981
                                           ; SOURCE LINE # 982
000B 120000      R     LCALL   L?0662
000E 120000      R     LCALL   L?0810
0011 E0                MOVX    A,@DPTR
0012 2401              ADD     A,#01H
0014 FD                MOV     R5,A
0015 E4                CLR     A
0016 33                RLC     A
0017 FC                MOV     R4,A
0018 D3                SETB    C
0019 ED                MOV     A,R5
001A 9F                SUBB    A,R7
001B 7480              MOV     A,#080H
001D F8                MOV     R0,A
001E 6C                XRL     A,R4
001F 98                SUBB    A,R0
0020 5003              JNC     $ + 5H
0022 020000      R     LJMP    ?C0091
                                           ; SOURCE LINE # 983
                                           ; SOURCE LINE # 984
0025 E4                CLR     A
0026 900000      E     MOV     DPTR,#i
0029 F0                MOVX    @DPTR,A
002A         ?C0092:
002A 900000      R     MOV     DPTR,#obj_cnt
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F 900000      E     MOV     DPTR,#i
0032 E0                MOVX    A,@DPTR
0033 C3                CLR     C
0034 9F                SUBB    A,R7
0035 4003              JC      $ + 5H
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 78  

0037 020000      R     LJMP    ?C0103
                                           ; SOURCE LINE # 985
                                           ; SOURCE LINE # 986
003A 120000      R     LCALL   L?0808
003D 900000      E     MOV     DPTR,#i
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 75F004            MOV     B,#04H
0045 900003            MOV     DPTR,#03H
0048 120000      E     LCALL   ?C?OFFXADD
004B 120000      E     LCALL   ?C?CLDOPTR
004E 900000      E     MOV     DPTR,#pdo_max_tmp
                                           ; SOURCE LINE # 987
0051 120000      R     LCALL   L?0807
0054 75F004            MOV     B,#04H
0057 EF                MOV     A,R7
0058 900002            MOV     DPTR,#02H
005B 120000      E     LCALL   ?C?OFFXADD
005E 120000      E     LCALL   ?C?CLDOPTR
0061 900000      E     MOV     DPTR,#pdo_max_tmp+01H
                                           ; SOURCE LINE # 988
0064 120000      R     LCALL   L?0807
0067 900000      E     MOV     DPTR,#i
006A E0                MOVX    A,@DPTR
                                           ; SOURCE LINE # 989
                                           ; SOURCE LINE # 990
006B 120000      R     LCALL   L?0669
006E 120000      R     LCALL   L?0782
0071 120000      E     LCALL   ?C?LCASE
0074 0000        R     DW      ?C0096
0076 0000              DW      00H
0078 0000              DW      00H
007A 0000        R     DW      ?C0100
007C 0000              DW      00H
007E 0001              DW      01H
0080 0000        R     DW      ?C0098
0082 0000              DW      00H
0084 0002              DW      02H
0086 0000              DW      00H
0088 0000        R     DW      ?C0094
                                           ; SOURCE LINE # 991
                                           ; SOURCE LINE # 992
008A         ?C0096:
                                           ; SOURCE LINE # 993
008A 120000      R     LCALL   L?0670
008D 780A              MOV     R0,#0AH
008F 120000      R     LCALL   L?0679
0092 120000      R     LCALL   L?0798
0095 503D              JNC     ?C0094
                                           ; SOURCE LINE # 994
                                           ; SOURCE LINE # 995
0097 120000      R     LCALL   L?0670
009A 780A              MOV     R0,#0AH
                                           ; SOURCE LINE # 996
                                           ; SOURCE LINE # 997
                                           ; SOURCE LINE # 998
009C 8022              SJMP    ?C0595
                                           ; SOURCE LINE # 999
009E         ?C0098:
                                           ; SOURCE LINE # 1000
009E 120000      R     LCALL   L?0670
00A1 120000      R     LCALL   L?0678
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 79  

00A4 120000      R     LCALL   L?0798
00A7 502B              JNC     ?C0094
                                           ; SOURCE LINE # 1001
                                           ; SOURCE LINE # 1002
00A9 120000      R     LCALL   L?0670
00AC 7814              MOV     R0,#014H
00AE         ?C0594:
                                           ; SOURCE LINE # 1003
                                           ; SOURCE LINE # 1004
                                           ; SOURCE LINE # 1005
00AE 8010              SJMP    ?C0595
                                           ; SOURCE LINE # 1006
00B0         ?C0100:
                                           ; SOURCE LINE # 1007
00B0 120000      R     LCALL   L?0670
00B3 120000      R     LCALL   L?0678
00B6 120000      R     LCALL   L?0799
00B9 5019              JNC     ?C0094
                                           ; SOURCE LINE # 1008
                                           ; SOURCE LINE # 1009
00BB 120000      R     LCALL   L?0670
00BE 7814              MOV     R0,#014H
00C0         ?C0595:
00C0 120000      R     LCALL   L?0679
00C3 900000      E     MOV     DPTR,#pdo_max
00C6 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1010
00C9 900000      E     MOV     DPTR,#i
00CC 120000      R     LCALL   L?0661
00CF 120000      R     LCALL   L?0810
00D2 EF                MOV     A,R7
00D3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1011
                                           ; SOURCE LINE # 1012
                                           ; SOURCE LINE # 1013
                                           ; SOURCE LINE # 1014
                                           ; SOURCE LINE # 1015
                                           ; SOURCE LINE # 1016
                                           ; SOURCE LINE # 1017
00D4         ?C0094:
00D4 120000      R     LCALL   L?0826
00D7 020000      R     LJMP    ?C0092
                                           ; SOURCE LINE # 1018
00DA         ?C0091:
                                           ; SOURCE LINE # 1020
                                           ; SOURCE LINE # 1021
00DA 120000      R     LCALL   L?0808
00DD 120000      R     LCALL   L?0666
                                           ; SOURCE LINE # 1022
                                           ; SOURCE LINE # 1023
                                           ; SOURCE LINE # 1024
                                           ; SOURCE LINE # 1025
00E0 120000      R     LCALL   L?0668
00E3 120000      R     LCALL   L?0782
00E6 120000      E     LCALL   ?C?LCASE
00E9 0000        R     DW      ?C0105
00EB 0000              DW      00H
00ED 0000              DW      00H
00EF 0000        R     DW      ?C0107
00F1 0000              DW      00H
00F3 0001              DW      01H
00F5 0000        R     DW      ?C0107
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 80  

00F7 0000              DW      00H
00F9 0002              DW      02H
00FB 0000              DW      00H
00FD 0000        R     DW      ?C0103
                                           ; SOURCE LINE # 1026
                                           ; SOURCE LINE # 1027
00FF         ?C0105:
                                           ; SOURCE LINE # 1028
00FF 120000      R     LCALL   L?0670
0102 780A              MOV     R0,#0AH
                                           ; SOURCE LINE # 1029
0104 8005              SJMP    ?C0597
                                           ; SOURCE LINE # 1030
                                           ; SOURCE LINE # 1033
0106         ?C0107:
                                           ; SOURCE LINE # 1034
0106 120000      R     LCALL   L?0670
0109 7814              MOV     R0,#014H
010B         ?C0597:
010B 120000      R     LCALL   L?0679
010E 900000      E     MOV     DPTR,#pdo_max
0111 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1035
                                           ; SOURCE LINE # 1036
                                           ; SOURCE LINE # 1037
                                           ; SOURCE LINE # 1038
                                           ; SOURCE LINE # 1039
0114         ?C0103:
                                           ; SOURCE LINE # 1040
0114 120000      R     LCALL   L?0808
0117 120000      R     LCALL   L?0666
                                           ; SOURCE LINE # 1041
                                           ; SOURCE LINE # 1042
                                           ; SOURCE LINE # 1043
                                           ; SOURCE LINE # 1044
011A 120000      R     LCALL   L?0668
011D 120000      R     LCALL   L?0783
0120 120000      E     LCALL   ?C?LCASE
0123 0000        R     DW      ?C0111
0125 0000              DW      00H
0127 0000              DW      00H
0129 0000        R     DW      ?C0114
012B 0000              DW      00H
012D 0001              DW      01H
012F 0000        R     DW      ?C0111
0131 0000              DW      00H
0133 0002              DW      02H
0135 0000              DW      00H
0137 0000        R     DW      ?C0118
                                           ; SOURCE LINE # 1045
                                           ; SOURCE LINE # 1046
                                           ; SOURCE LINE # 1047
0139         ?C0111:
                                           ; SOURCE LINE # 1048
0139 120000      R     LCALL   L?0670
013C 7B0A              MOV     R3,#0AH
013E 120000      R     LCALL   L?0680
0141 E4                CLR     A
0142 7BB8              MOV     R3,#0B8H
0144 7A0B              MOV     R2,#0BH
0146 F9                MOV     R1,A
0147 F8                MOV     R0,A
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 81  

0148 D3                SETB    C
0149 120000      E     LCALL   ?C?ULCMP
014C 5013              JNC     ?C0112
                                           ; SOURCE LINE # 1049
                                           ; SOURCE LINE # 1050
014E 120000      R     LCALL   L?0696
0151 EF                MOV     A,R7
0152 442C              ORL     A,#02CH
0154 FF                MOV     R7,A
0155 EE                MOV     A,R6
0156 44B1              ORL     A,#0B1H
0158 FE                MOV     R6,A
0159 ED                MOV     A,R5
015A 4404              ORL     A,#04H
015C FD                MOV     R5,A
015D EB                MOV     A,R3
                                           ; SOURCE LINE # 1051
015E 020000      R     LJMP    ?C0598
0161         ?C0112:
                                           ; SOURCE LINE # 1053
                                           ; SOURCE LINE # 1054
0161 120000      R     LCALL   L?0670
0164 120000      R     LCALL   L?0712
0167 7B0A              MOV     R3,#0AH
0169 120000      R     LCALL   L?0681
016C 120000      R     LCALL   L?0709
016F 780A              MOV     R0,#0AH
0171 120000      E     LCALL   ?C?LSHL
0174 EC                MOV     A,R4
0175 C0E0              PUSH    ACC
0177 ED                MOV     A,R5
0178 C0E0              PUSH    ACC
017A EE                MOV     A,R6
017B C0E0              PUSH    ACC
017D EF                MOV     A,R7
017E C0E0              PUSH    ACC
0180 120000      R     LCALL   L?0662
0183 120000      R     LCALL   L?0697
0186 EC                MOV     A,R4
0187 4404              ORL     A,#04H
0189 FC                MOV     R4,A
018A D0E0              POP     ACC
018C FB                MOV     R3,A
018D D0E0              POP     ACC
018F FA                MOV     R2,A
0190 D0E0              POP     ACC
0192 F9                MOV     R1,A
0193 D0E0              POP     ACC
0195 F8                MOV     R0,A
0196 120000      E     LCALL   ?C?LOR
0199 EC                MOV     A,R4
019A C0E0              PUSH    ACC
019C ED                MOV     A,R5
019D C0E0              PUSH    ACC
019F EE                MOV     A,R6
01A0 C0E0              PUSH    ACC
01A2 EF                MOV     A,R7
01A3 C0E0              PUSH    ACC
01A5 120000      R     LCALL   L?0670
01A8 120000      R     LCALL   L?0712
01AB 7B0A              MOV     R3,#0AH
01AD 120000      R     LCALL   L?0681
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 82  

01B0 120000      R     LCALL   L?0709
01B3 D0E0              POP     ACC
01B5 FB                MOV     R3,A
01B6 D0E0              POP     ACC
01B8 FA                MOV     R2,A
01B9 D0E0              POP     ACC
01BB F9                MOV     R1,A
01BC D0E0              POP     ACC
01BE F8                MOV     R0,A
01BF 120000      E     LCALL   ?C?LOR
01C2 900000      E     MOV     DPTR,#port_id
01C5 E0                MOVX    A,@DPTR
01C6         ?C0592:
                                           ; SOURCE LINE # 1055
                                           ; SOURCE LINE # 1056
01C6 020000      R     LJMP    ?C0598
                                           ; SOURCE LINE # 1057
01C9         ?C0114:
                                           ; SOURCE LINE # 1058
01C9 120000      R     LCALL   L?0670
01CC 120000      R     LCALL   L?0712
01CF 7BFA              MOV     R3,#0FAH
01D1 120000      R     LCALL   L?0681
01D4 7802              MOV     R0,#02H
01D6 120000      E     LCALL   ?C?ULSHR
01D9 7B98              MOV     R3,#098H
01DB 7AFA              MOV     R2,#0FAH
01DD 79FF              MOV     R1,#0FFH
01DF 78FF              MOV     R0,#0FFH
01E1 D3                SETB    C
01E2 120000      E     LCALL   ?C?ULCMP
01E5 500F              JNC     ?C0115
                                           ; SOURCE LINE # 1059
                                           ; SOURCE LINE # 1060
01E7 120000      R     LCALL   L?0696
01EA EE                MOV     A,R6
01EB 44C0              ORL     A,#0C0H
01ED FE                MOV     R6,A
01EE ED                MOV     A,R5
01EF 4403              ORL     A,#03H
01F1 FD                MOV     R5,A
01F2 EB                MOV     A,R3
                                           ; SOURCE LINE # 1061
01F3 020000      R     LJMP    ?C0593
01F6         ?C0115:
                                           ; SOURCE LINE # 1063
                                           ; SOURCE LINE # 1064
01F6 120000      R     LCALL   L?0670
01F9 120000      R     LCALL   L?0712
01FC 7BFA              MOV     R3,#0FAH
01FE 120000      R     LCALL   L?0681
0201 7802              MOV     R0,#02H
0203 120000      E     LCALL   ?C?ULSHR
0206 E4                CLR     A
0207 7B04              MOV     R3,#04H
0209 120000      R     LCALL   L?0681
020C 7BFA              MOV     R3,#0FAH
020E 120000      R     LCALL   L?0710
0211 780A              MOV     R0,#0AH
0213 120000      E     LCALL   ?C?LSHL
0216 EC                MOV     A,R4
0217 C0E0              PUSH    ACC
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 83  

0219 ED                MOV     A,R5
021A C0E0              PUSH    ACC
021C EE                MOV     A,R6
021D C0E0              PUSH    ACC
021F EF                MOV     A,R7
0220 C0E0              PUSH    ACC
0222 120000      R     LCALL   L?0662
0225 120000      R     LCALL   L?0697
0228 EC                MOV     A,R4
0229 4404              ORL     A,#04H
022B FC                MOV     R4,A
022C D0E0              POP     ACC
022E FB                MOV     R3,A
022F D0E0              POP     ACC
0231 FA                MOV     R2,A
0232 D0E0              POP     ACC
0234 F9                MOV     R1,A
0235 D0E0              POP     ACC
0237 F8                MOV     R0,A
0238 120000      E     LCALL   ?C?LOR
023B EC                MOV     A,R4
023C C0E0              PUSH    ACC
023E ED                MOV     A,R5
023F C0E0              PUSH    ACC
0241 EE                MOV     A,R6
0242 C0E0              PUSH    ACC
0244 EF                MOV     A,R7
0245 C0E0              PUSH    ACC
0247 120000      R     LCALL   L?0670
024A 120000      R     LCALL   L?0712
024D 7BFA              MOV     R3,#0FAH
024F 120000      R     LCALL   L?0681
0252 7802              MOV     R0,#02H
0254 120000      E     LCALL   ?C?ULSHR
0257 E4                CLR     A
0258 7B04              MOV     R3,#04H
025A 120000      R     LCALL   L?0681
025D E4                CLR     A
025E 7BFA              MOV     R3,#0FAH
0260 120000      R     LCALL   L?0711
0263 780A              MOV     R0,#0AH
0265 120000      E     LCALL   ?C?LSHL
0268 D0E0              POP     ACC
026A FB                MOV     R3,A
026B D0E0              POP     ACC
026D FA                MOV     R2,A
026E D0E0              POP     ACC
0270 F9                MOV     R1,A
0271 D0E0              POP     ACC
0273 F8                MOV     R0,A
0274 120000      E     LCALL   ?C?LOR
0277 900000      E     MOV     DPTR,#port_id
027A E0                MOVX    A,@DPTR
027B         ?C0593:
027B         ?C0598:
027B 120000      R     LCALL   L?0714
027E 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1065
                                           ; SOURCE LINE # 1066
                                           ; SOURCE LINE # 1067
                                           ; SOURCE LINE # 1068
                                           ; SOURCE LINE # 1069
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 84  

                                           ; SOURCE LINE # 1074
0281         ?C0118:
0281 22                RET     
             ; FUNCTION _build_rdo_from_source_caps_new (END)

             ; FUNCTION _change_bit_order (BEGIN)
                                           ; SOURCE LINE # 1142
0000 900000      R     MOV     DPTR,#pbuf
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 1143
                                           ; SOURCE LINE # 1145
0006 120000      R     LCALL   L?0828
0009 900002            MOV     DPTR,#02H
000C 120000      R     LCALL   L?0726
000F EC                MOV     A,R4
0010 C0E0              PUSH    ACC
0012 ED                MOV     A,R5
0013 C0E0              PUSH    ACC
0015 EE                MOV     A,R6
0016 C0E0              PUSH    ACC
0018 EF                MOV     A,R7
0019 C0E0              PUSH    ACC
001B 120000      R     LCALL   L?0828
001E 120000      R     LCALL   L?0839
0021 7818              MOV     R0,#018H
0023 120000      R     LCALL   L?0728
0026 D0E0              POP     ACC
0028 FB                MOV     R3,A
0029 D0E0              POP     ACC
002B FA                MOV     R2,A
002C D0E0              POP     ACC
002E F9                MOV     R1,A
002F D0E0              POP     ACC
0031 F8                MOV     R0,A
0032 120000      E     LCALL   ?C?LOR
0035 EC                MOV     A,R4
0036 C0E0              PUSH    ACC
0038 ED                MOV     A,R5
0039 C0E0              PUSH    ACC
003B EE                MOV     A,R6
003C C0E0              PUSH    ACC
003E EF                MOV     A,R7
003F C0E0              PUSH    ACC
0041 120000      R     LCALL   L?0829
0044 120000      R     LCALL   L?0758
0047 120000      R     LCALL   L?0772
004A D0E0              POP     ACC
004C FB                MOV     R3,A
004D D0E0              POP     ACC
004F FA                MOV     R2,A
0050 D0E0              POP     ACC
0052 F9                MOV     R1,A
0053 D0E0              POP     ACC
0055 F8                MOV     R0,A
0056 120000      E     LCALL   ?C?LOR
0059 C8                XCH     A,R0
005A EC                MOV     A,R4
005B C8                XCH     A,R0
005C ED                MOV     A,R5
005D C0E0              PUSH    ACC
005F EE                MOV     A,R6
0060 C0E0              PUSH    ACC
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 85  

0062 EF                MOV     A,R7
0063 C0E0              PUSH    ACC
0065 120000      R     LCALL   L?0829
0068 120000      E     LCALL   ?C?CLDPTR
006B FF                MOV     R7,A
006C E4                CLR     A
006D FC                MOV     R4,A
006E FD                MOV     R5,A
006F FE                MOV     R6,A
0070 D0E0              POP     ACC
0072 FB                MOV     R3,A
0073 D0E0              POP     ACC
0075 FA                MOV     R2,A
0076 D0E0              POP     ACC
0078 F9                MOV     R1,A
0079 120000      E     LCALL   ?C?LOR
                                           ; SOURCE LINE # 1146
007C         ?C0119:
007C 22                RET     
             ; FUNCTION _change_bit_order (END)

             ; FUNCTION pd_check_requested_voltage (BEGIN)
                                           ; SOURCE LINE # 1148
                                           ; SOURCE LINE # 1149
                                           ; SOURCE LINE # 1150
0000 120000      R     LCALL   L?0713
0003 120000      E     LCALL   ?C?LLDXDATA
0006 781C              MOV     R0,#01CH
0008 120000      E     LCALL   ?C?ULSHR
000B EC                MOV     A,R4
000C 4D                ORL     A,R5
000D 4E                ORL     A,R6
000E 4F                ORL     A,R7
000F 602A              JZ      ?C0121
0011 EB                MOV     A,R3
0012 120000      R     LCALL   L?0714
0015 120000      E     LCALL   ?C?LLDXDATA
0018 781C              MOV     R0,#01CH
001A 120000      E     LCALL   ?C?ULSHR
001D C8                XCH     A,R0
001E EC                MOV     A,R4
001F C8                XCH     A,R0
0020 C9                XCH     A,R1
0021 ED                MOV     A,R5
0022 C9                XCH     A,R1
0023 CA                XCH     A,R2
0024 EE                MOV     A,R6
0025 CA                XCH     A,R2
0026 CB                XCH     A,R3
0027 EF                MOV     A,R7
0028 CB                XCH     A,R3
0029 120000      R     LCALL   L?0662
002C 120000      R     LCALL   L?0812
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 E4                CLR     A
0032 FC                MOV     R4,A
0033 FD                MOV     R5,A
0034 FE                MOV     R6,A
0035 D3                SETB    C
0036 120000      E     LCALL   ?C?ULCMP
0039 4003              JC      ?C0120
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 86  

003B         ?C0121:
                                           ; SOURCE LINE # 1154
003B 7F00              MOV     R7,#00H
003D 22                RET     
                                           ; SOURCE LINE # 1155
003E         ?C0120:
                                           ; SOURCE LINE # 1160
003E 120000      R     LCALL   L?0662
0041 120000      R     LCALL   L?0715
0044 120000      R     LCALL   L?0775
0047 120000      R     LCALL   L?0681
004A EE                MOV     A,R6
004B C0E0              PUSH    ACC
004D EF                MOV     A,R7
004E C0E0              PUSH    ACC
0050 120000      R     LCALL   L?0662
0053 120000      R     LCALL   L?0800
0056 D0E0              POP     ACC
0058 FF                MOV     R7,A
0059 D0E0              POP     ACC
005B 120000      R     LCALL   L?0823
005E 120000      R     LCALL   L?0712
0061 EC                MOV     A,R4
0062 C0E0              PUSH    ACC
0064 ED                MOV     A,R5
0065 C0E0              PUSH    ACC
0067 EE                MOV     A,R6
0068 C0E0              PUSH    ACC
006A EF                MOV     A,R7
006B C0E0              PUSH    ACC
006D 120000      R     LCALL   L?0662
0070 120000      R     LCALL   L?0715
0073 120000      E     LCALL   ?C?LLDXDATA
0076 780A              MOV     R0,#0AH
0078 120000      E     LCALL   ?C?ULSHR
007B 120000      R     LCALL   L?0841
007E D0E0              POP     ACC
0080 FF                MOV     R7,A
0081 D0E0              POP     ACC
0083 FE                MOV     R6,A
0084 D0E0              POP     ACC
0086 FD                MOV     R5,A
0087 D0E0              POP     ACC
0089 FC                MOV     R4,A
008A D3                SETB    C
008B 120000      E     LCALL   ?C?ULCMP
008E 4003              JC      ?C0123
                                           ; SOURCE LINE # 1161
0090 7F00              MOV     R7,#00H
0092 22                RET     
0093         ?C0123:
                                           ; SOURCE LINE # 1162
0093 120000      R     LCALL   L?0662
0096 120000      R     LCALL   L?0715
0099 120000      R     LCALL   L?0775
009C 120000      R     LCALL   L?0681
009F EE                MOV     A,R6
00A0 C0E0              PUSH    ACC
00A2 EF                MOV     A,R7
00A3 C0E0              PUSH    ACC
00A5 120000      R     LCALL   L?0662
00A8 120000      R     LCALL   L?0800
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 87  

00AB D0E0              POP     ACC
00AD FF                MOV     R7,A
00AE D0E0              POP     ACC
00B0 120000      R     LCALL   L?0823
00B3 120000      R     LCALL   L?0841
00B6 120000      R     LCALL   L?0662
00B9 120000      R     LCALL   L?0715
00BC 120000      E     LCALL   ?C?LLDXDATA
00BF 120000      R     LCALL   L?0712
00C2 C3                CLR     C
00C3 120000      E     LCALL   ?C?ULCMP
00C6 5003              JNC     ?C0124
                                           ; SOURCE LINE # 1163
00C8 7F00              MOV     R7,#00H
00CA 22                RET     
00CB         ?C0124:
                                           ; SOURCE LINE # 1165
00CB 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 1166
00CD         ?C0122:
00CD 22                RET     
00CE         L?0823:
00CE FE                MOV     R6,A
00CF E9                MOV     A,R1
00D0 2F                ADD     A,R7
00D1 F9                MOV     R1,A
00D2 EA                MOV     A,R2
00D3 3E                ADDC    A,R6
00D4 FA                MOV     R2,A
00D5 EB                MOV     A,R3
00D6 3D                ADDC    A,R5
00D7 FB                MOV     R3,A
00D8 120000      R     LCALL   _change_bit_order
00DB 22                RET     
             ; FUNCTION pd_check_requested_voltage (END)

             ; FUNCTION send_source_capability (BEGIN)
                                           ; SOURCE LINE # 1168
                                           ; SOURCE LINE # 1169
                                           ; SOURCE LINE # 1178
0000 120000      R     LCALL   L?0662
0003 2400        E     ADD     A,#LOW context+055H
0005 F9                MOV     R1,A
0006 7400        E     MOV     A,#HIGH context+055H
0008 120000      R     LCALL   L?0742
000B 7A00        R     MOV     R2,#HIGH src_caps_default_ma
000D 7900        R     MOV     R1,#LOW src_caps_default_ma
000F 7F04              MOV     R7,#04H
0011 120000      R     LCALL   L?0814
                                           ; SOURCE LINE # 1181
0014 120000      R     LCALL   L?0666
0017 120000      R     LCALL   L?0842
001A E0                MOVX    A,@DPTR
001B FE                MOV     R6,A
001C 900000      E     MOV     DPTR,#SWAP_BYTE
001F 120000      R     LCALL   L?0703
0022 120000      R     LCALL   L?0755
0025 120000      R     LCALL   L?0817
0028 120000      R     LCALL   L?0842
002B EF                MOV     A,R7
002C 120000      R     LCALL   L?0706
002F 120000      R     LCALL   L?0755
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 88  

0032 EE                MOV     A,R6
0033 120000      R     LCALL   L?0706
0036 2400        E     ADD     A,#LOW context+056H
0038 F582              MOV     DPL,A
003A E4                CLR     A
003B 3400        E     ADDC    A,#HIGH context+056H
003D 120000      R     LCALL   L?0704
0040 2400        E     ADD     A,#LOW context+057H
0042 F582              MOV     DPL,A
0044 E4                CLR     A
0045 3400        E     ADDC    A,#HIGH context+057H
0047 120000      R     LCALL   L?0789
004A 2400        E     ADD     A,#LOW context+056H
004C F582              MOV     DPL,A
004E E4                CLR     A
004F 3400        E     ADDC    A,#HIGH context+056H
0051 F583              MOV     DPH,A
0053 EE                MOV     A,R6
0054 120000      R     LCALL   L?0706
0057 2400        E     ADD     A,#LOW context+057H
0059 F582              MOV     DPL,A
005B E4                CLR     A
005C 3400        E     ADDC    A,#HIGH context+057H
005E F583              MOV     DPH,A
0060 EF                MOV     A,R7
                                           ; SOURCE LINE # 1184
0061 120000      R     LCALL   L?0706
0064 120000      R     LCALL   L?0836
0067 30E224            JNB     ACC.2,?C0128
006A 120000      R     LCALL   L?0729
006D 30E21E            JNB     ACC.2,?C0128
                                           ; SOURCE LINE # 1185
                                           ; SOURCE LINE # 1186
0070 120000      R     LCALL   L?0767
0073 30E20F            JNB     ACC.2,?C0129
0076 120000      R     LCALL   L?0723
0079 30E209            JNB     ACC.2,?C0129
                                           ; SOURCE LINE # 1189
007C 120000      R     LCALL   L?0754
007F E0                MOVX    A,@DPTR
0080 4422              ORL     A,#022H
0082 F0                MOVX    @DPTR,A
0083 8023              SJMP    ?C0131
0085         ?C0129:
                                           ; SOURCE LINE # 1191
0085 120000      R     LCALL   L?0754
0088 E0                MOVX    A,@DPTR
0089 4402              ORL     A,#02H
008B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1192
008C 801A              SJMP    ?C0131
008E         ?C0128:
                                           ; SOURCE LINE # 1193
008E 120000      R     LCALL   L?0666
0091 120000      R     LCALL   L?0768
0094 30E211            JNB     ACC.2,?C0131
0097 EF                MOV     A,R7
0098 120000      R     LCALL   L?0724
009B 30E20A            JNB     ACC.2,?C0131
                                           ; SOURCE LINE # 1195
009E 120000      R     LCALL   L?0662
00A1 120000      R     LCALL   L?0755
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 89  

00A4 E0                MOVX    A,@DPTR
00A5 4420              ORL     A,#020H
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1198
00A8         ?C0131:
                                           ; SOURCE LINE # 1199
00A8 120000      R     LCALL   L?0666
00AB 120000      R     LCALL   L?0812
00AE 7401              MOV     A,#01H
                                           ; SOURCE LINE # 1200
00B0 120000      R     LCALL   L?0703
00B3 120000      R     LCALL   L?0801
00B6 120000      R     LCALL   L?0699
00B9 7F2C              MOV     R7,#02CH
00BB 020000      R     LJMP    _send_pd_msg
             ; FUNCTION send_source_capability (END)

             ; FUNCTION send_sink_capability (BEGIN)
                                           ; SOURCE LINE # 1206
                                           ; SOURCE LINE # 1207
                                           ; SOURCE LINE # 1208
0000 120000      R     LCALL   L?0662
0003 2400        E     ADD     A,#LOW context+06H
0005 F9                MOV     R1,A
0006 7400        E     MOV     A,#HIGH context+06H
0008 120000      R     LCALL   L?0742
000B 7A00        R     MOV     R2,#HIGH snk_cap
000D 7900        R     MOV     R1,#LOW snk_cap
000F 7F08              MOV     R7,#08H
0011 120000      R     LCALL   L?0814
                                           ; SOURCE LINE # 1210
0014 120000      R     LCALL   L?0666
0017 120000      R     LCALL   L?0843
001A E0                MOVX    A,@DPTR
001B FE                MOV     R6,A
001C 900000      E     MOV     DPTR,#SWAP_BYTE
001F 120000      R     LCALL   L?0703
0022 120000      R     LCALL   L?0757
0025 120000      R     LCALL   L?0817
0028 120000      R     LCALL   L?0843
002B EF                MOV     A,R7
002C 120000      R     LCALL   L?0706
002F 120000      R     LCALL   L?0757
0032 EE                MOV     A,R6
0033 120000      R     LCALL   L?0706
0036 2400        E     ADD     A,#LOW context+07H
0038 F582              MOV     DPL,A
003A E4                CLR     A
003B 3400        E     ADDC    A,#HIGH context+07H
003D 120000      R     LCALL   L?0704
0040 2400        E     ADD     A,#LOW context+08H
0042 F582              MOV     DPL,A
0044 E4                CLR     A
0045 3400        E     ADDC    A,#HIGH context+08H
0047 120000      R     LCALL   L?0789
004A 2400        E     ADD     A,#LOW context+07H
004C F582              MOV     DPL,A
004E E4                CLR     A
004F 3400        E     ADDC    A,#HIGH context+07H
0051 F583              MOV     DPH,A
0053 EE                MOV     A,R6
0054 120000      R     LCALL   L?0706
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 90  

0057 2400        E     ADD     A,#LOW context+08H
0059 F582              MOV     DPL,A
005B E4                CLR     A
005C 3400        E     ADDC    A,#HIGH context+08H
005E F583              MOV     DPH,A
0060 EF                MOV     A,R7
                                           ; SOURCE LINE # 1211
0061 120000      R     LCALL   L?0706
0064 2400        E     ADD     A,#LOW context+0AH
0066 F582              MOV     DPL,A
0068 E4                CLR     A
0069 3400        E     ADDC    A,#HIGH context+0AH
006B 120000      R     LCALL   L?0705
006E 2400        E     ADD     A,#LOW context+0DH
0070 F582              MOV     DPL,A
0072 E4                CLR     A
0073 3400        E     ADDC    A,#HIGH context+0DH
0075 120000      R     LCALL   L?0790
0078 2400        E     ADD     A,#LOW context+0AH
007A F582              MOV     DPL,A
007C E4                CLR     A
007D 3400        E     ADDC    A,#HIGH context+0AH
007F F583              MOV     DPH,A
0081 EE                MOV     A,R6
0082 120000      R     LCALL   L?0706
0085 2400        E     ADD     A,#LOW context+0DH
0087 F582              MOV     DPL,A
0089 E4                CLR     A
008A 3400        E     ADDC    A,#HIGH context+0DH
008C F583              MOV     DPH,A
008E EF                MOV     A,R7
008F 120000      R     LCALL   L?0706
0092 2400        E     ADD     A,#LOW context+0BH
0094 F582              MOV     DPL,A
0096 E4                CLR     A
0097 3400        E     ADDC    A,#HIGH context+0BH
0099 120000      R     LCALL   L?0705
009C 2400        E     ADD     A,#LOW context+0CH
009E F582              MOV     DPL,A
00A0 E4                CLR     A
00A1 3400        E     ADDC    A,#HIGH context+0CH
00A3 120000      R     LCALL   L?0790
00A6 2400        E     ADD     A,#LOW context+0BH
00A8 F582              MOV     DPL,A
00AA E4                CLR     A
00AB 3400        E     ADDC    A,#HIGH context+0BH
00AD F583              MOV     DPH,A
00AF EE                MOV     A,R6
00B0 120000      R     LCALL   L?0706
00B3 2400        E     ADD     A,#LOW context+0CH
00B5 F582              MOV     DPL,A
00B7 E4                CLR     A
00B8 3400        E     ADDC    A,#HIGH context+0CH
00BA F583              MOV     DPH,A
00BC EF                MOV     A,R7
                                           ; SOURCE LINE # 1214
00BD 120000      R     LCALL   L?0706
00C0 120000      R     LCALL   L?0836
00C3 30E224            JNB     ACC.2,?C0141
00C6 120000      R     LCALL   L?0729
00C9 30E21E            JNB     ACC.2,?C0141
                                           ; SOURCE LINE # 1215
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 91  

                                           ; SOURCE LINE # 1216
00CC 120000      R     LCALL   L?0767
00CF 30E20F            JNB     ACC.2,?C0142
00D2 120000      R     LCALL   L?0723
00D5 30E209            JNB     ACC.2,?C0142
                                           ; SOURCE LINE # 1219
00D8 120000      R     LCALL   L?0756
00DB E0                MOVX    A,@DPTR
00DC 4422              ORL     A,#022H
00DE F0                MOVX    @DPTR,A
00DF 8023              SJMP    ?C0144
00E1         ?C0142:
                                           ; SOURCE LINE # 1221
00E1 120000      R     LCALL   L?0756
00E4 E0                MOVX    A,@DPTR
00E5 4402              ORL     A,#02H
00E7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1222
00E8 801A              SJMP    ?C0144
00EA         ?C0141:
                                           ; SOURCE LINE # 1223
00EA 120000      R     LCALL   L?0666
00ED 120000      R     LCALL   L?0768
00F0 30E211            JNB     ACC.2,?C0144
00F3 EF                MOV     A,R7
00F4 120000      R     LCALL   L?0724
00F7 30E20A            JNB     ACC.2,?C0144
                                           ; SOURCE LINE # 1225
00FA 120000      R     LCALL   L?0662
00FD 120000      R     LCALL   L?0757
0100 E0                MOVX    A,@DPTR
0101 4420              ORL     A,#020H
0103 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1228
0104         ?C0144:
                                           ; SOURCE LINE # 1233
0104 120000      R     LCALL   L?0666
0107 2400        E     ADD     A,#LOW context+05H
0109 F582              MOV     DPL,A
010B E4                CLR     A
010C 3400        E     ADDC    A,#HIGH context+05H
010E F583              MOV     DPH,A
0110 7402              MOV     A,#02H
                                           ; SOURCE LINE # 1234
0112 120000      R     LCALL   L?0703
0115 2400        E     ADD     A,#LOW context+06H
0117 F9                MOV     R1,A
0118 7400        E     MOV     A,#HIGH context+06H
011A 35F0              ADDC    A,B
011C FA                MOV     R2,A
011D 7B01              MOV     R3,#01H
011F 120000      R     LCALL   L?0719
0122 7F01              MOV     R7,#01H
0124 020000      R     LJMP    _send_pd_msg
             ; FUNCTION send_sink_capability (END)

             ; FUNCTION send_source_sink_capability (BEGIN)
                                           ; SOURCE LINE # 1237
                                           ; SOURCE LINE # 1238
                                           ; SOURCE LINE # 1239
0000 120000      R     LCALL   send_sink_capability
                                           ; SOURCE LINE # 1240
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 92  

0003 020000      R     LJMP    send_source_capability
             ; FUNCTION send_source_sink_capability (END)

             ; FUNCTION Recv_PD_Commands_Default_Callback (BEGIN)
                                           ; SOURCE LINE # 1256
                                           ; SOURCE LINE # 1257
                                           ; SOURCE LINE # 1263
0000 900000      E     MOV     DPTR,#l
                                           ; SOURCE LINE # 1265
0003 120000      R     LCALL   L?0832
0006 120000      R     LCALL   L?0646
0009 120000      R     LCALL   L?0758
000C 64F2              XRL     A,#0F2H
000E 6011              JZ      ?C0149
                                           ; SOURCE LINE # 1266
0010 EF                MOV     A,R7
0011 75F0BB            MOV     B,#0BBH
0014 A4                MUL     AB
0015 2400        E     ADD     A,#LOW context+071H
0017 F582              MOV     DPL,A
0019 E4                CLR     A
001A 3400        E     ADDC    A,#HIGH context+071H
001C F583              MOV     DPH,A
001E 7403              MOV     A,#03H
0020 F0                MOVX    @DPTR,A
0021         ?C0149:
                                           ; SOURCE LINE # 1269
0021 900000      E     MOV     DPTR,#port_id
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 120000      R     LCALL   L?0646
0029 120000      R     LCALL   L?0759
002C 700E              JNZ     ?C0150
                                           ; SOURCE LINE # 1270
                                           ; SOURCE LINE # 1271
002E EF                MOV     A,R7
002F 120000      R     LCALL   L?0646
0032 120000      R     LCALL   L?0760
0035 5403              ANL     A,#03H
0037 6029              JZ      ?C0153
                                           ; SOURCE LINE # 1272
0039 7F00              MOV     R7,#00H
003B 22                RET     
                                           ; SOURCE LINE # 1273
003C         ?C0150:
                                           ; SOURCE LINE # 1274
003C 900000      E     MOV     DPTR,#port_id
003F E0                MOVX    A,@DPTR
0040 FF                MOV     R7,A
0041 120000      R     LCALL   L?0646
0044 120000      R     LCALL   L?0759
0047 6401              XRL     A,#01H
0049 6017              JZ      ?C0153
                                           ; SOURCE LINE # 1275
                                           ; SOURCE LINE # 1276
004B         ?C0154:
                                           ; SOURCE LINE # 1277
004B EF                MOV     A,R7
004C 120000      R     LCALL   L?0646
004F 120000      R     LCALL   L?0759
0052 B4160D            CJNE    A,#016H,?C0153
                                           ; SOURCE LINE # 1278
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 93  

                                           ; SOURCE LINE # 1279
0055 120000      R     LCALL   L?0644
0058 120000      R     LCALL   L?0760
005B 6404              XRL     A,#04H
005D 6003              JZ      ?C0153
                                           ; SOURCE LINE # 1280
005F 7F01              MOV     R7,#01H
0061 22                RET     
                                           ; SOURCE LINE # 1281
0062         ?C0153:
                                           ; SOURCE LINE # 1283
0062 120000      R     LCALL   L?0644
0065 120000      R     LCALL   L?0759
0068 120000      E     LCALL   ?C?CCASE
006B 0000        R     DW      ?C0159
006D 00                DB      00H
006E 0000        R     DW      ?C0162
0070 01                DB      01H
0071 0000        R     DW      ?C0170
0073 10                DB      010H
0074 0000        R     DW      ?C0171
0076 11                DB      011H
0077 0000        R     DW      ?C0179
0079 16                DB      016H
007A 0000        R     DW      ?C0177
007C 19                DB      019H
007D 0000        R     DW      ?C0199
007F 1D                DB      01DH
0080 0000        R     DW      ?C0200
0082 1E                DB      01EH
0083 0000        R     DW      ?C0216
0085 22                DB      022H
0086 0000        R     DW      ?C0202
0088 23                DB      023H
0089 0000        R     DW      ?C0185
008B 25                DB      025H
008C 0000        R     DW      ?C0215
008E 26                DB      026H
008F 0000        R     DW      ?C0176
0091 27                DB      027H
0092 0000        R     DW      ?C0196
0094 2A                DB      02AH
0095 0000        R     DW      ?C0204
0097 32                DB      032H
0098 0000        R     DW      ?C0207
009A 33                DB      033H
009B 0000        R     DW      ?C0211
009D 35                DB      035H
009E 0000        R     DW      ?C0222
00A0 F1                DB      0F1H
00A1 0000        R     DW      ?C0223
00A3 F2                DB      0F2H
00A4 0000              DW      00H
00A6 0000        R     DW      ?C0158
                                           ; SOURCE LINE # 1284
                                           ; SOURCE LINE # 1285
00A8         ?C0159:
                                           ; SOURCE LINE # 1294
00A8 900000      E     MOV     DPTR,#port_id
00AB E0                MOVX    A,@DPTR
00AC FE                MOV     R6,A
00AD 120000      R     LCALL   L?0646
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 94  

00B0 120000      R     LCALL   L?0761
00B3 13                RRC     A
00B4 13                RRC     A
00B5 543F              ANL     A,#03FH
00B7 FF                MOV     R7,A
00B8 EE                MOV     A,R6
00B9 120000      R     LCALL   L?0646
00BC 120000      R     LCALL   L?0707
00BF 120000      R     LCALL   _build_rdo_from_source_caps_new
                                           ; SOURCE LINE # 1295
00C2 120000      R     LCALL   L?0721
00C5 7F0A              MOV     R7,#0AH
00C7 120000      R     LCALL   _send_pd_msg
                                           ; SOURCE LINE # 1296
00CA 900000      E     MOV     DPTR,#port_id
00CD E0                MOVX    A,@DPTR
00CE FF                MOV     R7,A
00CF 120000      R     LCALL   L?0646
                                           ; SOURCE LINE # 1297
00D2 120000      R     LCALL   L?0663
00D5 120000      R     LCALL   L?0844
00D8 7401              MOV     A,#01H
                                           ; SOURCE LINE # 1298
00DA 120000      R     LCALL   L?0703
00DD 120000      R     LCALL   L?0734
00E0 E4                CLR     A
00E1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1300
00E2 EF                MOV     A,R7
00E3 120000      R     LCALL   L?0650
00E6 7DB1              MOV     R5,#0B1H
00E8 120000      E     LCALL   _i2c_read_reg
00EB 900000      E     MOV     DPTR,#port_id
00EE E0                MOVX    A,@DPTR
00EF FE                MOV     R6,A
00F0 120000      R     LCALL   L?0684
00F3 EF                MOV     A,R7
00F4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1301
00F5 EE                MOV     A,R6
00F6 120000      R     LCALL   L?0650
00F9 7DAF              MOV     R5,#0AFH
00FB 120000      E     LCALL   _i2c_read_reg
00FE 900000      E     MOV     DPTR,#port_id
0101 E0                MOVX    A,@DPTR
0102 FE                MOV     R6,A
0103 120000      R     LCALL   L?0752
                                           ; SOURCE LINE # 1303
0106 120000      R     LCALL   L?0690
0109 4440              ORL     A,#040H
                                           ; SOURCE LINE # 1306
010B 120000      R     LCALL   L?0691
010E 4420              ORL     A,#020H
                                           ; SOURCE LINE # 1309
0110 120000      R     LCALL   L?0691
0113 4402              ORL     A,#02H
0115 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1311
0116 EE                MOV     A,R6
0117 75F0BB            MOV     B,#0BBH
011A A4                MUL     AB
011B 120000      R     LCALL   L?0791
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 95  

011E 7401              MOV     A,#01H
0120 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1316
0121 7F64              MOV     R7,#064H
0123 120000      E     LCALL   _ucsi_async_notify_raise_up
                                           ; SOURCE LINE # 1317
0126 900000      E     MOV     DPTR,#port_id
0129 E0                MOVX    A,@DPTR
012A FF                MOV     R7,A
012B 120000      R     LCALL   L?0646
012E 120000      R     LCALL   L?0761
0131 FE                MOV     R6,A
0132 741C              MOV     A,#01CH
0134 D3                SETB    C
0135 9E                SUBB    A,R6
0136 400A              JC      ?C0160
0138 EF                MOV     A,R7
0139 120000      R     LCALL   L?0646
013C 120000      R     LCALL   L?0761
013F FF                MOV     R7,A
0140 8002              SJMP    ?C0161
0142         ?C0160:
0142 7F1C              MOV     R7,#01CH
0144         ?C0161:
0144 7E00              MOV     R6,#00H
0146 EE                MOV     A,R6
0147 C0E0              PUSH    ACC
0149 EF                MOV     A,R7
014A C0E0              PUSH    ACC
014C 900000      E     MOV     DPTR,#port_id
014F E0                MOVX    A,@DPTR
0150 FF                MOV     R7,A
0151 120000      R     LCALL   L?0646
0154 120000      R     LCALL   L?0707
0157 E9                MOV     A,R1
0158 C0E0              PUSH    ACC
015A 120000      R     LCALL   L?0741
015D D0E0              POP     ACC
015F F9                MOV     R1,A
0160 D0E0              POP     ACC
0162 FF                MOV     R7,A
0163 D0E0              POP     ACC
0165 FE                MOV     R6,A
                                           ; SOURCE LINE # 1318
0166 020000      R     LJMP    ?C0601
                                           ; SOURCE LINE # 1319
0169         ?C0162:
                                           ; SOURCE LINE # 1321
0169 900000      E     MOV     DPTR,#port_id
016C E0                MOVX    A,@DPTR
016D FF                MOV     R7,A
016E 120000      R     LCALL   L?0646
                                           ; SOURCE LINE # 1322
0171 120000      R     LCALL   L?0663
0174 120000      R     LCALL   L?0844
0177 E4                CLR     A
0178 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1323
0179 EF                MOV     A,R7
017A 120000      R     LCALL   L?0646
017D 120000      R     LCALL   L?0761
0180 FF                MOV     R7,A
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 96  

0181 741C              MOV     A,#01CH
0183 D3                SETB    C
0184 9F                SUBB    A,R7
0185 4009              JC      ?C0163
0187 120000      R     LCALL   L?0645
018A 120000      R     LCALL   L?0761
018D FF                MOV     R7,A
018E 8002              SJMP    ?C0164
0190         ?C0163:
0190 7F1C              MOV     R7,#01CH
0192         ?C0164:
0192 7E00              MOV     R6,#00H
0194 EE                MOV     A,R6
0195 C0E0              PUSH    ACC
0197 EF                MOV     A,R7
0198 C0E0              PUSH    ACC
019A 900000      E     MOV     DPTR,#port_id
019D E0                MOVX    A,@DPTR
019E FF                MOV     R7,A
019F 120000      R     LCALL   L?0646
01A2 120000      R     LCALL   L?0708
01A5 E9                MOV     A,R1
01A6 C0E0              PUSH    ACC
01A8 120000      R     LCALL   L?0741
01AB D0E0              POP     ACC
01AD F9                MOV     R1,A
01AE D0E0              POP     ACC
01B0 FF                MOV     R7,A
01B1 D0E0              POP     ACC
01B3 FE                MOV     R6,A
01B4 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 1324
01B7 120000      R     LCALL   L?0645
01BA 120000      R     LCALL   L?0761
01BD D3                SETB    C
01BE 941C              SUBB    A,#01CH
01C0 5003              JNC     $ + 5H
01C2 020000      R     LJMP    ?C0158
                                           ; SOURCE LINE # 1325
                                           ; SOURCE LINE # 1326
01C5 E4                CLR     A
01C6 900000      E     MOV     DPTR,#l
01C9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1327
01CA 020000      R     LJMP    ?C0158
                                           ; SOURCE LINE # 1328
                                           ; SOURCE LINE # 1329
                                           ; SOURCE LINE # 1330
                                           ; SOURCE LINE # 1339
                                           ; SOURCE LINE # 1340
                                           ; SOURCE LINE # 1341
                                           ; SOURCE LINE # 1342
                                           ; SOURCE LINE # 1343
                                           ; SOURCE LINE # 1344
                                           ; SOURCE LINE # 1345
                                           ; SOURCE LINE # 1346
01CD         ?C0170:
                                           ; SOURCE LINE # 1347
01CD 120000      R     LCALL   L?0662
01D0 120000      R     LCALL   L?0830
                                           ; SOURCE LINE # 1348
01D3 120000      R     LCALL   get_power_role
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 97  

01D6 900000      E     MOV     DPTR,#port_id
01D9 E0                MOVX    A,@DPTR
01DA FE                MOV     R6,A
01DB 75F0BB            MOV     B,#0BBH
01DE A4                MUL     AB
01DF 2400        E     ADD     A,#LOW context+01H
01E1 F582              MOV     DPL,A
01E3 E4                CLR     A
01E4 3400        E     ADDC    A,#HIGH context+01H
                                           ; SOURCE LINE # 1349
01E6 120000      R     LCALL   L?0690
01E9 4404              ORL     A,#04H
                                           ; SOURCE LINE # 1350
                                           ; SOURCE LINE # 1351
01EB 020000      R     LJMP    ?C0602
                                           ; SOURCE LINE # 1352
01EE         ?C0171:
                                           ; SOURCE LINE # 1353
01EE 120000      R     LCALL   L?0662
01F1 120000      R     LCALL   L?0689
01F4 4408              ORL     A,#08H
01F6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1354
01F7 120000      R     LCALL   get_data_role
01FA 900000      E     MOV     DPTR,#port_id
01FD E0                MOVX    A,@DPTR
01FE 75F0BB            MOV     B,#0BBH
0201 BF0109            CJNE    R7,#01H,?C0172
                                           ; SOURCE LINE # 1355
0204 120000      R     LCALL   L?0736
0207 7402              MOV     A,#02H
0209 F0                MOVX    @DPTR,A
020A 020000      R     LJMP    ?C0603
020D         ?C0172:
                                           ; SOURCE LINE # 1357
020D 120000      R     LCALL   L?0736
0210 7401              MOV     A,#01H
0212 F0                MOVX    @DPTR,A
0213         ?C0173:
                                           ; SOURCE LINE # 1358
                                           ; SOURCE LINE # 1359
0213 020000      R     LJMP    ?C0603
                                           ; SOURCE LINE # 1360
                                           ; SOURCE LINE # 1361
                                           ; SOURCE LINE # 1362
                                           ; SOURCE LINE # 1363
                                           ; SOURCE LINE # 1364
0216         ?C0176:
                                           ; SOURCE LINE # 1365
0216 120000      R     LCALL   L?0666
0219 120000      R     LCALL   L?0802
021C 2404              ADD     A,#04H
                                           ; SOURCE LINE # 1367
021E 120000      R     LCALL   L?0686
0221 4401              ORL     A,#01H
                                           ; SOURCE LINE # 1369
0223 120000      R     LCALL   L?0665
0226 2400        E     ADD     A,#LOW context+02DH
0228 F582              MOV     DPL,A
022A E4                CLR     A
022B 3400        E     ADDC    A,#HIGH context+02DH
022D F583              MOV     DPH,A
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 98  

022F C083              PUSH    DPH
0231 C082              PUSH    DPL
0233 EF                MOV     A,R7
0234 75F0BB            MOV     B,#0BBH
0237 A4                MUL     AB
0238 120000      R     LCALL   L?0802
023B 13                RRC     A
023C 13                RRC     A
023D 543F              ANL     A,#03FH
023F D082              POP     DPL
0241 D083              POP     DPH
0243 75F006            MOV     B,#06H
0246 120000      E     LCALL   ?C?OFFXADD
0249 74FF              MOV     A,#0FFH
024B F0                MOVX    @DPTR,A
024C A3                INC     DPTR
                                           ; SOURCE LINE # 1370
024D 120000      R     LCALL   L?0832
0250 120000      R     LCALL   L?0646
0253 120000      R     LCALL   L?0708
0256 EA                MOV     A,R2
0257 C0E0              PUSH    ACC
0259 E9                MOV     A,R1
025A C0E0              PUSH    ACC
025C EF                MOV     A,R7
025D 75F0BB            MOV     B,#0BBH
0260 A4                MUL     AB
0261 2400        E     ADD     A,#LOW context+02FH
0263 F9                MOV     R1,A
0264 7400        E     MOV     A,#HIGH context+02FH
0266 35F0              ADDC    A,B
0268 FA                MOV     R2,A
0269 120000      R     LCALL   L?0662
026C 120000      R     LCALL   L?0803
026F 13                RRC     A
0270 13                RRC     A
0271 543F              ANL     A,#03FH
0273 75F006            MOV     B,#06H
0276 A4                MUL     AB
0277 29                ADD     A,R1
0278 F9                MOV     R1,A
0279 EA                MOV     A,R2
027A 120000      R     LCALL   L?0742
027D D0E0              POP     ACC
027F F9                MOV     R1,A
0280 D0E0              POP     ACC
0282 FA                MOV     R2,A
0283 7E00              MOV     R6,#00H
0285 7F04              MOV     R7,#04H
0287         ?C0601:
0287 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 1371
028A 020000      R     LJMP    ?C0158
                                           ; SOURCE LINE # 1372
028D         ?C0177:
                                           ; SOURCE LINE # 1373
028D 120000      R     LCALL   L?0721
0290 7F29              MOV     R7,#029H
0292 120000      R     LCALL   _send_pd_msg
                                           ; SOURCE LINE # 1374
0295 120000      R     LCALL   L?0666
0298 2400        E     ADD     A,#LOW context+073H
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 99  

029A F582              MOV     DPL,A
029C E4                CLR     A
029D 3400        E     ADDC    A,#HIGH context+073H
029F F583              MOV     DPH,A
02A1 E0                MOVX    A,@DPTR
02A2 4402              ORL     A,#02H
                                           ; SOURCE LINE # 1375
02A4 120000      R     LCALL   L?0686
02A7 4408              ORL     A,#08H
02A9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1377
02AA 120000      R     LCALL   L?0662
02AD 120000      R     LCALL   L?0689
02B0 4401              ORL     A,#01H
02B2         ?C0602:
02B2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1379
02B3         ?C0603:
02B3 7F32              MOV     R7,#032H
                                           ; SOURCE LINE # 1380
02B5 020000      R     LJMP    ?C0604
                                           ; SOURCE LINE # 1381
                                           ; SOURCE LINE # 1383
                                           ; SOURCE LINE # 1384
02B8         ?C0179:
                                           ; SOURCE LINE # 1387
02B8 120000      R     LCALL   L?0645
02BB 120000      R     LCALL   L?0761
02BE 6404              XRL     A,#04H
02C0 6003              JZ      $ + 5H
02C2 020000      R     LJMP    ?C0158
                                           ; SOURCE LINE # 1388
02C5         ?C0180:
                                           ; SOURCE LINE # 1389
02C5 120000      R     LCALL   L?0645
02C8 120000      R     LCALL   L?0675
02CB 120000      R     LCALL   L?0772
02CE EC                MOV     A,R4
02CF C0E0              PUSH    ACC
02D1 ED                MOV     A,R5
02D2 C0E0              PUSH    ACC
02D4 EE                MOV     A,R6
02D5 C0E0              PUSH    ACC
02D7 EF                MOV     A,R7
02D8 C0E0              PUSH    ACC
02DA 120000      R     LCALL   L?0645
02DD 120000      R     LCALL   L?0762
02E0 FF                MOV     R7,A
02E1 E4                CLR     A
02E2 FC                MOV     R4,A
02E3 FD                MOV     R5,A
02E4 FE                MOV     R6,A
02E5 D0E0              POP     ACC
02E7 FB                MOV     R3,A
02E8 D0E0              POP     ACC
02EA FA                MOV     R2,A
02EB D0E0              POP     ACC
02ED F9                MOV     R1,A
02EE D0E0              POP     ACC
02F0 F8                MOV     R0,A
02F1 120000      E     LCALL   ?C?LOR
02F4 EC                MOV     A,R4
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 100 

02F5 C0E0              PUSH    ACC
02F7 ED                MOV     A,R5
02F8 C0E0              PUSH    ACC
02FA EE                MOV     A,R6
02FB C0E0              PUSH    ACC
02FD EF                MOV     A,R7
02FE C0E0              PUSH    ACC
0300 120000      R     LCALL   L?0645
0303 900002            MOV     DPTR,#02H
0306 120000      R     LCALL   L?0677
0309 120000      R     LCALL   L?0727
030C D0E0              POP     ACC
030E FB                MOV     R3,A
030F D0E0              POP     ACC
0311 FA                MOV     R2,A
0312 D0E0              POP     ACC
0314 F9                MOV     R1,A
0315 D0E0              POP     ACC
0317 F8                MOV     R0,A
0318 120000      E     LCALL   ?C?LOR
031B EC                MOV     A,R4
031C C0E0              PUSH    ACC
031E ED                MOV     A,R5
031F C0E0              PUSH    ACC
0321 EE                MOV     A,R6
0322 C0E0              PUSH    ACC
0324 EF                MOV     A,R7
0325 C0E0              PUSH    ACC
0327 120000      R     LCALL   L?0645
032A 900003            MOV     DPTR,#03H
032D 120000      R     LCALL   L?0695
0330 7818              MOV     R0,#018H
0332 120000      R     LCALL   L?0774
0335 D0E0              POP     ACC
0337 FB                MOV     R3,A
0338 D0E0              POP     ACC
033A FA                MOV     R2,A
033B D0E0              POP     ACC
033D F9                MOV     R1,A
033E D0E0              POP     ACC
0340 F8                MOV     R0,A
0341 120000      E     LCALL   ?C?LOR
0344 120000      R     LCALL   L?0713
0347 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1400
034A EB                MOV     A,R3
034B 120000      R     LCALL   L?0692
034E 4440              ORL     A,#040H
0350 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1403
0351 EB                MOV     A,R3
0352 120000      R     LCALL   L?0692
0355 4420              ORL     A,#020H
0357 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1407
0358 020000      R     LJMP    ?C0158
                                           ; SOURCE LINE # 1409
                                           ; SOURCE LINE # 1410
                                           ; SOURCE LINE # 1411
                                           ; SOURCE LINE # 1416
                                           ; SOURCE LINE # 1417
                                           ; SOURCE LINE # 1418
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 101 

                                           ; SOURCE LINE # 1419
                                           ; SOURCE LINE # 1420
035B         ?C0185:
                                           ; SOURCE LINE # 1422
035B 900000      E     MOV     DPTR,#port_id
035E E0                MOVX    A,@DPTR
035F FF                MOV     R7,A
0360 120000      R     LCALL   L?0646
0363 120000      R     LCALL   L?0694
0366 900000      E     MOV     DPTR,#l
0369 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1424
036A EF                MOV     A,R7
036B 120000      R     LCALL   L?0646
036E 120000      R     LCALL   L?0708
0371 120000      R     LCALL   L?0839
0374 20E103            JB      ACC.1,$ + 6H
0377 020000      R     LJMP    ?C0186
                                           ; SOURCE LINE # 1425
037A 900000      E     MOV     DPTR,#l
037D E0                MOVX    A,@DPTR
037E 30E00A            JNB     ACC.0,?C0187
                                           ; SOURCE LINE # 1426
0381 7404              MOV     A,#04H
                                           ; SOURCE LINE # 1427
0383 120000      R     LCALL   L?0671
0386 7F33              MOV     R7,#033H
0388 120000      R     LCALL   _send_pd_msg
                                           ; SOURCE LINE # 1428
038B         ?C0187:
                                           ; SOURCE LINE # 1429
038B 900000      E     MOV     DPTR,#l
038E E0                MOVX    A,@DPTR
038F 30E10A            JNB     ACC.1,?C0188
                                           ; SOURCE LINE # 1430
0392 7405              MOV     A,#05H
                                           ; SOURCE LINE # 1431
0394 120000      R     LCALL   L?0671
0397 7F33              MOV     R7,#033H
0399 120000      R     LCALL   _send_pd_msg
                                           ; SOURCE LINE # 1432
039C         ?C0188:
                                           ; SOURCE LINE # 1433
039C 900000      E     MOV     DPTR,#l
039F E0                MOVX    A,@DPTR
03A0 30E20D            JNB     ACC.2,?C0189
                                           ; SOURCE LINE # 1434
03A3 900000      E     MOV     DPTR,#k
03A6 7406              MOV     A,#06H
                                           ; SOURCE LINE # 1435
03A8 120000      R     LCALL   L?0672
03AB 7F33              MOV     R7,#033H
03AD 120000      R     LCALL   _send_pd_msg
                                           ; SOURCE LINE # 1436
03B0         ?C0189:
                                           ; SOURCE LINE # 1437
03B0 900000      E     MOV     DPTR,#l
03B3 E0                MOVX    A,@DPTR
03B4 30E30D            JNB     ACC.3,?C0190
                                           ; SOURCE LINE # 1438
03B7 900000      E     MOV     DPTR,#k
03BA 7407              MOV     A,#07H
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 102 

                                           ; SOURCE LINE # 1439
03BC 120000      R     LCALL   L?0672
03BF 7F33              MOV     R7,#033H
03C1 120000      R     LCALL   _send_pd_msg
                                           ; SOURCE LINE # 1440
03C4         ?C0190:
                                           ; SOURCE LINE # 1441
03C4 900000      E     MOV     DPTR,#l
03C7 E0                MOVX    A,@DPTR
03C8 30E40E            JNB     ACC.4,?C0191
                                           ; SOURCE LINE # 1442
03CB E4                CLR     A
03CC 900000      E     MOV     DPTR,#k
03CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1443
03D0 04                INC     A
03D1 120000      R     LCALL   L?0673
03D4 7F33              MOV     R7,#033H
03D6 120000      R     LCALL   _send_pd_msg
                                           ; SOURCE LINE # 1444
03D9         ?C0191:
                                           ; SOURCE LINE # 1445
03D9 900000      E     MOV     DPTR,#l
03DC E0                MOVX    A,@DPTR
03DD 30E50F            JNB     ACC.5,?C0192
                                           ; SOURCE LINE # 1446
03E0 900000      E     MOV     DPTR,#k
03E3 7401              MOV     A,#01H
03E5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1447
03E6 FB                MOV     R3,A
03E7 120000      R     LCALL   L?0674
03EA 7F33              MOV     R7,#033H
03EC 120000      R     LCALL   _send_pd_msg
                                           ; SOURCE LINE # 1448
03EF         ?C0192:
                                           ; SOURCE LINE # 1449
03EF 900000      E     MOV     DPTR,#l
03F2 E0                MOVX    A,@DPTR
03F3 30E615            JNB     ACC.6,?C0193
                                           ; SOURCE LINE # 1450
03F6 900000      E     MOV     DPTR,#k
03F9 7402              MOV     A,#02H
03FB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1451
03FC 7B01              MOV     R3,#01H
03FE 7A00        E     MOV     R2,#HIGH k
0400 7900        E     MOV     R1,#LOW k
0402 14                DEC     A
0403 120000      R     LCALL   L?0720
0406 7F33              MOV     R7,#033H
0408 120000      R     LCALL   _send_pd_msg
                                           ; SOURCE LINE # 1452
040B         ?C0193:
                                           ; SOURCE LINE # 1453
040B 900000      E     MOV     DPTR,#l
040E E0                MOVX    A,@DPTR
040F 20E703            JB      ACC.7,$ + 6H
0412 020000      R     LJMP    ?C0158
                                           ; SOURCE LINE # 1454
0415 900000      E     MOV     DPTR,#k
0418 7403              MOV     A,#03H
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 103 

                                           ; SOURCE LINE # 1455
041A 120000      R     LCALL   L?0672
041D 7F33              MOV     R7,#033H
                                           ; SOURCE LINE # 1456
                                           ; SOURCE LINE # 1457
041F 020000      R     LJMP    ?C0614
0422         ?C0186:
                                           ; SOURCE LINE # 1458
0422 120000      R     LCALL   L?0722
0425 7F1E              MOV     R7,#01EH
0427         ?C0605:
                                           ; SOURCE LINE # 1459
                                           ; SOURCE LINE # 1460
0427 020000      R     LJMP    ?C0614
                                           ; SOURCE LINE # 1462
042A         ?C0196:
                                           ; SOURCE LINE # 1463
042A 120000      R     LCALL   L?0666
042D 120000      R     LCALL   L?0793
0430 E0                MOVX    A,@DPTR
0431 30E32F            JNB     ACC.3,?C0197
0434 EF                MOV     A,R7
0435 120000      R     LCALL   L?0646
0438 120000      R     LCALL   L?0762
043B 701C              JNZ     ?C0198
043D 120000      R     LCALL   L?0645
0440 120000      R     LCALL   L?0675
0443 7014              JNZ     ?C0198
0445 EF                MOV     A,R7
0446 120000      R     LCALL   L?0646
0449 120000      R     LCALL   L?0694
044C 700B              JNZ     ?C0198
044E 120000      R     LCALL   L?0645
0451 120000      R     LCALL   L?0708
0454 120000      R     LCALL   L?0840
0457 600A              JZ      ?C0197
0459         ?C0198:
                                           ; SOURCE LINE # 1466
0459 120000      R     LCALL   L?0645
045C 120000      R     LCALL   L?0676
045F FF                MOV     R7,A
0460 120000      R     LCALL   _dp_configure_redriver
0463         ?C0197:
                                           ; SOURCE LINE # 1468
0463 900000      E     MOV     DPTR,#port_id
0466 E0                MOVX    A,@DPTR
0467 FF                MOV     R7,A
0468 120000      R     LCALL   L?0646
046B 120000      R     LCALL   L?0676
046E FD                MOV     R5,A
046F 120000      E     LCALL   _anx_ucsi_pin_assignment_event
                                           ; SOURCE LINE # 1469
0472 020000      R     LJMP    ?C0158
                                           ; SOURCE LINE # 1471
0475         ?C0199:
                                           ; SOURCE LINE # 1473
0475 7A00        R     MOV     R2,#HIGH pd_source_cap_extended
0477 7900        R     MOV     R1,#LOW pd_source_cap_extended
0479 120000      R     LCALL   L?0748
047C 7F30              MOV     R7,#030H
047E         ?C0606:
                                           ; SOURCE LINE # 1474
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 104 

047E 020000      R     LJMP    ?C0614
                                           ; SOURCE LINE # 1475
0481         ?C0200:
                                           ; SOURCE LINE # 1476
0481 7BFF              MOV     R3,#0FFH
0483 7A00        R     MOV     R2,#HIGH pd_status_data
0485 7900        R     MOV     R1,#LOW pd_status_data
0487 7405              MOV     A,#05H
0489 120000      R     LCALL   L?0749
048C 7F31              MOV     R7,#031H
048E         ?C0607:
                                           ; SOURCE LINE # 1477
048E 020000      R     LJMP    ?C0614
                                           ; SOURCE LINE # 1478
                                           ; SOURCE LINE # 1479
                                           ; SOURCE LINE # 1480
0491         ?C0202:
                                           ; SOURCE LINE # 1482
0491 7A00        R     MOV     R2,#HIGH pd_sink_cap_extended
0493 7900        R     MOV     R1,#LOW pd_sink_cap_extended
0495 120000      R     LCALL   L?0748
0498 7F3A              MOV     R7,#03AH
049A         ?C0608:
                                           ; SOURCE LINE # 1483
049A 020000      R     LJMP    ?C0614
                                           ; SOURCE LINE # 1484
                                           ; SOURCE LINE # 1485
                                           ; SOURCE LINE # 1486
049D         ?C0204:
                                           ; SOURCE LINE # 1488
049D 120000      R     LCALL   L?0645
04A0 120000      R     LCALL   L?0763
04A3 D3                SETB    C
04A4 9407              SUBB    A,#07H
04A6 7BFF              MOV     R3,#0FFH
04A8 4006              JC      ?C0205
                                           ; SOURCE LINE # 1489
04AA 7A00        R     MOV     R2,#HIGH pd_battery_cap_invalid
04AC 7900        R     MOV     R1,#LOW pd_battery_cap_invalid
04AE 8004              SJMP    ?C0599
04B0         ?C0205:
                                           ; SOURCE LINE # 1491
04B0 7A00        R     MOV     R2,#HIGH pd_battery_cap
04B2 7900        R     MOV     R1,#LOW pd_battery_cap
04B4         ?C0599:
04B4 900000      R     MOV     DPTR,#?_send_pd_msg?BYTE+04H
04B7 7409              MOV     A,#09H
04B9 F0                MOVX    @DPTR,A
04BA E4                CLR     A
04BB A3                INC     DPTR
04BC F0                MOVX    @DPTR,A
04BD 7F34              MOV     R7,#034H
04BF         ?C0609:
                                           ; SOURCE LINE # 1492
04BF 020000      R     LJMP    ?C0614
                                           ; SOURCE LINE # 1493
04C2         ?C0207:
                                           ; SOURCE LINE # 1494
04C2 120000      R     LCALL   L?0645
04C5 120000      R     LCALL   L?0763
04C8 D3                SETB    C
04C9 9407              SUBB    A,#07H
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 105 

04CB 4008              JC      ?C0208
                                           ; SOURCE LINE # 1495
04CD 7BFF              MOV     R3,#0FFH
04CF 7A00        R     MOV     R2,#HIGH pd_battery_status_invalid
04D1 7900        R     MOV     R1,#LOW pd_battery_status_invalid
04D3 8014              SJMP    ?C0600
04D5         ?C0208:
                                           ; SOURCE LINE # 1497
04D5 120000      R     LCALL   L?0645
04D8 120000      R     LCALL   L?0763
04DB 75F004            MOV     B,#04H
04DE A4                MUL     AB
04DF 2400        R     ADD     A,#LOW pd_battery_status
04E1 F9                MOV     R1,A
04E2 7400        R     MOV     A,#HIGH pd_battery_status
04E4 35F0              ADDC    A,B
04E6 FA                MOV     R2,A
04E7 7BFF              MOV     R3,#0FFH
04E9         ?C0600:
04E9 120000      R     LCALL   L?0699
04EC 7F24              MOV     R7,#024H
04EE         ?C0610:
                                           ; SOURCE LINE # 1498
04EE 8036              SJMP    ?C0614
                                           ; SOURCE LINE # 1499
                                           ; SOURCE LINE # 1500
                                           ; SOURCE LINE # 1501
04F0         ?C0211:
                                           ; SOURCE LINE # 1504
04F0 120000      R     LCALL   L?0645
04F3 120000      R     LCALL   L?0763
04F6 7013              JNZ     ?C0212
                                           ; SOURCE LINE # 1505
04F8 7B01              MOV     R3,#01H
04FA 7A00        R     MOV     R2,#HIGH pd_manufacturer_info_data
04FC 7900        R     MOV     R1,#LOW pd_manufacturer_info_data
04FE 900000      R     MOV     DPTR,#?_send_pd_msg?BYTE+04H
0501 741A              MOV     A,#01AH
0503 F0                MOVX    @DPTR,A
0504 E4                CLR     A
0505 A3                INC     DPTR
0506 F0                MOVX    @DPTR,A
0507 7F36              MOV     R7,#036H
0509         ?C0611:
0509 801B              SJMP    ?C0614
050B         ?C0212:
                                           ; SOURCE LINE # 1507
050B 120000      R     LCALL   L?0722
050E 7F1C              MOV     R7,#01CH
0510         ?C0612:
                                           ; SOURCE LINE # 1508
0510 8014              SJMP    ?C0614
                                           ; SOURCE LINE # 1509
                                           ; SOURCE LINE # 1510
                                           ; SOURCE LINE # 1511
0512         ?C0215:
                                           ; SOURCE LINE # 1512
0512 7A00        R     MOV     R2,#HIGH pd_country_code_info
0514 7900        R     MOV     R1,#LOW pd_country_code_info
0516 120000      R     LCALL   L?0718
0519 7F38              MOV     R7,#038H
051B         ?C0613:
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 106 

                                           ; SOURCE LINE # 1513
051B 8009              SJMP    ?C0614
                                           ; SOURCE LINE # 1514
051D         ?C0216:
                                           ; SOURCE LINE # 1515
051D 7A00        R     MOV     R2,#HIGH pd_country_code_data
051F 7900        R     MOV     R1,#LOW pd_country_code_data
0521 120000      R     LCALL   L?0718
0524 7F39              MOV     R7,#039H
0526         ?C0614:
0526 120000      R     LCALL   _send_pd_msg
                                           ; SOURCE LINE # 1516
0529 020000      R     LJMP    ?C0158
                                           ; SOURCE LINE # 1517
                                           ; SOURCE LINE # 1518
                                           ; SOURCE LINE # 1519
                                           ; SOURCE LINE # 1520
                                           ; SOURCE LINE # 1521
                                           ; SOURCE LINE # 1522
                                           ; SOURCE LINE # 1523
                                           ; SOURCE LINE # 1524
                                           ; SOURCE LINE # 1525
                                           ; SOURCE LINE # 1526
                                           ; SOURCE LINE # 1527
052C         ?C0222:
                                           ; SOURCE LINE # 1528
052C 7F33              MOV     R7,#033H
052E 120000      E     LCALL   _RamDebug
                                           ; SOURCE LINE # 1530
0531 7F34              MOV     R7,#034H
0533 120000      E     LCALL   _RamDebug
                                           ; SOURCE LINE # 1531
0536 120000      R     LCALL   L?0662
0539 120000      R     LCALL   L?0693
053C 4480              ORL     A,#080H
053E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1532
053F 7F04              MOV     R7,#04H
0541         ?C0604:
0541 120000      E     LCALL   _ucsi_async_notify_raise_up
                                           ; SOURCE LINE # 1534
0544 802F              SJMP    ?C0158
                                           ; SOURCE LINE # 1535
0546         ?C0223:
                                           ; SOURCE LINE # 1536
0546 7F35              MOV     R7,#035H
0548 120000      E     LCALL   _RamDebug
                                           ; SOURCE LINE # 1542
054B 900000      E     MOV     DPTR,#port_id
054E E0                MOVX    A,@DPTR
054F FF                MOV     R7,A
0550 120000      R     LCALL   L?0646
0553 120000      R     LCALL   L?0761
0556 600A              JZ      ?C0225
0558 EF                MOV     A,R7
0559 120000      R     LCALL   L?0646
055C 120000      R     LCALL   L?0763
055F 30E113            JNB     ACC.1,?C0158
0562         ?C0225:
                                           ; SOURCE LINE # 1543
0562 120000      R     LCALL   L?0662
0565 120000      R     LCALL   L?0693
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 107 

0568 4480              ORL     A,#080H
056A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1544
056B 7F04              MOV     R7,#04H
056D 120000      E     LCALL   _ucsi_async_notify_raise_up
                                           ; SOURCE LINE # 1545
0570 7F36              MOV     R7,#036H
0572 120000      E     LCALL   _RamDebug
                                           ; SOURCE LINE # 1549
                                           ; SOURCE LINE # 1551
                                           ; SOURCE LINE # 1552
                                           ; SOURCE LINE # 1553
                                           ; SOURCE LINE # 1554
                                           ; SOURCE LINE # 1555
0575         ?C0158:
                                           ; SOURCE LINE # 1557
0575 900000      E     MOV     DPTR,#l
0578 E0                MOVX    A,@DPTR
0579 FF                MOV     R7,A
                                           ; SOURCE LINE # 1559
057A         ?C0152:
057A 22                RET     
             ; FUNCTION Recv_PD_Commands_Default_Callback (END)

             ; FUNCTION Recv_PD_Cmd_Rsp_Default_Callback (BEGIN)
                                           ; SOURCE LINE # 1568
                                           ; SOURCE LINE # 1569
                                           ; SOURCE LINE # 1575
0000 900000      E     MOV     DPTR,#port_id
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 120000      R     LCALL   L?0646
0008 120000      R     LCALL   L?0763
000B 24F0              ADD     A,#0F0H
000D 6013              JZ      ?C0230
000F 241F              ADD     A,#01FH
0011 6017              JZ      ?C0234
0013 14                DEC     A
0014 6014              JZ      ?C0234
0016 24E1              ADD     A,#0E1H
0018 7019              JNZ     ?C0228
                                           ; SOURCE LINE # 1576
001A         ?C0229:
                                           ; SOURCE LINE # 1581
001A 120000      R     LCALL   L?0687
001D 4408              ORL     A,#08H
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1582
0020 8011              SJMP    ?C0228
                                           ; SOURCE LINE # 1584
0022         ?C0230:
                                           ; SOURCE LINE # 1585
0022 120000      R     LCALL   L?0662
0025 120000      R     LCALL   L?0830
                                           ; SOURCE LINE # 1587
0028 8009              SJMP    ?C0228
                                           ; SOURCE LINE # 1588
                                           ; SOURCE LINE # 1592
                                           ; SOURCE LINE # 1593
                                           ; SOURCE LINE # 1597
                                           ; SOURCE LINE # 1598
                                           ; SOURCE LINE # 1602
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 108 

                                           ; SOURCE LINE # 1603
002A         ?C0234:
                                           ; SOURCE LINE # 1605
                                           ; SOURCE LINE # 1607
                                           ; SOURCE LINE # 1608
002A         ?C0615:
002A 120000      R     LCALL   L?0662
002D 120000      R     LCALL   L?0693
0030 4480              ORL     A,#080H
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1612
                                           ; SOURCE LINE # 1614
                                           ; SOURCE LINE # 1615
                                           ; SOURCE LINE # 1616
0033         ?C0228:
                                           ; SOURCE LINE # 1618
0033 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 1619
0035         ?C0237:
0035 22                RET     
             ; FUNCTION Recv_PD_Cmd_Rsp_Default_Callback (END)

             ; FUNCTION Recv_PD_VDM_Defalut_Callback (BEGIN)
                                           ; SOURCE LINE # 1628
                                           ; SOURCE LINE # 1629
                                           ; SOURCE LINE # 1630
0000 900000      E     MOV     DPTR,#port_id
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 120000      R     LCALL   L?0646
0008 120000      E     LCALL   ?C?CLDPTR
000B C4                SWAP    A
000C 13                RRC     A
000D 13                RRC     A
000E 5403              ANL     A,#03H
0010 7029              JNZ     ?C0238
0012 EF                MOV     A,R7
0013 120000      R     LCALL   L?0646
0016 120000      R     LCALL   L?0759
0019 6414              XRL     A,#014H
001B 701E              JNZ     ?C0238
                                           ; SOURCE LINE # 1631
001D 120000      R     LCALL   L?0708
0020 7800        R     MOV     R0,#LOW svid
0022 7C00        R     MOV     R4,#HIGH svid
0024 7DFF              MOV     R5,#0FFH
0026 7E00              MOV     R6,#00H
0028 7F04              MOV     R7,#04H
002A 120000      E     LCALL   ?C?MEMCMP
002D EF                MOV     A,R7
002E 6008              JZ      ?C0240
                                           ; SOURCE LINE # 1634
0030         ?C0239:
                                           ; SOURCE LINE # 1636
0030 120000      R     LCALL   L?0722
0033 7F1C              MOV     R7,#01CH
0035 120000      R     LCALL   _send_pd_msg
                                           ; SOURCE LINE # 1637
0038         ?C0240:
                                           ; SOURCE LINE # 1638
0038 7F01              MOV     R7,#01H
003A 22                RET     
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 109 

                                           ; SOURCE LINE # 1639
003B         ?C0238:
                                           ; SOURCE LINE # 1641
003B 120000      R     LCALL   L?0645
003E 120000      E     LCALL   ?C?CLDPTR
0041 FF                MOV     R7,A
0042 C4                SWAP    A
0043 13                RRC     A
0044 13                RRC     A
0045 5403              ANL     A,#03H
0047 6401              XRL     A,#01H
0049 6003              JZ      $ + 5H
004B 020000      R     LJMP    ?C0242
004E 120000      R     LCALL   L?0763
0051 540F              ANL     A,#0FH
0053 6401              XRL     A,#01H
0055 6003              JZ      $ + 5H
0057 020000      R     LJMP    ?C0242
                                           ; SOURCE LINE # 1642
005A EF                MOV     A,R7
005B 541F              ANL     A,#01FH
005D 14                DEC     A
005E C3                CLR     C
005F 9414              SUBB    A,#014H
0061 5003              JNC     ?C0243
                                           ; SOURCE LINE # 1646
0063 7F01              MOV     R7,#01H
0065 22                RET     
                                           ; SOURCE LINE # 1647
0066         ?C0243:
                                           ; SOURCE LINE # 1650
0066 120000      R     LCALL   L?0645
0069 120000      R     LCALL   L?0708
006C 900012            MOV     DPTR,#012H
006F 120000      R     LCALL   L?0726
0072 EC                MOV     A,R4
0073 C0E0              PUSH    ACC
0075 ED                MOV     A,R5
0076 C0E0              PUSH    ACC
0078 EE                MOV     A,R6
0079 C0E0              PUSH    ACC
007B EF                MOV     A,R7
007C C0E0              PUSH    ACC
007E 120000      R     LCALL   L?0645
0081 120000      R     LCALL   L?0708
0084 900013            MOV     DPTR,#013H
0087 120000      E     LCALL   ?C?CLDOPTR
008A FF                MOV     R7,A
008B E4                CLR     A
008C FC                MOV     R4,A
008D FD                MOV     R5,A
008E FE                MOV     R6,A
008F 7818              MOV     R0,#018H
0091 120000      E     LCALL   ?C?LSHL
0094 D0E0              POP     ACC
0096 FB                MOV     R3,A
0097 D0E0              POP     ACC
0099 FA                MOV     R2,A
009A D0E0              POP     ACC
009C F9                MOV     R1,A
009D D0E0              POP     ACC
009F F8                MOV     R0,A
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 110 

00A0 120000      E     LCALL   ?C?LOR
00A3 EC                MOV     A,R4
00A4 C0E0              PUSH    ACC
00A6 ED                MOV     A,R5
00A7 C0E0              PUSH    ACC
00A9 EE                MOV     A,R6
00AA C0E0              PUSH    ACC
00AC EF                MOV     A,R7
00AD C0E0              PUSH    ACC
00AF 120000      R     LCALL   L?0645
00B2 120000      R     LCALL   L?0708
00B5 900011            MOV     DPTR,#011H
00B8 120000      E     LCALL   ?C?CLDOPTR
00BB 120000      R     LCALL   L?0773
00BE D0E0              POP     ACC
00C0 FB                MOV     R3,A
00C1 D0E0              POP     ACC
00C3 FA                MOV     R2,A
00C4 D0E0              POP     ACC
00C6 F9                MOV     R1,A
00C7 D0E0              POP     ACC
00C9 F8                MOV     R0,A
00CA 120000      E     LCALL   ?C?LOR
00CD EC                MOV     A,R4
00CE C0E0              PUSH    ACC
00D0 ED                MOV     A,R5
00D1 C0E0              PUSH    ACC
00D3 EE                MOV     A,R6
00D4 C0E0              PUSH    ACC
00D6 EF                MOV     A,R7
00D7 C0E0              PUSH    ACC
00D9 120000      R     LCALL   L?0645
00DC 120000      R     LCALL   L?0708
00DF 900010            MOV     DPTR,#010H
00E2 120000      E     LCALL   ?C?CLDOPTR
00E5 FF                MOV     R7,A
00E6 E4                CLR     A
00E7 FC                MOV     R4,A
00E8 FD                MOV     R5,A
00E9 FE                MOV     R6,A
00EA D0E0              POP     ACC
00EC FB                MOV     R3,A
00ED D0E0              POP     ACC
00EF FA                MOV     R2,A
00F0 D0E0              POP     ACC
00F2 F9                MOV     R1,A
00F3 D0E0              POP     ACC
00F5 F8                MOV     R0,A
00F6 120000      E     LCALL   ?C?LOR
00F9 120000      R     LCALL   L?0662
00FC 2400        E     ADD     A,#LOW context+03FH
00FE F582              MOV     DPL,A
0100 E4                CLR     A
0101 3400        E     ADDC    A,#HIGH context+03FH
0103 F583              MOV     DPH,A
0105 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1651
0108 7F01              MOV     R7,#01H
010A 22                RET     
                                           ; SOURCE LINE # 1652
010B         ?C0242:
                                           ; SOURCE LINE # 1654
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 111 

010B 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 1655
010D         ?C0241:
010D 22                RET     
             ; FUNCTION Recv_PD_VDM_Defalut_Callback (END)

             ; FUNCTION Recv_Debug_Callback (BEGIN)
                                           ; SOURCE LINE # 1657
                                           ; SOURCE LINE # 1658
                                           ; SOURCE LINE # 1659
0000 120000      R     LCALL   L?0645
0003 120000      R     LCALL   L?0759
0006 2404              ADD     A,#04H
0008 7000              JNZ     ?C0244
                                           ; SOURCE LINE # 1660
000A         ?C0245:
                                           ; SOURCE LINE # 1661
                                           ; SOURCE LINE # 1662
                                           ; SOURCE LINE # 1666
000A         ?C0246:
                                           ; SOURCE LINE # 1667
                                           ; SOURCE LINE # 1668
                                           ; SOURCE LINE # 1672
000A         ?C0248:
                                           ; SOURCE LINE # 1673
                                           ; SOURCE LINE # 1674
                                           ; SOURCE LINE # 1678
000A         ?C0250:
                                           ; SOURCE LINE # 1679
                                           ; SOURCE LINE # 1680
                                           ; SOURCE LINE # 1684
000A         ?C0252:
                                           ; SOURCE LINE # 1685
                                           ; SOURCE LINE # 1686
                                           ; SOURCE LINE # 1690
000A         ?C0254:
                                           ; SOURCE LINE # 1691
                                           ; SOURCE LINE # 1692
                                           ; SOURCE LINE # 1696
000A         ?C0256:
                                           ; SOURCE LINE # 1697
                                           ; SOURCE LINE # 1698
                                           ; SOURCE LINE # 1702
000A         ?C0258:
                                           ; SOURCE LINE # 1703
                                           ; SOURCE LINE # 1704
                                           ; SOURCE LINE # 1708
000A         ?C0260:
                                           ; SOURCE LINE # 1709
                                           ; SOURCE LINE # 1710
                                           ; SOURCE LINE # 1714
000A         ?C0262:
                                           ; SOURCE LINE # 1715
                                           ; SOURCE LINE # 1716
                                           ; SOURCE LINE # 1720
000A         ?C0264:
                                           ; SOURCE LINE # 1721
                                           ; SOURCE LINE # 1722
                                           ; SOURCE LINE # 1726
000A         ?C0266:
                                           ; SOURCE LINE # 1727
                                           ; SOURCE LINE # 1728
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 112 

                                           ; SOURCE LINE # 1732
                                           ; SOURCE LINE # 1734
                                           ; SOURCE LINE # 1738
                                           ; SOURCE LINE # 1739
                                           ; SOURCE LINE # 1740
                                           ; SOURCE LINE # 1741
                                           ; SOURCE LINE # 1742
000A         ?C0244:
                                           ; SOURCE LINE # 1744
000A 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 1745
000C         ?C0271:
000C 22                RET     
             ; FUNCTION Recv_Debug_Callback (END)

             ; FUNCTION _Send_PD_Data_Messages (BEGIN)
                                           ; SOURCE LINE # 1748
0000 900000      R     MOV     DPTR,#type_msg
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 1749
                                           ; SOURCE LINE # 1750
0009 120000      R     LCALL   L?0845
000C E9                MOV     A,R1
000D 4A                ORL     A,R2
000E 4B                ORL     A,R3
000F 7003              JNZ     ?C0272
                                           ; SOURCE LINE # 1751
0011 7F02              MOV     R7,#02H
0013 22                RET     
0014         ?C0272:
                                           ; SOURCE LINE # 1753
0014 900000      R     MOV     DPTR,#type_msg
0017 E0                MOVX    A,@DPTR
0018 6415              XRL     A,#015H
001A 703D              JNZ     ?C0274
                                           ; SOURCE LINE # 1754
                                           ; SOURCE LINE # 1755
001C 120000      R     LCALL   L?0662
001F 2400        E     ADD     A,#LOW context+02AH
0021 F9                MOV     R1,A
0022 7400        E     MOV     A,#HIGH context+02AH
0024 120000      R     LCALL   L?0742
0027 120000      R     LCALL   L?0845
002A 7E00              MOV     R6,#00H
002C 7F04              MOV     R7,#04H
002E 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 1756
0031 120000      R     LCALL   L?0654
0034 120000      R     LCALL   L?0716
0037 7E00              MOV     R6,#00H
0039 7F04              MOV     R7,#04H
003B 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 1757
003E 7E00              MOV     R6,#00H
0040 7F04              MOV     R7,#04H
0042 7D00              MOV     R5,#00H
0044 120000      R     LCALL   L?0654
0047 E9                MOV     A,R1
0048 2406              ADD     A,#06H
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 113 

004A F9                MOV     R1,A
004B E4                CLR     A
004C 3A                ADDC    A,R2
004D FA                MOV     R2,A
004E 120000      E     LCALL   ?C?MEMSET
                                           ; SOURCE LINE # 1758
0051 120000      R     LCALL   L?0654
0054 7409              MOV     A,#09H
                                           ; SOURCE LINE # 1759
0056 020000      R     LJMP    ?C0616
0059         ?C0274:
                                           ; SOURCE LINE # 1761
                                           ; SOURCE LINE # 1762
0059 900000      R     MOV     DPTR,#type_msg
005C E0                MOVX    A,@DPTR
005D B40224            CJNE    A,#02H,?C0276
                                           ; SOURCE LINE # 1763
0060 900000      R     MOV     DPTR,#size
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 7E00              MOV     R6,#00H
0067 EE                MOV     A,R6
0068 C0E0              PUSH    ACC
006A EF                MOV     A,R7
006B C0E0              PUSH    ACC
006D 120000      R     LCALL   L?0662
0070 2400        E     ADD     A,#LOW context+02EH
0072 F9                MOV     R1,A
0073 7400        E     MOV     A,#HIGH context+02EH
0075 120000      R     LCALL   L?0742
0078 120000      R     LCALL   L?0846
007B D0E0              POP     ACC
007D FF                MOV     R7,A
007E D0E0              POP     ACC
0080 FE                MOV     R6,A
0081 120000      E     LCALL   ?C?COPY
0084         ?C0276:
                                           ; SOURCE LINE # 1764
0084 900000      R     MOV     DPTR,#size
0087 E0                MOVX    A,@DPTR
0088 FF                MOV     R7,A
0089 7E00              MOV     R6,#00H
008B 120000      R     LCALL   L?0654
008E 120000      R     LCALL   L?0716
0091 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 1765
0094 900000      R     MOV     DPTR,#size
0097 120000      R     LCALL   L?0651
009A EF                MOV     A,R7
009B         ?C0616:
009B 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 1766
009E         ?C0275:
                                           ; SOURCE LINE # 1768
009E 900000      R     MOV     DPTR,#type_msg
00A1 E0                MOVX    A,@DPTR
00A2 120000      R     LCALL   L?0653
00A5 120000      R     LCALL   L?0795
                                           ; SOURCE LINE # 1770
00A8 120000      R     LCALL   interface_send_msg
                                           ; SOURCE LINE # 1771
00AB         ?C0273:
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 114 

00AB 22                RET     
             ; FUNCTION _Send_PD_Data_Messages (END)

             ; FUNCTION _Send_PD_Extend_Messages (BEGIN)
                                           ; SOURCE LINE # 1774
0000 900000      R     MOV     DPTR,#buff_ref
0003 120000      E     LCALL   ?C?PSTXDATA
0006 900000      R     MOV     DPTR,#type_msg
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1775
                                           ; SOURCE LINE # 1776
000B 643B              XRL     A,#03BH
000D 600B              JZ      ?C0278
000F E0                MOVX    A,@DPTR
0010 FF                MOV     R7,A
0011 6438              XRL     A,#038H
0013 6005              JZ      ?C0278
0015 EF                MOV     A,R7
0016 6439              XRL     A,#039H
0018 705F              JNZ     ?C0277
001A         ?C0278:
                                           ; SOURCE LINE # 1777
                                           ; SOURCE LINE # 1778
001A 900000      R     MOV     DPTR,#size
001D E0                MOVX    A,@DPTR
001E D3                SETB    C
001F 941A              SUBB    A,#01AH
0021 4056              JC      ?C0617
                                           ; SOURCE LINE # 1779
                                           ; SOURCE LINE # 1780
0023 A3                INC     DPTR
0024 E0                MOVX    A,@DPTR
0025 C4                SWAP    A
0026 33                RLC     A
0027 33                RLC     A
0028 54C0              ANL     A,#0C0H
002A 441D              ORL     A,#01DH
002C 120000      R     LCALL   L?0653
002F EF                MOV     A,R7
0030 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 1781
0033 120000      R     LCALL   L?0654
0036 120000      R     LCALL   L?0787
0039 7E00              MOV     R6,#00H
003B 7F1A              MOV     R7,#01AH
003D 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 1783
0040 900000      R     MOV     DPTR,#type_msg
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 6438              XRL     A,#038H
0047 6005              JZ      ?C0281
0049 EF                MOV     A,R7
004A 6439              XRL     A,#039H
004C 7053              JNZ     ?C0283
004E         ?C0281:
                                           ; SOURCE LINE # 1784
004E 120000      R     LCALL   L?0662
0051 2400        E     ADD     A,#LOW context+0B4H
0053 F582              MOV     DPL,A
0055 E4                CLR     A
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 115 

0056 3400        E     ADDC    A,#HIGH context+0B4H
0058 F583              MOV     DPH,A
005A E0                MOVX    A,@DPTR
005B FF                MOV     R7,A
005C 900000      R     MOV     DPTR,#size
005F E0                MOVX    A,@DPTR
0060 24E6              ADD     A,#0E6H
0062 FB                MOV     R3,A
0063 EB                MOV     A,R3
0064 C0E0              PUSH    ACC
0066 120000      R     LCALL   L?0788
0069 E9                MOV     A,R1
006A 241A              ADD     A,#01AH
006C 120000      R     LCALL   L?0785
006F D0E0              POP     ACC
0071 FB                MOV     R3,A
0072 E4                CLR     A
0073 FD                MOV     R5,A
0074 120000      E     LCALL   _i2c_write_block_reg_b
                                           ; SOURCE LINE # 1785
0077 8028              SJMP    ?C0283
0079         ?C0277:
                                           ; SOURCE LINE # 1794
                                           ; SOURCE LINE # 1795
0079         ?C0617:
0079 900000      R     MOV     DPTR,#type_sop
007C E0                MOVX    A,@DPTR
007D C4                SWAP    A
007E 33                RLC     A
007F 33                RLC     A
0080 54C0              ANL     A,#0C0H
0082 FF                MOV     R7,A
0083 900000      R     MOV     DPTR,#size
0086 E0                MOVX    A,@DPTR
0087 2403              ADD     A,#03H
0089 4F                ORL     A,R7
008A 120000      R     LCALL   L?0653
008D EF                MOV     A,R7
008E 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 1796
0091 900000      R     MOV     DPTR,#size
0094 E0                MOVX    A,@DPTR
0095 FF                MOV     R7,A
0096 7E00              MOV     R6,#00H
0098 120000      R     LCALL   L?0654
009B 120000      R     LCALL   L?0787
009E 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 1797
00A1         ?C0283:
                                           ; SOURCE LINE # 1799
00A1 900000      R     MOV     DPTR,#type_msg
00A4 E0                MOVX    A,@DPTR
00A5 FF                MOV     R7,A
00A6 900000      E     MOV     DPTR,#port_id
00A9 E0                MOVX    A,@DPTR
00AA FE                MOV     R6,A
00AB 120000      R     LCALL   L?0655
00AE 120000      R     LCALL   L?0795
                                           ; SOURCE LINE # 1800
00B1 900000      R     MOV     DPTR,#size
00B4 E0                MOVX    A,@DPTR
00B5 FD                MOV     R5,A
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 116 

00B6 E4                CLR     A
00B7 EE                MOV     A,R6
00B8 120000      R     LCALL   L?0655
00BB 120000      R     LCALL   L?0708
00BE 120000      E     LCALL   ?C?ILDPTR
00C1 E5F0              MOV     A,B
00C3 54FE              ANL     A,#0FEH
00C5 FE                MOV     R6,A
00C6 ED                MOV     A,R5
00C7 FF                MOV     R7,A
00C8 EE                MOV     A,R6
00C9 120000      R     LCALL   L?0804
00CC 120000      R     LCALL   L?0655
00CF 120000      R     LCALL   L?0708
00D2 120000      E     LCALL   ?C?ILDPTR
00D5 FD                MOV     R5,A
00D6 E5F0              MOV     A,B
00D8 54FD              ANL     A,#0FDH
00DA 8DF0              MOV     B,R5
00DC 120000      E     LCALL   ?C?ISTPTR
00DF EF                MOV     A,R7
00E0 120000      R     LCALL   L?0655
00E3 120000      R     LCALL   L?0708
00E6 120000      E     LCALL   ?C?ILDPTR
00E9 FF                MOV     R7,A
00EA E5F0              MOV     A,B
00EC 54FB              ANL     A,#0FBH
00EE 120000      R     LCALL   L?0804
00F1 120000      R     LCALL   L?0655
00F4 120000      R     LCALL   L?0708
00F7 120000      E     LCALL   ?C?ILDPTR
00FA FD                MOV     R5,A
00FB E5F0              MOV     A,B
00FD 5487              ANL     A,#087H
00FF 8DF0              MOV     B,R5
0101 120000      E     LCALL   ?C?ISTPTR
0104 EF                MOV     A,R7
0105 120000      R     LCALL   L?0655
0108 120000      R     LCALL   L?0708
010B 120000      E     LCALL   ?C?ILDPTR
010E FF                MOV     R7,A
010F E5F0              MOV     A,B
0111 547F              ANL     A,#07FH
                                           ; SOURCE LINE # 1802
0113 120000      R     LCALL   L?0805
0116 120000      R     LCALL   L?0655
0119 120000      R     LCALL   L?0763
011C FE                MOV     R6,A
011D 900000      E     MOV     DPTR,#SWAP_BYTE
0120 F0                MOVX    @DPTR,A
0121 120000      R     LCALL   L?0676
0124 FD                MOV     R5,A
0125 EF                MOV     A,R7
0126 120000      R     LCALL   L?0655
0129 900002            MOV     DPTR,#02H
012C ED                MOV     A,R5
012D 120000      E     LCALL   ?C?CSTOPTR
0130 120000      R     LCALL   L?0654
0133 120000      R     LCALL   L?0708
0136 EE                MOV     A,R6
0137 120000      R     LCALL   L?0797
                                           ; SOURCE LINE # 1803
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 117 

013A 120000      R     LCALL   interface_send_msg
                                           ; SOURCE LINE # 1804
013D         ?C0290:
013D 22                RET     
             ; FUNCTION _Send_PD_Extend_Messages (END)

             ; FUNCTION _Send_Interface_Messages (BEGIN)
                                           ; SOURCE LINE # 1807
0000 900000      R     MOV     DPTR,#type_msg
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
;---- Variable 'DataBuff' assigned to Register 'R1/R2/R3' ----
                                           ; SOURCE LINE # 1808
                                           ; SOURCE LINE # 1809
0005 900000      R     MOV     DPTR,#size
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 7E00              MOV     R6,#00H
000C EB                MOV     A,R3
000D C0E0              PUSH    ACC
000F EA                MOV     A,R2
0010 C0E0              PUSH    ACC
0012 E9                MOV     A,R1
0013 C0E0              PUSH    ACC
0015 120000      R     LCALL   L?0654
0018 E9                MOV     A,R1
0019 2402              ADD     A,#02H
001B F9                MOV     R1,A
001C E4                CLR     A
001D 3A                ADDC    A,R2
001E C8                XCH     A,R0
001F E9                MOV     A,R1
0020 C8                XCH     A,R0
0021 FC                MOV     R4,A
0022 CD                XCH     A,R5
0023 EB                MOV     A,R3
0024 CD                XCH     A,R5
0025 D0E0              POP     ACC
0027 F9                MOV     R1,A
0028 D0E0              POP     ACC
002A FA                MOV     R2,A
002B D0E0              POP     ACC
002D FB                MOV     R3,A
002E 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 1810
0031 900000      R     MOV     DPTR,#size
0034 120000      R     LCALL   L?0651
0037 EF                MOV     A,R7
0038 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 1811
003B 900000      R     MOV     DPTR,#type_msg
003E E0                MOVX    A,@DPTR
003F 120000      R     LCALL   L?0653
0042 120000      R     LCALL   L?0796
                                           ; SOURCE LINE # 1812
0045 120000      R     LCALL   interface_send_msg
                                           ; SOURCE LINE # 1813
0048         ?C0291:
0048 22                RET     
             ; FUNCTION _Send_Interface_Messages (END)

             ; FUNCTION _send_vdm (BEGIN)
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 118 

                                           ; SOURCE LINE # 1828
0000 900000      R     MOV     DPTR,#vdm
0003 120000      E     LCALL   ?C?PSTXDATA
;---- Variable 'type_sop' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1829
                                           ; SOURCE LINE # 1830
0006 900000      R     MOV     DPTR,#vdm
0009 120000      E     LCALL   ?C?PLDXDATA
000C E9                MOV     A,R1
000D 4A                ORL     A,R2
000E 4B                ORL     A,R3
000F 7003              JNZ     ?C0292
                                           ; SOURCE LINE # 1831
0011 7F02              MOV     R7,#02H
0013 22                RET     
0014         ?C0292:
                                           ; SOURCE LINE # 1832
0014 900000      R     MOV     DPTR,#size
0017 E0                MOVX    A,@DPTR
0018 FE                MOV     R6,A
0019 C3                CLR     C
001A 9404              SUBB    A,#04H
001C 400B              JC      ?C0295
001E EE                MOV     A,R6
001F D3                SETB    C
0020 941C              SUBB    A,#01CH
0022 5005              JNC     ?C0295
0024 EE                MOV     A,R6
0025 5403              ANL     A,#03H
0027 6003              JZ      ?C0294
0029         ?C0295:
                                           ; SOURCE LINE # 1833
0029 7F02              MOV     R7,#02H
002B 22                RET     
002C         ?C0294:
                                           ; SOURCE LINE # 1835
002C EF                MOV     A,R7
002D C4                SWAP    A
002E 33                RLC     A
002F 33                RLC     A
0030 54C0              ANL     A,#0C0H
0032 FF                MOV     R7,A
0033 900000      R     MOV     DPTR,#size
0036 E0                MOVX    A,@DPTR
0037 04                INC     A
0038 4F                ORL     A,R7
0039 120000      R     LCALL   L?0653
003C EF                MOV     A,R7
003D 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 1836
0040 900000      E     MOV     DPTR,#port_id
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 120000      R     LCALL   L?0655
0048 900001            MOV     DPTR,#01H
004B 7414              MOV     A,#014H
004D 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 1837
0050 900000      R     MOV     DPTR,#size
0053 E0                MOVX    A,@DPTR
0054 FD                MOV     R5,A
0055 7C00              MOV     R4,#00H
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 119 

0057 CE                XCH     A,R6
0058 EC                MOV     A,R4
0059 CE                XCH     A,R6
005A ED                MOV     A,R5
005B C0E0              PUSH    ACC
005D EF                MOV     A,R7
005E 120000      R     LCALL   L?0655
0061 900000      R     MOV     DPTR,#vdm
0064 120000      R     LCALL   L?0717
0067 D0E0              POP     ACC
0069 FF                MOV     R7,A
006A 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 1838
006D 120000      R     LCALL   interface_send_msg
                                           ; SOURCE LINE # 1839
0070         ?C0293:
0070 22                RET     
             ; FUNCTION _send_vdm (END)

             ; FUNCTION _Send_PD_Control_Messages (BEGIN)
                                           ; SOURCE LINE # 1842
;---- Variable 'type_msg' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1843
                                           ; SOURCE LINE # 1844
0000 120000      R     LCALL   L?0654
0003 120000      R     LCALL   L?0796
                                           ; SOURCE LINE # 1845
0006 120000      R     LCALL   interface_send_ctr_msg
                                           ; SOURCE LINE # 1846
0009         ?C0296:
0009 22                RET     
             ; FUNCTION _Send_PD_Control_Messages (END)

             ; FUNCTION _send_pd_msg (BEGIN)
                                           ; SOURCE LINE # 1855
0000 900000      R     MOV     DPTR,#buf
0003 120000      E     LCALL   ?C?PSTXDATA
0006 900000      R     MOV     DPTR,#type
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1857
                                           ; SOURCE LINE # 1862
000B 120000      E     LCALL   ?C?CCASE
000E 0000        R     DW      ?C0332
0010 00                DB      00H
0011 0000        R     DW      ?C0332
0013 01                DB      01H
0014 0000        R     DW      ?C0332
0016 02                DB      02H
0017 0000        R     DW      ?C0332
0019 03                DB      03H
001A 0000        R     DW      ?C0312
001C 04                DB      04H
001D 0000        R     DW      ?C0312
001F 05                DB      05H
0020 0000        R     DW      ?C0312
0022 06                DB      06H
0023 0000        R     DW      ?C0332
0025 08                DB      08H
0026 0000        R     DW      ?C0312
0028 09                DB      09H
0029 0000        R     DW      ?C0318
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 120 

002B 0A                DB      0AH
002C 0000        R     DW      ?C0318
002E 10                DB      010H
002F 0000        R     DW      ?C0318
0031 11                DB      011H
0032 0000        R     DW      ?C0318
0034 12                DB      012H
0035 0000        R     DW      ?C0318
0037 13                DB      013H
0038 0000        R     DW      ?C0336
003A 14                DB      014H
003B 0000        R     DW      ?C0332
003D 15                DB      015H
003E 0000        R     DW      ?C0333
0040 16                DB      016H
0041 0000        R     DW      ?C0312
0043 17                DB      017H
0044 0000        R     DW      ?C0312
0046 1B                DB      01BH
0047 0000        R     DW      ?C0312
0049 1C                DB      01CH
004A 0000        R     DW      ?C0312
004C 1D                DB      01DH
004D 0000        R     DW      ?C0312
004F 1E                DB      01EH
0050 0000        R     DW      ?C0312
0052 20                DB      020H
0053 0000        R     DW      ?C0312
0055 21                DB      021H
0056 0000        R     DW      ?C0312
0058 22                DB      022H
0059 0000        R     DW      ?C0312
005B 23                DB      023H
005C 0000        R     DW      ?C0332
005E 24                DB      024H
005F 0000        R     DW      ?C0332
0061 25                DB      025H
0062 0000        R     DW      ?C0332
0064 26                DB      026H
0065 0000        R     DW      ?C0318
0067 29                DB      029H
0068 0000        R     DW      ?C0332
006A 2C                DB      02CH
006B 0000        R     DW      ?C0349
006D 30                DB      030H
006E 0000        R     DW      ?C0349
0070 31                DB      031H
0071 0000        R     DW      ?C0349
0073 32                DB      032H
0074 0000        R     DW      ?C0349
0076 33                DB      033H
0077 0000        R     DW      ?C0349
0079 34                DB      034H
007A 0000        R     DW      ?C0349
007C 35                DB      035H
007D 0000        R     DW      ?C0349
007F 36                DB      036H
0080 0000        R     DW      ?C0349
0082 37                DB      037H
0083 0000        R     DW      ?C0349
0085 38                DB      038H
0086 0000        R     DW      ?C0349
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 121 

0088 39                DB      039H
0089 0000        R     DW      ?C0349
008B 3A                DB      03AH
008C 0000        R     DW      ?C0349
008E 3B                DB      03BH
008F 0000        R     DW      ?C0337
0091 3E                DB      03EH
0092 0000        R     DW      ?C0312
0094 F1                DB      0F1H
0095 0000        R     DW      ?C0312
0097 F2                DB      0F2H
0098 0000        R     DW      ?C0332
009A FC                DB      0FCH
009B 0000        R     DW      ?C0332
009D FD                DB      0FDH
009E 0000              DW      00H
00A0 0000        R     DW      ?C0350
                                           ; SOURCE LINE # 1864
                                           ; SOURCE LINE # 1865
                                           ; SOURCE LINE # 1866
                                           ; SOURCE LINE # 1867
                                           ; SOURCE LINE # 1868
                                           ; SOURCE LINE # 1869
                                           ; SOURCE LINE # 1870
                                           ; SOURCE LINE # 1871
                                           ; SOURCE LINE # 1872
                                           ; SOURCE LINE # 1873
                                           ; SOURCE LINE # 1874
                                           ; SOURCE LINE # 1875
                                           ; SOURCE LINE # 1876
                                           ; SOURCE LINE # 1877
                                           ; SOURCE LINE # 1878
00A2         ?C0312:
                                           ; SOURCE LINE # 1879
00A2 900000      R     MOV     DPTR,#type
00A5 E0                MOVX    A,@DPTR
00A6 FF                MOV     R7,A
00A7 120000      R     LCALL   _Send_PD_Control_Messages
                                           ; SOURCE LINE # 1880
00AA 020000      R     LJMP    ?C0297
                                           ; SOURCE LINE # 1881
                                           ; SOURCE LINE # 1882
                                           ; SOURCE LINE # 1883
                                           ; SOURCE LINE # 1884
                                           ; SOURCE LINE # 1885
                                           ; SOURCE LINE # 1886
00AD         ?C0318:
                                           ; SOURCE LINE # 1887
00AD 900000      R     MOV     DPTR,#type
00B0 E0                MOVX    A,@DPTR
00B1 FF                MOV     R7,A
00B2 120000      R     LCALL   _Send_PD_Control_Messages
00B5 EF                MOV     A,R7
00B6 900000      E     MOV     DPTR,#l
00B9 7023              JNZ     ?C0618
                                           ; SOURCE LINE # 1888
00BB F0                MOVX    @DPTR,A
00BC 020000      R     LJMP    ?C0297
                                           ; SOURCE LINE # 1894
                                           ; SOURCE LINE # 1895
                                           ; SOURCE LINE # 1896
                                           ; SOURCE LINE # 1897
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 122 

                                           ; SOURCE LINE # 1898
                                           ; SOURCE LINE # 1899
                                           ; SOURCE LINE # 1900
                                           ; SOURCE LINE # 1901
                                           ; SOURCE LINE # 1902
                                           ; SOURCE LINE # 1903
                                           ; SOURCE LINE # 1904
                                           ; SOURCE LINE # 1905
00BF         ?C0332:
                                           ; SOURCE LINE # 1906
00BF 120000      R     LCALL   L?0745
00C2 900000      R     MOV     DPTR,#?_Send_PD_Data_Messages?BYTE+04H
00C5 F0                MOVX    @DPTR,A
00C6 120000      R     LCALL   _Send_PD_Data_Messages
                                           ; SOURCE LINE # 1907
00C9 8026              SJMP    ?C0619
                                           ; SOURCE LINE # 1908
00CB         ?C0333:
                                           ; SOURCE LINE # 1909
00CB 120000      R     LCALL   L?0745
00CE 900000      R     MOV     DPTR,#?_Send_PD_Data_Messages?BYTE+04H
00D1 F0                MOVX    @DPTR,A
00D2 120000      R     LCALL   _Send_PD_Data_Messages
00D5 EF                MOV     A,R7
00D6 900000      E     MOV     DPTR,#l
00D9 7003              JNZ     ?C0334
                                           ; SOURCE LINE # 1910
00DB F0                MOVX    @DPTR,A
00DC 8040              SJMP    ?C0297
00DE         ?C0334:
                                           ; SOURCE LINE # 1912
00DE         ?C0618:
                                           ; SOURCE LINE # 1913
00DE 803B              SJMP    ?C0620
                                           ; SOURCE LINE # 1916
00E0         ?C0336:
                                           ; SOURCE LINE # 1917
00E0 900000      R     MOV     DPTR,#type_sop
00E3 E0                MOVX    A,@DPTR
00E4 900000      R     MOV     DPTR,#buf
00E7 120000      R     LCALL   L?0747
00EA 900000      R     MOV     DPTR,#?_send_vdm?BYTE+04H
00ED F0                MOVX    @DPTR,A
00EE 120000      R     LCALL   _send_vdm
00F1         ?C0619:
00F1 900000      E     MOV     DPTR,#l
00F4 EF                MOV     A,R7
00F5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1918
00F6 8026              SJMP    ?C0297
                                           ; SOURCE LINE # 1919
00F8         ?C0337:
                                           ; SOURCE LINE # 1920
00F8 120000      R     LCALL   L?0746
00FB 900000      R     MOV     DPTR,#?_Send_Interface_Messages?BYTE+04H
00FE F0                MOVX    @DPTR,A
00FF 120000      R     LCALL   _Send_Interface_Messages
                                           ; SOURCE LINE # 1921
0102 801A              SJMP    ?C0297
                                           ; SOURCE LINE # 1924
                                           ; SOURCE LINE # 1925
                                           ; SOURCE LINE # 1926
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 123 

                                           ; SOURCE LINE # 1927
                                           ; SOURCE LINE # 1928
                                           ; SOURCE LINE # 1929
                                           ; SOURCE LINE # 1930
                                           ; SOURCE LINE # 1931
                                           ; SOURCE LINE # 1932
                                           ; SOURCE LINE # 1933
                                           ; SOURCE LINE # 1934
                                           ; SOURCE LINE # 1935
0104         ?C0349:
                                           ; SOURCE LINE # 1936
0104 120000      R     LCALL   L?0746
0107 900000      R     MOV     DPTR,#?_Send_PD_Extend_Messages?BYTE+04H
010A F0                MOVX    @DPTR,A
010B 900000      R     MOV     DPTR,#type_sop
010E E0                MOVX    A,@DPTR
010F 900000      R     MOV     DPTR,#?_Send_PD_Extend_Messages?BYTE+05H
0112 F0                MOVX    @DPTR,A
0113 120000      R     LCALL   _Send_PD_Extend_Messages
                                           ; SOURCE LINE # 1937
0116 8006              SJMP    ?C0297
                                           ; SOURCE LINE # 1938
0118         ?C0350:
                                           ; SOURCE LINE # 1942
0118 900000      E     MOV     DPTR,#l
011B         ?C0620:
011B 7402              MOV     A,#02H
011D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1943
                                           ; SOURCE LINE # 1944
011E         ?C0297:
                                           ; SOURCE LINE # 1946
011E 900000      E     MOV     DPTR,#l
0121 E0                MOVX    A,@DPTR
0122 FF                MOV     R7,A
                                           ; SOURCE LINE # 1947
0123         ?C0351:
0123 22                RET     
             ; FUNCTION _send_pd_msg (END)

             ; FUNCTION dispatch_rcvd_pd_msg (BEGIN)
                                           ; SOURCE LINE # 1965
                                           ; SOURCE LINE # 1966
                                           ; SOURCE LINE # 1967
0000 120000      R     LCALL   L?0645
0003 120000      R     LCALL   L?0759
0006 24C4              ADD     A,#0C4H
0008 6023              JZ      ?C0352
000A 244C              ADD     A,#04CH
000C 600D              JZ      ?C0355
000E 24F4              ADD     A,#0F4H
0010 600E              JZ      ?C0356
0012 24E8              ADD     A,#0E8H
0014 700F              JNZ     ?C0357
                                           ; SOURCE LINE # 1968
0016         ?C0353:
                                           ; SOURCE LINE # 1969
0016 120000      R     LCALL   Recv_PD_VDM_Defalut_Callback
                                           ; SOURCE LINE # 1970
0019 800D              SJMP    ?C0623
                                           ; SOURCE LINE # 1971
                                           ; SOURCE LINE # 1972
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 124 

                                           ; SOURCE LINE # 1973
001B         ?C0355:
                                           ; SOURCE LINE # 1974
001B 120000      R     LCALL   Recv_PD_Cmd_Rsp_Default_Callback
001E         ?C0621:
                                           ; SOURCE LINE # 1975
001E 8008              SJMP    ?C0623
                                           ; SOURCE LINE # 1976
0020         ?C0356:
                                           ; SOURCE LINE # 1977
0020 120000      R     LCALL   Recv_Debug_Callback
0023         ?C0622:
                                           ; SOURCE LINE # 1978
0023 8003              SJMP    ?C0623
                                           ; SOURCE LINE # 1979
0025         ?C0357:
                                           ; SOURCE LINE # 1980
0025 120000      R     LCALL   Recv_PD_Commands_Default_Callback
0028         ?C0623:
0028 900000      E     MOV     DPTR,#l
002B EF                MOV     A,R7
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1981
                                           ; SOURCE LINE # 1982
002D         ?C0352:
                                           ; SOURCE LINE # 1984
002D 900000      E     MOV     DPTR,#l
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
                                           ; SOURCE LINE # 1985
0032         ?C0358:
0032 22                RET     
             ; FUNCTION dispatch_rcvd_pd_msg (END)

             ; FUNCTION _pd_cc_status_default_func (BEGIN)
                                           ; SOURCE LINE # 1988
0000 900000      R     MOV     DPTR,#cc_status
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1989
                                           ; SOURCE LINE # 1994
0005 120000      R     LCALL   L?0662
0008 120000      R     LCALL   L?0743
000B 7401              MOV     A,#01H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1995
000E 120000      R     LCALL   get_data_role
0011 900000      E     MOV     DPTR,#role
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
0016 FE                MOV     R6,A
                                           ; SOURCE LINE # 1996
0017 120000      R     LCALL   L?0666
001A 2400        E     ADD     A,#LOW context+02H
001C F582              MOV     DPL,A
001E E4                CLR     A
001F 3400        E     ADDC    A,#HIGH context+02H
0021 F583              MOV     DPH,A
0023 EE                MOV     A,R6
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1999
0025 900000      R     MOV     DPTR,#cc_status
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 125 

0028 E0                MOVX    A,@DPTR
0029 FD                MOV     R5,A
002A 120000      E     LCALL   _anx_ucsi_cc_status_event
                                           ; SOURCE LINE # 2001
002D 900000      E     MOV     DPTR,#role
0030 E0                MOVX    A,@DPTR
0031 900000      E     MOV     DPTR,#port_id
0034 7008              JNZ     ?C0359
                                           ; SOURCE LINE # 2002
0036 120000      R     LCALL   L?0735
0039 7401              MOV     A,#01H
003B F0                MOVX    @DPTR,A
003C 8006              SJMP    ?C0360
003E         ?C0359:
                                           ; SOURCE LINE # 2004
003E 120000      R     LCALL   L?0735
0041 7402              MOV     A,#02H
0043 F0                MOVX    @DPTR,A
0044         ?C0360:
                                           ; SOURCE LINE # 2006
0044 900000      R     MOV     DPTR,#cc_status
0047 E0                MOVX    A,@DPTR
0048 FF                MOV     R7,A
0049 540F              ANL     A,#0FH
004B 6068              JZ      ?C0372
004D 24FE              ADD     A,#0FEH
004F 603E              JZ      ?C0367
0051 24FE              ADD     A,#0FEH
0053 7003              JNZ     $ + 5H
0055 020000      R     LJMP    ?C0377
0058 24FC              ADD     A,#0FCH
005A 7003              JNZ     $ + 5H
005C 020000      R     LJMP    ?C0378
005F 24FC              ADD     A,#0FCH
0061 7003              JNZ     $ + 5H
0063 020000      R     LJMP    ?C0379
0066 240B              ADD     A,#0BH
0068 6003              JZ      $ + 5H
006A 020000      R     LJMP    ?C0361
                                           ; SOURCE LINE # 2007
006D         ?C0362:
                                           ; SOURCE LINE # 2008
006D EF                MOV     A,R7
006E C4                SWAP    A
006F 540F              ANL     A,#0FH
0071 14                DEC     A
0072 600C              JZ      ?C0365
0074 14                DEC     A
0075 6016              JZ      ?C0366
0077 2402              ADD     A,#02H
0079 6003              JZ      $ + 5H
007B 020000      R     LJMP    ?C0361
                                           ; SOURCE LINE # 2009
007E         ?C0364:
                                           ; SOURCE LINE # 2012
                                           ; SOURCE LINE # 2013
007E 803F              SJMP    ?C0624
                                           ; SOURCE LINE # 2014
0080         ?C0365:
                                           ; SOURCE LINE # 2016
0080 120000      R     LCALL   L?0662
0083 2400        E     ADD     A,#LOW context+072H
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 126 

0085 F582              MOV     DPL,A
0087 E4                CLR     A
0088 3400        E     ADDC    A,#HIGH context+072H
                                           ; SOURCE LINE # 2017
008A 020000      R     LJMP    ?C0625
                                           ; SOURCE LINE # 2018
008D         ?C0366:
                                           ; SOURCE LINE # 2020
                                           ; SOURCE LINE # 2021
008D 800F              SJMP    ?C0626
                                           ; SOURCE LINE # 2022
                                           ; SOURCE LINE # 2023
                                           ; SOURCE LINE # 2024
008F         ?C0367:
                                           ; SOURCE LINE # 2025
008F 120000      R     LCALL   L?0834
0092 14                DEC     A
0093 6009              JZ      ?C0370
0095 14                DEC     A
0096 6012              JZ      ?C0371
0098 2402              ADD     A,#02H
009A 7064              JNZ     ?C0361
                                           ; SOURCE LINE # 2026
009C         ?C0369:
                                           ; SOURCE LINE # 2029
                                           ; SOURCE LINE # 2030
009C 802C              SJMP    ?C0627
                                           ; SOURCE LINE # 2031
009E         ?C0370:
                                           ; SOURCE LINE # 2033
009E         ?C0626:
009E 120000      R     LCALL   L?0662
00A1 2400        E     ADD     A,#LOW context+072H
00A3 F582              MOV     DPL,A
00A5 E4                CLR     A
00A6 3400        E     ADDC    A,#HIGH context+072H
                                           ; SOURCE LINE # 2034
00A8 8040              SJMP    ?C0628
                                           ; SOURCE LINE # 2035
00AA         ?C0371:
                                           ; SOURCE LINE # 2037
00AA 120000      R     LCALL   L?0662
00AD 120000      R     LCALL   L?0737
00B0 7406              MOV     A,#06H
00B2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2038
00B3 804B              SJMP    ?C0361
                                           ; SOURCE LINE # 2039
                                           ; SOURCE LINE # 2040
                                           ; SOURCE LINE # 2041
00B5         ?C0372:
                                           ; SOURCE LINE # 2042
00B5 120000      R     LCALL   L?0834
00B8 24FE              ADD     A,#0FEH
00BA 600E              JZ      ?C0375
00BC 04                INC     A
00BD 7041              JNZ     ?C0361
                                           ; SOURCE LINE # 2043
00BF         ?C0374:
                                           ; SOURCE LINE # 2046
00BF         ?C0624:
00BF 120000      R     LCALL   L?0662
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 127 

00C2 120000      R     LCALL   L?0737
00C5 7402              MOV     A,#02H
00C7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2047
00C8 8036              SJMP    ?C0361
                                           ; SOURCE LINE # 2048
00CA         ?C0375:
                                           ; SOURCE LINE # 2050
00CA         ?C0627:
00CA 120000      R     LCALL   L?0662
00CD 120000      R     LCALL   L?0737
00D0 7403              MOV     A,#03H
00D2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2051
00D3 802B              SJMP    ?C0361
                                           ; SOURCE LINE # 2052
                                           ; SOURCE LINE # 2054
                                           ; SOURCE LINE # 2055
                                           ; SOURCE LINE # 2056
                                           ; SOURCE LINE # 2057
00D5         ?C0377:
                                           ; SOURCE LINE # 2058
00D5 120000      R     LCALL   L?0662
00D8 120000      R     LCALL   L?0743
00DB 7401              MOV     A,#01H
00DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2059
00DE 8020              SJMP    ?C0361
                                           ; SOURCE LINE # 2060
00E0         ?C0378:
                                           ; SOURCE LINE # 2061
00E0 120000      R     LCALL   L?0662
00E3 2400        E     ADD     A,#LOW context+079H
00E5 F582              MOV     DPL,A
00E7 E4                CLR     A
00E8 3400        E     ADDC    A,#HIGH context+079H
00EA         ?C0628:
00EA F583              MOV     DPH,A
00EC 7404              MOV     A,#04H
00EE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2062
00EF 800F              SJMP    ?C0361
                                           ; SOURCE LINE # 2063
00F1         ?C0379:
                                           ; SOURCE LINE # 2064
00F1 120000      R     LCALL   L?0662
00F4 2400        E     ADD     A,#LOW context+079H
00F6 F582              MOV     DPL,A
00F8 E4                CLR     A
00F9 3400        E     ADDC    A,#HIGH context+079H
00FB         ?C0625:
00FB F583              MOV     DPH,A
00FD 7405              MOV     A,#05H
00FF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2065
                                           ; SOURCE LINE # 2066
0100         ?C0361:
                                           ; SOURCE LINE # 2068
0100 120000      R     LCALL   L?0835
0103 24F8              ADD     A,#0F8H
0105 6012              JZ      ?C0382
0107 24FC              ADD     A,#0FCH
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 128 

0109 6018              JZ      ?C0383
010B 2408              ADD     A,#08H
010D 701D              JNZ     ?C0384
                                           ; SOURCE LINE # 2069
010F         ?C0381:
                                           ; SOURCE LINE # 2070
010F 120000      R     LCALL   L?0662
0112 120000      R     LCALL   L?0744
0115 7401              MOV     A,#01H
0117 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2071
0118 22                RET     
                                           ; SOURCE LINE # 2072
0119         ?C0382:
                                           ; SOURCE LINE # 2073
0119 120000      R     LCALL   L?0662
011C 120000      R     LCALL   L?0744
011F 7404              MOV     A,#04H
0121 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2074
0122 22                RET     
                                           ; SOURCE LINE # 2075
0123         ?C0383:
                                           ; SOURCE LINE # 2076
0123 120000      R     LCALL   L?0662
0126 120000      R     LCALL   L?0744
0129 7405              MOV     A,#05H
012B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2077
                                           ; SOURCE LINE # 2078
                                           ; SOURCE LINE # 2080
012C         ?C0384:
012C 22                RET     
             ; FUNCTION _pd_cc_status_default_func (END)

             ; FUNCTION interface_send_msg (BEGIN)
                                           ; SOURCE LINE # 2082
                                           ; SOURCE LINE # 2083
                                           ; SOURCE LINE # 2084
0000 E4                CLR     A
0001 900000      E     MOV     DPTR,#j
0004 F0                MOVX    @DPTR,A
0005 900000      E     MOV     DPTR,#k
0008 F0                MOVX    @DPTR,A
0009         ?C0385:
0009 120000      R     LCALL   L?0654
000C 120000      E     LCALL   ?C?CLDPTR
000F 541F              ANL     A,#01FH
0011 2401              ADD     A,#01H
0013 900000      E     MOV     DPTR,#k
0016 120000      R     LCALL   L?0819
0019 5011              JNC     ?C0386
001B 120000      R     LCALL   L?0654
001E 900000      E     MOV     DPTR,#k
0021 120000      R     LCALL   L?0809
0024 900000      E     MOV     DPTR,#k
0027 E0                MOVX    A,@DPTR
0028 04                INC     A
0029 F0                MOVX    @DPTR,A
002A 80DD              SJMP    ?C0385
002C         ?C0386:
                                           ; SOURCE LINE # 2085
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 129 

002C 900000      E     MOV     DPTR,#j
002F E0                MOVX    A,@DPTR
0030 F4                CPL     A
0031 120000      R     LCALL   L?0652
0034 120000      E     LCALL   ?C?CLDPTR
0037 541F              ANL     A,#01FH
0039 2401              ADD     A,#01H
003B FD                MOV     R5,A
003C E4                CLR     A
003D 33                RLC     A
003E FC                MOV     R4,A
003F 900000      E     MOV     DPTR,#port_id
0042 E0                MOVX    A,@DPTR
0043 FE                MOV     R6,A
0044 120000      R     LCALL   L?0655
0047 8D82              MOV     DPL,R5
0049 8C83              MOV     DPH,R4
004B EF                MOV     A,R7
004C 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 2086
004F EE                MOV     A,R6
0050 120000      R     LCALL   L?0655
0053 120000      E     LCALL   ?C?CLDPTR
0056 541F              ANL     A,#01FH
0058 2402              ADD     A,#02H
005A 900000      E     MOV     DPTR,#len
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2087
005E EE                MOV     A,R6
005F 120000      R     LCALL   L?0650
0062 120000      R     LCALL   L?0837
                                           ; SOURCE LINE # 2089
0065 6019              JZ      ?C0388
                                           ; SOURCE LINE # 2090
0067 120000      R     LCALL   L?0847
006A         ?C0389:
                                           ; SOURCE LINE # 2091
                                           ; SOURCE LINE # 2092
006A 7F02              MOV     R7,#02H
006C 120000      E     LCALL   _DelayXms
                                           ; SOURCE LINE # 2093
006F 120000      R     LCALL   L?0648
0072 120000      R     LCALL   L?0837
                                           ; SOURCE LINE # 2094
0075 6009              JZ      ?C0388
                                           ; SOURCE LINE # 2095
0077         ?C0391:
                                           ; SOURCE LINE # 2096
                                           ; SOURCE LINE # 2097
0077 120000      R     LCALL   L?0820
007A 7002              JNZ     ?C0535
007C A3                INC     DPTR
007D E0                MOVX    A,@DPTR
007E         ?C0535:
007E 70EA              JNZ     ?C0389
                                           ; SOURCE LINE # 2098
0080         ?C0388:
                                           ; SOURCE LINE # 2099
0080 900000      E     MOV     DPTR,#c
0083 E0                MOVX    A,@DPTR
0084 7031              JNZ     ?C0392
                                           ; SOURCE LINE # 2100
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 130 

0086 900000      E     MOV     DPTR,#port_id
0089 E0                MOVX    A,@DPTR
008A FE                MOV     R6,A
008B 120000      R     LCALL   L?0650
008E EE                MOV     A,R6
008F 120000      R     LCALL   L?0655
0092 120000      R     LCALL   L?0784
0095 900000      E     MOV     DPTR,#len
0098 E0                MOVX    A,@DPTR
0099 14                DEC     A
009A FB                MOV     R3,A
009B 7DC1              MOV     R5,#0C1H
009D 120000      E     LCALL   _i2c_write_block_reg_b
                                           ; SOURCE LINE # 2101
00A0 900000      E     MOV     DPTR,#port_id
00A3 E0                MOVX    A,@DPTR
00A4 FE                MOV     R6,A
00A5 120000      R     LCALL   L?0650
00A8 EE                MOV     A,R6
00A9 120000      R     LCALL   L?0655
00AC 120000      E     LCALL   ?C?CLDPTR
00AF FB                MOV     R3,A
00B0 7DC0              MOV     R5,#0C0H
00B2 120000      E     LCALL   _i2c_write_reg
                                           ; SOURCE LINE # 2102
00B5 8003              SJMP    ?C0393
00B7         ?C0392:
                                           ; SOURCE LINE # 2106
00B7 7F02              MOV     R7,#02H
00B9 22                RET     
                                           ; SOURCE LINE # 2107
00BA         ?C0393:
                                           ; SOURCE LINE # 2109
00BA 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 2110
00BC         ?C0394:
00BC 22                RET     
00BD         L?0837:
00BD 7DC0              MOV     R5,#0C0H
00BF 120000      E     LCALL   _i2c_read_reg
00C2 900000      E     MOV     DPTR,#c
00C5 EF                MOV     A,R7
00C6 F0                MOVX    @DPTR,A
00C7 22                RET     
             ; FUNCTION interface_send_msg (END)

             ; FUNCTION interface_send_ctr_msg (BEGIN)
                                           ; SOURCE LINE # 2112
                                           ; SOURCE LINE # 2113
                                           ; SOURCE LINE # 2114
0000 120000      R     LCALL   L?0654
0003 7401              MOV     A,#01H
0005 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 2115
0008 900000      E     MOV     DPTR,#port_id
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D 120000      R     LCALL   L?0655
0010 120000      R     LCALL   L?0759
0013 FE                MOV     R6,A
0014 EF                MOV     A,R7
0015 120000      R     LCALL   L?0655
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 131 

0018 120000      E     LCALL   ?C?CLDPTR
001B 2E                ADD     A,R6
001C F4                CPL     A
001D 04                INC     A
001E FF                MOV     R7,A
001F 900000      E     MOV     DPTR,#port_id
0022 E0                MOVX    A,@DPTR
0023 FE                MOV     R6,A
0024 120000      R     LCALL   L?0655
0027 900002            MOV     DPTR,#02H
002A EF                MOV     A,R7
002B 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 2116
002E 900000      E     MOV     DPTR,#len
0031 7403              MOV     A,#03H
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2117
0034 EE                MOV     A,R6
0035 120000      R     LCALL   L?0650
0038 120000      R     LCALL   L?0838
                                           ; SOURCE LINE # 2119
003B 6019              JZ      ?C0395
                                           ; SOURCE LINE # 2120
003D 120000      R     LCALL   L?0847
0040         ?C0396:
                                           ; SOURCE LINE # 2121
                                           ; SOURCE LINE # 2122
0040 7F01              MOV     R7,#01H
0042 120000      E     LCALL   _DelayXms
                                           ; SOURCE LINE # 2123
0045 120000      R     LCALL   L?0648
0048 120000      R     LCALL   L?0838
                                           ; SOURCE LINE # 2124
004B 6009              JZ      ?C0395
                                           ; SOURCE LINE # 2125
004D         ?C0398:
                                           ; SOURCE LINE # 2126
                                           ; SOURCE LINE # 2127
004D 120000      R     LCALL   L?0820
0050 7002              JNZ     ?C0536
0052 A3                INC     DPTR
0053 E0                MOVX    A,@DPTR
0054         ?C0536:
0054 70EA              JNZ     ?C0396
                                           ; SOURCE LINE # 2128
0056         ?C0395:
                                           ; SOURCE LINE # 2129
0056 900000      E     MOV     DPTR,#c
0059 E0                MOVX    A,@DPTR
005A 7031              JNZ     ?C0399
                                           ; SOURCE LINE # 2130
005C 900000      E     MOV     DPTR,#port_id
005F E0                MOVX    A,@DPTR
0060 FE                MOV     R6,A
0061 120000      R     LCALL   L?0650
0064 EE                MOV     A,R6
0065 120000      R     LCALL   L?0655
0068 120000      R     LCALL   L?0784
006B 900000      E     MOV     DPTR,#len
006E E0                MOVX    A,@DPTR
006F 14                DEC     A
0070 FB                MOV     R3,A
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 132 

0071 7DC1              MOV     R5,#0C1H
0073 120000      E     LCALL   _i2c_write_block_reg_b
                                           ; SOURCE LINE # 2131
0076 900000      E     MOV     DPTR,#port_id
0079 E0                MOVX    A,@DPTR
007A FE                MOV     R6,A
007B 120000      R     LCALL   L?0650
007E EE                MOV     A,R6
007F 120000      R     LCALL   L?0655
0082 120000      E     LCALL   ?C?CLDPTR
0085 FB                MOV     R3,A
0086 7DC0              MOV     R5,#0C0H
0088 120000      E     LCALL   _i2c_write_reg
                                           ; SOURCE LINE # 2132
008B 8003              SJMP    ?C0400
008D         ?C0399:
                                           ; SOURCE LINE # 2136
008D 7F02              MOV     R7,#02H
008F 22                RET     
                                           ; SOURCE LINE # 2137
0090         ?C0400:
                                           ; SOURCE LINE # 2139
0090 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 2140
0092         ?C0401:
0092 22                RET     
0093         L?0838:
0093 7DC0              MOV     R5,#0C0H
0095 120000      E     LCALL   _i2c_read_reg
0098 900000      E     MOV     DPTR,#c
009B EF                MOV     A,R7
009C F0                MOVX    @DPTR,A
009D 22                RET     
             ; FUNCTION interface_send_ctr_msg (END)

             ; FUNCTION dp_alt_enter_mode (BEGIN)
                                           ; SOURCE LINE # 2142
                                           ; SOURCE LINE # 2143
                                           ; SOURCE LINE # 2144
0000 120000      R     LCALL   L?0831
0003 7F19              MOV     R7,#019H
0005 020000      R     LJMP    _Send_PD_Data_Messages
             ; FUNCTION dp_alt_enter_mode (END)

             ; FUNCTION dp_alt_exit_mode (BEGIN)
                                           ; SOURCE LINE # 2147
                                           ; SOURCE LINE # 2148
                                           ; SOURCE LINE # 2149
0000 120000      R     LCALL   L?0831
0003 7F1A              MOV     R7,#01AH
0005 020000      R     LJMP    _Send_PD_Data_Messages
             ; FUNCTION dp_alt_exit_mode (END)

             ; FUNCTION interface_recvd_msg (BEGIN)
                                           ; SOURCE LINE # 2152
                                           ; SOURCE LINE # 2153
                                           ; SOURCE LINE # 2157
0000 900000      E     MOV     DPTR,#port_id
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 120000      R     LCALL   L?0650
0008 EE                MOV     A,R6
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 133 

0009 120000      R     LCALL   L?0646
000C 120000      R     LCALL   L?0822
000F 7B20              MOV     R3,#020H
0011 7DE0              MOV     R5,#0E0H
0013 120000      E     LCALL   _i2c_read_block_reg
                                           ; SOURCE LINE # 2159
0016 900000      E     MOV     DPTR,#port_id
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B 120000      R     LCALL   L?0646
001E 120000      E     LCALL   ?C?CLDPTR
0021 603C              JZ      ?C0404
                                           ; SOURCE LINE # 2164
0023 EF                MOV     A,R7
0024 120000      R     LCALL   L?0650
0027 E4                CLR     A
0028 FB                MOV     R3,A
0029 7DE0              MOV     R5,#0E0H
002B 120000      E     LCALL   _i2c_write_reg
                                           ; SOURCE LINE # 2165
002E E4                CLR     A
002F 900000      E     MOV     DPTR,#j
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2166
0033 900000      E     MOV     DPTR,#i
0036 F0                MOVX    @DPTR,A
0037         ?C0405:
0037 120000      R     LCALL   L?0645
003A 120000      E     LCALL   ?C?CLDPTR
003D 541F              ANL     A,#01FH
003F 2402              ADD     A,#02H
0041 900000      E     MOV     DPTR,#i
0044 120000      R     LCALL   L?0819
0047 500E              JNC     ?C0406
                                           ; SOURCE LINE # 2167
0049 120000      R     LCALL   L?0645
004C 900000      E     MOV     DPTR,#i
004F 120000      R     LCALL   L?0809
                                           ; SOURCE LINE # 2168
0052 120000      R     LCALL   L?0826
0055 80E0              SJMP    ?C0405
0057         ?C0406:
                                           ; SOURCE LINE # 2169
0057 900000      E     MOV     DPTR,#j
005A E0                MOVX    A,@DPTR
005B 7002              JNZ     ?C0404
                                           ; SOURCE LINE # 2170
005D FF                MOV     R7,A
005E 22                RET     
                                           ; SOURCE LINE # 2171
                                           ; SOURCE LINE # 2175
                                           ; SOURCE LINE # 2176
005F         ?C0404:
                                           ; SOURCE LINE # 2177
005F 7F02              MOV     R7,#02H
                                           ; SOURCE LINE # 2178
0061         ?C0409:
0061 22                RET     
             ; FUNCTION interface_recvd_msg (END)

             ; FUNCTION handle_intr_vector (BEGIN)
                                           ; SOURCE LINE # 2180
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 134 

                                           ; SOURCE LINE # 2181
                                           ; SOURCE LINE # 2182
0000 120000      R     LCALL   interface_recvd_msg
0003 EF                MOV     A,R7
0004 7003              JNZ     ?C0412
                                           ; SOURCE LINE # 2183
                                           ; SOURCE LINE # 2187
0006 120000      R     LCALL   dispatch_rcvd_pd_msg
                                           ; SOURCE LINE # 2188
                                           ; SOURCE LINE # 2189
0009         ?C0412:
0009 22                RET     
             ; FUNCTION handle_intr_vector (END)

             ; FUNCTION _eFuseRead (BEGIN)
                                           ; SOURCE LINE # 2200
0000 900000      R     MOV     DPTR,#buf
0003 120000      E     LCALL   ?C?PSTXDATA
;---- Variable 'len' assigned to Register 'R6' ----
0006 CE                XCH     A,R6
0007 ED                MOV     A,R5
0008 CE                XCH     A,R6
;---- Variable 'offset' assigned to Register 'R5' ----
0009 CD                XCH     A,R5
000A EF                MOV     A,R7
000B CD                XCH     A,R5
                                           ; SOURCE LINE # 2201
                                           ; SOURCE LINE # 2202
000C 120000      R     LCALL   L?0648
000F ED                MOV     A,R5
0010 248D              ADD     A,#08DH
0012 FD                MOV     R5,A
0013 CB                XCH     A,R3
0014 EE                MOV     A,R6
0015 CB                XCH     A,R3
0016 EB                MOV     A,R3
0017 C0E0              PUSH    ACC
0019 900000      R     MOV     DPTR,#buf
001C 120000      E     LCALL   ?C?PLDXDATA
001F 120000      R     LCALL   L?0822
0022 D0E0              POP     ACC
0024 FB                MOV     R3,A
0025 020000      E     LJMP    _i2c_read_block_reg
             ; FUNCTION _eFuseRead (END)

             ; FUNCTION isCalibrated (BEGIN)
                                           ; SOURCE LINE # 2204
                                           ; SOURCE LINE # 2205
                                           ; SOURCE LINE # 2207
0000 7B01              MOV     R3,#01H
0002 7A00        R     MOV     R2,#HIGH buf
0004 7900        R     MOV     R1,#LOW buf
0006 7D03              MOV     R5,#03H
0008 E4                CLR     A
0009 FF                MOV     R7,A
000A 120000      R     LCALL   _eFuseRead
                                           ; SOURCE LINE # 2208
000D 900000      R     MOV     DPTR,#buf
0010 E0                MOVX    A,@DPTR
0011 6008              JZ      ?C0415
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 135 

0015 6004              JZ      ?C0415
0017 A3                INC     DPTR
0018 E0                MOVX    A,@DPTR
0019 7003              JNZ     ?C0414
001B         ?C0415:
                                           ; SOURCE LINE # 2209
001B 7F00              MOV     R7,#00H
001D 22                RET     
001E         ?C0414:
                                           ; SOURCE LINE # 2210
001E 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 2211
0020         ?C0416:
0020 22                RET     
             ; FUNCTION isCalibrated (END)

             ; FUNCTION _wait_ocm_ready (BEGIN)
                                           ; SOURCE LINE # 2213
0000 900000      R     MOV     DPTR,#fource_use_pd_20
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2214
                                           ; SOURCE LINE # 2215
0005 900000      E     MOV     DPTR,#count
0008 740C              MOV     A,#0CH
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C 7480              MOV     A,#080H
000E F0                MOVX    @DPTR,A
000F         ?C0419:
                                           ; SOURCE LINE # 2217
                                           ; SOURCE LINE # 2218
                                           ; SOURCE LINE # 2219
000F 120000      R     LCALL   L?0647
0012 7D05              MOV     R5,#05H
0014 120000      E     LCALL   _i2c_read_reg
0017 EF                MOV     A,R7
0018 30E6F4            JNB     ACC.6,?C0419
                                           ; SOURCE LINE # 2222
001B 120000      R     LCALL   L?0648
001E 7D95              MOV     R5,#095H
0020 120000      E     LCALL   _i2c_read_reg
0023 900000      E     MOV     DPTR,#c
0026 EF                MOV     A,R7
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2223
0028 120000      R     LCALL   isCalibrated
002B EF                MOV     A,R7
002C 7033              JNZ     ?C0420
                                           ; SOURCE LINE # 2224
                                           ; SOURCE LINE # 2228
002E 120000      R     LCALL   L?0656
0031 7BB7              MOV     R3,#0B7H
0033 7DD9              MOV     R5,#0D9H
0035 120000      E     LCALL   _i2c_write_reg
                                           ; SOURCE LINE # 2229
0038 900000      E     MOV     DPTR,#c
003B E0                MOVX    A,@DPTR
003C FF                MOV     R7,A
003D C3                CLR     C
003E 94AC              SUBB    A,#0ACH
0040 400B              JC      ?C0421
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 136 

0042 EF                MOV     A,R7
0043 F4                CPL     A
0044 6007              JZ      ?C0421
                                           ; SOURCE LINE # 2230
0046 120000      R     LCALL   L?0656
0049 7B26              MOV     R3,#026H
                                           ; SOURCE LINE # 2231
004B 8005              SJMP    ?C0630
004D         ?C0421:
                                           ; SOURCE LINE # 2232
004D 120000      R     LCALL   L?0657
0050 7B0F              MOV     R3,#0FH
0052         ?C0630:
0052 7DC0              MOV     R5,#0C0H
0054 120000      E     LCALL   _i2c_write_reg
                                           ; SOURCE LINE # 2233
0057         ?C0422:
                                           ; SOURCE LINE # 2234
0057 120000      R     LCALL   L?0657
005A 7B11              MOV     R3,#011H
005C 7DA6              MOV     R5,#0A6H
005E 120000      E     LCALL   _i2c_write_reg
                                           ; SOURCE LINE # 2235
0061         ?C0420:
                                           ; SOURCE LINE # 2238
0061 900000      R     MOV     DPTR,#fource_use_pd_20
0064 E0                MOVX    A,@DPTR
0065 900000      E     MOV     DPTR,#port_id
0068 6007              JZ      ?C0423
                                           ; SOURCE LINE # 2239
006A 120000      R     LCALL   L?0649
006D 7B01              MOV     R3,#01H
006F 8005              SJMP    ?C0629
0071         ?C0423:
                                           ; SOURCE LINE # 2241
0071 120000      R     LCALL   L?0649
0074 E4                CLR     A
0075 FB                MOV     R3,A
0076         ?C0629:
0076 7DBA              MOV     R5,#0BAH
0078 120000      E     LCALL   _i2c_write_reg
007B         ?C0427:
                                           ; SOURCE LINE # 2243
                                           ; SOURCE LINE # 2244
007B 900000      E     MOV     DPTR,#count
007E E0                MOVX    A,@DPTR
007F 7002              JNZ     ?C0537
0081 A3                INC     DPTR
0082 E0                MOVX    A,@DPTR
0083         ?C0537:
0083 600D              JZ      ?C0426
                                           ; SOURCE LINE # 2245
                                           ; SOURCE LINE # 2249
                                           ; SOURCE LINE # 2250
0085         ?C0428:
                                           ; SOURCE LINE # 2251
                                           ; SOURCE LINE # 2252
0085 120000      R     LCALL   L?0647
0088 7DB4              MOV     R5,#0B4H
008A 120000      E     LCALL   _i2c_read_reg
                                           ; SOURCE LINE # 2253
008D 120000      R     LCALL   L?0825
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 137 

0090 60E9              JZ      ?C0427
0092         ?C0426:
                                           ; SOURCE LINE # 2259
0092 900000      E     MOV     DPTR,#k
0095 E0                MOVX    A,@DPTR
0096 30E604            JNB     ACC.6,?C0429
0099 7F01              MOV     R7,#01H
009B 8002              SJMP    ?C0430
009D         ?C0429:
009D 7F00              MOV     R7,#00H
009F         ?C0430:
                                           ; SOURCE LINE # 2260
009F         ?C0431:
009F 22                RET     
             ; FUNCTION _wait_ocm_ready (END)

             ; FUNCTION send_initialized_setting (BEGIN)
                                           ; SOURCE LINE # 2266
                                           ; SOURCE LINE # 2267
                                           ; SOURCE LINE # 2268
0000 7F77              MOV     R7,#077H
0002 120000      E     LCALL   _RamDebug
                                           ; SOURCE LINE # 2269
0005 120000      R     LCALL   L?0666
0008 120000      R     LCALL   L?0776
000B E0                MOVX    A,@DPTR
000C 120000      E     LCALL   ?C?CCASE
000F 0000        R     DW      ?C0455
0011 00                DB      00H
0012 0000        R     DW      ?C0433
0014 01                DB      01H
0015 0000        R     DW      ?C0437
0017 02                DB      02H
0018 0000        R     DW      ?C0435
001A 03                DB      03H
001B 0000        R     DW      ?C0437
001D 04                DB      04H
001E 0000        R     DW      ?C0437
0020 05                DB      05H
0021 0000        R     DW      ?C0438
0023 37                DB      037H
0024 0000        R     DW      ?C0445
0026 38                DB      038H
0027 0000        R     DW      ?C0452
0029 50                DB      050H
002A 0000              DW      00H
002C 0000        R     DW      ?C0437
                                           ; SOURCE LINE # 2270
002E         ?C0433:
                                           ; SOURCE LINE # 2275
002E EF                MOV     A,R7
                                           ; SOURCE LINE # 2276
002F 020000      R     LJMP    ?C0635
                                           ; SOURCE LINE # 2277
                                           ; SOURCE LINE # 2285
0032         ?C0435:
                                           ; SOURCE LINE # 2291
0032 7A00        R     MOV     R2,#HIGH snk_identity
0034 7900        R     MOV     R1,#LOW snk_identity
0036 740C              MOV     A,#0CH
0038 120000      R     LCALL   L?0806
003B 7F02              MOV     R7,#02H
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 138 

003D 120000      R     LCALL   _send_pd_msg
                                           ; SOURCE LINE # 2293
0040 900000      E     MOV     DPTR,#port_id
0043 E0                MOVX    A,@DPTR
0044         ?C0632:
                                           ; SOURCE LINE # 2294
0044 020000      R     LJMP    ?C0635
                                           ; SOURCE LINE # 2295
                                           ; SOURCE LINE # 2301
0047         ?C0437:
                                           ; SOURCE LINE # 2304
0047 900000      E     MOV     DPTR,#port_id
004A E0                MOVX    A,@DPTR
004B         ?C0634:
                                           ; SOURCE LINE # 2305
004B 020000      R     LJMP    ?C0635
                                           ; SOURCE LINE # 2306
004E         ?C0438:
                                           ; SOURCE LINE # 2307
004E 120000      R     LCALL   L?0662
0051 120000      R     LCALL   L?0776
0054 E0                MOVX    A,@DPTR
0055 04                INC     A
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2308
0057 7F20              MOV     R7,#020H
0059 120000      E     LCALL   _RamDebug
                                           ; SOURCE LINE # 2313
005C 120000      R     LCALL   L?0662
005F 120000      R     LCALL   L?0730
0062 FF                MOV     R7,A
0063 120000      E     LCALL   _RamDebug
                                           ; SOURCE LINE # 2315
0066 120000      R     LCALL   L?0662
0069 120000      R     LCALL   L?0730
006C FF                MOV     R7,A
006D 7003              JNZ     $ + 5H
006F 020000      R     LJMP    ?C0455
0072 30E203            JNB     ACC.2,$ + 6H
0075 020000      R     LJMP    ?C0455
                                           ; SOURCE LINE # 2317
0078         ?C0439:
                                           ; SOURCE LINE # 2318
0078 120000      R     LCALL   get_data_role
007B EF                MOV     A,R7
007C 600A              JZ      ?C0443
007E 14                DEC     A
007F 7011              JNZ     ?C0441
                                           ; SOURCE LINE # 2319
0081         ?C0442:
                                           ; SOURCE LINE # 2320
0081 900000      E     MOV     DPTR,#role
0084 7401              MOV     A,#01H
                                           ; SOURCE LINE # 2321
                                           ; SOURCE LINE # 2322
0086 8005              SJMP    ?C0636
                                           ; SOURCE LINE # 2323
0088         ?C0443:
                                           ; SOURCE LINE # 2324
0088 900000      E     MOV     DPTR,#role
008B 7402              MOV     A,#02H
008D         ?C0636:
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 139 

008D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2325
008E FF                MOV     R7,A
008F 120000      E     LCALL   _RamDebug
                                           ; SOURCE LINE # 2326
                                           ; SOURCE LINE # 2327
0092         ?C0441:
                                           ; SOURCE LINE # 2328
0092 120000      R     LCALL   L?0662
0095 120000      R     LCALL   L?0730
0098 FF                MOV     R7,A
0099 900000      E     MOV     DPTR,#role
009C E0                MOVX    A,@DPTR
009D FE                MOV     R6,A
009E EF                MOV     A,R7
009F 5E                ANL     A,R6
00A0 707C              JNZ     ?C0455
                                           ; SOURCE LINE # 2329
00A2         ?C0444:
                                           ; SOURCE LINE # 2330
00A2 7F40              MOV     R7,#040H
00A4 120000      E     LCALL   _RamDebug
                                           ; SOURCE LINE # 2333
00A7 900000      E     MOV     DPTR,#port_id
00AA E0                MOVX    A,@DPTR
00AB FF                MOV     R7,A
00AC 120000      R     LCALL   _chip_power_down
                                           ; SOURCE LINE # 2334
00AF 900000      E     MOV     DPTR,#port_id
00B2 E0                MOVX    A,@DPTR
00B3 FF                MOV     R7,A
00B4 020000      E     LJMP    _anx_initial_context
                                           ; SOURCE LINE # 2336
                                           ; SOURCE LINE # 2337
00B7         ?C0445:
                                           ; SOURCE LINE # 2338
00B7 120000      R     LCALL   L?0666
00BA 120000      R     LCALL   L?0777
00BD E0                MOVX    A,@DPTR
00BE 04                INC     A
                                           ; SOURCE LINE # 2343
00BF 120000      R     LCALL   L?0703
00C2 120000      R     LCALL   L?0725
00C5 FF                MOV     R7,A
00C6 6056              JZ      ?C0455
00C8 20E253            JB      ACC.2,?C0455
                                           ; SOURCE LINE # 2345
00CB         ?C0446:
                                           ; SOURCE LINE # 2346
00CB 120000      R     LCALL   get_power_role
00CE EF                MOV     A,R7
00CF 600B              JZ      ?C0450
00D1 14                DEC     A
00D2 700E              JNZ     ?C0448
                                           ; SOURCE LINE # 2347
00D4         ?C0449:
                                           ; SOURCE LINE # 2348
00D4 900000      E     MOV     DPTR,#role
00D7 7401              MOV     A,#01H
00D9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2349
00DA 8006              SJMP    ?C0448
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 140 

                                           ; SOURCE LINE # 2350
00DC         ?C0450:
                                           ; SOURCE LINE # 2351
00DC 900000      E     MOV     DPTR,#role
00DF 7402              MOV     A,#02H
00E1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2352
                                           ; SOURCE LINE # 2353
00E2         ?C0448:
                                           ; SOURCE LINE # 2354
00E2 120000      R     LCALL   L?0662
00E5 120000      R     LCALL   L?0725
00E8 FF                MOV     R7,A
00E9 900000      E     MOV     DPTR,#role
00EC E0                MOVX    A,@DPTR
00ED FE                MOV     R6,A
00EE EF                MOV     A,R7
00EF 5E                ANL     A,R6
00F0 702C              JNZ     ?C0455
                                           ; SOURCE LINE # 2355
00F2         ?C0451:
                                           ; SOURCE LINE # 2356
00F2 120000      R     LCALL   L?0722
00F5 7F10              MOV     R7,#010H
00F7 020000      R     LJMP    _send_pd_msg
                                           ; SOURCE LINE # 2357
                                           ; SOURCE LINE # 2358
00FA         ?C0452:
                                           ; SOURCE LINE # 2359
00FA 120000      R     LCALL   L?0666
00FD 2400        E     ADD     A,#LOW context+0A5H
00FF F582              MOV     DPL,A
0101 E4                CLR     A
0102 3400        E     ADDC    A,#HIGH context+0A5H
                                           ; SOURCE LINE # 2368
0104 120000      R     LCALL   L?0702
0107 2400        E     ADD     A,#LOW context+09CH
0109 F582              MOV     DPL,A
010B E4                CLR     A
010C 3400        E     ADDC    A,#HIGH context+09CH
010E F583              MOV     DPH,A
0110 7401              MOV     A,#01H
0112 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2369
0113 22                RET     
                                           ; SOURCE LINE # 2370
0114         ?C0635:
0114 75F0BB            MOV     B,#0BBH
0117 A4                MUL     AB
0118 120000      R     LCALL   L?0777
011B E0                MOVX    A,@DPTR
011C 04                INC     A
011D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2372
                                           ; SOURCE LINE # 2373
                                           ; SOURCE LINE # 2374
                                           ; SOURCE LINE # 2375
                                           ; SOURCE LINE # 2377
011E         ?C0455:
011E 22                RET     
             ; FUNCTION send_initialized_setting (END)

C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 141 

             ; FUNCTION drp_toggle_enable (BEGIN)
                                           ; SOURCE LINE # 2379
                                           ; SOURCE LINE # 2380
                                           ; SOURCE LINE # 2381
0000 120000      R     LCALL   L?0648
0003 7D95              MOV     R5,#095H
0005 120000      E     LCALL   _i2c_read_reg
0008 900000      E     MOV     DPTR,#c
000B EF                MOV     A,R7
                                           ; SOURCE LINE # 2382
000C 120000      R     LCALL   L?0665
000F 120000      R     LCALL   L?0730
0012 30E00F            JNB     ACC.0,?C0456
                                           ; SOURCE LINE # 2383
0015 EF                MOV     A,R7
0016 120000      R     LCALL   L?0659
0019 7B05              MOV     R3,#05H
001B 7D1A              MOV     R5,#01AH
001D 120000      E     LCALL   _i2c_write_reg
                                           ; SOURCE LINE # 2387
0020 7FDD              MOV     R7,#0DDH
                                           ; SOURCE LINE # 2388
0022 8016              SJMP    ?C0637
0024         ?C0456:
0024 120000      R     LCALL   L?0666
0027 120000      R     LCALL   L?0730
002A 30E110            JNB     ACC.1,?C0458
                                           ; SOURCE LINE # 2389
002D EF                MOV     A,R7
002E 120000      R     LCALL   L?0659
0031 7B0A              MOV     R3,#0AH
0033 7D1A              MOV     R5,#01AH
0035 120000      E     LCALL   _i2c_write_reg
                                           ; SOURCE LINE # 2393
0038 7FDC              MOV     R7,#0DCH
003A         ?C0637:
003A 020000      E     LJMP    _RamDebug
                                           ; SOURCE LINE # 2394
003D         ?C0458:
                                           ; SOURCE LINE # 2395
003D 7FDB              MOV     R7,#0DBH
003F 120000      E     LCALL   _RamDebug
                                           ; SOURCE LINE # 2396
0042 120000      R     LCALL   L?0657
0045 7B80              MOV     R3,#080H
0047 7DAA              MOV     R5,#0AAH
0049 120000      E     LCALL   _i2c_write_reg
                                           ; SOURCE LINE # 2397
004C 120000      R     LCALL   L?0657
004F 7B4A              MOV     R3,#04AH
0051 7D1A              MOV     R5,#01AH
0053 120000      E     LCALL   _i2c_write_reg
                                           ; SOURCE LINE # 2401
0056 900000      E     MOV     DPTR,#c
0059 E0                MOVX    A,@DPTR
005A FF                MOV     R7,A
005B C3                CLR     C
005C 94AC              SUBB    A,#0ACH
005E 400D              JC      ?C0460
0060 EF                MOV     A,R7
0061 F4                CPL     A
0062 6009              JZ      ?C0460
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 142 

                                           ; SOURCE LINE # 2402
0064 120000      R     LCALL   L?0657
0067 7B99              MOV     R3,#099H
0069 7D23              MOV     R5,#023H
                                           ; SOURCE LINE # 2403
006B 803D              SJMP    ?C0638
006D         ?C0460:
                                           ; SOURCE LINE # 2404
006D 900000      E     MOV     DPTR,#port_id
0070 E0                MOVX    A,@DPTR
0071 FE                MOV     R6,A
0072 120000      R     LCALL   L?0659
0075 EF                MOV     A,R7
0076 C0E0              PUSH    ACC
0078 EE                MOV     A,R6
0079 120000      R     LCALL   L?0659
007C 7DA1              MOV     R5,#0A1H
007E 120000      E     LCALL   _i2c_read_reg
0081 EF                MOV     A,R7
0082 44A0              ORL     A,#0A0H
0084 FB                MOV     R3,A
0085 D0E0              POP     ACC
0087 FF                MOV     R7,A
0088 7DA1              MOV     R5,#0A1H
008A 120000      E     LCALL   _i2c_write_reg
                                           ; SOURCE LINE # 2406
008D 900000      E     MOV     DPTR,#port_id
0090 E0                MOVX    A,@DPTR
0091 FE                MOV     R6,A
0092 120000      R     LCALL   L?0659
0095 EF                MOV     A,R7
0096 C0E0              PUSH    ACC
0098 EE                MOV     A,R6
0099 120000      R     LCALL   L?0659
009C 7DA1              MOV     R5,#0A1H
009E 120000      E     LCALL   _i2c_read_reg
00A1 EF                MOV     A,R7
00A2 4440              ORL     A,#040H
00A4 FB                MOV     R3,A
00A5 D0E0              POP     ACC
00A7 FF                MOV     R7,A
00A8 7DA1              MOV     R5,#0A1H
00AA         ?C0638:
00AA 120000      E     LCALL   _i2c_write_reg
                                           ; SOURCE LINE # 2408
                                           ; SOURCE LINE # 2409
                                           ; SOURCE LINE # 2410
00AD         ?C0462:
00AD 22                RET     
             ; FUNCTION drp_toggle_enable (END)

             ; FUNCTION pd_ovp_set (BEGIN)
                                           ; SOURCE LINE # 2412
                                           ; SOURCE LINE # 2413
                                           ; SOURCE LINE # 2415
0000 120000      R     LCALL   L?0657
0003 7B80              MOV     R3,#080H
0005 7DCD              MOV     R5,#0CDH
0007 120000      E     LCALL   _i2c_write_reg
                                           ; SOURCE LINE # 2416
000A 900000      E     MOV     DPTR,#count
000D 7403              MOV     A,#03H
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 143 

000F F0                MOVX    @DPTR,A
0010 A3                INC     DPTR
0011 7440              MOV     A,#040H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2417
0014 120000      R     LCALL   L?0657
0017 900000      E     MOV     DPTR,#count
001A A3                INC     DPTR
001B E0                MOVX    A,@DPTR
001C FB                MOV     R3,A
001D 7D76              MOV     R5,#076H
001F 120000      E     LCALL   _i2c_write_reg
                                           ; SOURCE LINE # 2418
0022 120000      R     LCALL   L?0657
0025 900000      E     MOV     DPTR,#count
0028 E0                MOVX    A,@DPTR
0029 FB                MOV     R3,A
002A 7D77              MOV     R5,#077H
002C 120000      E     LCALL   _i2c_write_reg
                                           ; SOURCE LINE # 2421
002F 120000      R     LCALL   L?0657
0032 7B80              MOV     R3,#080H
0034 7D10              MOV     R5,#010H
0036 120000      E     LCALL   _i2c_write_reg
                                           ; SOURCE LINE # 2424
0039 120000      R     LCALL   L?0657
003C 7BA0              MOV     R3,#0A0H
003E 7DCD              MOV     R5,#0CDH
0040 020000      E     LJMP    _i2c_write_reg
             ; FUNCTION pd_ovp_set (END)

             ; FUNCTION usb_pd_function_init (BEGIN)
                                           ; SOURCE LINE # 2427
                                           ; SOURCE LINE # 2428
                                           ; SOURCE LINE # 2429
0000 E4                CLR     A
0001 FF                MOV     R7,A
0002 120000      R     LCALL   _wait_ocm_ready
                                           ; SOURCE LINE # 2436
0005 900000      E     MOV     DPTR,#context+0B6H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 7B32              MOV     R3,#032H
000C 7DAC              MOV     R5,#0ACH
000E 120000      E     LCALL   _i2c_write_reg
                                           ; SOURCE LINE # 2437
0011 900000      E     MOV     DPTR,#context+0B6H
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 7B1E              MOV     R3,#01EH
0018 7DAD              MOV     R5,#0ADH
001A 120000      E     LCALL   _i2c_write_reg
                                           ; SOURCE LINE # 2444
001D 120000      R     LCALL   L?0648
0020 7B02              MOV     R3,#02H
0022 7DAE              MOV     R5,#0AEH
0024 120000      E     LCALL   _i2c_write_reg
                                           ; SOURCE LINE # 2450
0027 E4                CLR     A
0028 900000      E     MOV     DPTR,#k
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2456
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 144 

002C E0                MOVX    A,@DPTR
002D 4403              ORL     A,#03H
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2457
0030 E0                MOVX    A,@DPTR
0031 4404              ORL     A,#04H
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2458
0034 120000      R     LCALL   L?0648
0037 7DB4              MOV     R5,#0B4H
0039 120000      E     LCALL   _i2c_read_reg
003C EF                MOV     A,R7
003D C3                CLR     C
003E 9411              SUBB    A,#011H
0040 900000      E     MOV     DPTR,#port_id
0043 E0                MOVX    A,@DPTR
0044 75F0BB            MOV     B,#0BBH
0047 500C              JNC     ?C0464
                                           ; SOURCE LINE # 2459
0049 120000      R     LCALL   L?0660
004C 900000      E     MOV     DPTR,#k
004F E0                MOVX    A,@DPTR
0050 FB                MOV     R3,A
0051 7DEE              MOV     R5,#0EEH
0053 800A              SJMP    ?C0639
0055         ?C0464:
                                           ; SOURCE LINE # 2461
0055 120000      R     LCALL   L?0660
0058 900000      E     MOV     DPTR,#k
005B E0                MOVX    A,@DPTR
005C FB                MOV     R3,A
005D 7DF0              MOV     R5,#0F0H
005F         ?C0639:
005F 120000      E     LCALL   _i2c_write_reg
0062         ?C0465:
                                           ; SOURCE LINE # 2463
0062 120000      R     LCALL   L?0648
0065 7DB2              MOV     R5,#0B2H
0067 120000      E     LCALL   _i2c_read_reg
                                           ; SOURCE LINE # 2469
006A 120000      R     LCALL   L?0825
006D 4482              ORL     A,#082H
006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2472
0070 E0                MOVX    A,@DPTR
0071 4440              ORL     A,#040H
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2474
0074 E0                MOVX    A,@DPTR
0075 54F3              ANL     A,#0F3H
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2476
                                           ; SOURCE LINE # 2481
0078         ?C0466:
                                           ; SOURCE LINE # 2486
0078         ?C0467:
                                           ; SOURCE LINE # 2488
0078 120000      R     LCALL   L?0648
007B 900000      E     MOV     DPTR,#k
007E E0                MOVX    A,@DPTR
007F FB                MOV     R3,A
0080 7DB2              MOV     R5,#0B2H
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 145 

0082 120000      E     LCALL   _i2c_write_reg
                                           ; SOURCE LINE # 2490
0085 120000      R     LCALL   L?0657
0088 7BFF              MOV     R3,#0FFH
008A 7DDD              MOV     R5,#0DDH
008C 120000      E     LCALL   _i2c_write_reg
                                           ; SOURCE LINE # 2491
008F 120000      R     LCALL   L?0657
0092 7B03              MOV     R3,#03H
0094 7DDE              MOV     R5,#0DEH
0096 120000      E     LCALL   _i2c_write_reg
                                           ; SOURCE LINE # 2493
0099 7F02              MOV     R7,#02H
009B 120000      E     LCALL   _DelayXms
                                           ; SOURCE LINE # 2495
009E 900000      E     MOV     DPTR,#port_id
00A1 E0                MOVX    A,@DPTR
00A2 FE                MOV     R6,A
00A3 120000      R     LCALL   L?0650
00A6 EF                MOV     A,R7
00A7 C0E0              PUSH    ACC
00A9 EE                MOV     A,R6
00AA 120000      R     LCALL   L?0650
00AD 7DB6              MOV     R5,#0B6H
00AF 120000      E     LCALL   _i2c_read_reg
00B2 EF                MOV     A,R7
00B3 54AF              ANL     A,#0AFH
00B5 FB                MOV     R3,A
00B6 D0E0              POP     ACC
00B8 FF                MOV     R7,A
00B9 7DB6              MOV     R5,#0B6H
00BB 120000      E     LCALL   _i2c_write_reg
                                           ; SOURCE LINE # 2500
00BE 120000      R     LCALL   L?0648
00C1 7BFF              MOV     R3,#0FFH
00C3 7DBB              MOV     R5,#0BBH
00C5 020000      E     LJMP    _i2c_write_reg
             ; FUNCTION usb_pd_function_init (END)

             ; FUNCTION _chip_power_on (BEGIN)
                                           ; SOURCE LINE # 2503
;---- Variable 'port' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2504
                                           ; SOURCE LINE # 2505
0000 EF                MOV     A,R7
0001 120000      R     LCALL   L?0659
0004 7D23              MOV     R5,#023H
0006 120000      E     LCALL   _i2c_read_reg
                                           ; SOURCE LINE # 2506
0009 7FE3              MOV     R7,#0E3H
000B 020000      E     LJMP    _RamDebug
             ; FUNCTION _chip_power_on (END)

             ; FUNCTION _chip_power_down (BEGIN)
                                           ; SOURCE LINE # 2511
0000 900000      R     MOV     DPTR,#port
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2512
                                           ; SOURCE LINE # 2513
0005 7004              JNZ     ?C0471
                                           ; SOURCE LINE # 2514
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 146 

0007 7FE1              MOV     R7,#0E1H
0009 8002              SJMP    ?C0640
000B         ?C0471:
                                           ; SOURCE LINE # 2516
000B 7FF1              MOV     R7,#0F1H
000D         ?C0640:
000D 120000      E     LCALL   _RamDebug
0010         ?C0472:
                                           ; SOURCE LINE # 2517
0010 900000      R     MOV     DPTR,#port
0013 E0                MOVX    A,@DPTR
0014 FE                MOV     R6,A
0015 120000      R     LCALL   L?0650
0018 EF                MOV     A,R7
0019 C0E0              PUSH    ACC
001B EE                MOV     A,R6
001C 120000      R     LCALL   L?0650
001F 7D6E              MOV     R5,#06EH
0021 120000      E     LCALL   _i2c_read_reg
0024 EF                MOV     A,R7
0025 4440              ORL     A,#040H
0027 FB                MOV     R3,A
0028 D0E0              POP     ACC
002A FF                MOV     R7,A
002B 7D6E              MOV     R5,#06EH
002D 120000      E     LCALL   _i2c_write_reg
                                           ; SOURCE LINE # 2519
0030 120000      R     LCALL   drp_toggle_enable
                                           ; SOURCE LINE # 2520
0033 900000      R     MOV     DPTR,#port
0036 120000      R     LCALL   L?0658
0039 7BFF              MOV     R3,#0FFH
003B 7D23              MOV     R5,#023H
003D 020000      E     LJMP    _i2c_write_reg
             ; FUNCTION _chip_power_down (END)

             ; FUNCTION _anx_detect_voltage_and_current (BEGIN)
                                           ; SOURCE LINE # 2533
0000 900000      R     MOV     DPTR,#port
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2534
0005 120000      R     LCALL   L?0650
0008 7DB8              MOV     R5,#0B8H
000A 120000      E     LCALL   _i2c_read_reg
000D 900000      E     MOV     DPTR,#change_status
0010 EF                MOV     A,R7
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2535
0012 120000      R     LCALL   L?0648
0015 7DB7              MOV     R5,#0B7H
0017 120000      E     LCALL   _i2c_read_reg
001A 900000      E     MOV     DPTR,#change_int
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2540
001F 900000      E     MOV     DPTR,#change_status
0022 E0                MOVX    A,@DPTR
0023 FF                MOV     R7,A
0024 30E406            JNB     ACC.4,?C0474
                                           ; SOURCE LINE # 2541
0027 900000      E     MOV     DPTR,#self_charging_error
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 147 

002A 020000      R     LJMP    ?C0641
                                           ; SOURCE LINE # 2543
002D         ?C0474:
                                           ; SOURCE LINE # 2545
002D EF                MOV     A,R7
002E 30E30A            JNB     ACC.3,?C0477
0031 900000      E     MOV     DPTR,#change_int
0034 E0                MOVX    A,@DPTR
0035 20E603            JB      ACC.6,$ + 6H
0038 020000      R     LJMP    ?C0476
003B         ?C0477:
                                           ; SOURCE LINE # 2546
003B 900000      R     MOV     DPTR,#port
003E 120000      R     LCALL   L?0667
                                           ; SOURCE LINE # 2547
0041 120000      R     LCALL   L?0701
0044 120000      R     LCALL   L?0791
0047 7401              MOV     A,#01H
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2548
004A EF                MOV     A,R7
004B 120000      R     LCALL   L?0650
004E 7DB1              MOV     R5,#0B1H
0050 120000      E     LCALL   _i2c_read_reg
0053 900000      R     MOV     DPTR,#port
0056 E0                MOVX    A,@DPTR
0057 FE                MOV     R6,A
0058 120000      R     LCALL   L?0684
005B EF                MOV     A,R7
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2549
005D EE                MOV     A,R6
005E 120000      R     LCALL   L?0650
0061 7DAF              MOV     R5,#0AFH
0063 120000      E     LCALL   _i2c_read_reg
0066 900000      R     MOV     DPTR,#port
                                           ; SOURCE LINE # 2550
0069 120000      R     LCALL   L?0682
006C E0                MOVX    A,@DPTR
006D 6008              JZ      ?C0479
006F 120000      R     LCALL   L?0750
0072 F583              MOV     DPH,A
0074 E0                MOVX    A,@DPTR
0075 7067              JNZ     ?C0475
0077         ?C0479:
                                           ; SOURCE LINE # 2551
0077 900000      R     MOV     DPTR,#port
007A 120000      R     LCALL   L?0649
007D 7DB9              MOV     R5,#0B9H
007F 120000      E     LCALL   _i2c_read_reg
0082 900000      E     MOV     DPTR,#change_status
0085 EF                MOV     A,R7
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2552
0087 120000      R     LCALL   _pd_cc_status_default_func
                                           ; SOURCE LINE # 2553
008A 900000      R     MOV     DPTR,#port
008D 120000      R     LCALL   L?0667
0090 120000      R     LCALL   L?0753
0093 F583              MOV     DPH,A
0095 7432              MOV     A,#032H
                                           ; SOURCE LINE # 2554
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 148 

0097 120000      R     LCALL   L?0703
009A 120000      R     LCALL   L?0744
009D E0                MOVX    A,@DPTR
009E 24FC              ADD     A,#0FCH
00A0 6010              JZ      ?C0483
00A2 14                DEC     A
00A3 6018              JZ      ?C0484
00A5 8000              SJMP    ?C0482
                                           ; SOURCE LINE # 2555
                                           ; SOURCE LINE # 2556
00A7         ?C0482:
                                           ; SOURCE LINE # 2557
00A7 900000      R     MOV     DPTR,#port
00AA E0                MOVX    A,@DPTR
00AB 120000      R     LCALL   L?0684
00AE 740A              MOV     A,#0AH
00B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2558
00B1 22                RET     
                                           ; SOURCE LINE # 2559
00B2         ?C0483:
                                           ; SOURCE LINE # 2560
00B2 900000      R     MOV     DPTR,#port
00B5 E0                MOVX    A,@DPTR
00B6 120000      R     LCALL   L?0684
00B9 741E              MOV     A,#01EH
00BB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2561
00BC 22                RET     
                                           ; SOURCE LINE # 2562
00BD         ?C0484:
                                           ; SOURCE LINE # 2563
00BD 900000      R     MOV     DPTR,#port
00C0 E0                MOVX    A,@DPTR
00C1 120000      R     LCALL   L?0684
00C4 743C              MOV     A,#03CH
00C6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2564
00C7 22                RET     
                                           ; SOURCE LINE # 2565
                                           ; SOURCE LINE # 2566
                                           ; SOURCE LINE # 2567
00C8         ?C0476:
                                           ; SOURCE LINE # 2568
00C8 900000      R     MOV     DPTR,#port
00CB 120000      R     LCALL   L?0667
00CE 2400        E     ADD     A,#LOW context+074H
00D0 F582              MOV     DPL,A
00D2 E4                CLR     A
00D3 3400        E     ADDC    A,#HIGH context+074H
                                           ; SOURCE LINE # 2569
00D5 120000      R     LCALL   L?0702
00D8 120000      R     LCALL   L?0734
00DB         ?C0641:
00DB 7401              MOV     A,#01H
00DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2570
                                           ; SOURCE LINE # 2571
00DE         ?C0475:
00DE 22                RET     
             ; FUNCTION _anx_detect_voltage_and_current (END)

C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 149 

             ; FUNCTION _anx_dead_battery_checking_2 (BEGIN)
                                           ; SOURCE LINE # 2572
0000 900000      R     MOV     DPTR,#port
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2573
                                           ; SOURCE LINE # 2574
0005 120000      R     LCALL   L?0739
0008 E0                MOVX    A,@DPTR
0009 701B              JNZ     ?C0486
                                           ; SOURCE LINE # 2575
000B 900000      R     MOV     DPTR,#port
000E 120000      R     LCALL   L?0649
0011 7DB9              MOV     R5,#0B9H
0013 120000      E     LCALL   _i2c_read_reg
0016 900000      E     MOV     DPTR,#change_status
0019 EF                MOV     A,R7
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2576
001B 6011              JZ      ?C0488
001D         ?C0487:
                                           ; SOURCE LINE # 2578
001D 900000      R     MOV     DPTR,#port
0020 120000      R     LCALL   L?0738
0023 7401              MOV     A,#01H
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2579
0026         ?C0486:
                                           ; SOURCE LINE # 2580
0026 900000      R     MOV     DPTR,#port
0029 E0                MOVX    A,@DPTR
002A FF                MOV     R7,A
002B 120000      R     LCALL   _anx_detect_voltage_and_current
                                           ; SOURCE LINE # 2581
002E         ?C0488:
002E 22                RET     
             ; FUNCTION _anx_dead_battery_checking_2 (END)

             ; FUNCTION anx_dead_battery_checking_1 (BEGIN)
                                           ; SOURCE LINE # 2583
                                           ; SOURCE LINE # 2584
                                           ; SOURCE LINE # 2585
0000 E4                CLR     A
0001 900000      E     MOV     DPTR,#i
0004 F0                MOVX    @DPTR,A
0005         ?C0489:
0005 900000      E     MOV     DPTR,#i
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A C3                CLR     C
000B 9401              SUBB    A,#01H
000D 4003              JC      $ + 5H
000F 020000      R     LJMP    ?C0497
                                           ; SOURCE LINE # 2586
0012 EF                MOV     A,R7
0013 120000      R     LCALL   L?0739
0016 E0                MOVX    A,@DPTR
0017 6003              JZ      $ + 5H
0019 020000      R     LJMP    ?C0491
                                           ; SOURCE LINE # 2587
001C 900000      E     MOV     DPTR,#i
001F 120000      R     LCALL   L?0649
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 150 

0022 7DB9              MOV     R5,#0B9H
0024 120000      E     LCALL   _i2c_read_reg
0027 900000      E     MOV     DPTR,#change_status
002A EF                MOV     A,R7
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2588
002C 7003              JNZ     $ + 5H
002E 020000      R     LJMP    ?C0491
                                           ; SOURCE LINE # 2589
0031 900000      E     MOV     DPTR,#i
0034 120000      R     LCALL   L?0738
0037 7401              MOV     A,#01H
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2590
003A 900000      E     MOV     DPTR,#change_status
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F 120000      R     LCALL   _pd_cc_status_default_func
                                           ; SOURCE LINE # 2591
0042 900000      E     MOV     DPTR,#i
0045 120000      R     LCALL   L?0649
0048 7DB8              MOV     R5,#0B8H
004A 120000      E     LCALL   _i2c_read_reg
004D 900000      E     MOV     DPTR,#change_status
0050 EF                MOV     A,R7
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2592
0052 900000      E     MOV     DPTR,#i
0055 30E308            JNB     ACC.3,?C0494
                                           ; SOURCE LINE # 2593
0058 120000      R     LCALL   L?0731
005B 7401              MOV     A,#01H
005D F0                MOVX    @DPTR,A
005E 8005              SJMP    ?C0495
0060         ?C0494:
                                           ; SOURCE LINE # 2596
0060 120000      R     LCALL   L?0731
0063 E4                CLR     A
0064 F0                MOVX    @DPTR,A
0065         ?C0495:
                                           ; SOURCE LINE # 2598
0065 900000      E     MOV     DPTR,#change_status
0068 E0                MOVX    A,@DPTR
0069 30E407            JNB     ACC.4,?C0496
                                           ; SOURCE LINE # 2599
006C 900000      E     MOV     DPTR,#self_charging_error
006F 7401              MOV     A,#01H
0071 F0                MOVX    @DPTR,A
0072 22                RET     
                                           ; SOURCE LINE # 2601
0073         ?C0496:
                                           ; SOURCE LINE # 2603
0073 900000      E     MOV     DPTR,#i
0076 120000      R     LCALL   L?0732
0079 E0                MOVX    A,@DPTR
007A 7058              JNZ     ?C0491
                                           ; SOURCE LINE # 2604
007C 120000      R     LCALL   L?0648
007F 7DB1              MOV     R5,#0B1H
0081 120000      E     LCALL   _i2c_read_reg
0084 900000      E     MOV     DPTR,#i
0087 E0                MOVX    A,@DPTR
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 151 

0088 120000      R     LCALL   L?0684
008B EF                MOV     A,R7
008C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2605
008D 120000      R     LCALL   L?0648
0090 7DAF              MOV     R5,#0AFH
0092 120000      E     LCALL   _i2c_read_reg
0095 900000      E     MOV     DPTR,#i
                                           ; SOURCE LINE # 2606
0098 120000      R     LCALL   L?0682
009B E0                MOVX    A,@DPTR
009C 6008              JZ      ?C0500
009E 120000      R     LCALL   L?0750
00A1 F583              MOV     DPH,A
00A3 E0                MOVX    A,@DPTR
00A4 702E              JNZ     ?C0491
00A6         ?C0500:
                                           ; SOURCE LINE # 2607
                                           ; SOURCE LINE # 2608
00A6 120000      R     LCALL   L?0751
00A9 F583              MOV     DPH,A
00AB 7432              MOV     A,#032H
00AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2609
00AE 120000      R     LCALL   L?0662
00B1 120000      R     LCALL   L?0744
00B4 E0                MOVX    A,@DPTR
00B5 24FC              ADD     A,#0FCH
00B7 600D              JZ      ?C0504
00B9 14                DEC     A
00BA 6012              JZ      ?C0505
00BC 8000              SJMP    ?C0503
                                           ; SOURCE LINE # 2610
                                           ; SOURCE LINE # 2611
00BE         ?C0503:
                                           ; SOURCE LINE # 2612
00BE 120000      R     LCALL   L?0683
00C1 740A              MOV     A,#0AH
00C3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2613
00C4 800E              SJMP    ?C0491
                                           ; SOURCE LINE # 2614
00C6         ?C0504:
                                           ; SOURCE LINE # 2615
00C6 120000      R     LCALL   L?0683
00C9 741E              MOV     A,#01EH
00CB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2616
00CC 8006              SJMP    ?C0491
                                           ; SOURCE LINE # 2617
00CE         ?C0505:
                                           ; SOURCE LINE # 2618
00CE 120000      R     LCALL   L?0683
00D1 743C              MOV     A,#03CH
00D3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2619
                                           ; SOURCE LINE # 2620
                                           ; SOURCE LINE # 2621
                                           ; SOURCE LINE # 2622
                                           ; SOURCE LINE # 2627
                                           ; SOURCE LINE # 2628
                                           ; SOURCE LINE # 2629
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 152 

00D4         ?C0491:
00D4 120000      R     LCALL   L?0827
00D7 020000      R     LJMP    ?C0489
                                           ; SOURCE LINE # 2630
00DA         ?C0497:
00DA 22                RET     
             ; FUNCTION anx_dead_battery_checking_1 (END)

             ; FUNCTION anx_alert_message_isr (BEGIN)
                                           ; SOURCE LINE # 2631
                                           ; SOURCE LINE # 2632
                                           ; SOURCE LINE # 2633
0000 120000      R     LCALL   L?0666
0003 120000      R     LCALL   L?0740
0006 E0                MOVX    A,@DPTR
0007 7020              JNZ     ?C0506
                                           ; SOURCE LINE # 2634
0009 EF                MOV     A,R7
000A 120000      R     LCALL   L?0650
000D 7DB4              MOV     R5,#0B4H
000F 120000      E     LCALL   _i2c_read_reg
0012 EF                MOV     A,R7
0013 7014              JNZ     ?C0506
                                           ; SOURCE LINE # 2635
0015 120000      R     LCALL   L?0657
0018 7BFF              MOV     R3,#0FFH
001A 7D10              MOV     R5,#010H
001C 120000      E     LCALL   _i2c_write_reg
                                           ; SOURCE LINE # 2636
001F 120000      R     LCALL   L?0657
0022 7BFF              MOV     R3,#0FFH
0024 7D11              MOV     R5,#011H
0026 020000      E     LJMP    _i2c_write_reg
                                           ; SOURCE LINE # 2638
                                           ; SOURCE LINE # 2639
0029         ?C0506:
                                           ; SOURCE LINE # 2642
0029 120000      R     LCALL   L?0648
002C 7A00        E     MOV     R2,#HIGH change_int
002E 7900        E     MOV     R1,#LOW change_int
0030 120000      R     LCALL   L?0821
0033 0B                INC     R3
0034 7DB7              MOV     R5,#0B7H
0036 120000      E     LCALL   _i2c_read_block_reg
                                           ; SOURCE LINE # 2644
0039 120000      R     LCALL   L?0657
003C 7A00        E     MOV     R2,#HIGH intr_alert_0
003E 7900        E     MOV     R1,#LOW intr_alert_0
0040 120000      R     LCALL   L?0821
0043 0B                INC     R3
0044 7DCB              MOV     R5,#0CBH
0046 120000      E     LCALL   _i2c_read_block_reg
                                           ; SOURCE LINE # 2647
0049 120000      R     LCALL   L?0648
004C E4                CLR     A
004D FB                MOV     R3,A
004E 7DB7              MOV     R5,#0B7H
0050 120000      E     LCALL   _i2c_write_reg
                                           ; SOURCE LINE # 2648
0053 120000      R     LCALL   L?0657
0056 7B01              MOV     R3,#01H
0058 7A00        E     MOV     R2,#HIGH intr_alert_0
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 153 

005A 7900        E     MOV     R1,#LOW intr_alert_0
005C 120000      R     LCALL   L?0786
005F 0B                INC     R3
0060 7DCB              MOV     R5,#0CBH
0062 120000      E     LCALL   _i2c_write_block_reg_b
                                           ; SOURCE LINE # 2655
0065 900000      E     MOV     DPTR,#intr_alert_1
0068 E0                MOVX    A,@DPTR
0069 20E703            JB      ACC.7,$ + 6H
006C 020000      R     LJMP    ?C0509
                                           ; SOURCE LINE # 2656
006F 120000      R     LCALL   usb_pd_function_init
                                           ; SOURCE LINE # 2657
0072 120000      R     LCALL   L?0648
0075 7DB4              MOV     R5,#0B4H
0077 120000      E     LCALL   _i2c_read_reg
007A 900000      E     MOV     DPTR,#j
007D EF                MOV     A,R7
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2658
007F 120000      R     LCALL   L?0648
0082 7DB5              MOV     R5,#0B5H
0084 120000      E     LCALL   _i2c_read_reg
0087 900000      E     MOV     DPTR,#k
008A EF                MOV     A,R7
                                           ; SOURCE LINE # 2659
008B 120000      R     LCALL   L?0833
008E 900000      E     MOV     DPTR,#j
0091 700F              JNZ     ?C0510
                                           ; SOURCE LINE # 2660
0093 E0                MOVX    A,@DPTR
0094 900000      E     MOV     DPTR,#xEC_PDPort0MainVersion
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2661
0098 900000      E     MOV     DPTR,#k
009B E0                MOVX    A,@DPTR
009C 900000      E     MOV     DPTR,#xEC_PDPort0SubVersion
009F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2662
00A0 800D              SJMP    ?C0511
00A2         ?C0510:
                                           ; SOURCE LINE # 2663
00A2 E0                MOVX    A,@DPTR
00A3 900000      E     MOV     DPTR,#xEC_PDPort1MainVersion
00A6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2664
00A7 900000      E     MOV     DPTR,#k
00AA E0                MOVX    A,@DPTR
00AB 900000      E     MOV     DPTR,#xEC_PDPort1SubVersion
00AE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2665
00AF         ?C0511:
                                           ; SOURCE LINE # 2672
00AF 120000      E     LCALL   _anx_initial_context
                                           ; SOURCE LINE # 2673
00B2 120000      R     LCALL   L?0666
00B5 2400        E     ADD     A,#LOW context
00B7 F582              MOV     DPL,A
00B9 E4                CLR     A
00BA 3400        E     ADDC    A,#HIGH context
                                           ; SOURCE LINE # 2674
00BC 120000      R     LCALL   L?0685
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 154 

00BF 4440              ORL     A,#040H
                                           ; SOURCE LINE # 2675
00C1 120000      R     LCALL   L?0665
00C4 2400        E     ADD     A,#LOW context+073H
00C6 F582              MOV     DPL,A
00C8 E4                CLR     A
00C9 3400        E     ADDC    A,#HIGH context+073H
                                           ; SOURCE LINE # 2676
00CB 120000      R     LCALL   L?0685
00CE 4408              ORL     A,#08H
                                           ; SOURCE LINE # 2677
00D0 120000      R     LCALL   L?0665
00D3 120000      R     LCALL   L?0689
00D6 4402              ORL     A,#02H
                                           ; SOURCE LINE # 2678
00D8 120000      R     LCALL   L?0703
00DB 120000      R     LCALL   L?0777
00DE 7401              MOV     A,#01H
00E0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2680
00E1 7A00        R     MOV     R2,#HIGH svid
00E3 7900        R     MOV     R1,#LOW svid
00E5 120000      R     LCALL   L?0698
00E8 7F03              MOV     R7,#03H
00EA 120000      R     LCALL   _send_pd_msg
                                           ; SOURCE LINE # 2681
00ED 7A00        R     MOV     R2,#HIGH set_variable_1
00EF 7900        R     MOV     R1,#LOW set_variable_1
00F1 7405              MOV     A,#05H
00F3 120000      R     LCALL   L?0806
00F6 7FFD              MOV     R7,#0FDH
00F8 120000      R     LCALL   _send_pd_msg
                                           ; SOURCE LINE # 2683
00FB 7A00        R     MOV     R2,#HIGH dp_source_dp_caps
00FD 7900        R     MOV     R1,#LOW dp_source_dp_caps
00FF 120000      R     LCALL   L?0698
0102 7F08              MOV     R7,#08H
0104 120000      R     LCALL   _send_pd_msg
                                           ; SOURCE LINE # 2685
0107 120000      R     LCALL   send_source_capability
                                           ; SOURCE LINE # 2686
010A 120000      R     LCALL   send_sink_capability
                                           ; SOURCE LINE # 2687
010D 900000      E     MOV     DPTR,#port_id
0110 E0                MOVX    A,@DPTR
0111 FF                MOV     R7,A
0112 E4                CLR     A
0113 FD                MOV     R5,A
0114 120000      E     LCALL   _anx_ucsi_pin_assignment_event
                                           ; SOURCE LINE # 2689
0117 7F96              MOV     R7,#096H
0119 120000      E     LCALL   _ucsi_async_notify_raise_up
                                           ; SOURCE LINE # 2690
011C         ?C0509:
                                           ; SOURCE LINE # 2691
011C 900000      E     MOV     DPTR,#intr_alert_1
011F E0                MOVX    A,@DPTR
0120 30E63B            JNB     ACC.6,?C0512
                                           ; SOURCE LINE # 2692
0123 900000      E     MOV     DPTR,#port_id
0126 E0                MOVX    A,@DPTR
0127 7004              JNZ     ?C0513
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 155 

                                           ; SOURCE LINE # 2693
0129 7FE2              MOV     R7,#0E2H
012B 8002              SJMP    ?C0642
012D         ?C0513:
                                           ; SOURCE LINE # 2695
012D 7FF2              MOV     R7,#0F2H
012F         ?C0642:
012F 120000      E     LCALL   _RamDebug
0132         ?C0514:
                                           ; SOURCE LINE # 2696
0132 900000      E     MOV     DPTR,#port_id
0135 E0                MOVX    A,@DPTR
0136 FF                MOV     R7,A
0137 120000      R     LCALL   _chip_power_down
                                           ; SOURCE LINE # 2701
013A 120000      R     LCALL   L?0666
013D 120000      R     LCALL   L?0740
0140 E4                CLR     A
0141 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2702
0142 120000      E     LCALL   _anx_initial_context
                                           ; SOURCE LINE # 2703
0145 120000      R     LCALL   L?0662
0148 120000      R     LCALL   L?0689
014B 4440              ORL     A,#040H
014D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2704
014E 7F02              MOV     R7,#02H
0150 120000      E     LCALL   _ucsi_async_notify_raise_up
                                           ; SOURCE LINE # 2709
0153 120000      R     LCALL   L?0666
0156 120000      R     LCALL   L?0815
0159 E4                CLR     A
015A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2710
015B 020000      E     LJMP    _anx_ucsi_detach_event
                                           ; SOURCE LINE # 2712
015E         ?C0512:
                                           ; SOURCE LINE # 2715
015E 900000      E     MOV     DPTR,#intr_alert_0
0161 E0                MOVX    A,@DPTR
0162 30E703            JNB     ACC.7,?C0515
                                           ; SOURCE LINE # 2716
0165 120000      R     LCALL   handle_intr_vector
                                           ; SOURCE LINE # 2717
0168         ?C0515:
                                           ; SOURCE LINE # 2719
0168 900000      E     MOV     DPTR,#intr_alert_0
016B E0                MOVX    A,@DPTR
016C 20E603            JB      ACC.6,$ + 6H
016F 020000      R     LJMP    ?C0516
                                           ; SOURCE LINE # 2721
0172 900000      E     MOV     DPTR,#change_int
0175 E0                MOVX    A,@DPTR
0176 30E719            JNB     ACC.7,?C0517
                                           ; SOURCE LINE # 2722
0179 900000      E     MOV     DPTR,#change_status
017C E0                MOVX    A,@DPTR
017D 5480              ANL     A,#080H
017F FE                MOV     R6,A
0180 120000      R     LCALL   L?0666
0183 120000      R     LCALL   L?0848
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 156 

0186 EE                MOV     A,R6
                                           ; SOURCE LINE # 2724
0187 120000      R     LCALL   L?0703
018A 120000      R     LCALL   L?0848
018D E0                MOVX    A,@DPTR
018E FD                MOV     R5,A
018F 120000      E     LCALL   _anx_ucsi_hpd_event
                                           ; SOURCE LINE # 2725
0192         ?C0517:
                                           ; SOURCE LINE # 2727
0192 900000      E     MOV     DPTR,#change_int
0195 E0                MOVX    A,@DPTR
0196 30E35D            JNB     ACC.3,?C0518
                                           ; SOURCE LINE # 2728
0199 120000      R     LCALL   L?0666
019C 120000      R     LCALL   L?0689
019F 4410              ORL     A,#010H
01A1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2729
01A2 900000      E     MOV     DPTR,#change_status
01A5 E0                MOVX    A,@DPTR
01A6 900000      E     MOV     DPTR,#port_id
01A9 30E323            JNB     ACC.3,?C0519
                                           ; SOURCE LINE # 2730
                                           ; SOURCE LINE # 2731
01AC E0                MOVX    A,@DPTR
01AD FE                MOV     R6,A
01AE 75F0BB            MOV     B,#0BBH
01B1 A4                MUL     AB
01B2 120000      R     LCALL   L?0815
01B5 7401              MOV     A,#01H
01B7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2732
01B8 EE                MOV     A,R6
01B9 120000      R     LCALL   L?0733
01BC 7401              MOV     A,#01H
01BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2733
01BF EE                MOV     A,R6
01C0 120000      R     LCALL   L?0688
01C3 4402              ORL     A,#02H
                                           ; SOURCE LINE # 2734
01C5 120000      R     LCALL   L?0703
01C8 120000      R     LCALL   L?0792
01CB E4                CLR     A
01CC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2738
01CD 8022              SJMP    ?C0520
01CF         ?C0519:
                                           ; SOURCE LINE # 2740
                                           ; SOURCE LINE # 2748
01CF 120000      R     LCALL   L?0667
                                           ; SOURCE LINE # 2749
01D2 120000      R     LCALL   L?0701
01D5 120000      R     LCALL   L?0816
01D8 E4                CLR     A
01D9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2751
01DA EF                MOV     A,R7
01DB 120000      R     LCALL   L?0692
01DE 4402              ORL     A,#02H
                                           ; SOURCE LINE # 2753
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 157 

01E0 120000      R     LCALL   L?0665
01E3 120000      R     LCALL   L?0689
01E6 4402              ORL     A,#02H
                                           ; SOURCE LINE # 2754
01E8 120000      R     LCALL   L?0703
01EB 120000      R     LCALL   L?0792
01EE 7401              MOV     A,#01H
01F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2755
01F1         ?C0520:
                                           ; SOURCE LINE # 2756
01F1 7F64              MOV     R7,#064H
01F3 120000      E     LCALL   _ucsi_async_notify_raise_up
                                           ; SOURCE LINE # 2757
01F6         ?C0518:
                                           ; SOURCE LINE # 2758
01F6 900000      E     MOV     DPTR,#change_int
01F9 E0                MOVX    A,@DPTR
01FA 30E459            JNB     ACC.4,?C0516
                                           ; SOURCE LINE # 2759
01FD 120000      R     LCALL   L?0648
0200 7DB9              MOV     R5,#0B9H
0202 120000      E     LCALL   _i2c_read_reg
0205 900000      E     MOV     DPTR,#change_status
0208 EF                MOV     A,R7
0209 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2760
020A 120000      R     LCALL   L?0648
020D 7DB9              MOV     R5,#0B9H
020F 120000      E     LCALL   _i2c_read_reg
0212 EF                MOV     A,R7
0213 540D              ANL     A,#0DH
0215 900000      E     MOV     DPTR,#port_id
0218 6007              JZ      ?C0522
                                           ; SOURCE LINE # 2761
021A 120000      R     LCALL   L?0764
021D E4                CLR     A
021E F0                MOVX    @DPTR,A
021F 8006              SJMP    ?C0523
0221         ?C0522:
                                           ; SOURCE LINE # 2763
0221 120000      R     LCALL   L?0764
0224 7401              MOV     A,#01H
0226 F0                MOVX    @DPTR,A
0227         ?C0523:
                                           ; SOURCE LINE # 2765
0227 900000      E     MOV     DPTR,#change_status
022A E0                MOVX    A,@DPTR
022B FF                MOV     R7,A
022C 120000      R     LCALL   _pd_cc_status_default_func
                                           ; SOURCE LINE # 2767
022F 120000      R     LCALL   L?0666
0232 120000      R     LCALL   L?0793
0235 E0                MOVX    A,@DPTR
0236 30E31D            JNB     ACC.3,?C0516
                                           ; SOURCE LINE # 2768
0239 EF                MOV     A,R7
023A 120000      R     LCALL   L?0778
023D E0                MOVX    A,@DPTR
023E 7016              JNZ     ?C0516
                                           ; SOURCE LINE # 2769
0240 120000      R     LCALL   L?0662
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 158 

0243 120000      R     LCALL   L?0766
0246 E0                MOVX    A,@DPTR
0247 FD                MOV     R5,A
0248 7F01              MOV     R7,#01H
024A 120000      R     LCALL   _redriver_mux_control
                                           ; SOURCE LINE # 2770
024D 120000      R     LCALL   L?0662
0250 120000      R     LCALL   L?0779
0253 7401              MOV     A,#01H
0255 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2771
                                           ; SOURCE LINE # 2772
                                           ; SOURCE LINE # 2774
                                           ; SOURCE LINE # 2775
0256         ?C0516:
                                           ; SOURCE LINE # 2777
0256 900000      E     MOV     DPTR,#port_id
0259 E0                MOVX    A,@DPTR
025A FF                MOV     R7,A
025B 120000      R     LCALL   _anx_dead_battery_checking_2
                                           ; SOURCE LINE # 2778
025E         ?C0508:
025E 22                RET     
             ; FUNCTION anx_alert_message_isr (END)

             ; FUNCTION anx7447_context_initial (BEGIN)
                                           ; SOURCE LINE # 2780
                                           ; SOURCE LINE # 2781
                                           ; SOURCE LINE # 2783
0000 120000      R     LCALL   L?0771
0003 2400        R     ADD     A,#LOW Liberty_i2c_address
0005 F582              MOV     DPL,A
0007 E4                CLR     A
0008 3400        R     ADDC    A,#HIGH Liberty_i2c_address
000A 120000      R     LCALL   L?0780
000D 2400        E     ADD     A,#LOW context+0B2H
000F F582              MOV     DPL,A
0011 E4                CLR     A
0012 3400        E     ADDC    A,#HIGH context+0B2H
                                           ; SOURCE LINE # 2784
0014 120000      R     LCALL   L?0769
0017 2400        R     ADD     A,#LOW Liberty_i2c_address+01H
0019 F582              MOV     DPL,A
001B E4                CLR     A
001C 3400        R     ADDC    A,#HIGH Liberty_i2c_address+01H
001E 120000      R     LCALL   L?0780
0021 2400        E     ADD     A,#LOW context+0B6H
0023 F582              MOV     DPL,A
0025 E4                CLR     A
0026 3400        E     ADDC    A,#HIGH context+0B6H
                                           ; SOURCE LINE # 2785
0028 120000      R     LCALL   L?0769
002B 2400        R     ADD     A,#LOW Liberty_i2c_address+02H
002D F582              MOV     DPL,A
002F E4                CLR     A
0030 3400        R     ADDC    A,#HIGH Liberty_i2c_address+02H
0032 120000      R     LCALL   L?0781
0035 2400        E     ADD     A,#LOW context+0B4H
0037 F582              MOV     DPL,A
0039 E4                CLR     A
003A 3400        E     ADDC    A,#HIGH context+0B4H
                                           ; SOURCE LINE # 2786
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 159 

003C 120000      R     LCALL   L?0770
003F 2400        R     ADD     A,#LOW Liberty_i2c_address+03H
0041 F582              MOV     DPL,A
0043 E4                CLR     A
0044 3400        R     ADDC    A,#HIGH Liberty_i2c_address+03H
0046 120000      R     LCALL   L?0781
0049 2400        E     ADD     A,#LOW context+0B5H
004B F582              MOV     DPL,A
004D E4                CLR     A
004E 3400        E     ADDC    A,#HIGH context+0B5H
                                           ; SOURCE LINE # 2792
0050 120000      R     LCALL   L?0664
0053 2400        E     ADD     A,#LOW context+07CH
0055 F582              MOV     DPL,A
0057 E4                CLR     A
0058 3400        E     ADDC    A,#HIGH context+07CH
                                           ; SOURCE LINE # 2794
005A 120000      R     LCALL   L?0702
005D 120000      R     LCALL   L?0813
0060 7402              MOV     A,#02H
                                           ; SOURCE LINE # 2795
0062 120000      R     LCALL   L?0703
0065 2400        E     ADD     A,#LOW context
0067 F582              MOV     DPL,A
0069 E4                CLR     A
006A 3400        E     ADDC    A,#HIGH context
                                           ; SOURCE LINE # 2796
006C 120000      R     LCALL   L?0702
006F 120000      R     LCALL   L?0811
0072 7402              MOV     A,#02H
                                           ; SOURCE LINE # 2798
0074 120000      R     LCALL   L?0703
0077 120000      R     LCALL   L?0794
007A 7407              MOV     A,#07H
007C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2800
007D EF                MOV     A,R7
007E B4010B            CJNE    A,#01H,?C0526
                                           ; SOURCE LINE # 2801
0081 75F0BB            MOV     B,#0BBH
0084 A4                MUL     AB
0085 120000      R     LCALL   L?0794
0088 E0                MOVX    A,@DPTR
0089 4408              ORL     A,#08H
008B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2802
008C         ?C0526:
                                           ; SOURCE LINE # 2805
008C 120000      R     LCALL   L?0662
008F 2400        E     ADD     A,#LOW context+0BAH
0091 F582              MOV     DPL,A
0093 E4                CLR     A
0094 3400        E     ADDC    A,#HIGH context+0BAH
0096 F583              MOV     DPH,A
0098 E4                CLR     A
0099 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2806
009A 22                RET     
             ; FUNCTION anx7447_context_initial (END)

             ; FUNCTION anx7447_pup_initial (BEGIN)
                                           ; SOURCE LINE # 2808
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 160 

                                           ; SOURCE LINE # 2809
                                           ; SOURCE LINE # 2810
0000 900000      E     MOV     DPTR,#pup
0003 74FF              MOV     A,#0FFH
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 7401              MOV     A,#01H
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2811
000A A3                INC     DPTR
000B 120000      E     LCALL   ?C?LSTKXDATA
000E 00                DB      00H
000F 00                DB      00H
0010 04                DB      04H
0011 05                DB      05H
                                           ; SOURCE LINE # 2812
0012 900000      E     MOV     DPTR,#pup+0DH
0015 7401              MOV     A,#01H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2813
0018 E4                CLR     A
0019 900000      E     MOV     DPTR,#pup+0CH
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2814
001D 900000      E     MOV     DPTR,#pup+0EH
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2815
0021 22                RET     
             ; FUNCTION anx7447_pup_initial (END)

             ; FUNCTION anx7447_ucsi_init (BEGIN)
                                           ; SOURCE LINE # 2824
                                           ; SOURCE LINE # 2825
                                           ; SOURCE LINE # 2831
0000 E4                CLR     A
0001 900000      E     MOV     DPTR,#i
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2832
0005 120000      R     LCALL   anx7447_pup_initial
                                           ; SOURCE LINE # 2833
0008 E4                CLR     A
0009 900000      E     MOV     DPTR,#i
000C F0                MOVX    @DPTR,A
000D         ?C0529:
000D 900000      E     MOV     DPTR,#i
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 C3                CLR     C
0013 9401              SUBB    A,#01H
0015 505F              JNC     ?C0532
                                           ; SOURCE LINE # 2834
0017 900000      E     MOV     DPTR,#port_id
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2835
001C 120000      R     LCALL   anx7447_context_initial
                                           ; SOURCE LINE # 2836
001F 900000      E     MOV     DPTR,#i
0022 E0                MOVX    A,@DPTR
0023 75F020            MOV     B,#020H
0026 A4                MUL     AB
0027 FF                MOV     R7,A
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 161 

0028 AEF0              MOV     R6,B
002A 2400        E     ADD     A,#LOW InterfaceRecvBuf
002C F9                MOV     R1,A
002D 7400        E     MOV     A,#HIGH InterfaceRecvBuf
002F 3E                ADDC    A,R6
0030 FA                MOV     R2,A
0031 7B01              MOV     R3,#01H
0033 120000      R     LCALL   L?0818
0036 2400        E     ADD     A,#LOW context+0A8H
0038 F582              MOV     DPL,A
003A E4                CLR     A
003B 3400        E     ADDC    A,#HIGH context+0A8H
003D F583              MOV     DPH,A
003F 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 2837
0042 7400        E     MOV     A,#LOW InterfaceSendBuf
0044 2F                ADD     A,R7
0045 F9                MOV     R1,A
0046 7400        E     MOV     A,#HIGH InterfaceSendBuf
0048 3E                ADDC    A,R6
0049 FA                MOV     R2,A
004A ED                MOV     A,R5
004B 75F0BB            MOV     B,#0BBH
004E A4                MUL     AB
004F 2400        E     ADD     A,#LOW context+0ABH
0051 F582              MOV     DPL,A
0053 E4                CLR     A
0054 3400        E     ADDC    A,#HIGH context+0ABH
0056 F583              MOV     DPH,A
0058 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 2838
005B ED                MOV     A,R5
005C 04                INC     A
005D FF                MOV     R7,A
005E 900000      E     MOV     DPTR,#i
0061 E0                MOVX    A,@DPTR
0062 75F0BB            MOV     B,#0BBH
0065 A4                MUL     AB
0066 2400        E     ADD     A,#LOW context+0AEH
0068 F582              MOV     DPL,A
006A E4                CLR     A
006B 3400        E     ADDC    A,#HIGH context+0AEH
006D F583              MOV     DPH,A
006F EF                MOV     A,R7
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2839
0071 120000      R     LCALL   L?0827
0074 8097              SJMP    ?C0529
                                           ; SOURCE LINE # 2841
0076         ?C0532:
0076 22                RET     
             ; FUNCTION anx7447_ucsi_init (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   9666    ----
   CONSTANT SIZE    =   1084    ----
   XDATA SIZE       =     26      52
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
C51 COMPILER V7.50   ANX7447_LIB                                                           09/08/2020 15:56:27 PAGE 162 

   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
