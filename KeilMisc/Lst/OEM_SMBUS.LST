C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE OEM_SMBUS
OBJECT MODULE PLACED IN Code\OEM\OEM_SMBUS.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe Code\OEM\OEM_SMBUS.C LA WL(1) CD OT(9,SIZE) NOAREGS OR INCDIR(.\Code\CORE\I
                    -NCLUDE\;.\Code\OEM\INCLUDE\;.\Code\CHIP\INCLUDE\)

line level    source

   1          /*----------------------------------------------------------------------------
   2           * Filename: OEM_SMBus.C  For Chipset: ITE.IT85XX
   3           *
   4           * Function: The interrupt service method of SMBus function
   5           *
   6           * Author  : Dino
   7           * 
   8           * Copyright (c) 2009 - , ITE Tech. Inc. All Rights Reserved. 
   9           *
  10           * You may not present,reproduce,distribute,publish,display,modify,adapt,
  11           * perform,transmit,broadcast,recite,release,license or otherwise exploit
  12           * any part of this publication in any form,by any means,without the prior
  13           * written permission of ITE Tech. Inc. 
  14           *---------------------------------------------------------------------------*/
  15          
  16          #include <CORE_INCLUDE.H>
  17          #include <OEM_INCLUDE.H>
  18          
  19          //----------------------------------------------------------------------------
  20          // [rblk_bcis] the byte count of read smbus read block protocol
  21          //----------------------------------------------------------------------------
  22          void Hook_GetSMBusReadBlockByteCount(BYTE rblk_bc)
  23          {
  24   1          SMB_BCNT = rblk_bc;      // For ACPI SMBus EC SMB1 Block Count register
  25   1      }
  26          
  27          //----------------------------------------------------------------------------
  28          // Read thermal sensor OK
  29          //----------------------------------------------------------------------------
  30          void Hook_PollThermal(void)
  31          {
  32   1      
  33   1      }
  34          
  35          //----------------------------------------------------------------------------
  36          // Read thermal sensor fail
  37          //----------------------------------------------------------------------------
  38          void Error_PollThermal(void)
  39          {
  40   1      
  41   1      }
  42          
  43          //----------------------------------------------------------------------------
  44          // For SMBus utility only
  45          //----------------------------------------------------------------------------
  46          void Hook_SMBDebug(void)
  47          {
  48   1              DB_SMBusAck1=ACK_Done;                  // Transmission done ACK
  49   1              DB_SMBusAddr=0x00;
  50   1      }
  51          
  52          void Error_SMBDebug(void)
  53          {
  54   1              DB_SMBusAck1=ACK_Error;                 // Transmission error ACK
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 2   

  55   1              DB_SMBusAddr=0x00;
  56   1      }
  57          
  58          
  59          
  60          //----------------------------------------------------------------------------
  61          // Polling batter 1 data OK
  62          //----------------------------------------------------------------------------
  63          void BAT1_Read_FCcap_OK(void)
  64          {
  65   1              if(BAT1_FCcap_Pre != ( BAT1_FCcap_L | ( BAT1_FCcap_H<< 8)))
  66   1                      ECQEvent(BAT1_HOT_PLUG_EVT,SCIMode_Normal);     
  67   1              
  68   1              BAT1_FCcap_Pre = ( BAT1_FCcap_L | ( BAT1_FCcap_H<< 8));
  69   1      }
  70                  
  71          //----------------------------------------------------------------------------
  72          // Polling batter 1   data OK
  73          //----------------------------------------------------------------------------
  74          void BAT1_Read_RMCAP_OK(void)
  75          {
  76   1              LWORD EC_BAT1_FCC_Temp;
  77   1              WORD EC_BAT1_BRC_Temp;
  78   1                              
  79   1              if(BAT1_RSOC!=100)
  80   1              {
  81   2                      EC_BAT1_FCC_Temp = BAT1_FCcap_L | ( BAT1_FCcap_H<< 8);
  82   2                      EC_BAT1_BRC_Temp = (BAT1_RSOC * EC_BAT1_FCC_Temp)/100 + 1;
  83   2                      
  84   2                      BAT1_RMcap_L = EC_BAT1_BRC_Temp & 0x00ff;
  85   2                      BAT1_RMcap_H = EC_BAT1_BRC_Temp >> 8;
  86   2              }
  87   1              else
  88   1              {
  89   2                      BAT1_RMcap_L = BAT1_FCcap_L;
  90   2                      BAT1_RMcap_H = BAT1_FCcap_H;            
  91   2              }
  92   1      }
  93          
  94          //----------------------------------------------------------------------------
  95          // Polling batter 1 data OK
  96          //----------------------------------------------------------------------------
  97          void BAT1_Read_OK(void)
  98          {
  99   1              BAT1_STATUS |= Oem_BAT1_valid;  
 100   1      }
 101          
 102          //----------------------------------------------------------------------------
 103          // battery data is ready
 104          //----------------------------------------------------------------------------
 105          void BAT1_Read_Pass(void)
 106          {
 107   1              if(IS_MASK_SET(BT1_STATUS1,Bat1_In_Event))      //detect battery is in, send Qevent once after battery data is
             - ready.
 108   1              {
 109   2                      ECQEvent(BAT1_HOT_PLUG_EVT,SCIMode_Normal);     
 110   2                      CLEAR_MASK(BT1_STATUS1,Bat1_In_Event);
 111   2              }
 112   1      }
 113          
 114          
 115          //----------------------------------------------------------------------------
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 3   

 116          // Polling batter 1 data Fail
 117          //----------------------------------------------------------------------------
 118          void BAT1_Read_Fail(void)
 119          {
 120   1          BT1_STATUS1 &= ~bat_valid;
 121   1              BAT1_STATUS &= ~Oem_BAT1_valid; 
 122   1      }
 123          
 124          
 125          void TempSensor_Read_OK(void)
 126          {
 127   1              TEMP_SENSOR_STATUS|= Temp_OK; //0x1C7
 128   1              TEMP_SENSOR_STATUS &= ~Temp_Fail;
 129   1      
 130   1      }
 131          
 132          void TempSensor_Read_Fail(void)
 133          {
 134   1              TEMP_SENSOR_STATUS|= Temp_Fail;
 135   1              TEMP_SENSOR_STATUS &= ~Temp_OK;
 136   1      
 137   1      }
 138          
 139          void CHG_Read_OK(void)
 140          {
 141   1              CHG_STATUS|= Charge_OK;
 142   1              CHG_STATUS &= ~Charge_Fail;     
 143   1      }
 144          
 145          
 146          void CHG_Read_Fail(void)
 147          {
 148   1              CHG_STATUS|= Charge_Fail;
 149   1              CHG_STATUS &= ~Charge_OK;       
 150   1      }
 151          
 152          
 153          
 154          //----------------------------------------------------------------------------
 155          // SMBus channel table
 156          //----------------------------------------------------------------------------
 157          const sSCS code asSCS1[] = 
 158          {
 159                  // SMBus protocol       Addr    Cmd             Data address    active flag and variable                                                                                byte cunt                     
             -  
 160          
 161                  { Cmd_ReadByte,         SmartBat_Addr,          BATCmd_RSOC,        &BAT1_RSOC,                         B1_RSOC,                &SMBus1Flag1,   BAT1_Read
             -_OK,   BAT1_Read_Fail, 0x00   },
 162                  { Cmd_ReadWord,         SmartBat_Addr,          BATCmd_current,     &BAT1_current_L,                    B1_C,                   &SMBus1Flag1,   BAT1_Rea
             -d_OK,   BAT1_Read_Fail, 0x00  },
 163                  { Cmd_ReadWord,         SmartBat_Addr,          BATCmd_volt,        &BAT1_volt_L,                       B1_V,                   &SMBus1Flag1,   BAT1_Read_OK
             -,   BAT1_Read_Fail, 0x00      },
 164                  { Cmd_ReadWord,         SmartBat_Addr,          BATCmd_RMcap,       &BAT1_RMcap_L,                      B1_RMcap,       &SMBus1Flag1,   BAT1_R
             -ead_OK,   BAT1_Read_Fail, 0x00        },      
 165                  { Cmd_ReadWord,         SmartBat_Addr,          BATCmd_BatStatus,   &BAT1_ALARM1,                               B1_Status,      &SMBus1Flag1,   BAT1_Rea
             -d_OK,   BAT1_Read_Fail, 0x00  },      
 166                  { Cmd_ReadWord,         SmartBat_Addr,          BATCmd_FCcap,       &BAT1_FCcap_L,                      B1_FCC,         &SMBus1Flag1,   BAT1_R
             -ead_OK,   BAT1_Read_Fail, 0x00        },      
 167                  { Cmd_ReadWord,         SmartBat_Addr,          BATCmd_temp,        &BAT1_temp_L,                       B1_Temp,                &SMBus1Flag1,   BAT1_Read_O
             -K,   BAT1_Read_Fail, 0x00     },      
 168              { Cmd_ReadWord,             SmartBat_Addr,          BATCmd_CC,              &BAT1_CC_L,                                     B1_CC,          &SMBus1Flag2,   BAT1_Re
             -ad_OK,   BAT1_Read_Fail, 0x00 },      
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 4   

 169                  { Cmd_ReadWord,         SmartBat_Addr,          BATCmd_CV,              &BAT1_CV_L,                                     B1_CV,          &SMBus1Flag2,   BAT1_Read_
             -OK,        BAT1_Read_Fail, 0x00       },              
 170                  { Cmd_ReadWord,         SmartBat_Addr,          BATCmd_DCap,            &BAT1_DScap_L,                          B1_DScap,               &SMBus1Flag2,   BAT1_Read_OK,   
             -BAT1_Read_Fail, 0x00  },              
 171                  { Cmd_ReadWord,         SmartBat_Addr,          BATCmd_SerialNo,        &BAT1_SerialNumber,                     B1_SerialNo,    &SMBus1Flag5,   BAT1_R
             -ead_OK,        BAT1_Read_Fail, 0x00    },              
 172                  { Cmd_ReadBlock,        SmartBat_Addr,          BATCmd_Mname,           &BAT1_ManufacturerName,         B1_Mname,               &SMBus1Flag5,   BAT1_R
             -ead_OK,        BAT1_Read_Fail, 0x00    },              
 173                  { Cmd_ReadBlock,        SmartBat_Addr,          BATCmd_Dname,           &BAT1_DeviceName,                       B1_Dname,               &SMBus1Flag5,   BAT1_Read_O
             -K,        BAT1_Read_Fail, 0x00        },
 174                  { Cmd_ReadWord,         SmartBat_Addr,          BATCmd_DVolt,           &BAT1_DesignVoltage_L,      B1_Dvol,            &SMBus1Flag5,   BAT1_
             -Read_OK,        BAT1_Read_Fail, 0x00    },      
 175                  { Cmd_ReadWord,         SmartBat_Addr,          BATCmd_AVcurrent,       &BAT1_AC_L,                     B1_AC,                  &SMBus1Flag2,   BAT1_R
             -ead_OK,   BAT1_Read_Fail, 0x00        },
 176          #if Lenovo_Support
 177                  { Cmd_ReadWord,         SmartBat_Addr,          BATCmd_CycleCount,      &BAT1_CycleCount_L,                     B1_Cycle,               &SMBus1Flag1,   BAT1_R
             -ead_OK,        BAT1_Read_Fail, 0x00    },      
 178                  { Cmd_ReadBlock,        SmartBat_Addr,          BATCmd_BatFW,           &Bat1_FW,                                       B1_BatFW,               &SMBus1Flag2,   BAT1_Read_OK,   BA
             -T1_Read_Fail, 0x00    },
 179                  { Cmd_ReadWord,         SmartBat_Addr,          BATCmd_mode,        &BAT1_MODEL,                                B1_Mode,                &SMBus1Flag2,   BAT1_Read_OK,   
             -BAT1_Read_Fail, 0x00  },
 180                  { Cmd_ReadWord,         SmartBat_Addr,          BATCmd_access,      &BAT1_ACCESSL,                              B1_ACCESS,              &SMBus1Flag2,   BAT1_Rea
             -d_OK,        BAT1_Read_Fail, 0x00     },
 181                  { Cmd_ReadWord,         SmartBat_Addr,          BATCmd_MfgF2,       &BAT1_MFGF2L,                               B1_MFGF2,               &SMBus1Flag2,   BAT1_Read_P
             -ass,        BAT1_Read_Fail, 0x00      },
 182          #endif
 183          
 184                  #if SmartCharger_Support
 185                  { Cmd_ReadWord,         Charger_Addr,           _CMD_ChargerCurrent,                    &R_CHARGE_CURRENT,      Charge_CC,                      &SMBus1Flag4,   CHG
             -_Read_OK,        CHG_Read_Fail, 0x00     },
 186                  { Cmd_ReadWord,         Charger_Addr,           _CMD_ChargerVoltage,                    &R_CHARGE_VOLTAGE,      Charge_CV,                      &SMBus1Flag4,   CHG
             -_Read_OK,        CHG_Read_Fail, 0x00     },
 187                  { Cmd_ReadWord,         Charger_Addr,           _CMD_ChargerOption0,                    &R_CHARGE_CTRL0,        Charge_Ctrl0,           &SMBus1Flag4,   CHG_
             -Read_OK,        CHG_Read_Fail, 0x00     },
 188                  { Cmd_ReadWord,         Charger_Addr,           _CMD_ChargerOption1,                    &R_CHARGE_CTRL1,        Charge_Ctrl1,           &SMBus1Flag4,   CHG_
             -Read_OK,        CHG_Read_Fail, 0x00     },
 189                  { Cmd_ReadWord,         Charger_Addr,           _CMD_ChargerOption2,                    &R_CHARGE_CTRL2,        Charge_Ctrl2,           &SMBus1Flag4,   CHG_
             -Read_OK,        CHG_Read_Fail, 0x00     },
 190                  { Cmd_ReadWord,         Charger_Addr,           _CMD_ChargerInputCurrent,               &R_INPUT_CURRENT,       Charge_Input_CC,        &SMBus1Flag
             -4,        CHG_Read_OK,        CHG_Read_Fail, 0x00     },
 191                  #endif
 192          };
 193          
 194          //----------------------------------------------------------------------------
 195          // SMBus channe2 table
 196          //----------------------------------------------------------------------------
 197          const sSCS code asSCS2[] = 
 198          {       
 199                  // For SMBus channel 2 debug
 200                  // SMBus protocol       Addr    Cmd             Data address    active flag and variable                                                                                byte cunt     
 201                  { Cmd_ReadByte, EMC1412_Addr,   ExternalTm,     &CpuTm, tempSensorflag, &SMBus1Flag5,   TempSensor_Read_OK,     TempS
             -ensor_Read_Fail, 0x00 },
 202          };
 203          
 204          //----------------------------------------------------------------------------
 205          // SMBus channe2 table
 206          //----------------------------------------------------------------------------
 207          const sSCS code asSCS3[] = 
 208          {       
 209                  // For SMBus channel 3 debug
 210                  // SMBus protocol       Addr    Cmd             Data address    active flag and variable                                                                        byte cunt     
 211                  /*{ Cmd_RecvByte,       0x01,   0xFF,   &DB_SMBusData,  DB_R,   &DB_SMBusFlag3, Hook_SMBDebug,  Error_SMBDebug, 0x00},
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 5   

             -        
 212                  { Cmd_SendByte, 0x01,   0xFF,   &DB_SMBusData,  DB_S,   &DB_SMBusFlag3, Hook_SMBDebug,  Error_SMBDebug, 0x00},
 213                  { Cmd_ReadByte, 0x01,   0xFF,   &DB_SMBusData,  DB_RB,  &DB_SMBusFlag3, Hook_SMBDebug,  Error_SMBDebug, 0x00},  
 214                  { Cmd_WriteByte,0x01,   0xFF,   &DB_SMBusData,  DB_WB,  &DB_SMBusFlag3, Hook_SMBDebug,  Error_SMBDebug, 0x00},
 215                  { Cmd_ReadWord, 0x01,   0xFF,   &DB_SMBusData,  DB_RW,  &DB_SMBusFlag3, Hook_SMBDebug,  Error_SMBDebug, 0x00},
 216                  { Cmd_WriteWord,0x01,   0xFF,   &DB_SMBusData,  DB_WW,  &DB_SMBusFlag3, Hook_SMBDebug,  Error_SMBDebug, 0x00},
 217                  { Cmd_ReadBlock,0x01,   0xFF,   &DB_SMBusData,  DB_RBB, &DB_SMBusFlag3, Hook_SMBDebug,  Error_SMBDebug, 0x00},
 218                  { Cmd_WriteBlock,0x01,  0xFF,   &DB_SMBusData,  DB_WBB, &DB_SMBusFlag3, Hook_SMBDebug,  Error_SMBDebug, 0x00}
             -,*/
 219                  0,
 220                  // OEM SMBus3 function
 221          };
 222          
 223          //----------------------------------------------------------------------------
 224          // To clear SMBus channel 1 variables
 225          //----------------------------------------------------------------------------
 226          void ClearSMBus1Variables(void)
 227          {
 228   1      
 229   1      }
 230          
 231          //----------------------------------------------------------------------------
 232          // To clear SMBus channel 2 variables
 233          //----------------------------------------------------------------------------
 234          void ClearSMBus2Variables(void)
 235          {
 236   1      
 237   1      }
 238          
 239          //----------------------------------------------------------------------------
 240          // To clear SMBus channel 3 variables
 241          //----------------------------------------------------------------------------
 242          void ClearSMBus3Variables(void)
 243          {
 244   1      
 245   1      }
 246          
 247          //----------------------------------------------------------------------------
 248          // SMBus Center Variables
 249          //----------------------------------------------------------------------------
 250          const sSSC code asSSC[] = 
 251          {          
 252                  {   &SMBus1index,  &SMBus1counter,      &SMBus1ByteCunt, &SMBus1InUsing,  &SMBus1TableSize, &F_Service_SMBus1
             -,   service_smbus1  },        
 253                  {   &SMBus2index,  &SMBus2counter,      &SMBus2ByteCunt, &SMBus2InUsing,  &SMBus2TableSize, &F_Service_SMBus2
             -,   service_smbus2  },
 254                  {   &SMBus3index,  &SMBus3counter,      &SMBus3ByteCunt, &SMBus3InUsing,  &SMBus3TableSize, &F_Service_SMBus3
             -,   service_smbus3  },        
 255          };
 256          
 257          //----------------------------------------------------------------------------
 258          // To calculate smbus table size.
 259          //----------------------------------------------------------------------------
 260          void CheckSMBusTableSize(void)
 261          {
 262   1          SMBus1TableSize = (sizeof(asSCS1)/sizeof(sSCS));
 263   1          SMBus2TableSize = (sizeof(asSCS2)/sizeof(sSCS));
 264   1          SMBus3TableSize = (sizeof(asSCS3)/sizeof(sSCS));
 265   1      }
 266          
 267          //----------------------------------------------------------------------------
 268          // To service SMBus 
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 6   

 269          //----------------------------------------------------------------------------
 270          void ServiceSMBus(void)
 271          {
 272   1          if(F_Service_SMBus1==SMBus_NeedService)
 273   1          {
 274   2              F_Service_SMBus1=SMBus_ClearService;
 275   2              service_smbus1();
 276   2          }
 277   1      
 278   1          if(F_Service_SMBus2==SMBus_NeedService)
 279   1          {
 280   2              F_Service_SMBus2=SMBus_ClearService;
 281   2              service_smbus2();
 282   2          }
 283   1      
 284   1          if(F_Service_SMBus3==SMBus_NeedService)
 285   1          {
 286   2              F_Service_SMBus3=SMBus_ClearService;
 287   2              service_smbus3();
 288   2          }
 289   1      }
 290          
 291          //#pragma OT(8, SPEED)
 292          //----------------------------------------------------------------------------
 293          // SMBus channelx service function
 294          //----------------------------------------------------------------------------
 295          void SMBusCenterSelection(BYTE channel) 
 296          {
 297   1          XBYTE tempSMBusindex;
 298   1          BYTE smbus_cmd;
 299   1          BYTE smbus_address;
 300   1          XBYTE *smbus_data;
 301   1          BYTE smbus_Bcunt;
 302   1          BYTE smbus_flag;
 303   1          BYTE smbus_protocol;
 304   1          
 305   1          tempSMBusindex = *asSSC[channel].index;
 306   1          
 307   1              if(*asSSC[channel].inusing !=0x00)
 308   1              {
 309   2              //if(*asSSC[channel].serviceflag !=0x00)
 310   2              //{
 311   2              //    *asSSC[channel].serviceflag =0x00;
 312   2              //    (asSSC[channel].servicefunc)();
 313   2              //}
 314   2              //else
 315   2                      //{
 316   2                  (*asSSC[channel].timeout)++;
 317   2                              if((*asSSC[channel].timeout) > 50) // TotalSMBusChannel x 50 ms
 318   2                              {
 319   3                          //if((*asSMBus[channel].SMBusSTA & (HOSTA_BSER+HOSTA_FAIL) )!=0x00)
 320   3                          //{
 321   3                          ResetSMBus(channel);
 322   3                          //}
 323   3                      //else
 324   3                      //{
 325   3                      //    *asSMBus[channel].SMBusSTA=0xFE;    // clear bits
 326   3                      //}
 327   3                      
 328   3                                  //**********************************************************************
 329   3                      //
 330   3                      //**********************************************************************
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 7   

 331   3                      switch(channel)                 // Channel selection.
 332   3                      {
 333   4                          case SMbusCh1:              // Channel 1
 334   4                              CLEAR_MASK(*asSCS1[tempSMBusindex].ConditionVar, asSCS1[tempSMBusindex].Conditionf
             -lag);
 335   4                                              (asSCS1[tempSMBusindex].errorfunc)();
 336   4                              break;
 337   4                              
 338   4                          case SMbusCh2:              // Channel 2
 339   4                              CLEAR_MASK(*asSCS2[tempSMBusindex].ConditionVar, asSCS2[tempSMBusindex].Conditionf
             -lag);
 340   4                                              (asSCS2[tempSMBusindex].errorfunc)();
 341   4                              break;
 342   4      
 343   4                          case SMbusCh3:              // Channel 3
 344   4                              CLEAR_MASK(*asSCS3[tempSMBusindex].ConditionVar, asSCS3[tempSMBusindex].Conditionf
             -lag);
 345   4                                              (asSCS3[tempSMBusindex].errorfunc)();
 346   4                              break;                        
 347   4                      }
 348   3                      //**********************************************************************
 349   3                      //
 350   3                      //**********************************************************************
 351   3                      
 352   3                      *asSSC[channel].inusing = 0x00;
 353   3                      
 354   3                                      tempSMBusindex++;
 355   3                      if(tempSMBusindex >= *asSSC[channel].tablesize)
 356   3                                  {
 357   4                          tempSMBusindex=0x00;
 358   4                                  }
 359   3                              }
 360   2                      //}
 361   2              *asSSC[channel].index = tempSMBusindex;
 362   2              }
 363   1              else
 364   1              {
 365   2              *asSSC[channel].timeout = 0x00; // Clear time-out flag.
 366   2              smbus_flag = 0x00;              // Pre-clear need service flag.
 367   2      
 368   2              //**********************************************************************
 369   2              //
 370   2              //**********************************************************************
 371   2              switch(channel)                 // Channel selection.
 372   2              {
 373   3                  case SMbusCh1:              // Channel 1
 374   3                      if(IS_MASK_SET(*asSCS1[tempSMBusindex].ConditionVar, asSCS1[tempSMBusindex].Conditionflag)
             -)
 375   3                      {
 376   4                          smbus_flag=0x01;    // Need service.
 377   4                      }
 378   3                      break;
 379   3      
 380   3                  case SMbusCh2:              // Channel 2
 381   3                      if(IS_MASK_SET(*asSCS2[tempSMBusindex].ConditionVar, asSCS2[tempSMBusindex].Conditionflag)
             -)
 382   3                      {
 383   4                          smbus_flag=0x01;    // Need service.
 384   4                      }
 385   3                      break;
 386   3      
 387   3                  case SMbusCh3:              // Channel 3
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 8   

 388   3                      if(IS_MASK_SET(*asSCS3[tempSMBusindex].ConditionVar, asSCS3[tempSMBusindex].Conditionflag)
             -)
 389   3                      {
 390   4                          smbus_flag=0x01;    // Need service.
 391   4                      }
 392   3                      break;
 393   3      
 394   3                      default:
 395   3                          break;
 396   3              }
 397   2              //**********************************************************************
 398   2              //
 399   2              //**********************************************************************
 400   2      
 401   2                      if(smbus_flag==0x00)            // Don't need service.
 402   2                  {
 403   3                              tempSMBusindex++;           // next step.
 404   3      
 405   3                  if(tempSMBusindex >= *asSSC[channel].tablesize)
 406   3                              {
 407   4                      tempSMBusindex=0x00;
 408   4                              }
 409   3                  *asSSC[channel].index = tempSMBusindex;
 410   3                  }
 411   2                  else
 412   2                  {   
 413   3                  *asSSC[channel].inusing = 0x01;
 414   3                  
 415   3                              *asSMBus[channel].SMBusCTL=0x00;        // stop transaction
 416   3                              *asSMBus[channel].SMBusSTA=0xFE;    // clear bits
 417   3      
 418   3                  //**********************************************************************
 419   3                  //
 420   3                  //**********************************************************************
 421   3                  switch(channel)             // Channel selection.
 422   3                  {
 423   4                      case SMbusCh1:
 424   4                          smbus_protocol = asSCS1[tempSMBusindex].protocol;
 425   4                          smbus_cmd = asSCS1[tempSMBusindex].cmd;
 426   4                          smbus_address = asSCS1[tempSMBusindex].address;
 427   4                          smbus_data = asSCS1[tempSMBusindex].smbdata;
 428   4                          smbus_Bcunt = asSCS1[tempSMBusindex].Bcunt;
 429   4                          if(smbus_protocol==Cmd_WriteBlock)
 430   4                          {
 431   5                                                  if(smbus_address==0x01)
 432   5                                                  {
 433   6                                                          SMBus1BlockPtr = &DB_SMBusData[0];
 434   6                                                          *asSMBus[channel].SMBusBData = *SMBus1BlockPtr;
 435   6                                                  }                                   
 436   5                                                  else
 437   5                                                  {
 438   6                                                          SMBus1BlockPtr = asSCS1[tempSMBusindex].smbdata;
 439   6                                                          *asSMBus[channel].SMBusBData = *SMBus1BlockPtr;
 440   6                                                  }
 441   5                          }
 442   4                          break;
 443   4      
 444   4                      case SMbusCh2:
 445   4                          smbus_protocol = asSCS2[tempSMBusindex].protocol;
 446   4                          smbus_cmd = asSCS2[tempSMBusindex].cmd;
 447   4                          smbus_address = asSCS2[tempSMBusindex].address;
 448   4                          smbus_data = asSCS2[tempSMBusindex].smbdata;
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 9   

 449   4                          smbus_Bcunt = asSCS2[tempSMBusindex].Bcunt;
 450   4                          if(smbus_protocol==Cmd_WriteBlock)
 451   4                          {
 452   5                                                  if(smbus_address==0x01)
 453   5                                                  {
 454   6                                                          SMBus2BlockPtr = &DB_SMBusData[0];
 455   6                                                          *asSMBus[channel].SMBusBData = *SMBus2BlockPtr;
 456   6                                                  }                                   
 457   5                                                  else
 458   5                                                  {
 459   6                                                          SMBus2BlockPtr = asSCS2[tempSMBusindex].smbdata;
 460   6                                                          *asSMBus[channel].SMBusBData = *SMBus2BlockPtr;
 461   6                                                  }
 462   5                          }
 463   4                          break;
 464   4      
 465   4                      case SMbusCh3:
 466   4                          smbus_protocol = asSCS3[tempSMBusindex].protocol;
 467   4                          smbus_cmd = asSCS3[tempSMBusindex].cmd;
 468   4                          smbus_address = asSCS3[tempSMBusindex].address;
 469   4                          smbus_data = asSCS3[tempSMBusindex].smbdata;
 470   4                          smbus_Bcunt = asSCS3[tempSMBusindex].Bcunt;
 471   4                          if(smbus_protocol==Cmd_WriteBlock)
 472   4                          {
 473   5                                                  if(smbus_address==0x01)
 474   5                                                  {
 475   6                                                          SMBus3BlockPtr = &DB_SMBusData[0];
 476   6                                                          *asSMBus[channel].SMBusBData = *SMBus3BlockPtr;
 477   6                                                  }                                   
 478   5                                                  else
 479   5                                                  {
 480   6                                                          SMBus3BlockPtr = asSCS3[tempSMBusindex].smbdata;
 481   6                                                          *asSMBus[channel].SMBusBData = *SMBus3BlockPtr;
 482   6                                                  }
 483   5                          }
 484   4                          break;
 485   4      
 486   4                      default:
 487   4                          break;
 488   4                  }
 489   3                  //**********************************************************************
 490   3                  //
 491   3                  //**********************************************************************
 492   3      
 493   3                              switch(smbus_protocol)
 494   3                              {
 495   4                                      case Cmd_Quick:
 496   4                                              break;
 497   4                                              
 498   4                                      case Cmd_SendByte:
 499   4                                              if(smbus_address==0x01)     // Debug mode, for SMBus utility
 500   4                                              {
 501   5                                                      PollSMBusSendByte(channel,DB_SMBusAddr,DB_SMBusCmd);
 502   5                                              }
 503   4                                              else
 504   4                                              {
 505   5                                                      PollSMBusSendByte(channel,smbus_address,smbus_cmd);
 506   5                                              }
 507   4                                              break;  
 508   4                                              
 509   4                                      case Cmd_RecvByte:
 510   4                                              if(smbus_address==0x01)     // Debug mode, for SMBus utility
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 10  

 511   4                                              {
 512   5                                                      PollSMBusReceiveByte(channel,DB_SMBusAddr);
 513   5                                              }
 514   4                                              else
 515   4                                              {
 516   5                                                      PollSMBusReceiveByte(channel,smbus_address);
 517   5                                              }
 518   4                                              break;
 519   4                                              
 520   4                                      case Cmd_ReadByte:
 521   4                                              if(smbus_address==0x01)     // Debug mode, for SMBus utility
 522   4                                              {
 523   5                                                      PollReadSMBusByte(channel,DB_SMBusAddr,DB_SMBusCmd);
 524   5                                              }
 525   4                                              else
 526   4                                              {
 527   5                                                      PollReadSMBusByte(channel,smbus_address,smbus_cmd);
 528   5                                              }
 529   4                                              break;
 530   4                                              
 531   4                                      case Cmd_WriteByte:
 532   4                                              if(smbus_address==0x01)     // Debug mode, for SMBus utility
 533   4                                              {
 534   5                                                      PollWriteSMBusByte(channel,DB_SMBusAddr,DB_SMBusCmd,DB_SMBusData[0]);
 535   5                                              }
 536   4                                              else
 537   4                                              {
 538   5                                                      PollWriteSMBusByte(channel,smbus_address,smbus_cmd,*smbus_data);
 539   5                                              }
 540   4                                              break;
 541   4                                              
 542   4                                      case Cmd_ReadWord:
 543   4                                              if(smbus_address==0x01)     // Debug mode, for SMBus utility
 544   4                                              {
 545   5                                                      PollReadSMBusWord(channel,DB_SMBusAddr,DB_SMBusCmd);
 546   5                                              }
 547   4                                              else
 548   4                                              {
 549   5                                                      PollReadSMBusWord(channel,smbus_address,smbus_cmd);
 550   5                                              }
 551   4                                              break;
 552   4                                              
 553   4                                      case Cmd_WriteWord:
 554   4                                              if(smbus_address==0x01)     // Debug mode, for SMBus utility
 555   4                                              {
 556   5                                                      PollWriteSMBusWord(channel,DB_SMBusAddr,DB_SMBusCmd,DB_SMBusData[0],DB_SMBusData[1]);
 557   5                                              }
 558   4                                              else
 559   4                                              {
 560   5                                                      Tmp_XPntr = smbus_data;
 561   5                                                      Tmp_XPntr1 = Tmp_XPntr+1;
 562   5                                                      PollWriteSMBusWord(channel,smbus_address,smbus_cmd,*Tmp_XPntr,*Tmp_XPntr1);
 563   5                                              }
 564   4                                              break;
 565   4      
 566   4                                      case Cmd_ReadBlock:             // Debug mode, for SMBus utility
 567   4                                              *asSSC[channel].bytecount = 0x00;
 568   4                                              if(smbus_address==0x01)
 569   4                                              {
 570   5                                                      DB_SMBusBCunt = 0x00;
 571   5                                                      PollReadSMBusBlock(channel,DB_SMBusAddr,DB_SMBusCmd);
 572   5                                              }                                       
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 11  

 573   4                                              else
 574   4                                              {
 575   5                                                      PollReadSMBusBlock(channel,smbus_address,smbus_cmd);
 576   5                                              }
 577   4                                              break;
 578   4                                              
 579   4                                      case Cmd_WriteBlock:            // Debug mode, for SMBus utility
 580   4                                              if(smbus_address==0x01)
 581   4                                              {
 582   5                              *asSSC[channel].bytecount = DB_SMBusBCunt;
 583   5                                                      PollWriteSMBusBlock(channel,DB_SMBusAddr,DB_SMBusCmd,DB_SMBusBCunt);
 584   5                                              }                                       
 585   4                                              else
 586   4                                              {
 587   5                              *asSSC[channel].bytecount = smbus_Bcunt;
 588   5                                                      PollWriteSMBusBlock(channel,smbus_address,smbus_cmd,smbus_Bcunt);
 589   5                                              }
 590   4                                              break;                                  
 591   4                                              
 592   4                                      default:
 593   4                          *asSSC[channel].inusing=0x00;
 594   4                                              break;                                  
 595   4                              }
 596   3                  }
 597   2              }
 598   1      }
 599          
 600          //----------------------------------------------------------------------------
 601          // SMBus service center   1ms base time
 602          //----------------------------------------------------------------------------
 603          void SMBusCenter(void) 
 604          {
 605   1          if(++SMBusSelection >= TotalSMBusChannel)
 606   1          {
 607   2              SMBusSelection=0x00;
 608   2          }
 609   1          SMBusCenterSelection(SMBusSelection);
 610   1      }
 611          
 612          //----------------------------------------------------------------------------
 613          // Wait SMBus channel x free.
 614          //----------------------------------------------------------------------------
 615          void WatiSMBusCHxFree(BYTE channel)
 616          {
 617   1          BYTE tempSMBusindex;
 618   1          
 619   1          TR1 = 0;                        // Disable timer 1
 620   1          ET1 = 0;                                // Disable timer1 interrupt
 621   1          _nop_();
 622   1          _nop_();
 623   1          _nop_();
 624   1          _nop_();
 625   1          TH1 = Timer_30ms>>8;                // set timer1 counter 30 ms 
 626   1          TL1 = Timer_30ms;                   // set timer1 counter 30 ms
 627   1          TF1 = 0;                                // clear overflow flag
 628   1          TR1 = 1;                                // enable timer1    
 629   1      
 630   1          tempSMBusindex = *asSSC[channel].index;
 631   1      
 632   1              while(*asSSC[channel].inusing !=0x00)
 633   1              {
 634   2                      if((*asSSC[channel].serviceflag == SMBus_NeedService)||
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 12  

 635   2                  (IS_MASK_SET(*asSMBus[channel].SMBusIER, asSMBus[channel].IERFlag)&&IS_MASK_SET(*asSMBus[chann
             -el].SMBusISR, asSMBus[channel].IERFlag)))
 636   2              {
 637   3                  CLEAR_MASK(*asSMBus[channel].SMBusIER, asSMBus[channel].IERFlag);
 638   3                  *asSMBus[channel].SMBusISR = asSMBus[channel].IERFlag;
 639   3                  *asSSC[channel].serviceflag = SMBus_ClearService;
 640   3                  (asSSC[channel].servicefunc)();
 641   3                      }
 642   2                  else
 643   2                  {
 644   3                              if(TF1)
 645   3                              {
 646   4                          //if((*asSMBus[channel].SMBusSTA & (HOSTA_BSER+HOSTA_FAIL) )!=0x00)
 647   4                          //{
 648   4                          ResetSMBus(channel);
 649   4                          //}
 650   4                      //else
 651   4                      //{
 652   4                      //    *asSMBus[channel].SMBusSTA=0xFE;    // clear bits
 653   4                      //}
 654   4      
 655   4                      //**********************************************************************
 656   4                      //
 657   4                      //**********************************************************************
 658   4                      switch(channel)                 // Channel selection.
 659   4                      {
 660   5                          case SMbusCh1:              // Channel 1
 661   5                              CLEAR_MASK(*asSCS1[tempSMBusindex].ConditionVar, asSCS1[tempSMBusindex].Conditionf
             -lag);
 662   5                                              (asSCS1[tempSMBusindex].errorfunc)();
 663   5                              break;
 664   5                              
 665   5                          case SMbusCh2:              // Channel 2
 666   5                              CLEAR_MASK(*asSCS2[tempSMBusindex].ConditionVar, asSCS2[tempSMBusindex].Conditionf
             -lag);
 667   5                                              (asSCS2[tempSMBusindex].errorfunc)();
 668   5                              break;
 669   5      
 670   5                          case SMbusCh3:              // Channel 3
 671   5                              CLEAR_MASK(*asSCS3[tempSMBusindex].ConditionVar, asSCS3[tempSMBusindex].Conditionf
             -lag);
 672   5                                              (asSCS3[tempSMBusindex].errorfunc)();
 673   5                              break;                        
 674   5                      }
 675   4                      //**********************************************************************
 676   4                      //
 677   4                      //**********************************************************************
 678   4                      
 679   4                      *asSSC[channel].inusing = 0x00;
 680   4                                      tempSMBusindex++;
 681   4                      if(tempSMBusindex >= *asSSC[channel].tablesize)
 682   4                                  {
 683   5                          tempSMBusindex=0x00;
 684   5                                  }
 685   4                      *asSSC[channel].index = tempSMBusindex;
 686   4                                      break;
 687   4                              }
 688   3                  }
 689   2              }
 690   1          
 691   1          TR1 = 0;                        // disable timer1
 692   1          TF1 = 0;                        // clear overflow flag
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 13  

 693   1          ET1 = 1;                        // Enable timer1 interrupt
 694   1      }
 695          
 696          #ifdef SMBusChannel4Support
              //----------------------------------------------------------------
              //Function: Enable SMBus channel 4
              //----------------------------------------------------------------
              void InitSMBusChannel4(void)
              {
                  GPCRH1 = ALT;       // SMBCLK3
                  GPCRH2 = ALT;       // SMBDAT3
                  GCR2 |= SMB4E;      // SMBus Channel 4 Enable.
              }
              #endif
 707          
 708          //----------------------------------------------------------------------------
 709          //      
 710          //----------------------------------------------------------------------------
 711          void InitSMBus(void)
 712          {
 713   1              DB_SMBusAddr=0x00;
 714   1              DB_SMBusFlag1=0x00;                                             
 715   1              DB_SMBusFlag2=0x00;                     
 716   1              DB_SMBusFlag3=0x00;                                     
 717   1      
 718   1              DB_SMBusAck1=0x00;                                      
 719   1              DB_SMBusACDID=0x00;     
 720   1      
 721   1          CheckSMBusTableSize();
 722   1      }
 723          
 724          //----------------------------------------------------------------------------
 725          //
 726          //----------------------------------------------------------------------------
 727          void PollSMBusReceiveByte(BYTE Channel,BYTE Addr)
 728          {       
 729   1          if(CheckSMBusInterfaceCanbeUse(Channel, SMBus_AccessType_Table)==SMBus_CanNotUse)
 730   1          {
 731   2              *asSSC[Channel].inusing=0x00;       // SMBus interface can't be used.                           
 732   2          }
 733   1          else
 734   1          {
 735   2                  *asSMBus[Channel].SMBusIER|=asSMBus[Channel].IERFlag; // Enable interrupt 
 736   2                  *asSMBus[Channel].SMBusADR=Addr|0x01;       // set address with reading bit 
 737   2                  //*asSMBus[Channel].SMBusSTA=0xFE;          // clear bits
 738   2                  *asSMBus[Channel].SMBusCTL=(SMbusSRB|HOCTL_SRT|HOCTL_INTREN);   // Start transaction
 739   2          }
 740   1      }
 741          
 742          //----------------------------------------------------------------------------
 743          //
 744          //----------------------------------------------------------------------------
 745          void PollSMBusSendByte(BYTE Channel,BYTE Addr,BYTE cmd)
 746          {       
 747   1          if(CheckSMBusInterfaceCanbeUse(Channel, SMBus_AccessType_Table)==SMBus_CanNotUse)
 748   1          {
 749   2              *asSSC[Channel].inusing=0x00;       // SMBus interface can't be used.                           
 750   2          }
 751   1          else
 752   1          {
 753   2                  *asSMBus[Channel].SMBusIER|=asSMBus[Channel].IERFlag; // Enable interrupt 
 754   2                  *asSMBus[Channel].SMBusADR=Addr&0xFE;;      // set address with reading bit                                         
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 14  

 755   2                  *asSMBus[Channel].SMBusCMD=cmd;             // Set data
 756   2                  //*asSMBus[Channel].SMBusSTA=0xFE;          // clear bits
 757   2                  *asSMBus[Channel].SMBusCTL=(SMbusSRB|HOCTL_SRT|HOCTL_INTREN);       // Start transaction
 758   2          }
 759   1      }
 760          
 761          //----------------------------------------------------------------------------
 762          //
 763          //----------------------------------------------------------------------------
 764          void PollReadSMBusByte(BYTE Channel,BYTE Addr,BYTE Comd)
 765          {
 766   1          if(CheckSMBusInterfaceCanbeUse(Channel, SMBus_AccessType_Table)==SMBus_CanNotUse)
 767   1          {
 768   2              *asSSC[Channel].inusing=0x00;       // SMBus interface can't be used.                           
 769   2          }
 770   1          else
 771   1          {  
 772   2                  *asSMBus[Channel].SMBusIER|=asSMBus[Channel].IERFlag; // Enable interrupt 
 773   2                  *asSMBus[Channel].SMBusADR=Addr|0x01;       // set address with reading bit                                         
 774   2                  *asSMBus[Channel].SMBusCMD=Comd;            // Set command
 775   2                  //*asSMBus[Channel].SMBusSTA=0xFE;          // clear bits
 776   2                  *asSMBus[Channel].SMBusCTL=(SMbusRWB|HOCTL_SRT|HOCTL_INTREN);       // Start transaction
 777   2          }
 778   1      }
 779          
 780          //----------------------------------------------------------------------------
 781          //
 782          //----------------------------------------------------------------------------
 783          void PollWriteSMBusByte(BYTE Channel,BYTE Addr,BYTE Comd,BYTE data1)
 784          {
 785   1          if(CheckSMBusInterfaceCanbeUse(Channel, SMBus_AccessType_Table)==SMBus_CanNotUse)
 786   1          {
 787   2              *asSSC[Channel].inusing=0x00;       // SMBus interface can't be used.                           
 788   2          }
 789   1          else
 790   1          {   
 791   2                  *asSMBus[Channel].SMBusIER|=asSMBus[Channel].IERFlag; // Enable interrupt   
 792   2                  *asSMBus[Channel].SMBusData0=data1;
 793   2                  *asSMBus[Channel].SMBusADR=Addr&0xFE;       // set address with reading bit                                         
 794   2                  *asSMBus[Channel].SMBusCMD=Comd;            // Set command
 795   2                  //*asSMBus[Channel].SMBusSTA=0xFE;          // clear bits
 796   2                  *asSMBus[Channel].SMBusCTL=(SMbusRWB|HOCTL_SRT|HOCTL_INTREN);       // Start transaction
 797   2          }
 798   1      }
 799          
 800          //----------------------------------------------------------------------------
 801          //
 802          //----------------------------------------------------------------------------
 803          void PollReadSMBusWord(BYTE Channel,BYTE Addr,BYTE Comd)
 804          {
 805   1          if(CheckSMBusInterfaceCanbeUse(Channel, SMBus_AccessType_Table)==SMBus_CanNotUse)
 806   1          {
 807   2              *asSSC[Channel].inusing=0x00;       // SMBus interface can't be used.    
 808   2          }
 809   1          else
 810   1          {
 811   2                  *asSMBus[Channel].SMBusIER|=asSMBus[Channel].IERFlag; // Enable interrupt 
 812   2                  *asSMBus[Channel].SMBusADR=Addr|0x01;       // set address with reading bit                                         
 813   2                  *asSMBus[Channel].SMBusCMD=Comd;            // Set command
 814   2                  //*asSMBus[Channel].SMBusSTA=0xFE;          // clear bits
 815   2                  *asSMBus[Channel].SMBusCTL=(SMbusRWW|HOCTL_SRT|HOCTL_INTREN);       // Start transaction
 816   2          }
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 15  

 817   1      }
 818          
 819          //----------------------------------------------------------------------------
 820          //
 821          //----------------------------------------------------------------------------
 822          void PollWriteSMBusWord(BYTE Channel,BYTE Addr,BYTE Comd,BYTE data1,BYTE data2)
 823          {
 824   1          if(CheckSMBusInterfaceCanbeUse(Channel, SMBus_AccessType_Table)==SMBus_CanNotUse)
 825   1          {
 826   2              *asSSC[Channel].inusing=0x00;       // SMBus interface can't be used.                           
 827   2          }
 828   1          else
 829   1          {
 830   2                  *asSMBus[Channel].SMBusIER|=asSMBus[Channel].IERFlag; // Enable interrupt   
 831   2                  *asSMBus[Channel].SMBusData0=data1;
 832   2                  *asSMBus[Channel].SMBusData1=data2;
 833   2                  *asSMBus[Channel].SMBusADR=Addr&0xFE;       // set address with reading bit                                         
 834   2                  *asSMBus[Channel].SMBusCMD=Comd;            // Set command
 835   2                  //*asSMBus[Channel].SMBusSTA=0xFE;          // clear bits
 836   2                  *asSMBus[Channel].SMBusCTL=(SMbusRWW|HOCTL_SRT|HOCTL_INTREN);       // Start transaction
 837   2          }
 838   1      }
 839          
 840          //----------------------------------------------------------------------------
 841          //
 842          //----------------------------------------------------------------------------
 843          void PollReadSMBusBlock(BYTE Channel,BYTE Addr,BYTE Comd)
 844          {
 845   1          if(CheckSMBusInterfaceCanbeUse(Channel, SMBus_AccessType_Table)==SMBus_CanNotUse)
 846   1          {
 847   2              *asSSC[Channel].inusing=0x00;       // SMBus interface can't be used.                           
 848   2          }
 849   1          else
 850   1          {
 851   2                  *asSMBus[Channel].SMBusIER|=asSMBus[Channel].IERFlag; // Enable interrupt 
 852   2                  *asSMBus[Channel].SMBusADR=Addr|0x01;       // set address with reading bit 
 853   2                  *asSMBus[Channel].SMBusCMD=Comd;            // Set command
 854   2                  *asSMBus[Channel].SMBusCTL=(SMbusRWBB|HOCTL_SRT|HOCTL_INTREN);      // Start transaction
 855   2          }
 856   1      }       
 857          
 858          //----------------------------------------------------------------------------
 859          //
 860          //----------------------------------------------------------------------------
 861          void PollWriteSMBusBlock(BYTE Channel,BYTE Addr,BYTE Comd,BYTE ByteCunt)
 862          {
 863   1          if(CheckSMBusInterfaceCanbeUse(Channel, SMBus_AccessType_Table)==SMBus_CanNotUse)
 864   1          {
 865   2              *asSSC[Channel].inusing=0x00;       // SMBus interface can't be used.                           
 866   2          }
 867   1          else
 868   1          {   
 869   2                  *asSMBus[Channel].SMBusIER|=asSMBus[Channel].IERFlag; // Enable interrupt   
 870   2                  *asSMBus[Channel].SMBusData0=ByteCunt;      // set byte count
 871   2                  *asSMBus[Channel].SMBusADR=Addr&0xFE;       // set address with reading bit 
 872   2                  *asSMBus[Channel].SMBusCMD=Comd;            // Set command
 873   2                  *asSMBus[Channel].SMBusCTL=(SMbusRWBB|HOCTL_SRT|HOCTL_INTREN);      // Start transaction
 874   2          }
 875   1      }
 876          
 877          //----------------------------------------------------------------------------
 878          // SMBus channel 1 service function
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 16  

 879          //----------------------------------------------------------------------------
 880          void service_smbus1(void) 
 881          {
 882   1              if(SMBus1InUsing)
 883   1              {
 884   2              CLEAR_MASK(SMBusXStatus, (SMBus1_OK+SMBus1_Fail));
 885   2              
 886   2              if(IS_MASK_SET(HOSTA_A, (HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE)))  // any error
 887   2              {
 888   3                  if(IS_MASK_SET(HOSTA_A, (HOSTA_BSER+HOSTA_FAIL)))
 889   3                  {
 890   4                      ResetSMBus(SMbusCh1);               // Reset SMBus
 891   4                  }
 892   3                  SET_MASK(SMBusXStatus, SMBus1_Fail);    // SMBus fail
 893   3              }
 894   2              else                                        // Byte Done Status or Finish Interrupt or no any stat
             -ys bit
 895   2              {
 896   3                  //*********************************************************************
 897   3                  // Cmd_ReadBlock
 898   3                  //*********************************************************************
 899   3                          if(asSCS1[SMBus1index].protocol==Cmd_ReadBlock)
 900   3                          {                                   
 901   4                      if(IS_MASK_SET(HOSTA_A, (HOSTA_FINTR+HOSTA_BDS)))   // Only Byte Done Status or Finish Int
             -errupt bit is set.
 902   4                      {
 903   5                                  if(SMBus1ByteCunt==0x00)
 904   5                                      {
 905   6                                              SMBus1BlockPtr = asSCS1[SMBus1index].smbdata;
 906   6                                              SMBus1ByteCunt = D0REG_A;
 907   6      
 908   6                                              if(SMBus1ByteCunt>32)
 909   6                                              {
 910   7                                                      SMBus1ByteCunt=32;          // DB_SMBusData[] max 32 bytes
 911   7                                              }
 912   6                                                              
 913   6                                              SMB_BCNT = SMBus1ByteCunt;
 914   6                                              DB_SMBusBCunt = SMBus1ByteCunt;
 915   6                                                              
 916   6                                              *SMBus1BlockPtr = HOBDB_A;  // read data1
 917   6                                              SMBus1ByteCunt--;
 918   6                                  }
 919   5                                      else
 920   5                                      {
 921   6                                              SMBus1BlockPtr++;
 922   6                                              *SMBus1BlockPtr=HOBDB_A;
 923   6                                              SMBus1ByteCunt--;
 924   6                                              if(SMBus1ByteCunt==0x01)
 925   6                                              {
 926   7                                                      SET_MASK(HOCTL_A,HOCTL_LABY);
 927   7                                              }
 928   6                                      }
 929   5                                              
 930   5                                      if(SMBus1ByteCunt!=0x00)                // Byte count isn't 0.
 931   5                                      {
 932   6                                              HOSTA_A=0xFE;
 933   6                                              SET_MASK(IER1,Int_SMBUS0);
 934   6                                      }
 935   5                          else                                    // Byte count is 0.
 936   5                          {
 937   6                                              CLEAR_MASK(HOCTL_A,HOCTL_LABY);
 938   6                              SET_MASK(SMBusXStatus, SMBus1_OK);  // SMBus protocol OK
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 17  

 939   6                          }
 940   5                      }
 941   4                      else                                        // No any bit is set of host status register.
 942   4                      {
 943   5                          SET_MASK(SMBusXStatus, SMBus1_Fail);    // SMBus fail
 944   5                      }
 945   4                          }
 946   3                      //*********************************************************************
 947   3                  // Cmd_WriteBlock
 948   3                  //*********************************************************************
 949   3                          else if(asSCS1[SMBus1index].protocol==Cmd_WriteBlock)
 950   3                          {
 951   4                                  if(IS_MASK_SET(HOSTA_A, (HOSTA_FINTR+HOSTA_BDS)))   // Only Byte Done Status or Finish Interrupt bi
             -t is set.
 952   4                                  {
 953   5                                              SMBus1ByteCunt--;
 954   5                                              if(SMBus1ByteCunt==0x00)
 955   5                                              {
 956   6                                                      SET_MASK(SMBusXStatus, SMBus1_OK);  // SMBus protocol OK
 957   6                                              }
 958   5                                              else  
 959   5                                              {
 960   6                                                      SMBus1BlockPtr++;
 961   6                                                      HOBDB_A=*SMBus1BlockPtr;
 962   6                                                      
 963   6                                                      HOSTA_A=0xFE;
 964   6                                                      SET_MASK(IER1,Int_SMBUS0);
 965   6                                              }
 966   5                                  }
 967   4                      else                                        // No any bit is set of host status register.
 968   4                      {
 969   5                          SET_MASK(SMBusXStatus, SMBus1_Fail);    // SMBus fail
 970   5                      }
 971   4                          }
 972   3                          //******************************************************************************************
 973   3                      // Cmd_SendByte, Cmd_RecvByte, Cmd_ReadByte, Cmd_WriteByte, Cmd_ReadWord and Cmd_WriteWord 
 974   3                      //******************************************************************************************
 975   3                          else
 976   3                          {
 977   4                      if(IS_MASK_SET(HOSTA_A, HOSTA_FINTR))       // Only Finish Interrupt bit is set.
 978   4                      {
 979   5                                  *asSCS1[SMBus1index].smbdata = D0REG_A; // read data byte 1
 980   5                                      if(asSCS1[SMBus1index].protocol==Cmd_ReadWord)  // read word protocol
 981   5                                      {
 982   6                                              Tmp_XPntr = asSCS1[SMBus1index].smbdata;
 983   6                                              Tmp_XPntr++;
 984   6                                              *Tmp_XPntr=D1REG_A;                 // read data byte 2
 985   6                                      }
 986   5                          SET_MASK(SMBusXStatus, SMBus1_OK);      // SMBus protocol OK
 987   5                      }
 988   4                      else                                        // No any bit is set of host status register.
 989   4                      {
 990   5                          SET_MASK(SMBusXStatus, SMBus1_Fail);    // SMBus protocol Fail
 991   5                      }
 992   4                          }
 993   3                      }
 994   2              }
 995   1      
 996   1          if(IS_MASK_SET(SMBusXStatus, (SMBus1_Fail+SMBus1_OK)))  // SMBus protocol Fail or OK
 997   1          {
 998   2              HOSTA_A=0xFE;                               // Clear Host Status register.
 999   2                  SMBus1InUsing = 0;                          // Clear smbus in used flag.
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 18  

1000   2              CLEAR_MASK(*asSCS1[SMBus1index].ConditionVar, asSCS1[SMBus1index].Conditionflag);   // clear OEM s
             -mbus service flag.
1001   2              
1002   2              if(IS_MASK_SET(SMBusXStatus, SMBus1_Fail))  // if protocol fail
1003   2              {
1004   3                  (asSCS1[SMBus1index].errorfunc)();      // OEM error hook function
1005   3              }
1006   2              else                                        // protocol OK
1007   2              {
1008   3                  (asSCS1[SMBus1index].hookfunc)();       // OEM OK hook function
1009   3              }
1010   2              CLEAR_MASK(SMBusXStatus, (SMBus1_OK+SMBus1_Fail));  // To clear flag
1011   2          }
1012   1      }
1013          
1014          //----------------------------------------------------------------------------
1015          // SMBus channel 2 service function
1016          //----------------------------------------------------------------------------
1017          void service_smbus2(void) 
1018          {
1019   1              if(SMBus2InUsing)
1020   1              {
1021   2              CLEAR_MASK(SMBusXStatus, (SMBus2_OK+SMBus2_Fail));
1022   2              
1023   2              if(IS_MASK_SET(HOSTA_B, (HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE)))  // any error
1024   2              {
1025   3                  if(IS_MASK_SET(HOSTA_B, (HOSTA_BSER+HOSTA_FAIL)))
1026   3                  {
1027   4                      ResetSMBus(SMbusCh2);               // Reset SMBus
1028   4                  }
1029   3                  SET_MASK(SMBusXStatus, SMBus2_Fail);    // SMBus fail
1030   3              }
1031   2              else                                        // Byte Done Status or Finish Interrupt or no any stat
             -ys bit
1032   2              {
1033   3                  //*********************************************************************
1034   3                  // Cmd_ReadBlock
1035   3                  //*********************************************************************
1036   3                          if(asSCS2[SMBus2index].protocol==Cmd_ReadBlock)
1037   3                          {                                   
1038   4                      if(IS_MASK_SET(HOSTA_B, (HOSTA_FINTR+HOSTA_BDS)))   // Only Byte Done Status or Finish Int
             -errupt bit is set.
1039   4                      {
1040   5                                  if(SMBus2ByteCunt==0x00)
1041   5                                      {
1042   6                                              SMBus2BlockPtr = asSCS2[SMBus2index].smbdata;
1043   6                                              SMBus2ByteCunt = D0REG_B;
1044   6      
1045   6                                              if(SMBus2ByteCunt>32)
1046   6                                              {
1047   7                                                      SMBus2ByteCunt=32;          // DB_SMBusData[] max 32 bytes
1048   7                                              }
1049   6                                                              
1050   6                                              SMB_BCNT = SMBus2ByteCunt;
1051   6                                              DB_SMBusBCunt = SMBus2ByteCunt;
1052   6                                                              
1053   6                                              *SMBus2BlockPtr = HOBDB_B;  // read data1
1054   6                                              SMBus2ByteCunt--;
1055   6                                  }
1056   5                                      else
1057   5                                      {
1058   6                                              SMBus2BlockPtr++;
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 19  

1059   6                                              *SMBus2BlockPtr=HOBDB_B;
1060   6                                              SMBus2ByteCunt--;
1061   6                                              if(SMBus2ByteCunt==0x01)
1062   6                                              {
1063   7                                                      SET_MASK(HOCTL_B,HOCTL_LABY);
1064   7                                              }
1065   6                                      }
1066   5                                              
1067   5                                      if(SMBus2ByteCunt!=0x00)                // Byte count isn't 0.
1068   5                                      {
1069   6                                              HOSTA_B=0xFE;
1070   6                                              SET_MASK(IER1,Int_SMBUS1);
1071   6                                      }
1072   5                          else                                    // Byte count is 0.
1073   5                          {
1074   6                                              CLEAR_MASK(HOCTL_B,HOCTL_LABY);
1075   6                              SET_MASK(SMBusXStatus, SMBus2_OK);  // SMBus protocol OK
1076   6                          }
1077   5                      }
1078   4                      else                                        // No any bit is set of host status register.
1079   4                      {
1080   5                          SET_MASK(SMBusXStatus, SMBus2_Fail);    // SMBus fail
1081   5                      }
1082   4                          }
1083   3                      //*********************************************************************
1084   3                  // Cmd_WriteBlock
1085   3                  //*********************************************************************
1086   3                          else if(asSCS2[SMBus2index].protocol==Cmd_WriteBlock)
1087   3                          {
1088   4                                  if(IS_MASK_SET(HOSTA_B, (HOSTA_FINTR+HOSTA_BDS)))   // Only Byte Done Status or Finish Interrupt bi
             -t is set.
1089   4                                  {
1090   5                                              SMBus2ByteCunt--;
1091   5                                              if(SMBus2ByteCunt==0x00)
1092   5                                              {
1093   6                                                      SET_MASK(SMBusXStatus, SMBus2_OK);  // SMBus protocol OK
1094   6                                              }
1095   5                                              else  
1096   5                                              {
1097   6                                                      SMBus2BlockPtr++;
1098   6                                                      HOBDB_B=*SMBus2BlockPtr;
1099   6                                                      
1100   6                                                      HOSTA_B=0xFE;
1101   6                                                      SET_MASK(IER1,Int_SMBUS1);
1102   6                                              }
1103   5                                  }
1104   4                      else                                        // No any bit is set of host status register.
1105   4                      {
1106   5                          SET_MASK(SMBusXStatus, SMBus2_Fail);    // SMBus fail
1107   5                      }
1108   4                          }
1109   3                          //******************************************************************************************
1110   3                      // Cmd_SendByte, Cmd_RecvByte, Cmd_ReadByte, Cmd_WriteByte, Cmd_ReadWord and Cmd_WriteWord 
1111   3                      //******************************************************************************************
1112   3                          else
1113   3                          {
1114   4                      if(IS_MASK_SET(HOSTA_B, HOSTA_FINTR))       // Only Finish Interrupt bit is set.
1115   4                      {
1116   5                                  *asSCS2[SMBus2index].smbdata = D0REG_B; // read data byte 1
1117   5                                      if(asSCS2[SMBus2index].protocol==Cmd_ReadWord)  // read word protocol
1118   5                                      {
1119   6                                              Tmp_XPntr = asSCS2[SMBus2index].smbdata;
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 20  

1120   6                                              Tmp_XPntr++;
1121   6                                              *Tmp_XPntr=D1REG_B;                 // read data byte 2
1122   6                                      }
1123   5                          SET_MASK(SMBusXStatus, SMBus2_OK);      // SMBus protocol OK
1124   5                      }
1125   4                      else                                        // No any bit is set of host status register.
1126   4                      {
1127   5                          SET_MASK(SMBusXStatus, SMBus2_Fail);    // SMBus protocol Fail
1128   5                      }
1129   4                          }
1130   3                      }
1131   2              }
1132   1      
1133   1          if(IS_MASK_SET(SMBusXStatus, (SMBus2_Fail+SMBus2_OK)))  // SMBus protocol Fail or OK
1134   1          {
1135   2              HOSTA_B=0xFE;                               // Clear Host Status register.
1136   2                  SMBus2InUsing = 0;                          // Clear smbus in used flag.
1137   2              CLEAR_MASK(*asSCS2[SMBus2index].ConditionVar, asSCS2[SMBus2index].Conditionflag);   // clear OEM s
             -mbus service flag.
1138   2              
1139   2              if(IS_MASK_SET(SMBusXStatus, SMBus2_Fail))  // if protocol fail
1140   2              {
1141   3                  (asSCS2[SMBus2index].errorfunc)();      // OEM error hook function
1142   3              }
1143   2              else                                        // protocol OK
1144   2              {
1145   3                  (asSCS2[SMBus2index].hookfunc)();       // OEM OK hook function
1146   3              }
1147   2              CLEAR_MASK(SMBusXStatus, (SMBus2_OK+SMBus2_Fail));  // To clear flag
1148   2          }
1149   1      }
1150          
1151          //----------------------------------------------------------------------------
1152          // SMBus channel 3 service function
1153          //----------------------------------------------------------------------------
1154          void service_smbus3(void) 
1155          {
1156   1              if(SMBus3InUsing)
1157   1              {
1158   2              CLEAR_MASK(SMBusXStatus, (SMBus3_OK+SMBus3_Fail));
1159   2              
1160   2              if(IS_MASK_SET(HOSTA_C, (HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE)))  // any error
1161   2              {
1162   3                  if(IS_MASK_SET(HOSTA_C, (HOSTA_BSER+HOSTA_FAIL)))
1163   3                  {
1164   4                      ResetSMBus(SMbusCh3);               // Reset SMBus
1165   4                  }
1166   3                  SET_MASK(SMBusXStatus, SMBus3_Fail);    // SMBus fail
1167   3              }
1168   2              else                                        // Byte Done Status or Finish Interrupt or no any stat
             -ys bit
1169   2              {
1170   3                  //*********************************************************************
1171   3                  // Cmd_ReadBlock
1172   3                  //*********************************************************************
1173   3                          if(asSCS3[SMBus3index].protocol==Cmd_ReadBlock)
1174   3                          {                                   
1175   4                      if(IS_MASK_SET(HOSTA_C, (HOSTA_FINTR+HOSTA_BDS)))   // Only Byte Done Status or Finish Int
             -errupt bit is set.
1176   4                      {
1177   5                                  if(SMBus3ByteCunt==0x00)
1178   5                                      {
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 21  

1179   6                                              SMBus3BlockPtr = asSCS3[SMBus3index].smbdata;
1180   6                                              SMBus3ByteCunt = D0REG_C;
1181   6      
1182   6                                              if(SMBus3ByteCunt>32)
1183   6                                              {
1184   7                                                      SMBus3ByteCunt=32;          // DB_SMBusData[] max 32 bytes
1185   7                                              }
1186   6                                                              
1187   6                                              SMB_BCNT = SMBus3ByteCunt;
1188   6                                              DB_SMBusBCunt = SMBus3ByteCunt;
1189   6                                                              
1190   6                                              *SMBus3BlockPtr = HOBDB_C;  // read data1
1191   6                                              SMBus3ByteCunt--;
1192   6                                  }
1193   5                                      else
1194   5                                      {
1195   6                                              SMBus3BlockPtr++;
1196   6                                              *SMBus3BlockPtr=HOBDB_C;
1197   6                                              SMBus3ByteCunt--;
1198   6                                              if(SMBus3ByteCunt==0x01)
1199   6                                              {
1200   7                                                      SET_MASK(HOCTL_C,HOCTL_LABY);
1201   7                                              }
1202   6                                      }
1203   5                                              
1204   5                                      if(SMBus3ByteCunt!=0x00)                // Byte count isn't 0.
1205   5                                      {
1206   6                                              HOSTA_C=0xFE;
1207   6                                              SET_MASK(IER2,Int_SMBUS2);
1208   6                                      }
1209   5                          else                                    // Byte count is 0.
1210   5                          {
1211   6                                              CLEAR_MASK(HOCTL_C,HOCTL_LABY);
1212   6                              SET_MASK(SMBusXStatus, SMBus3_OK);  // SMBus protocol OK
1213   6                          }
1214   5                      }
1215   4                      else                                        // No any bit is set of host status register.
1216   4                      {
1217   5                          SET_MASK(SMBusXStatus, SMBus3_Fail);    // SMBus fail
1218   5                      }
1219   4                          }
1220   3                      //*********************************************************************
1221   3                  // Cmd_WriteBlock
1222   3                  //*********************************************************************
1223   3                          else if(asSCS3[SMBus3index].protocol==Cmd_WriteBlock)
1224   3                          {
1225   4                                  if(IS_MASK_SET(HOSTA_C, (HOSTA_FINTR+HOSTA_BDS)))   // Only Byte Done Status or Finish Interrupt bi
             -t is set.
1226   4                                  {
1227   5                                              SMBus3ByteCunt--;
1228   5                                              if(SMBus3ByteCunt==0x00)
1229   5                                              {
1230   6                                                      SET_MASK(SMBusXStatus, SMBus3_OK);  // SMBus protocol OK
1231   6                                              }
1232   5                                              else  
1233   5                                              {
1234   6                                                      SMBus3BlockPtr++;
1235   6                                                      HOBDB_C=*SMBus3BlockPtr;
1236   6                                                      
1237   6                                                      HOSTA_C=0xFE;
1238   6                                                      SET_MASK(IER2,Int_SMBUS2);
1239   6                                              }
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 22  

1240   5                                  }
1241   4                      else                                        // No any bit is set of host status register.
1242   4                      {
1243   5                          SET_MASK(SMBusXStatus, SMBus3_Fail);    // SMBus fail
1244   5                      }
1245   4                          }
1246   3                          //******************************************************************************************
1247   3                      // Cmd_SendByte, Cmd_RecvByte, Cmd_ReadByte, Cmd_WriteByte, Cmd_ReadWord and Cmd_WriteWord 
1248   3                      //******************************************************************************************
1249   3                          else
1250   3                          {
1251   4                      if(IS_MASK_SET(HOSTA_C, HOSTA_FINTR))       // Only Finish Interrupt bit is set.
1252   4                      {
1253   5                                  *asSCS3[SMBus3index].smbdata = D0REG_C; // read data byte 1
1254   5                                      if(asSCS3[SMBus3index].protocol==Cmd_ReadWord)  // read word protocol
1255   5                                      {
1256   6                                              Tmp_XPntr = asSCS3[SMBus3index].smbdata;
1257   6                                              Tmp_XPntr++;
1258   6                                              *Tmp_XPntr=D1REG_C;                 // read data byte 2
1259   6                                      }
1260   5                          SET_MASK(SMBusXStatus, SMBus3_OK);      // SMBus protocol OK
1261   5                      }
1262   4                      else                                        // No any bit is set of host status register.
1263   4                      {
1264   5                          SET_MASK(SMBusXStatus, SMBus3_Fail);    // SMBus protocol Fail
1265   5                      }
1266   4                          }
1267   3                      }
1268   2              }
1269   1      
1270   1          if(IS_MASK_SET(SMBusXStatus, (SMBus3_Fail+SMBus3_OK)))  // SMBus protocol Fail or OK
1271   1          {
1272   2              HOSTA_C=0xFE;                               // Clear Host Status register.
1273   2                  SMBus3InUsing = 0;                          // Clear smbus in used flag.
1274   2              CLEAR_MASK(*asSCS3[SMBus3index].ConditionVar, asSCS3[SMBus3index].Conditionflag);   // clear OEM s
             -mbus service flag.
1275   2              
1276   2              if(IS_MASK_SET(SMBusXStatus, SMBus3_Fail))  // if protocol fail
1277   2              {
1278   3                  (asSCS3[SMBus3index].errorfunc)();      // OEM error hook function
1279   3              }
1280   2              else                                        // protocol OK
1281   2              {
1282   3                  (asSCS3[SMBus3index].hookfunc)();       // OEM OK hook function
1283   3              }
1284   2              CLEAR_MASK(SMBusXStatus, (SMBus3_OK+SMBus3_Fail));  // To clear flag
1285   2          }
1286   1      }
1287          
1288          //----------------------------------------------------------------------------
1289          // The function of checking smbus need service
1290          // Note : 
1291          //      Always return SMBus_ClearService, if SMBusCenter is no use function.
1292          //----------------------------------------------------------------------------
1293          BYTE CheckSMBusNeedService(void)
1294          {
1295   1          if((F_Service_SMBus1==SMBus_NeedService)||(F_Service_SMBus2==SMBus_NeedService)||(F_Service_SMBus3==SM
             -Bus_NeedService))
1296   1          {
1297   2              return(SMBus_NeedService);
1298   2          }
1299   1      
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 23  

1300   1          // Always return SMBus_ClearService, if SMBusCenter is no use function.
1301   1          return(SMBus_ClearService);
1302   1      }
1303          
1304          //-----------------------------------------------------------------------------
1305          
1306          /*-----------------------------------------------------------------------------
1307           * @subroutine - Service_HI2C_Interface
1308           * @function - Service_HI2C_Interface
1309           * @upstream - By call
1310           * @input    - None
1311           * @return   - None
1312           * @note     - None
1313           *---------------------------------------------------------------------------*/
1314          void Service_HI2C_Interface(void)
1315          {
1316   1          if (xHI2C_CHN > 0)
1317   1          {
1318   2              /* Currently, only support channel-0 */
1319   2              return;
1320   2          }
1321   1      #if 1   /* For Analogix Update Firmware */
1322   1          if (xHI2C_START == 0x01)
1323   1          {
1324   2              xHI2C_DATA0 = i2c_read_reg(xHI2C_ADDR, xHI2C_CMD);
1325   2              xHI2C_STATUS = 0;   // SET NOT BUSY
1326   2              xHI2C_START = 0;    // SET FINISHED
1327   2              return;
1328   2          }
1329   1          if (xHI2C_START == 0x03)
1330   1          {
1331   2              i2c_read_block_reg(xHI2C_ADDR, 
1332   2                                  xHI2C_CMD, 
1333   2                                  xHI2C_BYTECNT, 
1334   2                                  &xHI2C_DATA[0]);
1335   2              xHI2C_STATUS = 0;   // SET NOT BUSY
1336   2              xHI2C_START = 0;    // SET FINISHED
1337   2              return;
1338   2          }
1339   1          if (xHI2C_START == 0x81)
1340   1          {
1341   2              i2c_write_reg(xHI2C_ADDR, xHI2C_CMD, xHI2C_DATA0); 
1342   2              xHI2C_STATUS = 0;   // SET NOT BUSY
1343   2              xHI2C_START = 0;    // SET FINISHED
1344   2              return;  
1345   2          }
1346   1           if (xHI2C_START == 0x83)
1347   1          {
1348   2              i2c_write_block_reg_b(xHI2C_ADDR, 
1349   2                                  xHI2C_CMD, 
1350   2                                  xHI2C_BYTECNT, 
1351   2                                  &xHI2C_DATA[0]);
1352   2              xHI2C_STATUS = 0;   // SET NOT BUSY
1353   2              xHI2C_START = 0;    // SET FINISHED
1354   2              return;  
1355   2          }   
1356   1      #endif
1357   1      }
1358          
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 24  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0109 (BEGIN)
0000         L?0266:
0000         L?0267:
0000 E0                MOVX    A,@DPTR
0001 FF                MOV     R7,A
0002         L?0268:
0002 900000      E     MOV     DPTR,#asSMBus+0EH
0005         L?0269:
0005 75F015            MOV     B,#015H
0008         L?0270:
0008 120000      E     LCALL   ?C?OFFXADD
000B         L?0271:
000B E4                CLR     A
000C 93                MOVC    A,@A+DPTR
000D FC                MOV     R4,A
000E 7401              MOV     A,#01H
0010 93                MOVC    A,@A+DPTR
0011 F582              MOV     DPL,A
0013 8C83              MOV     DPH,R4
0015 22                RET     
0016         L?0272:
0016         L?0273:
0016 E0                MOVX    A,@DPTR
0017         L?0274:
0017 75F00E            MOV     B,#0EH
001A A4                MUL     AB
001B 2400        R     ADD     A,#LOW asSSC+06H
001D F582              MOV     DPL,A
001F E4                CLR     A
0020 3400        R     ADDC    A,#HIGH asSSC+06H
0022         L?0275:
0022 F583              MOV     DPH,A
0024         L?0276:
0024 E4                CLR     A
0025 93                MOVC    A,@A+DPTR
0026 FE                MOV     R6,A
0027 7401              MOV     A,#01H
0029 93                MOVC    A,@A+DPTR
002A F582              MOV     DPL,A
002C 8E83              MOV     DPH,R6
002E 22                RET     
002F         L?0277:
002F F583              MOV     DPH,A
0031         L?0278:
0031 E4                CLR     A
0032 93                MOVC    A,@A+DPTR
0033 FC                MOV     R4,A
0034 7401              MOV     A,#01H
0036 93                MOVC    A,@A+DPTR
0037 F582              MOV     DPL,A
0039 8C83              MOV     DPH,R4
003B         L?0279:
003B E0                MOVX    A,@DPTR
003C FF                MOV     R7,A
003D         L?0280:
003D 900000      R     MOV     DPTR,#tempSMBusindex
0040 E0                MOVX    A,@DPTR
0041 75F00D            MOV     B,#0DH
0044 22                RET     
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 25  

0045         L?0281:
0045         L?0282:
0045 E0                MOVX    A,@DPTR
0046 FE                MOV     R6,A
0047 900000      E     MOV     DPTR,#asSMBus+012H
004A         L?0283:
004A 75F015            MOV     B,#015H
004D EF                MOV     A,R7
004E 020000      E     LJMP    ?C?OFFXADD
0051         L?0284:
0051 900000      E     MOV     DPTR,#SMBus2index
0054 E0                MOVX    A,@DPTR
0055 75F00D            MOV     B,#0DH
0058         L?0285:
0058 A4                MUL     AB
0059 2400        R     ADD     A,#LOW asSCS2+03H
005B F582              MOV     DPL,A
005D E4                CLR     A
005E 3400        R     ADDC    A,#HIGH asSCS2+03H
0060         L?0286:
0060 F583              MOV     DPH,A
0062         L?0287:
0062 E4                CLR     A
0063 93                MOVC    A,@A+DPTR
0064 FF                MOV     R7,A
0065 7401              MOV     A,#01H
0067 93                MOVC    A,@A+DPTR
0068 22                RET     
0069         L?0288:
0069         L?0289:
0069 EF                MOV     A,R7
006A F0                MOVX    @DPTR,A
006B 75F015            MOV     B,#015H
006E EE                MOV     A,R6
006F 900000      E     MOV     DPTR,#asSMBus
0072 020000      E     LJMP    ?C?OFFXADD
0075         L?0290:
0075 900000      E     MOV     DPTR,#HOBDB_A
0078 E0                MOVX    A,@DPTR
0079 900000      E     MOV     DPTR,#SMBus1BlockPtr
007C         L?0291:
007C FF                MOV     R7,A
007D         L?0292:
007D E0                MOVX    A,@DPTR
007E FC                MOV     R4,A
007F A3                INC     DPTR
0080 E0                MOVX    A,@DPTR
0081         L?0293:
0081 F582              MOV     DPL,A
0083 8C83              MOV     DPH,R4
0085 EF                MOV     A,R7
0086 F0                MOVX    @DPTR,A
0087 22                RET     
0088         L?0294:
0088 900000      R     MOV     DPTR,#channel
008B         L?0295:
008B E0                MOVX    A,@DPTR
008C FF                MOV     R7,A
008D         L?0296:
008D 900000      R     MOV     DPTR,#smbus_address
0090 E0                MOVX    A,@DPTR
0091 FD                MOV     R5,A
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 26  

0092 900000      R     MOV     DPTR,#smbus_cmd
0095 E0                MOVX    A,@DPTR
0096 FB                MOV     R3,A
0097 22                RET     
0098         L?0297:
0098         L?0298:
0098 900000      R     MOV     DPTR,#channel
009B         L?0299:
009B E0                MOVX    A,@DPTR
009C FF                MOV     R7,A
009D 75F00E            MOV     B,#0EH
00A0 A4                MUL     AB
00A1 22                RET     
00A2         L?0300:
00A2         L?0301:
00A2 E0                MOVX    A,@DPTR
00A3 FF                MOV     R7,A
00A4         L?0302:
00A4 900000      E     MOV     DPTR,#DB_SMBusAddr
00A7 E0                MOVX    A,@DPTR
00A8 FD                MOV     R5,A
00A9 900000      E     MOV     DPTR,#DB_SMBusCmd
00AC E0                MOVX    A,@DPTR
00AD FB                MOV     R3,A
00AE 22                RET     
00AF         L?0303:
00AF A4                MUL     AB
00B0 2400        R     ADD     A,#LOW asSCS2+06H
00B2 F582              MOV     DPL,A
00B4 E4                CLR     A
00B5 3400        R     ADDC    A,#HIGH asSCS2+06H
00B7         L?0304:
00B7 F583              MOV     DPH,A
00B9         L?0305:
00B9 E4                CLR     A
00BA 93                MOVC    A,@A+DPTR
00BB FE                MOV     R6,A
00BC 7401              MOV     A,#01H
00BE 93                MOVC    A,@A+DPTR
00BF F582              MOV     DPL,A
00C1 8E83              MOV     DPH,R6
00C3 22                RET     
00C4         L?0306:
00C4         L?0307:
00C4 900000      E     MOV     DPTR,#SMBus1index
00C7 E0                MOVX    A,@DPTR
00C8 75F00D            MOV     B,#0DH
00CB         L?0308:
00CB 900000      R     MOV     DPTR,#asSCS1+03H
00CE 020000      E     LJMP    ?C?OFFXADD
00D1         L?0309:
00D1 E0                MOVX    A,@DPTR
00D2 FF                MOV     R7,A
00D3         L?0310:
00D3 900000      E     MOV     DPTR,#SMBus3index
00D6 E0                MOVX    A,@DPTR
00D7 75F00D            MOV     B,#0DH
00DA A4                MUL     AB
00DB 22                RET     
00DC         L?0311:
00DC         L?0312:
00DC 900000      E     MOV     DPTR,#SMBus2index
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 27  

00DF E0                MOVX    A,@DPTR
00E0 75F00D            MOV     B,#0DH
00E3         L?0313:
00E3 A4                MUL     AB
00E4 2400        R     ADD     A,#LOW asSCS2
00E6 F582              MOV     DPL,A
00E8 E4                CLR     A
00E9 3400        R     ADDC    A,#HIGH asSCS2
00EB F583              MOV     DPH,A
00ED E4                CLR     A
00EE 93                MOVC    A,@A+DPTR
00EF 22                RET     
00F0         L?0314:
00F0         L?0315:
00F0 E0                MOVX    A,@DPTR
00F1 FF                MOV     R7,A
00F2 75F015            MOV     B,#015H
00F5 EE                MOV     A,R6
00F6 900000      E     MOV     DPTR,#asSMBus+04H
00F9 22                RET     
00FA         L?0316:
00FA         L?0317:
00FA 900000      E     MOV     DPTR,#SMBus1index
00FD E0                MOVX    A,@DPTR
00FE 75F00D            MOV     B,#0DH
0101         L?0318:
0101 900000      R     MOV     DPTR,#asSCS1
0104 120000      E     LCALL   ?C?OFFXADD
0107 E4                CLR     A
0108 93                MOVC    A,@A+DPTR
0109 22                RET     
010A         L?0319:
010A F583              MOV     DPH,A
010C         L?0320:
010C E4                CLR     A
010D 93                MOVC    A,@A+DPTR
010E FE                MOV     R6,A
010F 7401              MOV     A,#01H
0111 93                MOVC    A,@A+DPTR
0112 CA                XCH     A,R2
0113 EE                MOV     A,R6
0114 CA                XCH     A,R2
0115 F9                MOV     R1,A
0116 020000      E     LJMP    ?C?ICALL
0119         L?0321:
0119         L?0322:
0119 E0                MOVX    A,@DPTR
011A         L?0323:
011A 75F00E            MOV     B,#0EH
011D A4                MUL     AB
011E         L?0324:
011E 2400        R     ADD     A,#LOW asSSC
0120 F582              MOV     DPL,A
0122 E4                CLR     A
0123 3400        R     ADDC    A,#HIGH asSSC
0125 22                RET     
0126         L?0325:
0126 4401              ORL     A,#01H
0128 FF                MOV     R7,A
0129         L?0326:
0129 E0                MOVX    A,@DPTR
012A FE                MOV     R6,A
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 28  

012B 75F015            MOV     B,#015H
012E 900000      E     MOV     DPTR,#asSMBus+02H
0131 22                RET     
0132         L?0327:
0132 A4                MUL     AB
0133 2400        R     ADD     A,#LOW asSCS2+05H
0135 F582              MOV     DPL,A
0137 E4                CLR     A
0138 3400        R     ADDC    A,#HIGH asSCS2+05H
013A         L?0328:
013A F583              MOV     DPH,A
013C         L?0329:
013C E4                CLR     A
013D 93                MOVC    A,@A+DPTR
013E F4                CPL     A
013F FE                MOV     R6,A
0140 EF                MOV     A,R7
0141 5E                ANL     A,R6
0142 22                RET     
0143         L?0330:
0143         L?0331:
0143 2400        R     ADD     A,#LOW asSCS3
0145 F582              MOV     DPL,A
0147 E4                CLR     A
0148 3400        R     ADDC    A,#HIGH asSCS3
014A F583              MOV     DPH,A
014C E4                CLR     A
014D 93                MOVC    A,@A+DPTR
014E 22                RET     
014F         L?0332:
014F 900000      E     MOV     DPTR,#SMBus1BlockPtr
0152         L?0333:
0152 E4                CLR     A
0153 75F001            MOV     B,#01H
0156 020000      E     LJMP    ?C?IILDX
0159         L?0334:
0159         L?0335:
0159 900000      E     MOV     DPTR,#xHI2C_ADDR
015C E0                MOVX    A,@DPTR
015D FF                MOV     R7,A
015E 900000      E     MOV     DPTR,#xHI2C_CMD
0161 E0                MOVX    A,@DPTR
0162 FD                MOV     R5,A
0163 22                RET     
0164         L?0336:
0164 F583              MOV     DPH,A
0166         L?0337:
0166 E4                CLR     A
0167 93                MOVC    A,@A+DPTR
0168 FC                MOV     R4,A
0169 7401              MOV     A,#01H
016B 93                MOVC    A,@A+DPTR
016C F582              MOV     DPL,A
016E 8C83              MOV     DPH,R4
0170 EF                MOV     A,R7
0171 F0                MOVX    @DPTR,A
0172 22                RET     
0173         L?0338:
0173         L?0339:
0173 900000      E     MOV     DPTR,#BAT1_FCcap_H
0176 E0                MOVX    A,@DPTR
0177 FE                MOV     R6,A
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 29  

0178 900000      E     MOV     DPTR,#BAT1_FCcap_L
017B E0                MOVX    A,@DPTR
017C FD                MOV     R5,A
017D ED                MOV     A,R5
017E FF                MOV     R7,A
017F 22                RET     
0180         L?0340:
0180         L?0341:
0180 2400        R     ADD     A,#LOW asSSC+06H
0182 F582              MOV     DPL,A
0184 E4                CLR     A
0185 3400        R     ADDC    A,#HIGH asSSC+06H
0187 F583              MOV     DPH,A
0189 22                RET     
018A         L?0342:
018A         L?0343:
018A E0                MOVX    A,@DPTR
018B FE                MOV     R6,A
018C A3                INC     DPTR
018D E0                MOVX    A,@DPTR
018E F582              MOV     DPL,A
0190 8E83              MOV     DPH,R6
0192 E0                MOVX    A,@DPTR
0193 22                RET     
0194         L?0344:
0194 A4                MUL     AB
0195         L?0345:
0195 2400        R     ADD     A,#LOW asSCS3+03H
0197 F582              MOV     DPL,A
0199 E4                CLR     A
019A 3400        R     ADDC    A,#HIGH asSCS3+03H
019C 22                RET     
019D         L?0346:
019D F583              MOV     DPH,A
019F         L?0347:
019F E4                CLR     A
01A0 93                MOVC    A,@A+DPTR
01A1 900000      R     MOV     DPTR,#smbus_Bcunt
01A4 F0                MOVX    @DPTR,A
01A5 A3                INC     DPTR
01A6 E0                MOVX    A,@DPTR
01A7 6408              XRL     A,#08H
01A9 22                RET     
01AA         L?0348:
01AA         L?0349:
01AA 900000      R     MOV     DPTR,#smbus_address
01AD E0                MOVX    A,@DPTR
01AE 900000      R     MOV     DPTR,#channel
01B1 22                RET     
01B2         L?0350:
01B2         L?0351:
01B2 E0                MOVX    A,@DPTR
01B3 54FE              ANL     A,#0FEH
01B5 FF                MOV     R7,A
01B6 75F015            MOV     B,#015H
01B9 EE                MOV     A,R6
01BA 900000      E     MOV     DPTR,#asSMBus+02H
01BD 22                RET     
01BE         L?0352:
01BE         L?0353:
01BE 900000      R     MOV     DPTR,#asSCS1+05H
01C1 020000      E     LJMP    ?C?OFFXADD
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 30  

01C4         L?0354:
01C4         L?0355:
01C4 A4                MUL     AB
01C5         L?0356:
01C5 2400        R     ADD     A,#LOW asSCS3+06H
01C7 F582              MOV     DPL,A
01C9 E4                CLR     A
01CA 3400        R     ADDC    A,#HIGH asSCS3+06H
01CC 22                RET     
01CD         L?0357:
01CD         L?0358:
01CD A4                MUL     AB
01CE         L?0359:
01CE 2400        R     ADD     A,#LOW asSCS3+05H
01D0 F582              MOV     DPL,A
01D2 E4                CLR     A
01D3 3400        R     ADDC    A,#HIGH asSCS3+05H
01D5 22                RET     
01D6         L?0360:
01D6         L?0361:
01D6 7800        E     MOV     R0,#LOW Tmp_XPntr
01D8 CF                XCH     A,R7
01D9 F6                MOV     @R0,A
01DA 08                INC     R0
01DB EF                MOV     A,R7
01DC F6                MOV     @R0,A
01DD 06                INC     @R0
01DE E6                MOV     A,@R0
01DF 18                DEC     R0
01E0 22                RET     
01E1         L?0362:
01E1 EF                MOV     A,R7
01E2 75F00E            MOV     B,#0EH
01E5 A4                MUL     AB
01E6         L?0363:
01E6 2400        R     ADD     A,#LOW asSSC+08H
01E8 F582              MOV     DPL,A
01EA E4                CLR     A
01EB 3400        R     ADDC    A,#HIGH asSSC+08H
01ED 22                RET     
01EE         L?0364:
01EE 75F00D            MOV     B,#0DH
01F1         L?0365:
01F1 A4                MUL     AB
01F2 2400        R     ADD     A,#LOW asSCS2+0AH
01F4 F582              MOV     DPL,A
01F6 E4                CLR     A
01F7 3400        R     ADDC    A,#HIGH asSCS2+0AH
01F9 22                RET     
01FA         L?0366:
01FA 75F00D            MOV     B,#0DH
01FD         L?0367:
01FD A4                MUL     AB
01FE 2400        R     ADD     A,#LOW asSCS3+0AH
0200 F582              MOV     DPL,A
0202 E4                CLR     A
0203 3400        R     ADDC    A,#HIGH asSCS3+0AH
0205 22                RET     
0206         L?0368:
0206         L?0369:
0206 2400        R     ADD     A,#LOW asSSC+04H
0208 F582              MOV     DPL,A
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 31  

020A E4                CLR     A
020B 3400        R     ADDC    A,#HIGH asSSC+04H
020D F583              MOV     DPH,A
020F 22                RET     
0210         L?0370:
0210 FF                MOV     R7,A
0211         L?0371:
0211 E0                MOVX    A,@DPTR
0212 FE                MOV     R6,A
0213 75F015            MOV     B,#015H
0216 900000      E     MOV     DPTR,#asSMBus+08H
0219 22                RET     
021A         L?0372:
021A 7B01              MOV     R3,#01H
021C 7A00        E     MOV     R2,#HIGH xHI2C_DATA
021E 7900        E     MOV     R1,#LOW xHI2C_DATA
0220 120000      E     LCALL   ?C?PSTXDATA
0223 900000      E     MOV     DPTR,#xHI2C_BYTECNT
0226 E0                MOVX    A,@DPTR
0227 FB                MOV     R3,A
0228 22                RET     
0229         L?0373:
0229         L?0374:
0229 900000      R     MOV     DPTR,#smbus_data
022C CF                XCH     A,R7
022D F0                MOVX    @DPTR,A
022E A3                INC     DPTR
022F EF                MOV     A,R7
0230 F0                MOVX    @DPTR,A
0231 22                RET     
0232         L?0375:
0232 E4                CLR     A
0233 93                MOVC    A,@A+DPTR
0234 FE                MOV     R6,A
0235 7401              MOV     A,#01H
0237 93                MOVC    A,@A+DPTR
0238 CA                XCH     A,R2
0239 EE                MOV     A,R6
023A CA                XCH     A,R2
023B F9                MOV     R1,A
023C 020000      E     LJMP    ?C?ICALL
023F         L?0376:
023F         L?0377:
023F 900000      R     MOV     DPTR,#tempSMBusindex
0242 E0                MOVX    A,@DPTR
0243 FF                MOV     R7,A
0244 75F00D            MOV     B,#0DH
0247 22                RET     
0248         L?0378:
0248         L?0379:
0248 E0                MOVX    A,@DPTR
0249 FF                MOV     R7,A
024A 7800        E     MOV     R0,#LOW Tmp_XPntr
024C E6                MOV     A,@R0
024D FC                MOV     R4,A
024E 08                INC     R0
024F E6                MOV     A,@R0
0250 22                RET     
0251         L?0380:
0251 E0                MOVX    A,@DPTR
0252 FF                MOV     R7,A
0253         L?0381:
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 32  

0253 900000      E     MOV     DPTR,#SMBus2index
0256 E0                MOVX    A,@DPTR
0257 75F00D            MOV     B,#0DH
025A 22                RET     
025B         L?0382:
025B         L?0383:
025B 900000      R     MOV     DPTR,#asSCS1+06H
025E 020000      E     LJMP    ?C?OFFXADD
0261         L?0384:
0261 900000      E     MOV     DPTR,#HOSTA_B
0264         L?0385:
0264 74FE              MOV     A,#0FEH
0266 F0                MOVX    @DPTR,A
0267 900000      E     MOV     DPTR,#IER1
026A 22                RET     
026B         L?0386:
026B A4                MUL     AB
026C 2400        R     ADD     A,#LOW asSCS2+05H
026E F582              MOV     DPL,A
0270 E4                CLR     A
0271 3400        R     ADDC    A,#HIGH asSCS2+05H
0273 F583              MOV     DPH,A
0275 E4                CLR     A
0276 22                RET     
0277         L?0387:
0277 F583              MOV     DPH,A
0279         L?0388:
0279 E4                CLR     A
027A 93                MOVC    A,@A+DPTR
027B 900000      R     MOV     DPTR,#smbus_cmd
027E F0                MOVX    @DPTR,A
027F 22                RET     
0280         L?0389:
0280 F583              MOV     DPH,A
0282         L?0390:
0282 E4                CLR     A
0283 93                MOVC    A,@A+DPTR
0284 900000      R     MOV     DPTR,#smbus_address
0287 F0                MOVX    @DPTR,A
0288 22                RET     
0289         L?0391:
0289 75F00E            MOV     B,#0EH
028C A4                MUL     AB
028D 2400        R     ADD     A,#LOW asSSC+0AH
028F F582              MOV     DPL,A
0291 E4                CLR     A
0292 3400        R     ADDC    A,#HIGH asSSC+0AH
0294 22                RET     
0295         L?0392:
0295 900000      E     MOV     DPTR,#DB_SMBusAck1
0298 F0                MOVX    @DPTR,A
0299 E4                CLR     A
029A 900000      E     MOV     DPTR,#DB_SMBusAddr
029D F0                MOVX    @DPTR,A
029E 22                RET     
029F         L?0393:
029F 2400        R     ADD     A,#LOW asSSC+02H
02A1 F582              MOV     DPL,A
02A3 E4                CLR     A
02A4 3400        R     ADDC    A,#HIGH asSSC+02H
02A6 F583              MOV     DPH,A
02A8 22                RET     
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 33  

02A9         L?0394:
02A9         L?0395:
02A9 7400        E     MOV     A,#HIGH DB_SMBusData
02AB F0                MOVX    @DPTR,A
02AC A3                INC     DPTR
02AD 7400        E     MOV     A,#LOW DB_SMBusData
02AF 22                RET     
02B0         L?0396:
02B0         L?0397:
02B0 900000      E     MOV     DPTR,#SMBus1ByteCunt
02B3 E0                MOVX    A,@DPTR
02B4 14                DEC     A
02B5 F0                MOVX    @DPTR,A
02B6 22                RET     
02B7         L?0398:
02B7         L?0399:
02B7 900000      E     MOV     DPTR,#SMBus2ByteCunt
02BA E0                MOVX    A,@DPTR
02BB 14                DEC     A
02BC F0                MOVX    @DPTR,A
02BD 22                RET     
02BE         L?0400:
02BE         L?0401:
02BE 900000      E     MOV     DPTR,#SMBus3ByteCunt
02C1 E0                MOVX    A,@DPTR
02C2 14                DEC     A
02C3 F0                MOVX    @DPTR,A
02C4 22                RET     
             ; FUNCTION Com0109 (END)

             ; FUNCTION _Hook_GetSMBusReadBlockByteCount (BEGIN)
                                           ; SOURCE LINE # 22
;---- Variable 'rblk_bc' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 23
                                           ; SOURCE LINE # 24
0000 900000      E     MOV     DPTR,#SMB_BCNT
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 25
0005 22                RET     
             ; FUNCTION _Hook_GetSMBusReadBlockByteCount (END)

             ; FUNCTION Hook_PollThermal (BEGIN)
                                           ; SOURCE LINE # 30
                                           ; SOURCE LINE # 31
                                           ; SOURCE LINE # 33
0000 22                RET     
             ; FUNCTION Hook_PollThermal (END)

             ; FUNCTION Error_PollThermal (BEGIN)
                                           ; SOURCE LINE # 38
                                           ; SOURCE LINE # 39
                                           ; SOURCE LINE # 41
0000 22                RET     
             ; FUNCTION Error_PollThermal (END)

             ; FUNCTION Hook_SMBDebug (BEGIN)
                                           ; SOURCE LINE # 46
                                           ; SOURCE LINE # 47
                                           ; SOURCE LINE # 48
0000 7433              MOV     A,#033H
                                           ; SOURCE LINE # 49
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 34  

0002 120000      R     LCALL   L?0392
                                           ; SOURCE LINE # 50
0005 22                RET     
             ; FUNCTION Hook_SMBDebug (END)

             ; FUNCTION Error_SMBDebug (BEGIN)
                                           ; SOURCE LINE # 52
                                           ; SOURCE LINE # 53
                                           ; SOURCE LINE # 54
0000 7444              MOV     A,#044H
                                           ; SOURCE LINE # 55
0002 120000      R     LCALL   L?0392
                                           ; SOURCE LINE # 56
0005 22                RET     
             ; FUNCTION Error_SMBDebug (END)

             ; FUNCTION BAT1_Read_FCcap_OK (BEGIN)
                                           ; SOURCE LINE # 63
                                           ; SOURCE LINE # 64
                                           ; SOURCE LINE # 65
0000 120000      R     LCALL   L?0338
0003 900000      E     MOV     DPTR,#BAT1_FCcap_Pre
0006 E0                MOVX    A,@DPTR
0007 6E                XRL     A,R6
0008 7003              JNZ     ?C0217
000A A3                INC     DPTR
000B E0                MOVX    A,@DPTR
000C 6F                XRL     A,R7
000D         ?C0217:
000D 6007              JZ      ?C0006
                                           ; SOURCE LINE # 66
000F E4                CLR     A
0010 FD                MOV     R5,A
0011 7F22              MOV     R7,#022H
0013 120000      E     LCALL   _ECQEvent
0016         ?C0006:
                                           ; SOURCE LINE # 68
0016 120000      R     LCALL   L?0338
0019 900000      E     MOV     DPTR,#BAT1_FCcap_Pre
001C EE                MOV     A,R6
001D F0                MOVX    @DPTR,A
001E A3                INC     DPTR
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 69
0021 22                RET     
             ; FUNCTION BAT1_Read_FCcap_OK (END)

             ; FUNCTION BAT1_Read_RMCAP_OK (BEGIN)
                                           ; SOURCE LINE # 74
                                           ; SOURCE LINE # 75
                                           ; SOURCE LINE # 79
0000 900000      E     MOV     DPTR,#BAT1_RSOC
0003 E0                MOVX    A,@DPTR
0004 6464              XRL     A,#064H
0006 6044              JZ      ?C0008
                                           ; SOURCE LINE # 80
                                           ; SOURCE LINE # 81
0008 120000      R     LCALL   L?0339
000B E4                CLR     A
000C FC                MOV     R4,A
000D FD                MOV     R5,A
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 35  

000E 900000      R     MOV     DPTR,#EC_BAT1_FCC_Temp
0011 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 82
0014 900000      E     MOV     DPTR,#BAT1_RSOC
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 E4                CLR     A
001A FC                MOV     R4,A
001B FD                MOV     R5,A
001C FE                MOV     R6,A
001D 900000      R     MOV     DPTR,#EC_BAT1_FCC_Temp
0020 120000      E     LCALL   ?C?LLDXDATA0
0023 120000      E     LCALL   ?C?LMUL
0026 E4                CLR     A
0027 7B64              MOV     R3,#064H
0029 FA                MOV     R2,A
002A F9                MOV     R1,A
002B F8                MOV     R0,A
002C 120000      E     LCALL   ?C?ULDIV
002F EF                MOV     A,R7
0030 2401              ADD     A,#01H
0032 FF                MOV     R7,A
0033 E4                CLR     A
0034 3E                ADDC    A,R6
0035 900000      R     MOV     DPTR,#EC_BAT1_BRC_Temp
0038 F0                MOVX    @DPTR,A
0039 A3                INC     DPTR
003A EF                MOV     A,R7
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 84
003C 900000      R     MOV     DPTR,#EC_BAT1_BRC_Temp
003F E0                MOVX    A,@DPTR
0040 A3                INC     DPTR
0041 E0                MOVX    A,@DPTR
0042 900000      E     MOV     DPTR,#BAT1_RMcap_L
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 85
0046 900000      R     MOV     DPTR,#EC_BAT1_BRC_Temp
0049 E0                MOVX    A,@DPTR
                                           ; SOURCE LINE # 86
004A 800C              SJMP    ?C0221
004C         ?C0008:
                                           ; SOURCE LINE # 88
                                           ; SOURCE LINE # 89
004C 900000      E     MOV     DPTR,#BAT1_FCcap_L
004F E0                MOVX    A,@DPTR
0050 900000      E     MOV     DPTR,#BAT1_RMcap_L
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 90
0054 900000      E     MOV     DPTR,#BAT1_FCcap_H
0057 E0                MOVX    A,@DPTR
0058         ?C0221:
0058 900000      E     MOV     DPTR,#BAT1_RMcap_H
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 91
                                           ; SOURCE LINE # 92
005C         ?C0010:
005C 22                RET     
             ; FUNCTION BAT1_Read_RMCAP_OK (END)

             ; FUNCTION BAT1_Read_OK (BEGIN)
                                           ; SOURCE LINE # 97
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 36  

                                           ; SOURCE LINE # 98
                                           ; SOURCE LINE # 99
0000 900000      E     MOV     DPTR,#BAT1_STATUS
0003 E0                MOVX    A,@DPTR
0004 4402              ORL     A,#02H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 100
0007 22                RET     
             ; FUNCTION BAT1_Read_OK (END)

             ; FUNCTION BAT1_Read_Pass (BEGIN)
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 106
                                           ; SOURCE LINE # 107
0000 900000      E     MOV     DPTR,#BT1_STATUS1
0003 E0                MOVX    A,@DPTR
0004 30E70E            JNB     ACC.7,?C0013
                                           ; SOURCE LINE # 108
                                           ; SOURCE LINE # 109
0007 E4                CLR     A
0008 FD                MOV     R5,A
0009 7F22              MOV     R7,#022H
000B 120000      E     LCALL   _ECQEvent
                                           ; SOURCE LINE # 110
000E 900000      E     MOV     DPTR,#BT1_STATUS1
0011 E0                MOVX    A,@DPTR
0012 547F              ANL     A,#07FH
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 111
                                           ; SOURCE LINE # 112
0015         ?C0013:
0015 22                RET     
             ; FUNCTION BAT1_Read_Pass (END)

             ; FUNCTION BAT1_Read_Fail (BEGIN)
                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 120
0000 900000      E     MOV     DPTR,#BT1_STATUS1
0003 E0                MOVX    A,@DPTR
0004 54FD              ANL     A,#0FDH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 121
0007 900000      E     MOV     DPTR,#BAT1_STATUS
000A E0                MOVX    A,@DPTR
000B 54FD              ANL     A,#0FDH
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 122
000E 22                RET     
             ; FUNCTION BAT1_Read_Fail (END)

             ; FUNCTION TempSensor_Read_OK (BEGIN)
                                           ; SOURCE LINE # 125
                                           ; SOURCE LINE # 126
                                           ; SOURCE LINE # 127
0000 900000      E     MOV     DPTR,#TEMP_SENSOR_STATUS
0003 E0                MOVX    A,@DPTR
0004 4401              ORL     A,#01H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 128
0007 E0                MOVX    A,@DPTR
0008 54FD              ANL     A,#0FDH
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 37  

000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 130
000B 22                RET     
             ; FUNCTION TempSensor_Read_OK (END)

             ; FUNCTION TempSensor_Read_Fail (BEGIN)
                                           ; SOURCE LINE # 132
                                           ; SOURCE LINE # 133
                                           ; SOURCE LINE # 134
0000 900000      E     MOV     DPTR,#TEMP_SENSOR_STATUS
0003 E0                MOVX    A,@DPTR
0004 4402              ORL     A,#02H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 135
0007 E0                MOVX    A,@DPTR
0008 54FE              ANL     A,#0FEH
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 137
000B 22                RET     
             ; FUNCTION TempSensor_Read_Fail (END)

             ; FUNCTION CHG_Read_OK (BEGIN)
                                           ; SOURCE LINE # 139
                                           ; SOURCE LINE # 140
                                           ; SOURCE LINE # 141
0000 900000      E     MOV     DPTR,#CHG_STATUS
0003 E0                MOVX    A,@DPTR
0004 4401              ORL     A,#01H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 142
0007 E0                MOVX    A,@DPTR
0008 54FD              ANL     A,#0FDH
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 143
000B 22                RET     
             ; FUNCTION CHG_Read_OK (END)

             ; FUNCTION CHG_Read_Fail (BEGIN)
                                           ; SOURCE LINE # 146
                                           ; SOURCE LINE # 147
                                           ; SOURCE LINE # 148
0000 900000      E     MOV     DPTR,#CHG_STATUS
0003 E0                MOVX    A,@DPTR
0004 4402              ORL     A,#02H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 149
0007 E0                MOVX    A,@DPTR
0008 54FE              ANL     A,#0FEH
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 150
000B 22                RET     
             ; FUNCTION CHG_Read_Fail (END)

             ; FUNCTION ClearSMBus1Variables (BEGIN)
                                           ; SOURCE LINE # 226
                                           ; SOURCE LINE # 227
                                           ; SOURCE LINE # 229
0000 22                RET     
             ; FUNCTION ClearSMBus1Variables (END)

             ; FUNCTION ClearSMBus2Variables (BEGIN)
                                           ; SOURCE LINE # 234
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 38  

                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 237
0000 22                RET     
             ; FUNCTION ClearSMBus2Variables (END)

             ; FUNCTION ClearSMBus3Variables (BEGIN)
                                           ; SOURCE LINE # 242
                                           ; SOURCE LINE # 243
                                           ; SOURCE LINE # 245
0000 22                RET     
             ; FUNCTION ClearSMBus3Variables (END)

             ; FUNCTION CheckSMBusTableSize (BEGIN)
                                           ; SOURCE LINE # 260
                                           ; SOURCE LINE # 261
                                           ; SOURCE LINE # 262
0000 900000      E     MOV     DPTR,#SMBus1TableSize
0003 741A              MOV     A,#01AH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 263
0006 900000      E     MOV     DPTR,#SMBus2TableSize
0009 7401              MOV     A,#01H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 264
000C 900000      E     MOV     DPTR,#SMBus3TableSize
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 265
0010 22                RET     
             ; FUNCTION CheckSMBusTableSize (END)

             ; FUNCTION ServiceSMBus (BEGIN)
                                           ; SOURCE LINE # 270
                                           ; SOURCE LINE # 271
                                           ; SOURCE LINE # 272
0000 900000      E     MOV     DPTR,#F_Service_SMBus1
0003 E0                MOVX    A,@DPTR
0004 B40105            CJNE    A,#01H,?C0023
                                           ; SOURCE LINE # 273
                                           ; SOURCE LINE # 274
0007 E4                CLR     A
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 275
0009 120000      R     LCALL   service_smbus1
                                           ; SOURCE LINE # 276
000C         ?C0023:
                                           ; SOURCE LINE # 278
000C 900000      E     MOV     DPTR,#F_Service_SMBus2
000F E0                MOVX    A,@DPTR
0010 B40105            CJNE    A,#01H,?C0024
                                           ; SOURCE LINE # 279
                                           ; SOURCE LINE # 280
0013 E4                CLR     A
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 281
0015 120000      R     LCALL   service_smbus2
                                           ; SOURCE LINE # 282
0018         ?C0024:
                                           ; SOURCE LINE # 284
0018 900000      E     MOV     DPTR,#F_Service_SMBus3
001B E0                MOVX    A,@DPTR
001C B40105            CJNE    A,#01H,?C0026
                                           ; SOURCE LINE # 285
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 39  

                                           ; SOURCE LINE # 286
001F E4                CLR     A
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 287
0021 120000      R     LCALL   service_smbus3
                                           ; SOURCE LINE # 288
                                           ; SOURCE LINE # 289
0024         ?C0026:
0024 22                RET     
             ; FUNCTION ServiceSMBus (END)

             ; FUNCTION _SMBusCenterSelection (BEGIN)
                                           ; SOURCE LINE # 295
0000 900000      R     MOV     DPTR,#channel
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 296
                                           ; SOURCE LINE # 305
0005 120000      R     LCALL   L?0299
0008 120000      R     LCALL   L?0324
000B F583              MOV     DPH,A
000D 120000      R     LCALL   L?0271
0010 E0                MOVX    A,@DPTR
0011 900000      R     MOV     DPTR,#tempSMBusindex
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 307
0015 EF                MOV     A,R7
0016 120000      R     LCALL   L?0274
0019 E0                MOVX    A,@DPTR
001A 7003              JNZ     $ + 5H
001C 020000      R     LJMP    ?C0027
                                           ; SOURCE LINE # 308
                                           ; SOURCE LINE # 316
001F 120000      R     LCALL   L?0297
0022 120000      R     LCALL   L?0393
0025 120000      R     LCALL   L?0271
0028 E0                MOVX    A,@DPTR
0029 04                INC     A
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 317
002B E0                MOVX    A,@DPTR
002C D3                SETB    C
002D 9432              SUBB    A,#032H
002F 5003              JNC     $ + 5H
0031 020000      R     LJMP    ?C0028
                                           ; SOURCE LINE # 318
                                           ; SOURCE LINE # 321
0034 120000      E     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 331
0037 900000      R     MOV     DPTR,#channel
003A E0                MOVX    A,@DPTR
003B 14                DEC     A
003C 602E              JZ      ?C0031
003E 14                DEC     A
003F 604A              JZ      ?C0032
0041 2402              ADD     A,#02H
0043 706C              JNZ     ?C0029
                                           ; SOURCE LINE # 332
                                           ; SOURCE LINE # 333
0045         ?C0030:
                                           ; SOURCE LINE # 334
0045 120000      R     LCALL   L?0280
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 40  

0048 120000      R     LCALL   L?0382
004B 120000      R     LCALL   L?0305
004E C083              PUSH    DPH
0050 C082              PUSH    DPL
0052 120000      R     LCALL   L?0279
0055 120000      R     LCALL   L?0352
0058 120000      R     LCALL   L?0329
005B D082              POP     DPL
005D D083              POP     DPH
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 335
0060 120000      R     LCALL   L?0280
0063 900000      R     MOV     DPTR,#asSCS1+0AH
0066 120000      E     LCALL   ?C?OFFXADD
                                           ; SOURCE LINE # 336
0069 020000      R     LJMP    ?C0228
                                           ; SOURCE LINE # 338
006C         ?C0031:
                                           ; SOURCE LINE # 339
006C 120000      R     LCALL   L?0280
006F 120000      R     LCALL   L?0303
0072 C083              PUSH    DPH
0074 C082              PUSH    DPL
0076 120000      R     LCALL   L?0279
0079 120000      R     LCALL   L?0327
007C D082              POP     DPL
007E D083              POP     DPH
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 340
0081 120000      R     LCALL   L?0280
0084 120000      R     LCALL   L?0365
0087 F583              MOV     DPH,A
0089         ?C0227:
                                           ; SOURCE LINE # 341
0089 8023              SJMP    ?C0228
                                           ; SOURCE LINE # 343
008B         ?C0032:
                                           ; SOURCE LINE # 344
008B 120000      R     LCALL   L?0280
008E 120000      R     LCALL   L?0354
0091 120000      R     LCALL   L?0304
0094 C083              PUSH    DPH
0096 C082              PUSH    DPL
0098 120000      R     LCALL   L?0279
009B 120000      R     LCALL   L?0357
009E 120000      R     LCALL   L?0328
00A1 D082              POP     DPL
00A3 D083              POP     DPH
00A5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 345
00A6 120000      R     LCALL   L?0280
00A9 120000      R     LCALL   L?0367
00AC F583              MOV     DPH,A
00AE         ?C0228:
00AE 120000      R     LCALL   L?0320
                                           ; SOURCE LINE # 346
                                           ; SOURCE LINE # 347
00B1         ?C0029:
                                           ; SOURCE LINE # 352
00B1 120000      R     LCALL   L?0297
00B4 120000      R     LCALL   L?0340
00B7 120000      R     LCALL   L?0271
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 41  

00BA E4                CLR     A
00BB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 354
00BC 900000      R     MOV     DPTR,#tempSMBusindex
00BF E0                MOVX    A,@DPTR
00C0 04                INC     A
00C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 355
00C2 120000      R     LCALL   L?0362
00C5 120000      R     LCALL   L?0275
00C8 E0                MOVX    A,@DPTR
00C9 FF                MOV     R7,A
00CA 900000      R     MOV     DPTR,#tempSMBusindex
00CD E0                MOVX    A,@DPTR
00CE C3                CLR     C
00CF 9F                SUBB    A,R7
00D0 4002              JC      ?C0028
                                           ; SOURCE LINE # 356
                                           ; SOURCE LINE # 357
00D2 E4                CLR     A
00D3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 358
                                           ; SOURCE LINE # 359
00D4         ?C0028:
                                           ; SOURCE LINE # 361
00D4 900000      R     MOV     DPTR,#tempSMBusindex
00D7 E0                MOVX    A,@DPTR
00D8 FF                MOV     R7,A
00D9 900000      R     MOV     DPTR,#channel
00DC 120000      R     LCALL   L?0321
00DF F583              MOV     DPH,A
00E1 120000      R     LCALL   L?0271
00E4 EF                MOV     A,R7
00E5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 362
00E6 22                RET     
00E7         ?C0027:
                                           ; SOURCE LINE # 364
                                           ; SOURCE LINE # 365
00E7 120000      R     LCALL   L?0298
00EA 120000      R     LCALL   L?0393
00ED 120000      R     LCALL   L?0271
00F0 E4                CLR     A
00F1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 366
;---- Variable 'smbus_flag' assigned to Register 'R6' ----
00F2 FE                MOV     R6,A
                                           ; SOURCE LINE # 371
00F3 EF                MOV     A,R7
00F4 14                DEC     A
00F5 601E              JZ      ?C0038
00F7 14                DEC     A
00F8 6036              JZ      ?C0040
00FA 2402              ADD     A,#02H
00FC 7049              JNZ     ?C0035
                                           ; SOURCE LINE # 372
                                           ; SOURCE LINE # 373
00FE         ?C0036:
                                           ; SOURCE LINE # 374
00FE 120000      R     LCALL   L?0280
0101 120000      R     LCALL   L?0383
0104 120000      R     LCALL   L?0278
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 42  

0107 120000      R     LCALL   L?0353
010A E4                CLR     A
010B 93                MOVC    A,@A+DPTR
010C FD                MOV     R5,A
010D EF                MOV     A,R7
010E 5D                ANL     A,R5
010F 6036              JZ      ?C0035
                                           ; SOURCE LINE # 375
                                           ; SOURCE LINE # 376
0111 7E01              MOV     R6,#01H
                                           ; SOURCE LINE # 377
                                           ; SOURCE LINE # 378
0113 8032              SJMP    ?C0035
                                           ; SOURCE LINE # 380
0115         ?C0038:
                                           ; SOURCE LINE # 381
0115 120000      R     LCALL   L?0280
0118 A4                MUL     AB
0119 2400        R     ADD     A,#LOW asSCS2+06H
011B F582              MOV     DPL,A
011D E4                CLR     A
011E 3400        R     ADDC    A,#HIGH asSCS2+06H
0120 120000      R     LCALL   L?0277
0123 120000      R     LCALL   L?0386
0126 93                MOVC    A,@A+DPTR
0127 FD                MOV     R5,A
0128 EF                MOV     A,R7
0129 5D                ANL     A,R5
012A 601B              JZ      ?C0035
                                           ; SOURCE LINE # 382
                                           ; SOURCE LINE # 383
012C 7E01              MOV     R6,#01H
                                           ; SOURCE LINE # 384
                                           ; SOURCE LINE # 385
012E 8017              SJMP    ?C0035
                                           ; SOURCE LINE # 387
0130         ?C0040:
                                           ; SOURCE LINE # 388
0130 120000      R     LCALL   L?0280
0133 120000      R     LCALL   L?0354
0136 120000      R     LCALL   L?0277
0139 120000      R     LCALL   L?0357
013C F583              MOV     DPH,A
013E E4                CLR     A
013F 93                MOVC    A,@A+DPTR
0140 FD                MOV     R5,A
0141 EF                MOV     A,R7
0142 5D                ANL     A,R5
0143 6002              JZ      ?C0035
                                           ; SOURCE LINE # 389
                                           ; SOURCE LINE # 390
0145 7E01              MOV     R6,#01H
                                           ; SOURCE LINE # 391
                                           ; SOURCE LINE # 392
                                           ; SOURCE LINE # 394
                                           ; SOURCE LINE # 395
                                           ; SOURCE LINE # 396
0147         ?C0035:
                                           ; SOURCE LINE # 401
0147 EE                MOV     A,R6
0148 702E              JNZ     ?C0043
                                           ; SOURCE LINE # 402
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 43  

                                           ; SOURCE LINE # 403
014A 900000      R     MOV     DPTR,#tempSMBusindex
014D E0                MOVX    A,@DPTR
014E 04                INC     A
014F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 405
0150 120000      R     LCALL   L?0298
0153 120000      R     LCALL   L?0363
0156 F583              MOV     DPH,A
0158 120000      R     LCALL   L?0271
015B E0                MOVX    A,@DPTR
015C FE                MOV     R6,A
015D 900000      R     MOV     DPTR,#tempSMBusindex
0160 E0                MOVX    A,@DPTR
0161 C3                CLR     C
0162 9E                SUBB    A,R6
0163 4002              JC      ?C0044
                                           ; SOURCE LINE # 406
                                           ; SOURCE LINE # 407
0165 E4                CLR     A
0166 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 408
0167         ?C0044:
                                           ; SOURCE LINE # 409
0167 900000      R     MOV     DPTR,#tempSMBusindex
016A E0                MOVX    A,@DPTR
016B FE                MOV     R6,A
016C EF                MOV     A,R7
016D 120000      R     LCALL   L?0323
0170 F583              MOV     DPH,A
0172 120000      R     LCALL   L?0271
0175 EE                MOV     A,R6
0176 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 410
0177 22                RET     
0178         ?C0043:
                                           ; SOURCE LINE # 412
                                           ; SOURCE LINE # 413
0178 120000      R     LCALL   L?0298
017B 120000      R     LCALL   L?0340
017E 120000      R     LCALL   L?0271
0181 7401              MOV     A,#01H
0183 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 415
0184 900000      E     MOV     DPTR,#asSMBus
0187 120000      R     LCALL   L?0283
018A 120000      R     LCALL   L?0276
018D E4                CLR     A
018E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 416
018F 900000      R     MOV     DPTR,#channel
0192 E0                MOVX    A,@DPTR
0193 FF                MOV     R7,A
0194 900000      E     MOV     DPTR,#asSMBus+06H
0197 120000      R     LCALL   L?0269
019A 74FE              MOV     A,#0FEH
019C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 421
019D EF                MOV     A,R7
019E 14                DEC     A
019F 6072              JZ      ?C0051
01A1 14                DEC     A
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 44  

01A2 7003              JNZ     $ + 5H
01A4 020000      R     LJMP    ?C0055
01A7 2402              ADD     A,#02H
01A9 6003              JZ      $ + 5H
01AB 020000      R     LJMP    ?C0046
                                           ; SOURCE LINE # 422
                                           ; SOURCE LINE # 423
01AE         ?C0047:
                                           ; SOURCE LINE # 424
01AE 120000      R     LCALL   L?0280
01B1 120000      R     LCALL   L?0318
01B4 900000      R     MOV     DPTR,#smbus_protocol
01B7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 425
01B8 120000      R     LCALL   L?0280
01BB 900000      R     MOV     DPTR,#asSCS1+02H
01BE 120000      E     LCALL   ?C?OFFXADD
01C1 120000      R     LCALL   L?0388
                                           ; SOURCE LINE # 426
01C4 120000      R     LCALL   L?0280
01C7 900000      R     MOV     DPTR,#asSCS1+01H
01CA 120000      E     LCALL   ?C?OFFXADD
01CD 120000      R     LCALL   L?0390
                                           ; SOURCE LINE # 427
01D0 120000      R     LCALL   L?0280
01D3 120000      R     LCALL   L?0308
01D6 120000      R     LCALL   L?0287
01D9 120000      R     LCALL   L?0373
                                           ; SOURCE LINE # 428
01DC 120000      R     LCALL   L?0280
01DF 900000      R     MOV     DPTR,#asSCS1+0CH
01E2 120000      E     LCALL   ?C?OFFXADD
                                           ; SOURCE LINE # 429
01E5 120000      R     LCALL   L?0347
01E8 6003              JZ      $ + 5H
01EA 020000      R     LJMP    ?C0046
                                           ; SOURCE LINE # 430
                                           ; SOURCE LINE # 431
01ED 900000      R     MOV     DPTR,#smbus_address
01F0 E0                MOVX    A,@DPTR
01F1 B40108            CJNE    A,#01H,?C0049
                                           ; SOURCE LINE # 432
                                           ; SOURCE LINE # 433
01F4 900000      E     MOV     DPTR,#SMBus1BlockPtr
01F7 120000      R     LCALL   L?0394
                                           ; SOURCE LINE # 434
                                           ; SOURCE LINE # 435
01FA 8010              SJMP    ?C0222
01FC         ?C0049:
                                           ; SOURCE LINE # 437
                                           ; SOURCE LINE # 438
01FC 120000      R     LCALL   L?0280
01FF 120000      R     LCALL   L?0308
0202 120000      R     LCALL   L?0287
0205 900000      E     MOV     DPTR,#SMBus1BlockPtr
0208 CF                XCH     A,R7
0209 F0                MOVX    @DPTR,A
020A A3                INC     DPTR
020B EF                MOV     A,R7
020C         ?C0222:
020C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 439
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 45  

020D 900000      E     MOV     DPTR,#SMBus1BlockPtr
                                           ; SOURCE LINE # 440
                                           ; SOURCE LINE # 441
                                           ; SOURCE LINE # 442
0210 020000      R     LJMP    ?C0230
                                           ; SOURCE LINE # 444
0213         ?C0051:
                                           ; SOURCE LINE # 445
0213 120000      R     LCALL   L?0280
0216 120000      R     LCALL   L?0313
0219 900000      R     MOV     DPTR,#smbus_protocol
021C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 446
021D 120000      R     LCALL   L?0280
0220 A4                MUL     AB
0221 2400        R     ADD     A,#LOW asSCS2+02H
0223 F582              MOV     DPL,A
0225 E4                CLR     A
0226 3400        R     ADDC    A,#HIGH asSCS2+02H
0228 120000      R     LCALL   L?0387
                                           ; SOURCE LINE # 447
022B 120000      R     LCALL   L?0280
022E A4                MUL     AB
022F 2400        R     ADD     A,#LOW asSCS2+01H
0231 F582              MOV     DPL,A
0233 E4                CLR     A
0234 3400        R     ADDC    A,#HIGH asSCS2+01H
0236 120000      R     LCALL   L?0389
                                           ; SOURCE LINE # 448
0239 120000      R     LCALL   L?0280
023C 120000      R     LCALL   L?0285
023F 120000      R     LCALL   L?0373
                                           ; SOURCE LINE # 449
0242 120000      R     LCALL   L?0280
0245 A4                MUL     AB
0246 2400        R     ADD     A,#LOW asSCS2+0CH
0248 F582              MOV     DPL,A
024A E4                CLR     A
024B 3400        R     ADDC    A,#HIGH asSCS2+0CH
                                           ; SOURCE LINE # 450
024D 120000      R     LCALL   L?0346
0250 6003              JZ      $ + 5H
0252 020000      R     LJMP    ?C0046
                                           ; SOURCE LINE # 451
                                           ; SOURCE LINE # 452
0255 900000      R     MOV     DPTR,#smbus_address
0258 E0                MOVX    A,@DPTR
0259 B40108            CJNE    A,#01H,?C0053
                                           ; SOURCE LINE # 453
                                           ; SOURCE LINE # 454
025C 900000      E     MOV     DPTR,#SMBus2BlockPtr
025F 120000      R     LCALL   L?0394
                                           ; SOURCE LINE # 455
                                           ; SOURCE LINE # 456
0262 800D              SJMP    ?C0223
0264         ?C0053:
                                           ; SOURCE LINE # 458
                                           ; SOURCE LINE # 459
0264 120000      R     LCALL   L?0280
0267 120000      R     LCALL   L?0285
026A 900000      E     MOV     DPTR,#SMBus2BlockPtr
026D CF                XCH     A,R7
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 46  

026E F0                MOVX    @DPTR,A
026F A3                INC     DPTR
0270 EF                MOV     A,R7
0271         ?C0223:
0271 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 460
0272 900000      E     MOV     DPTR,#SMBus2BlockPtr
0275         ?C0229:
                                           ; SOURCE LINE # 461
                                           ; SOURCE LINE # 462
                                           ; SOURCE LINE # 463
0275 020000      R     LJMP    ?C0230
                                           ; SOURCE LINE # 465
0278         ?C0055:
                                           ; SOURCE LINE # 466
0278 120000      R     LCALL   L?0280
027B A4                MUL     AB
027C 120000      R     LCALL   L?0330
027F 900000      R     MOV     DPTR,#smbus_protocol
0282 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 467
0283 120000      R     LCALL   L?0280
0286 A4                MUL     AB
0287 2400        R     ADD     A,#LOW asSCS3+02H
0289 F582              MOV     DPL,A
028B E4                CLR     A
028C 3400        R     ADDC    A,#HIGH asSCS3+02H
028E 120000      R     LCALL   L?0387
                                           ; SOURCE LINE # 468
0291 120000      R     LCALL   L?0280
0294 A4                MUL     AB
0295 2400        R     ADD     A,#LOW asSCS3+01H
0297 F582              MOV     DPL,A
0299 E4                CLR     A
029A 3400        R     ADDC    A,#HIGH asSCS3+01H
029C 120000      R     LCALL   L?0389
                                           ; SOURCE LINE # 469
029F 120000      R     LCALL   L?0280
02A2 120000      R     LCALL   L?0344
02A5 120000      R     LCALL   L?0286
02A8 120000      R     LCALL   L?0374
                                           ; SOURCE LINE # 470
02AB 120000      R     LCALL   L?0280
02AE A4                MUL     AB
02AF 2400        R     ADD     A,#LOW asSCS3+0CH
02B1 F582              MOV     DPL,A
02B3 E4                CLR     A
02B4 3400        R     ADDC    A,#HIGH asSCS3+0CH
                                           ; SOURCE LINE # 471
02B6 120000      R     LCALL   L?0346
02B9 7036              JNZ     ?C0046
                                           ; SOURCE LINE # 472
                                           ; SOURCE LINE # 473
02BB 900000      R     MOV     DPTR,#smbus_address
02BE E0                MOVX    A,@DPTR
02BF B40108            CJNE    A,#01H,?C0057
                                           ; SOURCE LINE # 474
                                           ; SOURCE LINE # 475
02C2 900000      E     MOV     DPTR,#SMBus3BlockPtr
02C5 120000      R     LCALL   L?0395
                                           ; SOURCE LINE # 476
                                           ; SOURCE LINE # 477
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 47  

02C8 8010              SJMP    ?C0224
02CA         ?C0057:
                                           ; SOURCE LINE # 479
                                           ; SOURCE LINE # 480
02CA 120000      R     LCALL   L?0280
02CD 120000      R     LCALL   L?0344
02D0 120000      R     LCALL   L?0286
02D3 900000      E     MOV     DPTR,#SMBus3BlockPtr
02D6 CF                XCH     A,R7
02D7 F0                MOVX    @DPTR,A
02D8 A3                INC     DPTR
02D9 EF                MOV     A,R7
02DA         ?C0224:
02DA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 481
02DB 900000      E     MOV     DPTR,#SMBus3BlockPtr
02DE         ?C0230:
02DE 120000      R     LCALL   L?0342
02E1 FF                MOV     R7,A
02E2 900000      R     MOV     DPTR,#channel
02E5 E0                MOVX    A,@DPTR
02E6 75F015            MOV     B,#015H
02E9 900000      E     MOV     DPTR,#asSMBus+0CH
02EC 120000      R     LCALL   L?0270
02EF EF                MOV     A,R7
02F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 482
                                           ; SOURCE LINE # 483
                                           ; SOURCE LINE # 484
                                           ; SOURCE LINE # 486
                                           ; SOURCE LINE # 487
                                           ; SOURCE LINE # 488
02F1         ?C0046:
                                           ; SOURCE LINE # 493
02F1 900000      R     MOV     DPTR,#smbus_protocol
02F4 E0                MOVX    A,@DPTR
02F5 120000      E     LCALL   ?C?CCASE
02F8 0000        R     DW      ?C0087
02FA 00                DB      00H
02FB 0000        R     DW      ?C0062
02FD 01                DB      01H
02FE 0000        R     DW      ?C0065
0300 02                DB      02H
0301 0000        R     DW      ?C0068
0303 03                DB      03H
0304 0000        R     DW      ?C0071
0306 04                DB      04H
0307 0000        R     DW      ?C0074
0309 05                DB      05H
030A 0000        R     DW      ?C0077
030C 06                DB      06H
030D 0000        R     DW      ?C0080
030F 07                DB      07H
0310 0000        R     DW      ?C0083
0312 08                DB      08H
0313 0000              DW      00H
0315 0000        R     DW      ?C0086
                                           ; SOURCE LINE # 494
                                           ; SOURCE LINE # 495
                                           ; SOURCE LINE # 496
                                           ; SOURCE LINE # 498
0317         ?C0062:
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 48  

                                           ; SOURCE LINE # 499
0317 120000      R     LCALL   L?0348
031A B40105            CJNE    A,#01H,?C0063
                                           ; SOURCE LINE # 500
                                           ; SOURCE LINE # 501
031D 120000      R     LCALL   L?0300
                                           ; SOURCE LINE # 502
0320 8003              SJMP    ?C0231
0322         ?C0063:
                                           ; SOURCE LINE # 504
                                           ; SOURCE LINE # 505
0322 120000      R     LCALL   L?0295
0325         ?C0231:
0325 020000      R     LJMP    _PollSMBusSendByte
                                           ; SOURCE LINE # 506
                                           ; SOURCE LINE # 507
                                           ; SOURCE LINE # 509
0328         ?C0065:
                                           ; SOURCE LINE # 510
0328 120000      R     LCALL   L?0348
032B B40109            CJNE    A,#01H,?C0066
                                           ; SOURCE LINE # 511
                                           ; SOURCE LINE # 512
032E E0                MOVX    A,@DPTR
032F FF                MOV     R7,A
0330 900000      E     MOV     DPTR,#DB_SMBusAddr
0333 E0                MOVX    A,@DPTR
0334 FD                MOV     R5,A
                                           ; SOURCE LINE # 513
0335 8007              SJMP    ?C0232
0337         ?C0066:
                                           ; SOURCE LINE # 515
                                           ; SOURCE LINE # 516
0337 E0                MOVX    A,@DPTR
0338 FF                MOV     R7,A
0339 900000      R     MOV     DPTR,#smbus_address
033C E0                MOVX    A,@DPTR
033D FD                MOV     R5,A
033E         ?C0232:
033E 020000      R     LJMP    _PollSMBusReceiveByte
                                           ; SOURCE LINE # 517
                                           ; SOURCE LINE # 518
                                           ; SOURCE LINE # 520
0341         ?C0068:
                                           ; SOURCE LINE # 521
0341 120000      R     LCALL   L?0349
0344 B40105            CJNE    A,#01H,?C0069
                                           ; SOURCE LINE # 522
                                           ; SOURCE LINE # 523
0347 120000      R     LCALL   L?0300
                                           ; SOURCE LINE # 524
034A 8003              SJMP    ?C0233
034C         ?C0069:
                                           ; SOURCE LINE # 526
                                           ; SOURCE LINE # 527
034C 120000      R     LCALL   L?0295
034F         ?C0233:
034F 020000      R     LJMP    _PollReadSMBusByte
                                           ; SOURCE LINE # 528
                                           ; SOURCE LINE # 529
                                           ; SOURCE LINE # 531
0352         ?C0071:
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 49  

                                           ; SOURCE LINE # 532
0352 120000      R     LCALL   L?0349
0355 B40108            CJNE    A,#01H,?C0072
                                           ; SOURCE LINE # 533
                                           ; SOURCE LINE # 534
0358 120000      R     LCALL   L?0301
035B 900000      E     MOV     DPTR,#DB_SMBusData
                                           ; SOURCE LINE # 535
035E 800E              SJMP    ?C0225
0360         ?C0072:
                                           ; SOURCE LINE # 537
                                           ; SOURCE LINE # 538
0360 120000      R     LCALL   L?0295
0363 900000      R     MOV     DPTR,#smbus_data
0366 E0                MOVX    A,@DPTR
0367 F8                MOV     R0,A
0368 A3                INC     DPTR
0369 E0                MOVX    A,@DPTR
036A F582              MOV     DPL,A
036C 8883              MOV     DPH,R0
036E         ?C0225:
036E E0                MOVX    A,@DPTR
036F 900000      R     MOV     DPTR,#?_PollWriteSMBusByte?BYTE+03H
0372 F0                MOVX    @DPTR,A
0373 020000      R     LJMP    _PollWriteSMBusByte
                                           ; SOURCE LINE # 539
                                           ; SOURCE LINE # 540
                                           ; SOURCE LINE # 542
0376         ?C0074:
                                           ; SOURCE LINE # 543
0376 120000      R     LCALL   L?0349
0379 B40105            CJNE    A,#01H,?C0075
                                           ; SOURCE LINE # 544
                                           ; SOURCE LINE # 545
037C 120000      R     LCALL   L?0301
                                           ; SOURCE LINE # 546
037F 8003              SJMP    ?C0234
0381         ?C0075:
                                           ; SOURCE LINE # 548
                                           ; SOURCE LINE # 549
0381 120000      R     LCALL   L?0295
0384         ?C0234:
0384 020000      R     LJMP    _PollReadSMBusWord
                                           ; SOURCE LINE # 550
                                           ; SOURCE LINE # 551
                                           ; SOURCE LINE # 553
0387         ?C0077:
                                           ; SOURCE LINE # 554
0387 900000      R     MOV     DPTR,#smbus_address
038A E0                MOVX    A,@DPTR
038B B40113            CJNE    A,#01H,?C0078
                                           ; SOURCE LINE # 555
                                           ; SOURCE LINE # 556
038E 900000      R     MOV     DPTR,#channel
0391 120000      R     LCALL   L?0301
0394 900000      E     MOV     DPTR,#DB_SMBusData
0397 E0                MOVX    A,@DPTR
0398 900000      R     MOV     DPTR,#?_PollWriteSMBusWord?BYTE+03H
039B F0                MOVX    @DPTR,A
039C 900000      E     MOV     DPTR,#DB_SMBusData+01H
                                           ; SOURCE LINE # 557
039F 8033              SJMP    ?C0226
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 50  

03A1         ?C0078:
                                           ; SOURCE LINE # 559
                                           ; SOURCE LINE # 560
03A1 900000      R     MOV     DPTR,#smbus_data
03A4 E0                MOVX    A,@DPTR
03A5 FE                MOV     R6,A
03A6 A3                INC     DPTR
03A7 E0                MOVX    A,@DPTR
03A8 FF                MOV     R7,A
03A9 7800        E     MOV     R0,#LOW Tmp_XPntr
03AB EE                MOV     A,R6
03AC F6                MOV     @R0,A
03AD FE                MOV     R6,A
03AE 08                INC     R0
03AF EF                MOV     A,R7
03B0 F6                MOV     @R0,A
                                           ; SOURCE LINE # 561
03B1 2401              ADD     A,#01H
03B3 7800        E     MOV     R0,#LOW Tmp_XPntr1+01H
03B5 F6                MOV     @R0,A
03B6 E4                CLR     A
03B7 3E                ADDC    A,R6
03B8 18                DEC     R0
03B9 F6                MOV     @R0,A
                                           ; SOURCE LINE # 562
03BA 120000      R     LCALL   L?0294
03BD 7800        E     MOV     R0,#LOW Tmp_XPntr
03BF E6                MOV     A,@R0
03C0 F583              MOV     DPH,A
03C2 08                INC     R0
03C3 E6                MOV     A,@R0
03C4 F582              MOV     DPL,A
03C6 E0                MOVX    A,@DPTR
03C7 900000      R     MOV     DPTR,#?_PollWriteSMBusWord?BYTE+03H
03CA F0                MOVX    @DPTR,A
03CB 7800        E     MOV     R0,#LOW Tmp_XPntr1
03CD E6                MOV     A,@R0
03CE F583              MOV     DPH,A
03D0 08                INC     R0
03D1 E6                MOV     A,@R0
03D2 F582              MOV     DPL,A
03D4         ?C0226:
03D4 E0                MOVX    A,@DPTR
03D5 900000      R     MOV     DPTR,#?_PollWriteSMBusWord?BYTE+04H
03D8 F0                MOVX    @DPTR,A
03D9 020000      R     LJMP    _PollWriteSMBusWord
                                           ; SOURCE LINE # 563
                                           ; SOURCE LINE # 564
                                           ; SOURCE LINE # 566
03DC         ?C0080:
                                           ; SOURCE LINE # 567
03DC 120000      R     LCALL   L?0298
03DF 120000      R     LCALL   L?0368
03E2 120000      R     LCALL   L?0271
03E5 E4                CLR     A
03E6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 568
03E7 900000      R     MOV     DPTR,#smbus_address
03EA E0                MOVX    A,@DPTR
03EB B4010A            CJNE    A,#01H,?C0081
                                           ; SOURCE LINE # 569
                                           ; SOURCE LINE # 570
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 51  

03EE E4                CLR     A
03EF 900000      E     MOV     DPTR,#DB_SMBusBCunt
03F2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 571
03F3 120000      R     LCALL   L?0302
                                           ; SOURCE LINE # 572
03F6 8003              SJMP    ?C0235
03F8         ?C0081:
                                           ; SOURCE LINE # 574
                                           ; SOURCE LINE # 575
03F8 120000      R     LCALL   L?0294
03FB         ?C0235:
03FB 020000      R     LJMP    _PollReadSMBusBlock
                                           ; SOURCE LINE # 576
                                           ; SOURCE LINE # 577
                                           ; SOURCE LINE # 579
03FE         ?C0083:
                                           ; SOURCE LINE # 580
03FE 900000      R     MOV     DPTR,#smbus_address
0401 E0                MOVX    A,@DPTR
0402 6401              XRL     A,#01H
0404 701D              JNZ     ?C0084
                                           ; SOURCE LINE # 581
                                           ; SOURCE LINE # 582
0406 900000      E     MOV     DPTR,#DB_SMBusBCunt
0409 E0                MOVX    A,@DPTR
040A FE                MOV     R6,A
040B 120000      R     LCALL   L?0298
040E 120000      R     LCALL   L?0368
0411 120000      R     LCALL   L?0271
0414 EE                MOV     A,R6
0415 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 583
0416 120000      R     LCALL   L?0302
0419 900000      E     MOV     DPTR,#DB_SMBusBCunt
041C E0                MOVX    A,@DPTR
041D 900000      R     MOV     DPTR,#?_PollWriteSMBusBlock?BYTE+03H
0420 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 584
0421 8018              SJMP    ?C0236
0423         ?C0084:
                                           ; SOURCE LINE # 586
                                           ; SOURCE LINE # 587
0423 900000      R     MOV     DPTR,#smbus_Bcunt
0426 E0                MOVX    A,@DPTR
0427 FE                MOV     R6,A
0428 120000      R     LCALL   L?0298
042B 120000      R     LCALL   L?0369
042E 120000      R     LCALL   L?0271
0431 EE                MOV     A,R6
0432 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 588
0433 120000      R     LCALL   L?0296
0436 900000      R     MOV     DPTR,#?_PollWriteSMBusBlock?BYTE+03H
0439 EE                MOV     A,R6
043A F0                MOVX    @DPTR,A
043B         ?C0236:
043B 020000      R     LJMP    _PollWriteSMBusBlock
                                           ; SOURCE LINE # 589
                                           ; SOURCE LINE # 590
                                           ; SOURCE LINE # 592
043E         ?C0086:
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 52  

                                           ; SOURCE LINE # 593
043E 900000      R     MOV     DPTR,#channel
0441 120000      R     LCALL   L?0272
0444 E4                CLR     A
0445 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 594
                                           ; SOURCE LINE # 595
                                           ; SOURCE LINE # 596
                                           ; SOURCE LINE # 597
                                           ; SOURCE LINE # 598
0446         ?C0087:
0446 22                RET     
             ; FUNCTION _SMBusCenterSelection (END)

             ; FUNCTION SMBusCenter (BEGIN)
                                           ; SOURCE LINE # 603
                                           ; SOURCE LINE # 604
                                           ; SOURCE LINE # 605
0000 900000      E     MOV     DPTR,#SMBusSelection
0003 E0                MOVX    A,@DPTR
0004 04                INC     A
0005 F0                MOVX    @DPTR,A
0006 C3                CLR     C
0007 9403              SUBB    A,#03H
0009 4002              JC      ?C0088
                                           ; SOURCE LINE # 606
                                           ; SOURCE LINE # 607
000B E4                CLR     A
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 608
000D         ?C0088:
                                           ; SOURCE LINE # 609
000D 900000      E     MOV     DPTR,#SMBusSelection
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 020000      R     LJMP    _SMBusCenterSelection
             ; FUNCTION SMBusCenter (END)

             ; FUNCTION _WatiSMBusCHxFree (BEGIN)
                                           ; SOURCE LINE # 615
0000 900000      R     MOV     DPTR,#channel
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 616
                                           ; SOURCE LINE # 619
0005 C28E              CLR     TR1
                                           ; SOURCE LINE # 620
0007 C2AB              CLR     ET1
                                           ; SOURCE LINE # 621
0009 00                NOP     
                                           ; SOURCE LINE # 622
000A 00                NOP     
                                           ; SOURCE LINE # 623
000B 00                NOP     
                                           ; SOURCE LINE # 624
000C 00                NOP     
                                           ; SOURCE LINE # 625
000D 758DA6            MOV     TH1,#0A6H
                                           ; SOURCE LINE # 626
0010 758B29            MOV     TL1,#029H
                                           ; SOURCE LINE # 627
0013 C28F              CLR     TF1
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 53  

                                           ; SOURCE LINE # 628
0015 D28E              SETB    TR1
                                           ; SOURCE LINE # 630
0017 120000      R     LCALL   L?0321
001A 120000      R     LCALL   L?0275
001D E0                MOVX    A,@DPTR
001E 900000      R     MOV     DPTR,#tempSMBusindex
0021 F0                MOVX    @DPTR,A
0022         ?C0090:
                                           ; SOURCE LINE # 632
0022 900000      R     MOV     DPTR,#channel
0025 120000      R     LCALL   L?0299
0028 120000      R     LCALL   L?0341
002B 120000      R     LCALL   L?0271
002E E0                MOVX    A,@DPTR
002F 7003              JNZ     $ + 5H
0031 020000      R     LJMP    ?C0091
                                           ; SOURCE LINE # 633
                                           ; SOURCE LINE # 634
0034 EF                MOV     A,R7
0035 120000      R     LCALL   L?0391
0038 120000      R     LCALL   L?0275
003B E0                MOVX    A,@DPTR
003C 6401              XRL     A,#01H
003E 6022              JZ      ?C0093
0040 900000      R     MOV     DPTR,#channel
0043 E0                MOVX    A,@DPTR
0044 120000      R     LCALL   L?0268
0047 120000      R     LCALL   L?0281
004A E4                CLR     A
004B 93                MOVC    A,@A+DPTR
004C FF                MOV     R7,A
004D EE                MOV     A,R6
004E 5F                ANL     A,R7
004F 605A              JZ      ?C0092
0051 900000      R     MOV     DPTR,#channel
0054 E0                MOVX    A,@DPTR
0055 75F015            MOV     B,#015H
0058 900000      E     MOV     DPTR,#asSMBus+010H
005B 120000      R     LCALL   L?0270
005E E0                MOVX    A,@DPTR
005F 5F                ANL     A,R7
0060 6049              JZ      ?C0092
0062         ?C0093:
                                           ; SOURCE LINE # 636
                                           ; SOURCE LINE # 637
0062 900000      R     MOV     DPTR,#channel
0065 120000      R     LCALL   L?0266
0068 C083              PUSH    DPH
006A C082              PUSH    DPL
006C 120000      R     LCALL   L?0281
006F E4                CLR     A
0070 93                MOVC    A,@A+DPTR
0071 FF                MOV     R7,A
0072 F4                CPL     A
0073 FD                MOV     R5,A
0074 EE                MOV     A,R6
0075 5D                ANL     A,R5
0076 D082              POP     DPL
0078 D083              POP     DPH
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 638
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 54  

007B 900000      R     MOV     DPTR,#channel
007E E0                MOVX    A,@DPTR
007F FE                MOV     R6,A
0080 75F015            MOV     B,#015H
0083 900000      E     MOV     DPTR,#asSMBus+010H
0086 120000      R     LCALL   L?0270
0089 EF                MOV     A,R7
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 639
008B EE                MOV     A,R6
008C 120000      R     LCALL   L?0391
008F 120000      R     LCALL   L?0275
0092 E4                CLR     A
0093 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 640
0094 900000      R     MOV     DPTR,#channel
0097 E0                MOVX    A,@DPTR
0098 75F00E            MOV     B,#0EH
009B A4                MUL     AB
009C 2400        R     ADD     A,#LOW asSSC+0CH
009E F582              MOV     DPL,A
00A0 E4                CLR     A
00A1 3400        R     ADDC    A,#HIGH asSSC+0CH
00A3 F583              MOV     DPH,A
00A5 120000      R     LCALL   L?0375
                                           ; SOURCE LINE # 641
00A8 020000      R     LJMP    ?C0090
00AB         ?C0092:
                                           ; SOURCE LINE # 643
                                           ; SOURCE LINE # 644
00AB 208F03            JB      TF1,$ + 6H
00AE 020000      R     LJMP    ?C0090
                                           ; SOURCE LINE # 645
                                           ; SOURCE LINE # 648
00B1 900000      R     MOV     DPTR,#channel
00B4 E0                MOVX    A,@DPTR
00B5 FF                MOV     R7,A
00B6 120000      E     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 658
00B9 900000      R     MOV     DPTR,#channel
00BC E0                MOVX    A,@DPTR
00BD 14                DEC     A
00BE 603B              JZ      ?C0098
00C0 14                DEC     A
00C1 606A              JZ      ?C0099
00C3 2402              ADD     A,#02H
00C5 6003              JZ      $ + 5H
00C7 020000      R     LJMP    ?C0096
                                           ; SOURCE LINE # 659
                                           ; SOURCE LINE # 660
00CA         ?C0097:
                                           ; SOURCE LINE # 661
00CA 120000      R     LCALL   L?0376
00CD 900000      R     MOV     DPTR,#asSCS1+06H
00D0 120000      R     LCALL   L?0270
00D3 C083              PUSH    DPH
00D5 C082              PUSH    DPL
00D7 E0                MOVX    A,@DPTR
00D8 FE                MOV     R6,A
00D9 75F00D            MOV     B,#0DH
00DC EF                MOV     A,R7
00DD 120000      R     LCALL   L?0353
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 55  

00E0 E4                CLR     A
00E1 93                MOVC    A,@A+DPTR
00E2 F4                CPL     A
00E3 FF                MOV     R7,A
00E4 EE                MOV     A,R6
00E5 5F                ANL     A,R7
00E6 D082              POP     DPL
00E8 D083              POP     DPH
00EA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 662
00EB 900000      R     MOV     DPTR,#tempSMBusindex
00EE E0                MOVX    A,@DPTR
00EF 75F00D            MOV     B,#0DH
00F2 900000      R     MOV     DPTR,#asSCS1+0AH
00F5 120000      E     LCALL   ?C?OFFXADD
                                           ; SOURCE LINE # 663
00F8 020000      R     LJMP    ?C0238
                                           ; SOURCE LINE # 665
00FB         ?C0098:
                                           ; SOURCE LINE # 666
00FB 120000      R     LCALL   L?0376
00FE A4                MUL     AB
00FF 2400        R     ADD     A,#LOW asSCS2+06H
0101 F582              MOV     DPL,A
0103 E4                CLR     A
0104 3400        R     ADDC    A,#HIGH asSCS2+06H
0106 F583              MOV     DPH,A
0108 120000      R     LCALL   L?0271
010B C083              PUSH    DPH
010D C082              PUSH    DPL
010F E0                MOVX    A,@DPTR
0110 FE                MOV     R6,A
0111 EF                MOV     A,R7
0112 75F00D            MOV     B,#0DH
0115 120000      R     LCALL   L?0386
0118 93                MOVC    A,@A+DPTR
0119 F4                CPL     A
011A FF                MOV     R7,A
011B EE                MOV     A,R6
011C 5F                ANL     A,R7
011D D082              POP     DPL
011F D083              POP     DPH
0121 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 667
0122 900000      R     MOV     DPTR,#tempSMBusindex
0125 E0                MOVX    A,@DPTR
0126 120000      R     LCALL   L?0364
0129 F583              MOV     DPH,A
012B         ?C0237:
                                           ; SOURCE LINE # 668
012B 802E              SJMP    ?C0238
                                           ; SOURCE LINE # 670
012D         ?C0099:
                                           ; SOURCE LINE # 671
012D 120000      R     LCALL   L?0377
0130 120000      R     LCALL   L?0355
0133 F583              MOV     DPH,A
0135 120000      R     LCALL   L?0271
0138 C083              PUSH    DPH
013A C082              PUSH    DPL
013C E0                MOVX    A,@DPTR
013D FE                MOV     R6,A
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 56  

013E EF                MOV     A,R7
013F 75F00D            MOV     B,#0DH
0142 120000      R     LCALL   L?0358
0145 F583              MOV     DPH,A
0147 E4                CLR     A
0148 93                MOVC    A,@A+DPTR
0149 F4                CPL     A
014A FF                MOV     R7,A
014B EE                MOV     A,R6
014C 5F                ANL     A,R7
014D D082              POP     DPL
014F D083              POP     DPH
0151 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 672
0152 900000      R     MOV     DPTR,#tempSMBusindex
0155 E0                MOVX    A,@DPTR
0156 120000      R     LCALL   L?0366
0159 F583              MOV     DPH,A
015B         ?C0238:
015B 120000      R     LCALL   L?0375
                                           ; SOURCE LINE # 673
                                           ; SOURCE LINE # 674
015E         ?C0096:
                                           ; SOURCE LINE # 679
015E 900000      R     MOV     DPTR,#channel
0161 120000      R     LCALL   L?0299
0164 120000      R     LCALL   L?0341
0167 120000      R     LCALL   L?0271
016A E4                CLR     A
016B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 680
016C 900000      R     MOV     DPTR,#tempSMBusindex
016F E0                MOVX    A,@DPTR
0170 04                INC     A
0171 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 681
0172 120000      R     LCALL   L?0362
0175 120000      R     LCALL   L?0275
0178 E0                MOVX    A,@DPTR
0179 FF                MOV     R7,A
017A 900000      R     MOV     DPTR,#tempSMBusindex
017D E0                MOVX    A,@DPTR
017E C3                CLR     C
017F 9F                SUBB    A,R7
0180 4002              JC      ?C0100
                                           ; SOURCE LINE # 682
                                           ; SOURCE LINE # 683
0182 E4                CLR     A
0183 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 684
0184         ?C0100:
                                           ; SOURCE LINE # 685
0184 900000      R     MOV     DPTR,#tempSMBusindex
0187 E0                MOVX    A,@DPTR
0188 FF                MOV     R7,A
0189 900000      R     MOV     DPTR,#channel
018C 120000      R     LCALL   L?0322
018F F583              MOV     DPH,A
0191 120000      R     LCALL   L?0271
0194 EF                MOV     A,R7
0195 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 686
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 57  

                                           ; SOURCE LINE # 687
                                           ; SOURCE LINE # 688
                                           ; SOURCE LINE # 689
0196         ?C0091:
                                           ; SOURCE LINE # 691
0196 C28E              CLR     TR1
                                           ; SOURCE LINE # 692
0198 C28F              CLR     TF1
                                           ; SOURCE LINE # 693
019A D2AB              SETB    ET1
                                           ; SOURCE LINE # 694
019C 22                RET     
             ; FUNCTION _WatiSMBusCHxFree (END)

             ; FUNCTION InitSMBus (BEGIN)
                                           ; SOURCE LINE # 711
                                           ; SOURCE LINE # 712
                                           ; SOURCE LINE # 713
0000 E4                CLR     A
0001 900000      E     MOV     DPTR,#DB_SMBusAddr
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 714
0005 900000      E     MOV     DPTR,#DB_SMBusFlag1
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 715
0009 900000      E     MOV     DPTR,#DB_SMBusFlag2
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 716
000D 900000      E     MOV     DPTR,#DB_SMBusFlag3
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 718
0011 900000      E     MOV     DPTR,#DB_SMBusAck1
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 719
0015 900000      E     MOV     DPTR,#DB_SMBusACDID
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 721
0019 020000      R     LJMP    CheckSMBusTableSize
             ; FUNCTION InitSMBus (END)

             ; FUNCTION _PollSMBusReceiveByte (BEGIN)
                                           ; SOURCE LINE # 727
0000 900000      R     MOV     DPTR,#Addr
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#Channel
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 728
                                           ; SOURCE LINE # 729
000A E4                CLR     A
000B FD                MOV     R5,A
000C 120000      E     LCALL   _CheckSMBusInterfaceCanbeUse
000F EF                MOV     A,R7
0010 900000      R     MOV     DPTR,#Channel
0013 7006              JNZ     ?C0103
                                           ; SOURCE LINE # 730
                                           ; SOURCE LINE # 731
0015 120000      R     LCALL   L?0272
0018 E4                CLR     A
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 732
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 58  

001A 22                RET     
001B         ?C0103:
                                           ; SOURCE LINE # 734
                                           ; SOURCE LINE # 735
001B 120000      R     LCALL   L?0266
001E C083              PUSH    DPH
0020 C082              PUSH    DPL
0022 120000      R     LCALL   L?0282
0025 E4                CLR     A
0026 93                MOVC    A,@A+DPTR
0027 FF                MOV     R7,A
0028 EE                MOV     A,R6
0029 4F                ORL     A,R7
002A D082              POP     DPL
002C D083              POP     DPH
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 736
002F 900000      R     MOV     DPTR,#Addr
0032 E0                MOVX    A,@DPTR
0033 900000      R     MOV     DPTR,#Channel
0036 120000      R     LCALL   L?0325
0039 120000      R     LCALL   L?0270
                                           ; SOURCE LINE # 738
003C 120000      R     LCALL   L?0288
003F 120000      R     LCALL   L?0276
0042 7445              MOV     A,#045H
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 739
                                           ; SOURCE LINE # 740
0045         ?C0105:
0045 22                RET     
             ; FUNCTION _PollSMBusReceiveByte (END)

             ; FUNCTION _PollSMBusSendByte (BEGIN)
                                           ; SOURCE LINE # 745
0000 900000      R     MOV     DPTR,#Addr
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EB                MOV     A,R3
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#Channel
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 746
                                           ; SOURCE LINE # 747
000D E4                CLR     A
000E FD                MOV     R5,A
000F 120000      E     LCALL   _CheckSMBusInterfaceCanbeUse
0012 EF                MOV     A,R7
0013 900000      R     MOV     DPTR,#Channel
0016 7006              JNZ     ?C0106
                                           ; SOURCE LINE # 748
                                           ; SOURCE LINE # 749
0018 120000      R     LCALL   L?0273
001B E4                CLR     A
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 750
001D 22                RET     
001E         ?C0106:
                                           ; SOURCE LINE # 752
                                           ; SOURCE LINE # 753
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 59  

001E 120000      R     LCALL   L?0267
0021 C083              PUSH    DPH
0023 C082              PUSH    DPL
0025 120000      R     LCALL   L?0282
0028 E4                CLR     A
0029 93                MOVC    A,@A+DPTR
002A FF                MOV     R7,A
002B EE                MOV     A,R6
002C 4F                ORL     A,R7
002D D082              POP     DPL
002F D083              POP     DPH
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 754
0032 900000      R     MOV     DPTR,#Addr
0035 E0                MOVX    A,@DPTR
0036 54FE              ANL     A,#0FEH
0038 FF                MOV     R7,A
0039 900000      R     MOV     DPTR,#Channel
003C 120000      R     LCALL   L?0326
003F 120000      R     LCALL   L?0270
0042 EF                MOV     A,R7
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 755
0044 900000      R     MOV     DPTR,#cmd
0047 120000      R     LCALL   L?0314
004A 120000      R     LCALL   L?0270
                                           ; SOURCE LINE # 757
004D 120000      R     LCALL   L?0288
0050 120000      R     LCALL   L?0276
0053 7445              MOV     A,#045H
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 758
                                           ; SOURCE LINE # 759
0056         ?C0108:
0056 22                RET     
             ; FUNCTION _PollSMBusSendByte (END)

             ; FUNCTION _PollReadSMBusByte (BEGIN)
                                           ; SOURCE LINE # 764
0000 900000      R     MOV     DPTR,#Addr
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EB                MOV     A,R3
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#Channel
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 765
                                           ; SOURCE LINE # 766
000D E4                CLR     A
000E FD                MOV     R5,A
000F 120000      E     LCALL   _CheckSMBusInterfaceCanbeUse
0012 EF                MOV     A,R7
0013 900000      R     MOV     DPTR,#Channel
0016 7006              JNZ     ?C0109
                                           ; SOURCE LINE # 767
                                           ; SOURCE LINE # 768
0018 120000      R     LCALL   L?0273
001B E4                CLR     A
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 769
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 60  

001D 22                RET     
001E         ?C0109:
                                           ; SOURCE LINE # 771
                                           ; SOURCE LINE # 772
001E 120000      R     LCALL   L?0267
0021 C083              PUSH    DPH
0023 C082              PUSH    DPL
0025 120000      R     LCALL   L?0282
0028 E4                CLR     A
0029 93                MOVC    A,@A+DPTR
002A FF                MOV     R7,A
002B EE                MOV     A,R6
002C 4F                ORL     A,R7
002D D082              POP     DPL
002F D083              POP     DPH
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 773
0032 900000      R     MOV     DPTR,#Addr
0035 E0                MOVX    A,@DPTR
0036 900000      R     MOV     DPTR,#Channel
0039 120000      R     LCALL   L?0325
003C 120000      R     LCALL   L?0270
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 774
0041 900000      R     MOV     DPTR,#Comd
0044 120000      R     LCALL   L?0314
0047 120000      R     LCALL   L?0270
                                           ; SOURCE LINE # 776
004A 120000      R     LCALL   L?0289
004D 120000      R     LCALL   L?0276
0050 7449              MOV     A,#049H
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 777
                                           ; SOURCE LINE # 778
0053         ?C0111:
0053 22                RET     
             ; FUNCTION _PollReadSMBusByte (END)

             ; FUNCTION _PollWriteSMBusByte (BEGIN)
                                           ; SOURCE LINE # 783
0000 900000      R     MOV     DPTR,#Addr
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EB                MOV     A,R3
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#Channel
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 784
                                           ; SOURCE LINE # 785
000D E4                CLR     A
000E FD                MOV     R5,A
000F 120000      E     LCALL   _CheckSMBusInterfaceCanbeUse
0012 EF                MOV     A,R7
0013 900000      R     MOV     DPTR,#Channel
0016 7006              JNZ     ?C0112
                                           ; SOURCE LINE # 786
                                           ; SOURCE LINE # 787
0018 120000      R     LCALL   L?0273
001B E4                CLR     A
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 61  

001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 788
001D 22                RET     
001E         ?C0112:
                                           ; SOURCE LINE # 790
                                           ; SOURCE LINE # 791
001E 120000      R     LCALL   L?0267
0021 C083              PUSH    DPH
0023 C082              PUSH    DPL
0025 120000      R     LCALL   L?0282
0028 E4                CLR     A
0029 93                MOVC    A,@A+DPTR
002A FF                MOV     R7,A
002B EE                MOV     A,R6
002C 4F                ORL     A,R7
002D D082              POP     DPL
002F D083              POP     DPH
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 792
0032 900000      R     MOV     DPTR,#data1
0035 E0                MOVX    A,@DPTR
0036 900000      R     MOV     DPTR,#Channel
0039 120000      R     LCALL   L?0370
003C 120000      R     LCALL   L?0270
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 793
0041 900000      R     MOV     DPTR,#Addr
0044 120000      R     LCALL   L?0350
0047 120000      R     LCALL   L?0270
004A EF                MOV     A,R7
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 794
004C 900000      R     MOV     DPTR,#Comd
004F 120000      R     LCALL   L?0315
0052 120000      R     LCALL   L?0270
                                           ; SOURCE LINE # 796
0055 120000      R     LCALL   L?0289
0058 120000      R     LCALL   L?0276
005B 7449              MOV     A,#049H
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 797
                                           ; SOURCE LINE # 798
005E         ?C0114:
005E 22                RET     
             ; FUNCTION _PollWriteSMBusByte (END)

             ; FUNCTION _PollReadSMBusWord (BEGIN)
                                           ; SOURCE LINE # 803
0000 900000      R     MOV     DPTR,#Addr
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EB                MOV     A,R3
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#Channel
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 804
                                           ; SOURCE LINE # 805
000D E4                CLR     A
000E FD                MOV     R5,A
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 62  

000F 120000      E     LCALL   _CheckSMBusInterfaceCanbeUse
0012 EF                MOV     A,R7
0013 900000      R     MOV     DPTR,#Channel
0016 7006              JNZ     ?C0115
                                           ; SOURCE LINE # 806
                                           ; SOURCE LINE # 807
0018 120000      R     LCALL   L?0273
001B E4                CLR     A
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 808
001D 22                RET     
001E         ?C0115:
                                           ; SOURCE LINE # 810
                                           ; SOURCE LINE # 811
001E 120000      R     LCALL   L?0267
0021 C083              PUSH    DPH
0023 C082              PUSH    DPL
0025 120000      R     LCALL   L?0282
0028 E4                CLR     A
0029 93                MOVC    A,@A+DPTR
002A FF                MOV     R7,A
002B EE                MOV     A,R6
002C 4F                ORL     A,R7
002D D082              POP     DPL
002F D083              POP     DPH
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 812
0032 900000      R     MOV     DPTR,#Addr
0035 E0                MOVX    A,@DPTR
0036 4401              ORL     A,#01H
0038 FF                MOV     R7,A
0039 900000      R     MOV     DPTR,#Channel
003C 120000      R     LCALL   L?0326
003F 120000      R     LCALL   L?0270
0042 EF                MOV     A,R7
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 813
0044 900000      R     MOV     DPTR,#Comd
0047 120000      R     LCALL   L?0315
004A 120000      R     LCALL   L?0270
                                           ; SOURCE LINE # 815
004D 120000      R     LCALL   L?0289
0050 120000      R     LCALL   L?0276
0053 744D              MOV     A,#04DH
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 816
                                           ; SOURCE LINE # 817
0056         ?C0117:
0056 22                RET     
             ; FUNCTION _PollReadSMBusWord (END)

             ; FUNCTION _PollWriteSMBusWord (BEGIN)
                                           ; SOURCE LINE # 822
0000 900000      R     MOV     DPTR,#Addr
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EB                MOV     A,R3
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#Channel
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 63  

                                           ; SOURCE LINE # 823
                                           ; SOURCE LINE # 824
000D E4                CLR     A
000E FD                MOV     R5,A
000F 120000      E     LCALL   _CheckSMBusInterfaceCanbeUse
0012 EF                MOV     A,R7
0013 900000      R     MOV     DPTR,#Channel
0016 7006              JNZ     ?C0118
                                           ; SOURCE LINE # 825
                                           ; SOURCE LINE # 826
0018 120000      R     LCALL   L?0273
001B E4                CLR     A
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 827
001D 22                RET     
001E         ?C0118:
                                           ; SOURCE LINE # 829
                                           ; SOURCE LINE # 830
001E 120000      R     LCALL   L?0267
0021 C083              PUSH    DPH
0023 C082              PUSH    DPL
0025 120000      R     LCALL   L?0282
0028 E4                CLR     A
0029 93                MOVC    A,@A+DPTR
002A FF                MOV     R7,A
002B EE                MOV     A,R6
002C 4F                ORL     A,R7
002D D082              POP     DPL
002F D083              POP     DPH
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 831
0032 900000      R     MOV     DPTR,#data1
0035 E0                MOVX    A,@DPTR
0036 900000      R     MOV     DPTR,#Channel
0039 120000      R     LCALL   L?0370
003C 120000      R     LCALL   L?0270
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 832
0041 900000      R     MOV     DPTR,#data2
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 75F015            MOV     B,#015H
0049 EE                MOV     A,R6
004A 900000      E     MOV     DPTR,#asSMBus+0AH
004D 120000      R     LCALL   L?0270
0050 EF                MOV     A,R7
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 833
0052 900000      R     MOV     DPTR,#Addr
0055 120000      R     LCALL   L?0350
0058 120000      R     LCALL   L?0270
005B EF                MOV     A,R7
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 834
005D 900000      R     MOV     DPTR,#Comd
0060 120000      R     LCALL   L?0315
0063 120000      R     LCALL   L?0270
                                           ; SOURCE LINE # 836
0066 120000      R     LCALL   L?0289
0069 120000      R     LCALL   L?0276
006C 744D              MOV     A,#04DH
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 64  

006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 837
                                           ; SOURCE LINE # 838
006F         ?C0120:
006F 22                RET     
             ; FUNCTION _PollWriteSMBusWord (END)

             ; FUNCTION _PollReadSMBusBlock (BEGIN)
                                           ; SOURCE LINE # 843
0000 900000      R     MOV     DPTR,#Addr
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EB                MOV     A,R3
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#Channel
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 844
                                           ; SOURCE LINE # 845
000D E4                CLR     A
000E FD                MOV     R5,A
000F 120000      E     LCALL   _CheckSMBusInterfaceCanbeUse
0012 EF                MOV     A,R7
0013 900000      R     MOV     DPTR,#Channel
0016 7006              JNZ     ?C0121
                                           ; SOURCE LINE # 846
                                           ; SOURCE LINE # 847
0018 120000      R     LCALL   L?0273
001B E4                CLR     A
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 848
001D 22                RET     
001E         ?C0121:
                                           ; SOURCE LINE # 850
                                           ; SOURCE LINE # 851
001E 120000      R     LCALL   L?0267
0021 C083              PUSH    DPH
0023 C082              PUSH    DPL
0025 120000      R     LCALL   L?0282
0028 E4                CLR     A
0029 93                MOVC    A,@A+DPTR
002A FF                MOV     R7,A
002B EE                MOV     A,R6
002C 4F                ORL     A,R7
002D D082              POP     DPL
002F D083              POP     DPH
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 852
0032 900000      R     MOV     DPTR,#Addr
0035 E0                MOVX    A,@DPTR
0036 4401              ORL     A,#01H
0038 FF                MOV     R7,A
0039 900000      R     MOV     DPTR,#Channel
003C 120000      R     LCALL   L?0326
003F 120000      R     LCALL   L?0270
0042 EF                MOV     A,R7
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 853
0044 900000      R     MOV     DPTR,#Comd
0047 120000      R     LCALL   L?0315
004A 120000      R     LCALL   L?0270
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 65  

                                           ; SOURCE LINE # 854
004D 120000      R     LCALL   L?0289
0050 120000      R     LCALL   L?0276
0053 7455              MOV     A,#055H
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 855
                                           ; SOURCE LINE # 856
0056         ?C0123:
0056 22                RET     
             ; FUNCTION _PollReadSMBusBlock (END)

             ; FUNCTION _PollWriteSMBusBlock (BEGIN)
                                           ; SOURCE LINE # 861
0000 900000      R     MOV     DPTR,#Addr
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EB                MOV     A,R3
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#Channel
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 862
                                           ; SOURCE LINE # 863
000D E4                CLR     A
000E FD                MOV     R5,A
000F 120000      E     LCALL   _CheckSMBusInterfaceCanbeUse
0012 EF                MOV     A,R7
0013 900000      R     MOV     DPTR,#Channel
0016 7006              JNZ     ?C0124
                                           ; SOURCE LINE # 864
                                           ; SOURCE LINE # 865
0018 120000      R     LCALL   L?0273
001B E4                CLR     A
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 866
001D 22                RET     
001E         ?C0124:
                                           ; SOURCE LINE # 868
                                           ; SOURCE LINE # 869
001E 120000      R     LCALL   L?0267
0021 C083              PUSH    DPH
0023 C082              PUSH    DPL
0025 120000      R     LCALL   L?0282
0028 E4                CLR     A
0029 93                MOVC    A,@A+DPTR
002A FF                MOV     R7,A
002B EE                MOV     A,R6
002C 4F                ORL     A,R7
002D D082              POP     DPL
002F D083              POP     DPH
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 870
0032 900000      R     MOV     DPTR,#ByteCunt
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
0037 900000      R     MOV     DPTR,#Channel
003A 120000      R     LCALL   L?0371
003D 120000      R     LCALL   L?0270
0040 EF                MOV     A,R7
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 871
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 66  

0042 900000      R     MOV     DPTR,#Addr
0045 120000      R     LCALL   L?0351
0048 120000      R     LCALL   L?0270
004B EF                MOV     A,R7
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 872
004D 900000      R     MOV     DPTR,#Comd
0050 120000      R     LCALL   L?0315
0053 120000      R     LCALL   L?0270
                                           ; SOURCE LINE # 873
0056 120000      R     LCALL   L?0289
0059 120000      R     LCALL   L?0276
005C 7455              MOV     A,#055H
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 874
                                           ; SOURCE LINE # 875
005F         ?C0126:
005F 22                RET     
             ; FUNCTION _PollWriteSMBusBlock (END)

             ; FUNCTION service_smbus1 (BEGIN)
                                           ; SOURCE LINE # 880
                                           ; SOURCE LINE # 881
                                           ; SOURCE LINE # 882
0000 900000      E     MOV     DPTR,#SMBus1InUsing
0003 E0                MOVX    A,@DPTR
0004 7003              JNZ     $ + 5H
0006 020000      R     LJMP    ?C0127
                                           ; SOURCE LINE # 883
                                           ; SOURCE LINE # 884
0009 900000      E     MOV     DPTR,#SMBusXStatus
000C E0                MOVX    A,@DPTR
000D 54FC              ANL     A,#0FCH
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 886
0010 900000      E     MOV     DPTR,#HOSTA_A
0013 E0                MOVX    A,@DPTR
0014 547C              ANL     A,#07CH
0016 600D              JZ      ?C0128
                                           ; SOURCE LINE # 887
                                           ; SOURCE LINE # 888
0018 E0                MOVX    A,@DPTR
0019 5418              ANL     A,#018H
001B 6005              JZ      ?C0129
                                           ; SOURCE LINE # 889
                                           ; SOURCE LINE # 890
001D E4                CLR     A
001E FF                MOV     R7,A
001F 120000      E     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 891
0022         ?C0129:
                                           ; SOURCE LINE # 892
                                           ; SOURCE LINE # 893
0022 020000      R     LJMP    ?C0243
0025         ?C0128:
                                           ; SOURCE LINE # 895
                                           ; SOURCE LINE # 899
0025 120000      R     LCALL   L?0316
0028 6407              XRL     A,#07H
002A 706D              JNZ     ?C0131
                                           ; SOURCE LINE # 900
                                           ; SOURCE LINE # 901
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 67  

002C 900000      E     MOV     DPTR,#HOSTA_A
002F E0                MOVX    A,@DPTR
0030 5482              ANL     A,#082H
0032 6063              JZ      ?C0132
                                           ; SOURCE LINE # 902
                                           ; SOURCE LINE # 903
0034 900000      E     MOV     DPTR,#SMBus1ByteCunt
0037 E0                MOVX    A,@DPTR
0038 7037              JNZ     ?C0133
                                           ; SOURCE LINE # 904
                                           ; SOURCE LINE # 905
003A 120000      R     LCALL   L?0306
003D 120000      R     LCALL   L?0287
0040 900000      E     MOV     DPTR,#SMBus1BlockPtr
0043 CF                XCH     A,R7
0044 F0                MOVX    @DPTR,A
0045 A3                INC     DPTR
0046 EF                MOV     A,R7
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 906
0048 900000      E     MOV     DPTR,#D0REG_A
004B E0                MOVX    A,@DPTR
004C 900000      E     MOV     DPTR,#SMBus1ByteCunt
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 908
0050 E0                MOVX    A,@DPTR
0051 D3                SETB    C
0052 9420              SUBB    A,#020H
0054 4003              JC      ?C0134
                                           ; SOURCE LINE # 909
                                           ; SOURCE LINE # 910
0056 7420              MOV     A,#020H
0058 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 911
0059         ?C0134:
                                           ; SOURCE LINE # 913
0059 900000      E     MOV     DPTR,#SMBus1ByteCunt
005C E0                MOVX    A,@DPTR
005D 900000      E     MOV     DPTR,#SMB_BCNT
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 914
0061 900000      E     MOV     DPTR,#SMBus1ByteCunt
0064 E0                MOVX    A,@DPTR
0065 900000      E     MOV     DPTR,#DB_SMBusBCunt
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 916
0069 120000      R     LCALL   L?0290
                                           ; SOURCE LINE # 917
006C 120000      R     LCALL   L?0396
                                           ; SOURCE LINE # 918
006F 8014              SJMP    ?C0135
0071         ?C0133:
                                           ; SOURCE LINE # 920
                                           ; SOURCE LINE # 921
0071 120000      R     LCALL   L?0332
                                           ; SOURCE LINE # 922
0074 120000      R     LCALL   L?0290
                                           ; SOURCE LINE # 923
0077 120000      R     LCALL   L?0396
                                           ; SOURCE LINE # 924
007A E0                MOVX    A,@DPTR
007B B40107            CJNE    A,#01H,?C0135
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 68  

                                           ; SOURCE LINE # 925
                                           ; SOURCE LINE # 926
007E 900000      E     MOV     DPTR,#HOCTL_A
0081 E0                MOVX    A,@DPTR
0082 4420              ORL     A,#020H
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 927
                                           ; SOURCE LINE # 928
0085         ?C0135:
                                           ; SOURCE LINE # 930
0085 900000      E     MOV     DPTR,#SMBus1ByteCunt
0088 E0                MOVX    A,@DPTR
0089 6002              JZ      ?C0137
                                           ; SOURCE LINE # 931
                                           ; SOURCE LINE # 932
                                           ; SOURCE LINE # 933
                                           ; SOURCE LINE # 934
008B 8031              SJMP    ?C0241
008D         ?C0137:
                                           ; SOURCE LINE # 936
                                           ; SOURCE LINE # 937
008D 900000      E     MOV     DPTR,#HOCTL_A
0090 E0                MOVX    A,@DPTR
0091 54DF              ANL     A,#0DFH
0093 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 938
                                           ; SOURCE LINE # 939
                                           ; SOURCE LINE # 940
0094 020000      R     LJMP    ?C0244
0097         ?C0132:
                                           ; SOURCE LINE # 942
                                           ; SOURCE LINE # 943
0097         ?C0240:
                                           ; SOURCE LINE # 944
                                           ; SOURCE LINE # 945
0097 802D              SJMP    ?C0243
0099         ?C0131:
                                           ; SOURCE LINE # 949
0099 120000      R     LCALL   L?0316
009C 6408              XRL     A,#08H
009E 702B              JNZ     ?C0141
                                           ; SOURCE LINE # 950
                                           ; SOURCE LINE # 951
00A0 900000      E     MOV     DPTR,#HOSTA_A
00A3 E0                MOVX    A,@DPTR
00A4 5482              ANL     A,#082H
00A6 601E              JZ      ?C0142
                                           ; SOURCE LINE # 952
                                           ; SOURCE LINE # 953
00A8 120000      R     LCALL   L?0397
                                           ; SOURCE LINE # 954
00AB E0                MOVX    A,@DPTR
00AC 7003              JNZ     ?C0143
                                           ; SOURCE LINE # 955
                                           ; SOURCE LINE # 956
00AE         ?C0242:
                                           ; SOURCE LINE # 957
00AE 020000      R     LJMP    ?C0244
00B1         ?C0143:
                                           ; SOURCE LINE # 959
                                           ; SOURCE LINE # 960
00B1 120000      R     LCALL   L?0332
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 69  

                                           ; SOURCE LINE # 961
00B4 900000      E     MOV     DPTR,#SMBus1BlockPtr
00B7 120000      R     LCALL   L?0342
00BA 900000      E     MOV     DPTR,#HOBDB_A
00BD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 963
00BE         ?C0241:
00BE 900000      E     MOV     DPTR,#HOSTA_A
                                           ; SOURCE LINE # 964
00C1 120000      R     LCALL   L?0385
                                           ; SOURCE LINE # 965
                                           ; SOURCE LINE # 966
00C4 803E              SJMP    ?C0246
00C6         ?C0142:
                                           ; SOURCE LINE # 968
                                           ; SOURCE LINE # 969
00C6         ?C0243:
00C6 900000      E     MOV     DPTR,#SMBusXStatus
00C9         ?C0245:
                                           ; SOURCE LINE # 970
                                           ; SOURCE LINE # 971
00C9 8039              SJMP    ?C0246
00CB         ?C0141:
                                           ; SOURCE LINE # 976
                                           ; SOURCE LINE # 977
00CB 900000      E     MOV     DPTR,#HOSTA_A
00CE E0                MOVX    A,@DPTR
00CF 30E12F            JNB     ACC.1,?C0147
                                           ; SOURCE LINE # 978
                                           ; SOURCE LINE # 979
00D2 900000      E     MOV     DPTR,#D0REG_A
00D5 E0                MOVX    A,@DPTR
00D6 FF                MOV     R7,A
00D7 120000      R     LCALL   L?0306
00DA 120000      R     LCALL   L?0337
                                           ; SOURCE LINE # 980
00DD 120000      R     LCALL   L?0317
00E0 B40515            CJNE    A,#05H,?C0148
                                           ; SOURCE LINE # 981
                                           ; SOURCE LINE # 982
00E3 120000      R     LCALL   L?0307
00E6 120000      R     LCALL   L?0287
                                           ; SOURCE LINE # 983
00E9 120000      R     LCALL   L?0360
00EC 7001              JNZ     ?C0218
00EE 06                INC     @R0
00EF         ?C0218:
                                           ; SOURCE LINE # 984
00EF 900000      E     MOV     DPTR,#D1REG_A
00F2 120000      R     LCALL   L?0378
00F5 120000      R     LCALL   L?0293
                                           ; SOURCE LINE # 985
00F8         ?C0148:
                                           ; SOURCE LINE # 986
00F8         ?C0244:
00F8 900000      E     MOV     DPTR,#SMBusXStatus
00FB E0                MOVX    A,@DPTR
00FC 4401              ORL     A,#01H
00FE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 987
00FF 8007              SJMP    ?C0127
0101         ?C0147:
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 70  

                                           ; SOURCE LINE # 989
                                           ; SOURCE LINE # 990
0101 900000      E     MOV     DPTR,#SMBusXStatus
0104         ?C0246:
0104 E0                MOVX    A,@DPTR
0105 4402              ORL     A,#02H
0107 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 991
                                           ; SOURCE LINE # 992
                                           ; SOURCE LINE # 993
                                           ; SOURCE LINE # 994
0108         ?C0127:
                                           ; SOURCE LINE # 996
0108 900000      E     MOV     DPTR,#SMBusXStatus
010B E0                MOVX    A,@DPTR
010C 5403              ANL     A,#03H
010E 6057              JZ      ?C0153
                                           ; SOURCE LINE # 997
                                           ; SOURCE LINE # 998
0110 900000      E     MOV     DPTR,#HOSTA_A
0113 74FE              MOV     A,#0FEH
0115 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 999
0116 E4                CLR     A
0117 900000      E     MOV     DPTR,#SMBus1InUsing
011A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1000
011B 900000      E     MOV     DPTR,#SMBus1index
011E E0                MOVX    A,@DPTR
011F 75F00D            MOV     B,#0DH
0122 120000      R     LCALL   L?0382
0125 120000      R     LCALL   L?0305
0128 C083              PUSH    DPH
012A C082              PUSH    DPL
012C E0                MOVX    A,@DPTR
012D FF                MOV     R7,A
012E 900000      E     MOV     DPTR,#SMBus1index
0131 E0                MOVX    A,@DPTR
0132 75F00D            MOV     B,#0DH
0135 120000      R     LCALL   L?0352
0138 120000      R     LCALL   L?0329
013B D082              POP     DPL
013D D083              POP     DPH
013F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1002
0140 900000      E     MOV     DPTR,#SMBusXStatus
0143 E0                MOVX    A,@DPTR
0144 900000      E     MOV     DPTR,#SMBus1index
0147 30E109            JNB     ACC.1,?C0151
                                           ; SOURCE LINE # 1003
                                           ; SOURCE LINE # 1004
014A E0                MOVX    A,@DPTR
014B 75F00D            MOV     B,#0DH
014E 900000      R     MOV     DPTR,#asSCS1+0AH
                                           ; SOURCE LINE # 1005
0151 8007              SJMP    ?C0239
0153         ?C0151:
                                           ; SOURCE LINE # 1007
                                           ; SOURCE LINE # 1008
0153 E0                MOVX    A,@DPTR
0154 75F00D            MOV     B,#0DH
0157 900000      R     MOV     DPTR,#asSCS1+08H
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 71  

015A         ?C0239:
015A 120000      E     LCALL   ?C?OFFXADD
015D 120000      R     LCALL   L?0320
                                           ; SOURCE LINE # 1009
0160         ?C0152:
                                           ; SOURCE LINE # 1010
0160 900000      E     MOV     DPTR,#SMBusXStatus
0163 E0                MOVX    A,@DPTR
0164 54FC              ANL     A,#0FCH
0166 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1011
                                           ; SOURCE LINE # 1012
0167         ?C0153:
0167 22                RET     
             ; FUNCTION service_smbus1 (END)

             ; FUNCTION service_smbus2 (BEGIN)
                                           ; SOURCE LINE # 1017
                                           ; SOURCE LINE # 1018
                                           ; SOURCE LINE # 1019
0000 900000      E     MOV     DPTR,#SMBus2InUsing
0003 E0                MOVX    A,@DPTR
0004 7003              JNZ     $ + 5H
0006 020000      R     LJMP    ?C0154
                                           ; SOURCE LINE # 1020
                                           ; SOURCE LINE # 1021
0009 900000      E     MOV     DPTR,#SMBusXStatus
000C E0                MOVX    A,@DPTR
000D 54F3              ANL     A,#0F3H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1023
0010 900000      E     MOV     DPTR,#HOSTA_B
0013 E0                MOVX    A,@DPTR
0014 547C              ANL     A,#07CH
0016 600D              JZ      ?C0155
                                           ; SOURCE LINE # 1024
                                           ; SOURCE LINE # 1025
0018 E0                MOVX    A,@DPTR
0019 5418              ANL     A,#018H
001B 6005              JZ      ?C0156
                                           ; SOURCE LINE # 1026
                                           ; SOURCE LINE # 1027
001D 7F01              MOV     R7,#01H
001F 120000      E     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 1028
0022         ?C0156:
                                           ; SOURCE LINE # 1029
                                           ; SOURCE LINE # 1030
0022 020000      R     LJMP    ?C0254
0025         ?C0155:
                                           ; SOURCE LINE # 1032
                                           ; SOURCE LINE # 1036
0025 120000      R     LCALL   L?0311
0028 6407              XRL     A,#07H
002A 6003              JZ      $ + 5H
002C 020000      R     LJMP    ?C0158
                                           ; SOURCE LINE # 1037
                                           ; SOURCE LINE # 1038
002F 900000      E     MOV     DPTR,#HOSTA_B
0032 E0                MOVX    A,@DPTR
0033 5482              ANL     A,#082H
0035 6079              JZ      ?C0159
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 72  

                                           ; SOURCE LINE # 1039
                                           ; SOURCE LINE # 1040
0037 900000      E     MOV     DPTR,#SMBus2ByteCunt
003A E0                MOVX    A,@DPTR
003B 703B              JNZ     ?C0160
                                           ; SOURCE LINE # 1041
                                           ; SOURCE LINE # 1042
003D 120000      R     LCALL   L?0284
0040 900000      E     MOV     DPTR,#SMBus2BlockPtr
0043 CF                XCH     A,R7
0044 F0                MOVX    @DPTR,A
0045 A3                INC     DPTR
0046 EF                MOV     A,R7
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1043
0048 900000      E     MOV     DPTR,#D0REG_B
004B E0                MOVX    A,@DPTR
004C 900000      E     MOV     DPTR,#SMBus2ByteCunt
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1045
0050 E0                MOVX    A,@DPTR
0051 D3                SETB    C
0052 9420              SUBB    A,#020H
0054 4003              JC      ?C0161
                                           ; SOURCE LINE # 1046
                                           ; SOURCE LINE # 1047
0056 7420              MOV     A,#020H
0058 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1048
0059         ?C0161:
                                           ; SOURCE LINE # 1050
0059 900000      E     MOV     DPTR,#SMBus2ByteCunt
005C E0                MOVX    A,@DPTR
005D 900000      E     MOV     DPTR,#SMB_BCNT
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1051
0061 900000      E     MOV     DPTR,#SMBus2ByteCunt
0064 E0                MOVX    A,@DPTR
0065 900000      E     MOV     DPTR,#DB_SMBusBCunt
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1053
0069 900000      E     MOV     DPTR,#HOBDB_B
006C E0                MOVX    A,@DPTR
006D 900000      E     MOV     DPTR,#SMBus2BlockPtr
0070 120000      R     LCALL   L?0291
                                           ; SOURCE LINE # 1054
0073 120000      R     LCALL   L?0398
                                           ; SOURCE LINE # 1055
0076 801F              SJMP    ?C0162
0078         ?C0160:
                                           ; SOURCE LINE # 1057
                                           ; SOURCE LINE # 1058
0078 900000      E     MOV     DPTR,#SMBus2BlockPtr
007B 120000      R     LCALL   L?0333
                                           ; SOURCE LINE # 1059
007E 900000      E     MOV     DPTR,#HOBDB_B
0081 E0                MOVX    A,@DPTR
0082 FF                MOV     R7,A
0083 900000      E     MOV     DPTR,#SMBus2BlockPtr
0086 120000      R     LCALL   L?0292
                                           ; SOURCE LINE # 1060
0089 120000      R     LCALL   L?0398
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 73  

                                           ; SOURCE LINE # 1061
008C E0                MOVX    A,@DPTR
008D B40107            CJNE    A,#01H,?C0162
                                           ; SOURCE LINE # 1062
                                           ; SOURCE LINE # 1063
0090 900000      E     MOV     DPTR,#HOCTL_B
0093 E0                MOVX    A,@DPTR
0094 4420              ORL     A,#020H
0096 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1064
                                           ; SOURCE LINE # 1065
0097         ?C0162:
                                           ; SOURCE LINE # 1067
0097 900000      E     MOV     DPTR,#SMBus2ByteCunt
009A E0                MOVX    A,@DPTR
009B 6006              JZ      ?C0164
                                           ; SOURCE LINE # 1068
                                           ; SOURCE LINE # 1069
                                           ; SOURCE LINE # 1070
009D 120000      R     LCALL   L?0384
                                           ; SOURCE LINE # 1071
00A0 020000      R     LJMP    ?C0253
00A3         ?C0164:
                                           ; SOURCE LINE # 1073
                                           ; SOURCE LINE # 1074
00A3 900000      E     MOV     DPTR,#HOCTL_B
00A6 E0                MOVX    A,@DPTR
00A7 54DF              ANL     A,#0DFH
00A9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1075
00AA 900000      E     MOV     DPTR,#SMBusXStatus
00AD         ?C0247:
                                           ; SOURCE LINE # 1076
                                           ; SOURCE LINE # 1077
00AD 020000      R     LJMP    ?C0253
00B0         ?C0159:
                                           ; SOURCE LINE # 1079
                                           ; SOURCE LINE # 1080
00B0         ?C0250:
                                           ; SOURCE LINE # 1081
                                           ; SOURCE LINE # 1082
00B0 020000      R     LJMP    ?C0254
00B3         ?C0158:
                                           ; SOURCE LINE # 1086
00B3 120000      R     LCALL   L?0311
00B6 6408              XRL     A,#08H
00B8 702A              JNZ     ?C0168
                                           ; SOURCE LINE # 1087
                                           ; SOURCE LINE # 1088
00BA 900000      E     MOV     DPTR,#HOSTA_B
00BD E0                MOVX    A,@DPTR
00BE 5482              ANL     A,#082H
00C0 6020              JZ      ?C0169
                                           ; SOURCE LINE # 1089
                                           ; SOURCE LINE # 1090
00C2 120000      R     LCALL   L?0399
                                           ; SOURCE LINE # 1091
00C5 E0                MOVX    A,@DPTR
00C6 7005              JNZ     ?C0170
                                           ; SOURCE LINE # 1092
                                           ; SOURCE LINE # 1093
00C8 900000      E     MOV     DPTR,#SMBusXStatus
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 74  

                                           ; SOURCE LINE # 1094
00CB 8013              SJMP    ?C0248
00CD         ?C0170:
                                           ; SOURCE LINE # 1096
                                           ; SOURCE LINE # 1097
00CD 900000      E     MOV     DPTR,#SMBus2BlockPtr
00D0 120000      R     LCALL   L?0333
                                           ; SOURCE LINE # 1098
00D3 900000      E     MOV     DPTR,#SMBus2BlockPtr
00D6 120000      R     LCALL   L?0343
00D9 900000      E     MOV     DPTR,#HOBDB_B
00DC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1100
                                           ; SOURCE LINE # 1101
00DD 120000      R     LCALL   L?0384
00E0         ?C0248:
00E0         ?C0251:
                                           ; SOURCE LINE # 1102
                                           ; SOURCE LINE # 1103
00E0 8035              SJMP    ?C0253
00E2         ?C0169:
                                           ; SOURCE LINE # 1105
                                           ; SOURCE LINE # 1106
00E2         ?C0252:
                                           ; SOURCE LINE # 1107
                                           ; SOURCE LINE # 1108
00E2 8039              SJMP    ?C0254
00E4         ?C0168:
                                           ; SOURCE LINE # 1113
                                           ; SOURCE LINE # 1114
00E4 900000      E     MOV     DPTR,#HOSTA_B
00E7 E0                MOVX    A,@DPTR
00E8 30E132            JNB     ACC.1,?C0174
                                           ; SOURCE LINE # 1115
                                           ; SOURCE LINE # 1116
00EB 900000      E     MOV     DPTR,#D0REG_B
00EE 120000      R     LCALL   L?0380
00F1 A4                MUL     AB
00F2 2400        R     ADD     A,#LOW asSCS2+03H
00F4 F582              MOV     DPL,A
00F6 E4                CLR     A
00F7 3400        R     ADDC    A,#HIGH asSCS2+03H
00F9 120000      R     LCALL   L?0336
                                           ; SOURCE LINE # 1117
00FC 120000      R     LCALL   L?0312
00FF B40512            CJNE    A,#05H,?C0175
                                           ; SOURCE LINE # 1118
                                           ; SOURCE LINE # 1119
0102 120000      R     LCALL   L?0284
                                           ; SOURCE LINE # 1120
0105 120000      R     LCALL   L?0360
0108 7001              JNZ     ?C0219
010A 06                INC     @R0
010B         ?C0219:
                                           ; SOURCE LINE # 1121
010B 900000      E     MOV     DPTR,#D1REG_B
010E 120000      R     LCALL   L?0378
0111 120000      R     LCALL   L?0293
                                           ; SOURCE LINE # 1122
0114         ?C0175:
                                           ; SOURCE LINE # 1123
0114 900000      E     MOV     DPTR,#SMBusXStatus
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 75  

0117         ?C0253:
0117 E0                MOVX    A,@DPTR
0118 4404              ORL     A,#04H
011A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1124
011B 8007              SJMP    ?C0154
011D         ?C0174:
                                           ; SOURCE LINE # 1126
                                           ; SOURCE LINE # 1127
011D         ?C0254:
011D 900000      E     MOV     DPTR,#SMBusXStatus
0120 E0                MOVX    A,@DPTR
0121 4408              ORL     A,#08H
0123 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1128
                                           ; SOURCE LINE # 1129
                                           ; SOURCE LINE # 1130
                                           ; SOURCE LINE # 1131
0124         ?C0154:
                                           ; SOURCE LINE # 1133
0124 900000      E     MOV     DPTR,#SMBusXStatus
0127 E0                MOVX    A,@DPTR
0128 540C              ANL     A,#0CH
012A 6046              JZ      ?C0180
                                           ; SOURCE LINE # 1134
                                           ; SOURCE LINE # 1135
012C 900000      E     MOV     DPTR,#HOSTA_B
012F 74FE              MOV     A,#0FEH
0131 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1136
0132 E4                CLR     A
0133 900000      E     MOV     DPTR,#SMBus2InUsing
0136 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1137
0137 120000      R     LCALL   L?0381
013A 120000      R     LCALL   L?0303
013D C083              PUSH    DPH
013F C082              PUSH    DPL
0141 120000      R     LCALL   L?0380
0144 120000      R     LCALL   L?0327
0147 D082              POP     DPL
0149 D083              POP     DPH
014B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1139
014C 900000      E     MOV     DPTR,#SMBusXStatus
014F E0                MOVX    A,@DPTR
0150 900000      E     MOV     DPTR,#SMBus2index
0153 30E306            JNB     ACC.3,?C0178
                                           ; SOURCE LINE # 1140
                                           ; SOURCE LINE # 1141
0156 E0                MOVX    A,@DPTR
0157 120000      R     LCALL   L?0364
                                           ; SOURCE LINE # 1142
015A 800C              SJMP    ?C0249
015C         ?C0178:
                                           ; SOURCE LINE # 1144
                                           ; SOURCE LINE # 1145
015C E0                MOVX    A,@DPTR
015D 75F00D            MOV     B,#0DH
0160 A4                MUL     AB
0161 2400        R     ADD     A,#LOW asSCS2+08H
0163 F582              MOV     DPL,A
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 76  

0165 E4                CLR     A
0166 3400        R     ADDC    A,#HIGH asSCS2+08H
0168         ?C0249:
0168 120000      R     LCALL   L?0319
                                           ; SOURCE LINE # 1146
016B         ?C0179:
                                           ; SOURCE LINE # 1147
016B 900000      E     MOV     DPTR,#SMBusXStatus
016E E0                MOVX    A,@DPTR
016F 54F3              ANL     A,#0F3H
0171 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1148
                                           ; SOURCE LINE # 1149
0172         ?C0180:
0172 22                RET     
             ; FUNCTION service_smbus2 (END)

             ; FUNCTION service_smbus3 (BEGIN)
                                           ; SOURCE LINE # 1154
                                           ; SOURCE LINE # 1155
                                           ; SOURCE LINE # 1156
0000 900000      E     MOV     DPTR,#SMBus3InUsing
0003 E0                MOVX    A,@DPTR
0004 7003              JNZ     $ + 5H
0006 020000      R     LJMP    ?C0181
                                           ; SOURCE LINE # 1157
                                           ; SOURCE LINE # 1158
0009 900000      E     MOV     DPTR,#SMBusXStatus
000C E0                MOVX    A,@DPTR
000D 54CF              ANL     A,#0CFH
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1160
0010 900000      E     MOV     DPTR,#HOSTA_C
0013 E0                MOVX    A,@DPTR
0014 547C              ANL     A,#07CH
0016 600D              JZ      ?C0182
                                           ; SOURCE LINE # 1161
                                           ; SOURCE LINE # 1162
0018 E0                MOVX    A,@DPTR
0019 5418              ANL     A,#018H
001B 6005              JZ      ?C0183
                                           ; SOURCE LINE # 1163
                                           ; SOURCE LINE # 1164
001D 7F02              MOV     R7,#02H
001F 120000      E     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 1165
0022         ?C0183:
                                           ; SOURCE LINE # 1166
                                           ; SOURCE LINE # 1167
0022 020000      R     LJMP    ?C0261
0025         ?C0182:
                                           ; SOURCE LINE # 1169
                                           ; SOURCE LINE # 1173
0025 120000      R     LCALL   L?0310
0028 120000      R     LCALL   L?0330
002B 6407              XRL     A,#07H
002D 6003              JZ      $ + 5H
002F 020000      R     LJMP    ?C0185
                                           ; SOURCE LINE # 1174
                                           ; SOURCE LINE # 1175
0032 900000      E     MOV     DPTR,#HOSTA_C
0035 E0                MOVX    A,@DPTR
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 77  

0036 5482              ANL     A,#082H
0038 6079              JZ      ?C0186
                                           ; SOURCE LINE # 1176
                                           ; SOURCE LINE # 1177
003A 900000      E     MOV     DPTR,#SMBus3ByteCunt
003D E0                MOVX    A,@DPTR
003E 7042              JNZ     ?C0187
                                           ; SOURCE LINE # 1178
                                           ; SOURCE LINE # 1179
0040 120000      R     LCALL   L?0310
0043 120000      R     LCALL   L?0345
0046 120000      R     LCALL   L?0286
0049 900000      E     MOV     DPTR,#SMBus3BlockPtr
004C CF                XCH     A,R7
004D F0                MOVX    @DPTR,A
004E A3                INC     DPTR
004F EF                MOV     A,R7
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1180
0051 900000      E     MOV     DPTR,#D0REG_C
0054 E0                MOVX    A,@DPTR
0055 900000      E     MOV     DPTR,#SMBus3ByteCunt
0058 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1182
0059 E0                MOVX    A,@DPTR
005A D3                SETB    C
005B 9420              SUBB    A,#020H
005D 4003              JC      ?C0188
                                           ; SOURCE LINE # 1183
                                           ; SOURCE LINE # 1184
005F 7420              MOV     A,#020H
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1185
0062         ?C0188:
                                           ; SOURCE LINE # 1187
0062 900000      E     MOV     DPTR,#SMBus3ByteCunt
0065 E0                MOVX    A,@DPTR
0066 900000      E     MOV     DPTR,#SMB_BCNT
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1188
006A 900000      E     MOV     DPTR,#SMBus3ByteCunt
006D E0                MOVX    A,@DPTR
006E 900000      E     MOV     DPTR,#DB_SMBusBCunt
0071 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1190
0072 900000      E     MOV     DPTR,#HOBDB_C
0075 E0                MOVX    A,@DPTR
0076 FF                MOV     R7,A
0077 900000      E     MOV     DPTR,#SMBus3BlockPtr
007A 120000      R     LCALL   L?0292
                                           ; SOURCE LINE # 1191
007D 120000      R     LCALL   L?0400
                                           ; SOURCE LINE # 1192
0080 801F              SJMP    ?C0189
0082         ?C0187:
                                           ; SOURCE LINE # 1194
                                           ; SOURCE LINE # 1195
0082 900000      E     MOV     DPTR,#SMBus3BlockPtr
0085 120000      R     LCALL   L?0333
                                           ; SOURCE LINE # 1196
0088 900000      E     MOV     DPTR,#HOBDB_C
008B E0                MOVX    A,@DPTR
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 78  

008C FF                MOV     R7,A
008D 900000      E     MOV     DPTR,#SMBus3BlockPtr
0090 120000      R     LCALL   L?0292
                                           ; SOURCE LINE # 1197
0093 120000      R     LCALL   L?0400
                                           ; SOURCE LINE # 1198
0096 E0                MOVX    A,@DPTR
0097 B40107            CJNE    A,#01H,?C0189
                                           ; SOURCE LINE # 1199
                                           ; SOURCE LINE # 1200
009A 900000      E     MOV     DPTR,#HOCTL_C
009D E0                MOVX    A,@DPTR
009E 4420              ORL     A,#020H
00A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1201
                                           ; SOURCE LINE # 1202
00A1         ?C0189:
                                           ; SOURCE LINE # 1204
00A1 900000      E     MOV     DPTR,#SMBus3ByteCunt
00A4 E0                MOVX    A,@DPTR
00A5 6002              JZ      ?C0191
                                           ; SOURCE LINE # 1205
                                           ; SOURCE LINE # 1206
                                           ; SOURCE LINE # 1207
                                           ; SOURCE LINE # 1208
00A7 8038              SJMP    ?C0257
00A9         ?C0191:
                                           ; SOURCE LINE # 1210
                                           ; SOURCE LINE # 1211
00A9 900000      E     MOV     DPTR,#HOCTL_C
00AC E0                MOVX    A,@DPTR
00AD 54DF              ANL     A,#0DFH
00AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1212
                                           ; SOURCE LINE # 1213
                                           ; SOURCE LINE # 1214
00B0 020000      R     LJMP    ?C0260
00B3         ?C0186:
                                           ; SOURCE LINE # 1216
                                           ; SOURCE LINE # 1217
00B3         ?C0256:
                                           ; SOURCE LINE # 1218
                                           ; SOURCE LINE # 1219
00B3 020000      R     LJMP    ?C0261
00B6         ?C0185:
                                           ; SOURCE LINE # 1223
00B6 120000      R     LCALL   L?0310
00B9 120000      R     LCALL   L?0331
00BC 6408              XRL     A,#08H
00BE 7033              JNZ     ?C0195
                                           ; SOURCE LINE # 1224
                                           ; SOURCE LINE # 1225
00C0 900000      E     MOV     DPTR,#HOSTA_C
00C3 E0                MOVX    A,@DPTR
00C4 5482              ANL     A,#082H
00C6 6029              JZ      ?C0196
                                           ; SOURCE LINE # 1226
                                           ; SOURCE LINE # 1227
00C8 120000      R     LCALL   L?0401
                                           ; SOURCE LINE # 1228
00CB E0                MOVX    A,@DPTR
00CC 7003              JNZ     ?C0197
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 79  

                                           ; SOURCE LINE # 1229
                                           ; SOURCE LINE # 1230
00CE         ?C0258:
                                           ; SOURCE LINE # 1231
00CE 020000      R     LJMP    ?C0260
00D1         ?C0197:
                                           ; SOURCE LINE # 1233
                                           ; SOURCE LINE # 1234
00D1 900000      E     MOV     DPTR,#SMBus3BlockPtr
00D4 120000      R     LCALL   L?0333
                                           ; SOURCE LINE # 1235
00D7 900000      E     MOV     DPTR,#SMBus3BlockPtr
00DA 120000      R     LCALL   L?0343
00DD 900000      E     MOV     DPTR,#HOBDB_C
00E0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1237
00E1         ?C0257:
00E1 900000      E     MOV     DPTR,#HOSTA_C
00E4 74FE              MOV     A,#0FEH
00E6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1238
00E7 900000      E     MOV     DPTR,#IER2
00EA E0                MOVX    A,@DPTR
00EB 4401              ORL     A,#01H
00ED F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1239
                                           ; SOURCE LINE # 1240
00EE 020000      R     LJMP    ?C0181
00F1         ?C0196:
                                           ; SOURCE LINE # 1242
                                           ; SOURCE LINE # 1243
00F1         ?C0259:
                                           ; SOURCE LINE # 1244
                                           ; SOURCE LINE # 1245
00F1 803D              SJMP    ?C0261
00F3         ?C0195:
                                           ; SOURCE LINE # 1250
                                           ; SOURCE LINE # 1251
00F3 900000      E     MOV     DPTR,#HOSTA_C
00F6 E0                MOVX    A,@DPTR
00F7 30E136            JNB     ACC.1,?C0201
                                           ; SOURCE LINE # 1252
                                           ; SOURCE LINE # 1253
00FA 900000      E     MOV     DPTR,#D0REG_C
00FD 120000      R     LCALL   L?0309
0100 120000      R     LCALL   L?0345
0103 120000      R     LCALL   L?0336
                                           ; SOURCE LINE # 1254
0106 120000      R     LCALL   L?0310
0109 120000      R     LCALL   L?0331
010C B40518            CJNE    A,#05H,?C0202
                                           ; SOURCE LINE # 1255
                                           ; SOURCE LINE # 1256
010F 120000      R     LCALL   L?0310
0112 120000      R     LCALL   L?0345
0115 120000      R     LCALL   L?0286
                                           ; SOURCE LINE # 1257
0118 120000      R     LCALL   L?0361
011B 7001              JNZ     ?C0220
011D 06                INC     @R0
011E         ?C0220:
                                           ; SOURCE LINE # 1258
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 80  

011E 900000      E     MOV     DPTR,#D1REG_C
0121 120000      R     LCALL   L?0379
0124 120000      R     LCALL   L?0293
                                           ; SOURCE LINE # 1259
0127         ?C0202:
                                           ; SOURCE LINE # 1260
0127         ?C0260:
0127 900000      E     MOV     DPTR,#SMBusXStatus
012A E0                MOVX    A,@DPTR
012B 4410              ORL     A,#010H
012D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1261
012E 8007              SJMP    ?C0181
0130         ?C0201:
                                           ; SOURCE LINE # 1263
                                           ; SOURCE LINE # 1264
0130         ?C0261:
0130 900000      E     MOV     DPTR,#SMBusXStatus
0133 E0                MOVX    A,@DPTR
0134 4420              ORL     A,#020H
0136 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1265
                                           ; SOURCE LINE # 1266
                                           ; SOURCE LINE # 1267
                                           ; SOURCE LINE # 1268
0137         ?C0181:
                                           ; SOURCE LINE # 1270
0137 900000      E     MOV     DPTR,#SMBusXStatus
013A E0                MOVX    A,@DPTR
013B 5430              ANL     A,#030H
013D 604C              JZ      ?C0207
                                           ; SOURCE LINE # 1271
                                           ; SOURCE LINE # 1272
013F 900000      E     MOV     DPTR,#HOSTA_C
0142 74FE              MOV     A,#0FEH
0144 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1273
0145 E4                CLR     A
0146 900000      E     MOV     DPTR,#SMBus3InUsing
0149 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1274
014A 120000      R     LCALL   L?0310
014D 120000      R     LCALL   L?0356
0150 120000      R     LCALL   L?0304
0153 C083              PUSH    DPH
0155 C082              PUSH    DPL
0157 120000      R     LCALL   L?0309
015A 120000      R     LCALL   L?0359
015D 120000      R     LCALL   L?0328
0160 D082              POP     DPL
0162 D083              POP     DPH
0164 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1276
0165 900000      E     MOV     DPTR,#SMBusXStatus
0168 E0                MOVX    A,@DPTR
0169 900000      E     MOV     DPTR,#SMBus3index
016C 30E506            JNB     ACC.5,?C0205
                                           ; SOURCE LINE # 1277
                                           ; SOURCE LINE # 1278
016F E0                MOVX    A,@DPTR
0170 120000      R     LCALL   L?0366
                                           ; SOURCE LINE # 1279
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 81  

0173 800C              SJMP    ?C0255
0175         ?C0205:
                                           ; SOURCE LINE # 1281
                                           ; SOURCE LINE # 1282
0175 E0                MOVX    A,@DPTR
0176 75F00D            MOV     B,#0DH
0179 A4                MUL     AB
017A 2400        R     ADD     A,#LOW asSCS3+08H
017C F582              MOV     DPL,A
017E E4                CLR     A
017F 3400        R     ADDC    A,#HIGH asSCS3+08H
0181         ?C0255:
0181 120000      R     LCALL   L?0319
                                           ; SOURCE LINE # 1283
0184         ?C0206:
                                           ; SOURCE LINE # 1284
0184 900000      E     MOV     DPTR,#SMBusXStatus
0187 E0                MOVX    A,@DPTR
0188 54CF              ANL     A,#0CFH
018A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1285
                                           ; SOURCE LINE # 1286
018B         ?C0207:
018B 22                RET     
             ; FUNCTION service_smbus3 (END)

             ; FUNCTION CheckSMBusNeedService (BEGIN)
                                           ; SOURCE LINE # 1293
                                           ; SOURCE LINE # 1294
                                           ; SOURCE LINE # 1295
0000 900000      E     MOV     DPTR,#F_Service_SMBus1
0003 E0                MOVX    A,@DPTR
0004 6401              XRL     A,#01H
0006 600F              JZ      ?C0209
0008 900000      E     MOV     DPTR,#F_Service_SMBus2
000B E0                MOVX    A,@DPTR
000C 6401              XRL     A,#01H
000E 6007              JZ      ?C0209
0010 900000      E     MOV     DPTR,#F_Service_SMBus3
0013 E0                MOVX    A,@DPTR
0014 B40103            CJNE    A,#01H,?C0208
0017         ?C0209:
                                           ; SOURCE LINE # 1296
                                           ; SOURCE LINE # 1297
0017 7F01              MOV     R7,#01H
0019 22                RET     
                                           ; SOURCE LINE # 1298
001A         ?C0208:
                                           ; SOURCE LINE # 1301
001A 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 1302
001C         ?C0210:
001C 22                RET     
             ; FUNCTION CheckSMBusNeedService (END)

             ; FUNCTION Service_HI2C_Interface (BEGIN)
                                           ; SOURCE LINE # 1314
                                           ; SOURCE LINE # 1315
                                           ; SOURCE LINE # 1316
0000 900000      E     MOV     DPTR,#xHI2C_CHN
0003 E0                MOVX    A,@DPTR
0004 D3                SETB    C
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 82  

0005 9400              SUBB    A,#00H
0007 5059              JNC     ?C0212
                                           ; SOURCE LINE # 1317
                                           ; SOURCE LINE # 1320
0009         ?C0211:
                                           ; SOURCE LINE # 1322
0009 900000      E     MOV     DPTR,#xHI2C_START
000C E0                MOVX    A,@DPTR
000D B4010D            CJNE    A,#01H,?C0213
                                           ; SOURCE LINE # 1323
                                           ; SOURCE LINE # 1324
0010 120000      R     LCALL   L?0334
0013 120000      E     LCALL   _i2c_read_reg
0016 900000      E     MOV     DPTR,#xHI2C_DATA0
0019 EF                MOV     A,R7
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1325
                                           ; SOURCE LINE # 1326
001B 803C              SJMP    ?C0264
                                           ; SOURCE LINE # 1328
001D         ?C0213:
                                           ; SOURCE LINE # 1329
001D 900000      E     MOV     DPTR,#xHI2C_START
0020 E0                MOVX    A,@DPTR
0021 B4030E            CJNE    A,#03H,?C0214
                                           ; SOURCE LINE # 1330
                                           ; SOURCE LINE # 1331
0024 120000      R     LCALL   L?0334
0027 900000      E     MOV     DPTR,#?_i2c_read_block_reg?BYTE+03H
002A 120000      R     LCALL   L?0372
002D 120000      E     LCALL   _i2c_read_block_reg
                                           ; SOURCE LINE # 1335
0030         ?C0262:
                                           ; SOURCE LINE # 1336
0030 8027              SJMP    ?C0264
                                           ; SOURCE LINE # 1338
0032         ?C0214:
                                           ; SOURCE LINE # 1339
0032 900000      E     MOV     DPTR,#xHI2C_START
0035 E0                MOVX    A,@DPTR
0036 B4810D            CJNE    A,#081H,?C0215
                                           ; SOURCE LINE # 1340
                                           ; SOURCE LINE # 1341
0039 120000      R     LCALL   L?0335
003C 900000      E     MOV     DPTR,#xHI2C_DATA0
003F E0                MOVX    A,@DPTR
0040 FB                MOV     R3,A
0041 120000      E     LCALL   _i2c_write_reg
                                           ; SOURCE LINE # 1342
0044         ?C0263:
                                           ; SOURCE LINE # 1343
0044 8013              SJMP    ?C0264
                                           ; SOURCE LINE # 1345
0046         ?C0215:
                                           ; SOURCE LINE # 1346
0046 900000      E     MOV     DPTR,#xHI2C_START
0049 E0                MOVX    A,@DPTR
004A B48315            CJNE    A,#083H,?C0212
                                           ; SOURCE LINE # 1347
                                           ; SOURCE LINE # 1348
004D 120000      R     LCALL   L?0335
0050 900000      E     MOV     DPTR,#?_i2c_write_block_reg_b?BYTE+03H
C51 COMPILER V7.50   OEM_SMBUS                                                             09/08/2020 15:56:22 PAGE 83  

0053 120000      R     LCALL   L?0372
0056 120000      E     LCALL   _i2c_write_block_reg_b
                                           ; SOURCE LINE # 1352
0059         ?C0264:
0059 E4                CLR     A
005A 900000      E     MOV     DPTR,#xHI2C_STATUS
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1353
005E 900000      E     MOV     DPTR,#xHI2C_START
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1355
                                           ; SOURCE LINE # 1357
0062         ?C0212:
0062 22                RET     
             ; FUNCTION Service_HI2C_Interface (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4536    ----
   CONSTANT SIZE    =    406    ----
   XDATA SIZE       =   ----      43
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
