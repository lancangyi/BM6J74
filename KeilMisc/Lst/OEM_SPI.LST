C51 COMPILER V7.50   OEM_SPI                                                               09/08/2020 15:56:25 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE OEM_SPI
OBJECT MODULE PLACED IN Code\Oem\OEM_SPI.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe Code\Oem\OEM_SPI.C LA WL(1) CD OT(9,SIZE) NOAREGS OR INCDIR(.\Code\CORE\INC
                    -LUDE\;.\Code\OEM\INCLUDE\;.\Code\CHIP\INCLUDE\)

line level    source

   1          /*-----------------------------------------------------------------------------
   2           * TITLE: OEM_SPI.C
   3           *
   4           * Author : Dino
   5           *
   6           * Note : These functions are reference only.
   7           *---------------------------------------------------------------------------*/
   8           
   9          #include <CORE_INCLUDE.H>
  10          #include <OEM_INCLUDE.H>
  11          
  12          //-----------------------------------------------------------------------
  13          // Init SPI interface function
  14          //-----------------------------------------------------------------------
  15          void Init_SPIInterface(BYTE channel, BYTE supportbusy)
  16          {
  17   1          BYTE settingOK;
  18   1      
  19   1          settingOK = 0x01;   // Pr-set OK
  20   1          
  21   1          if(channel==SPI_Channel_0)
  22   1          {
  23   2              GCR1 |= SPICTRL_0;
  24   2              SSCE0 =ALT;
  25   2          }
  26   1          else if(channel==SPI_Channel_1)
  27   1          {
  28   2              GCR1 |= SPICTRL_1;
  29   2              SSCE1 =ALT;
  30   2          }
  31   1          else if(channel==SPI_Channel_0N1)
  32   1          {
  33   2              GCR1 |= (SPICTRL_0+SPICTRL_1);
  34   2              SSCE0 =ALT;
  35   2              SSCE1 =ALT;
  36   2          }
  37   1          else
  38   1          {
  39   2              GCR1 &= ~(SPICTRL_0+SPICTRL_1);
  40   2              settingOK = 0x00;
  41   2          }
  42   1      
  43   1          if(settingOK==0x01)
  44   1          {
  45   2              if(supportbusy == SPI_SupportBusy)
  46   2              {
  47   3                  GCR1 |= SSSPIBP;
  48   3              }
  49   2              
  50   2              SSCK = ALT;
  51   2              SMOSI = ALT;
  52   2              SMISO = ALT;
  53   2      
  54   2              //SPICTRL1 |= (SCKFREQ2+NTREN); // 100b: 1/10 FreqEC, Interrupt Enable, 4-wire
C51 COMPILER V7.50   OEM_SPI                                                               09/08/2020 15:56:25 PAGE 2   

  55   2              SPICTRL1 |= SCKFREQ2+CLPOL+CLPHS;   // 100b: 1/10 FreqEC, Interrupt Disable, 4-wir, mode 3
  56   2      
  57   2          }
  58   1      }
  59          
  60          //-----------------------------------------------------------------------
  61          // Disable SPI interface function
  62          //-----------------------------------------------------------------------
  63          void Disable_SPIInterface(BYTE channel)
  64          {
  65   1          GCR1 &= ~(SPICTRL_0+SPICTRL_1+SSSPIBP);
  66   1          
  67   1          if(channel==SPI_Channel_0)
  68   1          {
  69   2              SSCE0 =INPUT;
  70   2          }
  71   1          else if(channel==SPI_Channel_1)
  72   1          {
  73   2              SSCE1 =INPUT;
  74   2          }
  75   1          else if(channel==SPI_Channel_0N1)
  76   1          {
  77   2              SSCE0 =INPUT;
  78   2              SSCE1 =INPUT;
  79   2          }
  80   1          
  81   1          SSCK = INPUT;
  82   1          SMOSI = INPUT;
  83   1          SMISO = INPUT;
  84   1      }
  85          
  86          //-----------------------------------------------------------------------
  87          // Enable SPI interface function
  88          //-----------------------------------------------------------------------
  89          void Enable_SPIInterface(void)
  90          {
  91   1          Init_SPIInterface(SPI_Channel_0, SPI_NoSupportBusy);
  92   1      }
  93          
  94          //-----------------------------------------------------------------------
  95          //
  96          //-----------------------------------------------------------------------
  97          void SPIWriteByte(BYTE spidata, BYTE channel)
  98          {
  99   1          BYTE settingok;
 100   1          settingok = 0x00;
 101   1          
 102   1          SPIDATA = spidata;
 103   1      
 104   1          SET_MASK(SPICTRL2, BLKSEL);    // Blocking selection.
 105   1          CLEAR_MASK(SPICTRL2, CHRW);    // Write cycle.
 106   1      
 107   1          if(channel==SPI_Channel_0)
 108   1          {
 109   2              SET_MASK(SPISTS, CH0START);
 110   2              settingok = 0x01;
 111   2          }
 112   1          else if(channel==SPI_Channel_1)
 113   1          {
 114   2              SET_MASK(SPISTS, CH1START);
 115   2              settingok = 0x01;
 116   2          }
C51 COMPILER V7.50   OEM_SPI                                                               09/08/2020 15:56:25 PAGE 3   

 117   1      }
 118          
 119          //-----------------------------------------------------------------------
 120          //
 121          //-----------------------------------------------------------------------
 122          void SPIWriteWord(BYTE MSB, BYTE LSB, BYTE channel)
 123          {
 124   1          BYTE settingok;
 125   1          settingok = 0x00;
 126   1          
 127   1          SPIDATA = MSB;
 128   1      
 129   1          SET_MASK(SPICTRL2, BLKSEL);    // Blocking selection.
 130   1          CLEAR_MASK(SPICTRL2, CHRW);    // Write cycle.
 131   1      
 132   1          if(channel==SPI_Channel_0)
 133   1          {
 134   2              SET_MASK(SPISTS, CH0START);
 135   2              SPIDATA = LSB;
 136   2              SET_MASK(SPISTS, CH0START);
 137   2              settingok = 0x01;
 138   2          }
 139   1          else if(channel==SPI_Channel_1)
 140   1          {
 141   2              SET_MASK(SPISTS, CH1START);
 142   2              SPIDATA = LSB;
 143   2              SET_MASK(SPISTS, CH1START);
 144   2              settingok = 0x01;
 145   2          }
 146   1      }
 147          
 148          //-----------------------------------------------------------------------
 149          //
 150          //-----------------------------------------------------------------------
 151          BYTE SPIReadByte(BYTE channel)
 152          {
 153   1          BYTE settingok;
 154   1          settingok = 0x00;
 155   1          
 156   1          SET_MASK(SPICTRL2, BLKSEL);    // Blocking selection.
 157   1          SET_MASK(SPICTRL2, CHRW);      // Read cycle.
 158   1      
 159   1          if(channel==SPI_Channel_0)
 160   1          {
 161   2              SET_MASK(SPISTS, CH0START);
 162   2              settingok = 0x01;
 163   2          }
 164   1          else if(channel==SPI_Channel_1)
 165   1          {
 166   2              SET_MASK(SPISTS, CH1START);
 167   2              settingok = 0x01;
 168   2          }
 169   1      
 170   1          return(SPIDATA);
 171   1      }
 172          
 173          //----------------------------------------------------------------------------
 174          //
 175          //----------------------------------------------------------------------------
 176          BYTE spi_read_sensor(unsigned char addr)
 177          {
 178   1              BYTE temp;
C51 COMPILER V7.50   OEM_SPI                                                               09/08/2020 15:56:25 PAGE 4   

 179   1      
 180   1          SPIWriteByte(addr, SPI_Channel);
 181   1          WNCKR = 0x00;               // Delay 15.26 us
 182   1          temp = SPIReadByte(SPI_Channel);
 183   1          WNCKR = 0x00;               // Delay 15.26 us
 184   1              return temp;
 185   1      }
 186          
 187          //----------------------------------------------------------------------------
 188          //
 189          //----------------------------------------------------------------------------
 190          void spi_write_sensor(unsigned char addr, unsigned char data_in)
 191          {
 192   1          if(SPI_Mouse_ID==SPI_Mouse_Sensor_ID_Avago)
 193   1          {
 194   2              addr |= 0x80;
 195   2          }
 196   1      
 197   1          SPIWriteWord(addr, data_in, SPI_Channel);
 198   1              WNCKR = 0x00;               // Delay 15.26 us
 199   1              WNCKR = 0x00;               // Delay 15.26 us
 200   1      }
 201          
 202          //----------------------------------------------------------------------------
 203          //
 204          //----------------------------------------------------------------------------
 205          void Power_Up_Sequence(void)
 206          {
 207   1          /*
 208   1          BYTE spi_temp;
 209   1      
 210   1              spi_write_sensor(ADBM_A320_SOFTRESET_ADDR, 0x5A);
 211   1              #ifdef MOTION_BURST
 212   1              spi_write_sensor(ADBM_A320_IO_MODE_ADDR, ADBM_A320_BURST);
 213   1              #endif
 214   1              spi_write_sensor(ADBM_A320_OFN_ENGINE_ADDR, 0xE4); // Write 0xA0 to address 0x60 
 215   1      
 216   1              // speed switching thresholds
 217   1              spi_write_sensor(ADBM_A320_OFN_RESOLUTION_ADDR, 0x12); // Wakeup 500DPI
 218   1              spi_write_sensor(ADBM_A320_OFN_SPEED_CONTROL_ADDR, 0x0E); // 16ms, low DPI
 219   1              spi_write_sensor(ADBM_A320_OFN_SPEED_ST12_ADDR, 0x08); 
 220   1              spi_write_sensor(ADBM_A320_OFN_SPEED_ST21_ADDR, 0x06);           
 221   1              spi_write_sensor(ADBM_A320_OFN_SPEED_ST23_ADDR, 0x40); 
 222   1              spi_write_sensor(ADBM_A320_OFN_SPEED_ST32_ADDR, 0x08); 
 223   1              spi_write_sensor(ADBM_A320_OFN_SPEED_ST34_ADDR, 0x48); 
 224   1              spi_write_sensor(ADBM_A320_OFN_SPEED_ST43_ADDR, 0x0A); 
 225   1              spi_write_sensor(ADBM_A320_OFN_SPEED_ST45_ADDR, 0x50); 
 226   1              spi_write_sensor(ADBM_A320_OFN_SPEED_ST54_ADDR, 0x48); 
 227   1      
 228   1              // assert/ deassert thresholds
 229   1              spi_write_sensor(ADBM_A320_OFN_AD_ATH_HIGH_ADDR, 0x34);
 230   1              spi_write_sensor(ADBM_A320_OFN_AD_DTH_HIGH_ADDR, 0x3C);
 231   1              spi_write_sensor(ADBM_A320_OFN_AD_ATH_LOW_ADDR, 0x18);
 232   1              spi_write_sensor(ADBM_A320_OFN_AD_DTH_LOW_ADDR, 0x20);
 233   1      
 234   1              // FPD
 235   1              spi_write_sensor(ADBM_A320_OFN_FPD_CTRL_ADDR, 0x50); 
 236   1              spi_write_sensor(0x76, 0x0F); 
 237   1      
 238   1              // XYQ
 239   1              spi_write_sensor(ADBM_A320_OFN_QUANTIZE_CTRL_ADDR, 0x99); 
 240   1              spi_write_sensor(ADBM_A320_OFN_XYQ_THRESH_ADDR, 0x02); 
C51 COMPILER V7.50   OEM_SPI                                                               09/08/2020 15:56:25 PAGE 5   

 241   1      
 242   1              // Read from registers 0x02, 0x03 and 0x04
 243   1              spi_temp = spi_read_sensor(ADBM_A320_MOTION_ADDR);
 244   1              spi_temp = spi_read_sensor(ADBM_A320_DELTAX_ADDR);
 245   1              spi_temp = spi_read_sensor(ADBM_A320_DELTAY_ADDR);
 246   1      
 247   1              // Lengthen Rest1 to Rest2 downshift time
 248   1              spi_write_sensor(0x29, 0xC1); 
 249   1              spi_write_sensor(0x15, 0xFF); 
 250   1              spi_write_sensor(0x29, 0xA1); 
 251   1              */
 252   1      }
 253          
 254          //----------------------------------------------------------------------------
 255          //
 256          //----------------------------------------------------------------------------
 257          void Init_Avago(void)
 258          {
 259   1          /*
 260   1              Power_Up_Sequence();
 261   1              spi_write_sensor(ADBM_A320_CONFIGURATIONBITS_ADDR, 0x80);  // Configuration register data (Normal 800CPI)
 262   1          */
 263   1      }
 264          
 265          //----------------------------------------------------------------------------
 266          //
 267          //----------------------------------------------------------------------------
 268          void Init_PIXART(void)
 269          {
 270   1          /*
 271   1          spi_write_sensor(PIXART_PAW3002OL_Write_Protect, 0x5A);
 272   1          spi_write_sensor(PIXART_PAW3002OL_Operation_Mode, 0x09); 
 273   1          spi_write_sensor(PIXART_PAW3002OL_Configuration, 0x07); 
 274   1          spi_write_sensor(PIXART_PAW3002OL_Operation_State, 0x70); 
 275   1          spi_write_sensor(PIXART_PAW3002OL_Navimode1, 0x30); 
 276   1          spi_write_sensor(PIXART_PAW3002OL_DeflickerSwitch, 0x0D); 
 277   1          spi_write_sensor(PIXART_PAW3002OL_Write_Protect, 0x00); 
 278   1          */
 279   1      }
 280          
 281          //----------------------------------------------------------------------------
 282          //
 283          //----------------------------------------------------------------------------
 284          void Init_SPIMouseSensor(void)
 285          {
 286   1          BYTE index;
 287   1      
 288   1          Enable_SPIInterface();
 289   1      
 290   1          SPI_Mouse_ID = 0x00;    // Clear device ID.
 291   1      
 292   1          for(index=0x00;index<3;index++)
 293   1          {
 294   2                  SPI_Mouse_ID = spi_read_sensor(ADBM_A320_PRODUCTID_ADDR);
 295   2              if(SPI_Mouse_ID==SPI_Mouse_Sensor_ID_Avago || SPI_Mouse_ID==SPI_Mouse_Sensor_ID_PIXART)
 296   2              {
 297   3                  break;
 298   3              }
 299   2          }
 300   1      
 301   1          if(SPI_Mouse_ID==SPI_Mouse_Sensor_ID_Avago)
 302   1          {
C51 COMPILER V7.50   OEM_SPI                                                               09/08/2020 15:56:25 PAGE 6   

 303   2              Init_Avago();
 304   2          }
 305   1          else if(SPI_Mouse_ID==SPI_Mouse_Sensor_ID_PIXART)
 306   1          {
 307   2              Init_PIXART();
 308   2          }
 309   1      
 310   1          ClearSPIMouseSensorBuf();
 311   1      }
 312          
 313          //----------------------------------------------------------------------------
 314          //
 315          //----------------------------------------------------------------------------
 316          void CheckMotionPin(void)
 317          {
 318   1          /*
 319   1          BYTE spi_temp;
 320   1          XWORD XMovement_Templ;
 321   1          XWORD YMovement_Templ;
 322   1          BYTE temp;
 323   1          
 324   1          if(MouseDriverIn)
 325   1          {
 326   1              if(Read_Motion())
 327   1              {
 328   1                  if(SPI_Mouse_Buf_Index!=0x00)
 329   1                  {
 330   1                      return;
 331   1                  }
 332   1      
 333   1                  if(SPI_Mouse_ID==SPI_Mouse_Sensor_ID_PIXART)
 334   1                  {
 335   1                      temp = spi_read_sensor(PIXART_PAW3002OL_Motion_Status);
 336   1                  }
 337   1                  
 338   1                  if(SPI_Mouse_ID==SPI_Mouse_Sensor_ID_Avago)
 339   1                  {
 340   1                          SPI_Mouse_DeltaX = spi_read_sensor(ADBM_A320_DELTAX_ADDR);
 341   1                  }
 342   1                  else if(SPI_Mouse_ID==SPI_Mouse_Sensor_ID_PIXART)
 343   1                  {
 344   1                      SPI_Mouse_DeltaX = spi_read_sensor(PIXART_PAW3002OL_EnhancedDelta_X);
 345   1                  }
 346   1      
 347   1                  if(SPI_Mouse_DeltaX<0x80)
 348   1                  {
 349   1                      if(IS_MASK_SET(SPI_Mouse_BYTE1, X_Signbit))
 350   1                      {
 351   1                          SPI_Mouse_XMovement=0x00;
 352   1                      }
 353   1                      SPI_Mouse_BYTE1 &= ~X_Signbit;
 354   1      
 355   1                      XMovement_Templ = SPI_Mouse_XMovement;
 356   1                      XMovement_Templ += SPI_Mouse_DeltaX;
 357   1                      if(XMovement_Templ>0xFF)
 358   1                      {
 359   1                          SPI_Mouse_XMovement = 0xFF;
 360   1                          SET_MASK(SPI_Mouse_BYTE1, X_Overflow);
 361   1                      }
 362   1                      else
 363   1                      {
 364   1                          SPI_Mouse_XMovement = (BYTE)XMovement_Templ;
C51 COMPILER V7.50   OEM_SPI                                                               09/08/2020 15:56:25 PAGE 7   

 365   1                          CLEAR_MASK(SPI_Mouse_BYTE1, X_Overflow);
 366   1                      } 
 367   1                  }
 368   1                  else
 369   1                  {
 370   1                      if(IS_MASK_CLEAR(SPI_Mouse_BYTE1, X_Signbit))
 371   1                      {
 372   1                          SPI_Mouse_XMovement=0x00;
 373   1                      }
 374   1                      
 375   1                      SPI_Mouse_BYTE1 |= X_Signbit;
 376   1                      SPI_Mouse_DeltaX = (~SPI_Mouse_DeltaX)+1; 
 377   1                      XMovement_Templ = SPI_Mouse_XMovement;  
 378   1                      XMovement_Templ += SPI_Mouse_DeltaX;
 379   1      
 380   1                      if(XMovement_Templ>0xFF)
 381   1                      {
 382   1                          SPI_Mouse_XMovement = 0x01;
 383   1                          SET_MASK(SPI_Mouse_BYTE1, X_Overflow);
 384   1                      }
 385   1                      else
 386   1                      {
 387   1                          SPI_Mouse_XMovement = (BYTE)XMovement_Templ;
 388   1                          SPI_Mouse_XMovement = (~SPI_Mouse_XMovement)+1;
 389   1                          CLEAR_MASK(SPI_Mouse_BYTE1, X_Overflow);
 390   1                      } 
 391   1                  }
 392   1      
 393   1                  if(SPI_Mouse_ID==SPI_Mouse_Sensor_ID_Avago)
 394   1                  {
 395   1                          SPI_Mouse_DeltaY = spi_read_sensor(ADBM_A320_DELTAY_ADDR);
 396   1                  }
 397   1                  else if(SPI_Mouse_ID==SPI_Mouse_Sensor_ID_PIXART)
 398   1                  {
 399   1                      SPI_Mouse_DeltaY= spi_read_sensor(PIXART_PAW3002OL_EnhancedDelta_Y);
 400   1                  }
 401   1      
 402   1                  if(SPI_Mouse_DeltaY<0x80)
 403   1                  {
 404   1                      if(IS_MASK_SET(SPI_Mouse_BYTE1, Y_Signbit))
 405   1                      {
 406   1                          SPI_Mouse_YMovement=0x00;
 407   1                      }
 408   1                      
 409   1                      SPI_Mouse_BYTE1 &= ~Y_Signbit;
 410   1      
 411   1                      YMovement_Templ = SPI_Mouse_YMovement;
 412   1                      YMovement_Templ += SPI_Mouse_DeltaY;
 413   1                      if(YMovement_Templ>0xFF)
 414   1                      {
 415   1                          SPI_Mouse_YMovement = 0xFF;
 416   1                          SET_MASK(SPI_Mouse_BYTE1, Y_Overflow);
 417   1                      }
 418   1                      else
 419   1                      {
 420   1                          SPI_Mouse_YMovement = (BYTE)YMovement_Templ;
 421   1                          CLEAR_MASK(SPI_Mouse_BYTE1, Y_Overflow);
 422   1                      }
 423   1                  }
 424   1                  else
 425   1                  {
 426   1                      if(IS_MASK_CLEAR(SPI_Mouse_BYTE1, Y_Signbit))
C51 COMPILER V7.50   OEM_SPI                                                               09/08/2020 15:56:25 PAGE 8   

 427   1                      {
 428   1                          SPI_Mouse_YMovement=0x00;
 429   1                      }
 430   1                      
 431   1                      SPI_Mouse_BYTE1 |= Y_Signbit;
 432   1                      SPI_Mouse_DeltaY= (~SPI_Mouse_DeltaY)+1; 
 433   1      
 434   1                      YMovement_Templ = SPI_Mouse_YMovement;      
 435   1                      YMovement_Templ += SPI_Mouse_DeltaY;
 436   1      
 437   1                      if(YMovement_Templ>0xFF)
 438   1                      {
 439   1                          SPI_Mouse_YMovement = 0x01;
 440   1                          SET_MASK(SPI_Mouse_BYTE1, Y_Overflow);
 441   1                      }
 442   1                      else
 443   1                      {
 444   1                          SPI_Mouse_YMovement = (BYTE)YMovement_Templ;
 445   1                          SPI_Mouse_YMovement = (~SPI_Mouse_YMovement)+1;
 446   1                          CLEAR_MASK(SPI_Mouse_BYTE1, Y_Overflow);
 447   1                      } 
 448   1                  }
 449   1      
 450   1                  if(Read_Left_Button())
 451   1                  {
 452   1                      SET_MASK(SPI_Mouse_BYTE1, LeftBtn);
 453   1                  }
 454   1                  else
 455   1                  {
 456   1                      CLEAR_MASK(SPI_Mouse_BYTE1, LeftBtn);
 457   1                  }
 458   1                  //CLEAR_MASK(SPI_Mouse_Misc, SPI_Mouse_Need_Break);
 459   1                  
 460   1                  SPI_Mouse_Buf[2]=SPI_Mouse_BYTE1 |= Always1;
 461   1                  SPI_Mouse_Buf[1]=SPI_Mouse_XMovement;
 462   1                  SPI_Mouse_Buf[0]=SPI_Mouse_YMovement;
 463   1                  
 464   1                  if(SPI_Mouse_Buf_Index==0x00)
 465   1                  {
 466   1                      SPI_Mouse_Buf_Index = 0x03;
 467   1                  }
 468   1              }
 469   1              else
 470   1              {
 471   1                  SPI_Mouse_XMovement = 0x00;
 472   1                  SPI_Mouse_YMovement = 0x00;
 473   1              }
 474   1          }
 475   1          */
 476   1      }
 477          
 478          //----------------------------------------------------------------------------
 479          //
 480          //----------------------------------------------------------------------------
 481          void EmulationSendMouseData(void)
 482          {
 483   1          /*
 484   1          if(MouseDriverIn)
 485   1          {
 486   1              if(SPI_Mouse_Buf_Index!=0x00)
 487   1              {
 488   1                  if(IS_MASK_SET(KBHISR,OBF)||IS_MASK_SET(KBHISR,IBF)||Ccb42_DISAB_AUX)
C51 COMPILER V7.50   OEM_SPI                                                               09/08/2020 15:56:25 PAGE 9   

 489   1                      {
 490   1      
 491   1                      }
 492   1                  else
 493   1                  {
 494   1                      SPI_Mouse_Buf_Index--;
 495   1                      SendFromAux(SPI_Mouse_Buf[SPI_Mouse_Buf_Index]);
 496   1      
 497   1                      if(SPI_Mouse_Buf_Index==0x02)
 498   1                      {
 499   1                          CLEAR_MASK(SPI_Mouse_BYTE1, Y_Overflow);
 500   1                          CLEAR_MASK(SPI_Mouse_BYTE1, X_Overflow);
 501   1                      }
 502   1                      else if(SPI_Mouse_Buf_Index==0x01)
 503   1                      {
 504   1                          SPI_Mouse_XMovement = 0x00;
 505   1                      }
 506   1                      else if(SPI_Mouse_Buf_Index==0x00)
 507   1                      {
 508   1                          SPI_Mouse_YMovement = 0x00;
 509   1      
 510   1                          if(IS_MASK_SET(SPI_Mouse_Misc, SPI_Mouse_Need_Break))
 511   1                          {
 512   1                              CLEAR_MASK(SPI_Mouse_Misc, SPI_Mouse_Need_Break);
 513   1                              SPI_Mouse_Buf_Index = 0x03;
 514   1                              SPI_Mouse_BYTE1 = Always1;
 515   1                              SPI_Mouse_Buf[2]=SPI_Mouse_BYTE1;
 516   1                              SPI_Mouse_Buf[1]=0x00;
 517   1                              SPI_Mouse_Buf[0]=0x00;
 518   1                          }
 519   1                      }
 520   1                  }
 521   1              }
 522   1          }
 523   1          */
 524   1      }
 525          
 526          //----------------------------------------------------------------------------
 527          //
 528          //----------------------------------------------------------------------------
 529          void ProcessLeftBtnPress(void)
 530          {
 531   1          /*
 532   1          if(MouseDriverIn)
 533   1          {
 534   1              if(SPI_Mouse_Buf_Index==0x00)
 535   1              {
 536   1                  SPI_Mouse_Buf_Index = 0x03;
 537   1                  SPI_Mouse_BYTE1 = Always1+LeftBtn;
 538   1                  SPI_Mouse_Buf[2]=SPI_Mouse_BYTE1;
 539   1                  SPI_Mouse_Buf[1]=0x00;
 540   1                  SPI_Mouse_Buf[0]=0x00;
 541   1                  CLEAR_MASK(SPI_Mouse_Misc, SPI_Mouse_Need_Break);
 542   1              }
 543   1              else
 544   1              {
 545   1      
 546   1              }
 547   1          }
 548   1          */
 549   1      }
 550          
C51 COMPILER V7.50   OEM_SPI                                                               09/08/2020 15:56:25 PAGE 10  

 551          //----------------------------------------------------------------------------
 552          //
 553          //----------------------------------------------------------------------------
 554          void ProcessLeftBtnRelease(void)
 555          {
 556   1          /*
 557   1          if(MouseDriverIn)
 558   1          {
 559   1              if(SPI_Mouse_Buf_Index==0x00)
 560   1              {
 561   1                  SPI_Mouse_Buf_Index = 0x03;
 562   1                  SPI_Mouse_BYTE1 = Always1;
 563   1                  SPI_Mouse_Buf[2]=SPI_Mouse_BYTE1;
 564   1                  SPI_Mouse_Buf[1]=0x00;
 565   1                  SPI_Mouse_Buf[0]=0x00;
 566   1              }
 567   1              else
 568   1              {
 569   1                  SET_MASK(SPI_Mouse_Misc, SPI_Mouse_Need_Break);
 570   1              }
 571   1          }
 572   1          */
 573   1      }
 574          
 575          //----------------------------------------------------------------------------
 576          //
 577          //----------------------------------------------------------------------------
 578          void ClearSPIMouseSensorBuf(void)
 579          {
 580   1          SPI_Mouse_Buf[2]=0x00;
 581   1          SPI_Mouse_Buf[1]=0x00;
 582   1          SPI_Mouse_Buf[0]=0x00;
 583   1          SPI_Mouse_DeltaX=0x00;
 584   1          SPI_Mouse_DeltaY=0x00;
 585   1          SPI_Mouse_BYTE1=0x00;
 586   1          SPI_Mouse_XMovement=0x00;
 587   1          SPI_Mouse_YMovement=0x00;
 588   1          SPI_Mouse_Buf_Index=0x00;
 589   1          SPI_Mouse_Misc=0x00;  
 590   1      }
C51 COMPILER V7.50   OEM_SPI                                                               09/08/2020 15:56:25 PAGE 11  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0033 (BEGIN)
0000         L?0052:
0000 900000      E     MOV     DPTR,#SPIDATA
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005         L?0053:
0005 900000      E     MOV     DPTR,#SPICTRL2
0008 E0                MOVX    A,@DPTR
0009 4402              ORL     A,#02H
000B F0                MOVX    @DPTR,A
000C E0                MOVX    A,@DPTR
000D 22                RET     
000E         L?0054:
000E         L?0055:
000E 900000      E     MOV     DPTR,#SPISTS
0011 E0                MOVX    A,@DPTR
0012 4410              ORL     A,#010H
0014 F0                MOVX    @DPTR,A
0015 22                RET     
0016         L?0056:
0016         L?0057:
0016 900000      E     MOV     DPTR,#SPISTS
0019 E0                MOVX    A,@DPTR
001A 4408              ORL     A,#08H
001C F0                MOVX    @DPTR,A
001D 22                RET     
001E         L?0058:
001E F0                MOVX    @DPTR,A
001F 900000      E     MOV     DPTR,#GPCRC3
0022 F0                MOVX    @DPTR,A
0023 900000      E     MOV     DPTR,#GPCRC5
0026 F0                MOVX    @DPTR,A
0027 22                RET     
             ; FUNCTION Com0033 (END)

             ; FUNCTION _Init_SPIInterface (BEGIN)
                                           ; SOURCE LINE # 15
;---- Variable 'channel' assigned to Register 'R7' ----
;---- Variable 'supportbusy' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 16
                                           ; SOURCE LINE # 19
;---- Variable 'settingOK' assigned to Register 'R6' ----
0000 7E01              MOV     R6,#01H
                                           ; SOURCE LINE # 21
0002 EF                MOV     A,R7
0003 700E              JNZ     ?C0001
                                           ; SOURCE LINE # 22
                                           ; SOURCE LINE # 23
0005 900000      E     MOV     DPTR,#GCR1
0008 E0                MOVX    A,@DPTR
0009 4410              ORL     A,#010H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 24
000C E4                CLR     A
000D 900000      E     MOV     DPTR,#GPCRG2
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 25
0011 802A              SJMP    ?C0002
0013         ?C0001:
C51 COMPILER V7.50   OEM_SPI                                                               09/08/2020 15:56:25 PAGE 12  

                                           ; SOURCE LINE # 26
0013 EF                MOV     A,R7
0014 B4010A            CJNE    A,#01H,?C0003
                                           ; SOURCE LINE # 27
                                           ; SOURCE LINE # 28
0017 900000      E     MOV     DPTR,#GCR1
001A E0                MOVX    A,@DPTR
001B 4420              ORL     A,#020H
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 29
001E E4                CLR     A
                                           ; SOURCE LINE # 30
001F 8010              SJMP    ?C0049
0021         ?C0003:
                                           ; SOURCE LINE # 31
0021 EF                MOV     A,R7
0022 900000      E     MOV     DPTR,#GCR1
0025 B4020F            CJNE    A,#02H,?C0005
                                           ; SOURCE LINE # 32
                                           ; SOURCE LINE # 33
0028 E0                MOVX    A,@DPTR
0029 4430              ORL     A,#030H
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 34
002C E4                CLR     A
002D 900000      E     MOV     DPTR,#GPCRG2
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 35
0031         ?C0049:
0031 900000      E     MOV     DPTR,#GPCRG0
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 36
0035 8006              SJMP    ?C0002
0037         ?C0005:
                                           ; SOURCE LINE # 38
                                           ; SOURCE LINE # 39
0037 E0                MOVX    A,@DPTR
0038 54CF              ANL     A,#0CFH
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 40
003B E4                CLR     A
003C FE                MOV     R6,A
                                           ; SOURCE LINE # 41
003D         ?C0002:
                                           ; SOURCE LINE # 43
003D EE                MOV     A,R6
003E B40119            CJNE    A,#01H,?C0009
                                           ; SOURCE LINE # 44
                                           ; SOURCE LINE # 45
0041 ED                MOV     A,R5
0042 B40107            CJNE    A,#01H,?C0008
                                           ; SOURCE LINE # 46
                                           ; SOURCE LINE # 47
0045 900000      E     MOV     DPTR,#GCR1
0048 E0                MOVX    A,@DPTR
0049 4440              ORL     A,#040H
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 48
004C         ?C0008:
                                           ; SOURCE LINE # 50
004C E4                CLR     A
004D 900000      E     MOV     DPTR,#GPCRA6
C51 COMPILER V7.50   OEM_SPI                                                               09/08/2020 15:56:25 PAGE 13  

                                           ; SOURCE LINE # 51
                                           ; SOURCE LINE # 52
0050 120000      R     LCALL   L?0058
                                           ; SOURCE LINE # 55
0053 900000      E     MOV     DPTR,#SPICTRL1
0056 E0                MOVX    A,@DPTR
0057 4470              ORL     A,#070H
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 57
                                           ; SOURCE LINE # 58
005A         ?C0009:
005A 22                RET     
             ; FUNCTION _Init_SPIInterface (END)

             ; FUNCTION _Disable_SPIInterface (BEGIN)
                                           ; SOURCE LINE # 63
;---- Variable 'channel' assigned to Register 'R5' ----
0000 CD                XCH     A,R5
0001 EF                MOV     A,R7
0002 CD                XCH     A,R5
                                           ; SOURCE LINE # 64
                                           ; SOURCE LINE # 65
0003 900000      E     MOV     DPTR,#GCR1
0006 E0                MOVX    A,@DPTR
0007 548F              ANL     A,#08FH
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 67
000A ED                MOV     A,R5
000B 7005              JNZ     ?C0010
                                           ; SOURCE LINE # 68
                                           ; SOURCE LINE # 69
000D 900000      E     MOV     DPTR,#GPCRG2
                                           ; SOURCE LINE # 70
0010 8007              SJMP    ?C0050
0012         ?C0010:
                                           ; SOURCE LINE # 71
0012 ED                MOV     A,R5
0013 B40108            CJNE    A,#01H,?C0012
                                           ; SOURCE LINE # 72
                                           ; SOURCE LINE # 73
0016 900000      E     MOV     DPTR,#GPCRG0
0019         ?C0050:
0019 7480              MOV     A,#080H
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 74
001C 800E              SJMP    ?C0011
001E         ?C0012:
                                           ; SOURCE LINE # 75
001E ED                MOV     A,R5
001F B4020A            CJNE    A,#02H,?C0011
                                           ; SOURCE LINE # 76
                                           ; SOURCE LINE # 77
0022 900000      E     MOV     DPTR,#GPCRG2
0025 7480              MOV     A,#080H
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 78
0028 900000      E     MOV     DPTR,#GPCRG0
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 79
002C         ?C0011:
                                           ; SOURCE LINE # 81
002C 900000      E     MOV     DPTR,#GPCRA6
C51 COMPILER V7.50   OEM_SPI                                                               09/08/2020 15:56:25 PAGE 14  

002F 7480              MOV     A,#080H
                                           ; SOURCE LINE # 82
                                           ; SOURCE LINE # 83
0031 120000      R     LCALL   L?0058
                                           ; SOURCE LINE # 84
0034 22                RET     
             ; FUNCTION _Disable_SPIInterface (END)

             ; FUNCTION Enable_SPIInterface (BEGIN)
                                           ; SOURCE LINE # 89
                                           ; SOURCE LINE # 90
                                           ; SOURCE LINE # 91
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 FF                MOV     R7,A
0003 020000      R     LJMP    _Init_SPIInterface
             ; FUNCTION Enable_SPIInterface (END)

             ; FUNCTION _SPIWriteByte (BEGIN)
                                           ; SOURCE LINE # 97
;---- Variable 'channel' assigned to Register 'R5' ----
;---- Variable 'spidata' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 98
                                           ; SOURCE LINE # 100
;---- Variable 'settingok' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 102
                                           ; SOURCE LINE # 104
                                           ; SOURCE LINE # 105
0000 120000      R     LCALL   L?0052
0003 54FB              ANL     A,#0FBH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 107
0006 ED                MOV     A,R5
0007 7004              JNZ     ?C0017
                                           ; SOURCE LINE # 108
                                           ; SOURCE LINE # 109
0009 120000      R     LCALL   L?0054
                                           ; SOURCE LINE # 110
                                           ; SOURCE LINE # 111
000C 22                RET     
000D         ?C0017:
                                           ; SOURCE LINE # 112
000D ED                MOV     A,R5
000E B40103            CJNE    A,#01H,?C0020
                                           ; SOURCE LINE # 113
                                           ; SOURCE LINE # 114
0011 120000      R     LCALL   L?0056
                                           ; SOURCE LINE # 115
                                           ; SOURCE LINE # 116
                                           ; SOURCE LINE # 117
0014         ?C0020:
0014 22                RET     
             ; FUNCTION _SPIWriteByte (END)

             ; FUNCTION _SPIWriteWord (BEGIN)
                                           ; SOURCE LINE # 122
;---- Variable 'MSB' assigned to Register 'R7' ----
;---- Variable 'channel' assigned to Register 'R3' ----
;---- Variable 'LSB' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 123
                                           ; SOURCE LINE # 125
;---- Variable 'settingok' assigned to Register 'R6' ----
C51 COMPILER V7.50   OEM_SPI                                                               09/08/2020 15:56:25 PAGE 15  

                                           ; SOURCE LINE # 127
                                           ; SOURCE LINE # 129
                                           ; SOURCE LINE # 130
0000 120000      R     LCALL   L?0052
0003 54FB              ANL     A,#0FBH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 132
0006 EB                MOV     A,R3
0007 700C              JNZ     ?C0021
                                           ; SOURCE LINE # 133
                                           ; SOURCE LINE # 134
0009 120000      R     LCALL   L?0054
                                           ; SOURCE LINE # 135
000C 900000      E     MOV     DPTR,#SPIDATA
000F ED                MOV     A,R5
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 136
0011 120000      R     LCALL   L?0055
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 138
0014 22                RET     
0015         ?C0021:
                                           ; SOURCE LINE # 139
0015 EB                MOV     A,R3
0016 B4010B            CJNE    A,#01H,?C0024
                                           ; SOURCE LINE # 140
                                           ; SOURCE LINE # 141
0019 120000      R     LCALL   L?0056
                                           ; SOURCE LINE # 142
001C 900000      E     MOV     DPTR,#SPIDATA
001F ED                MOV     A,R5
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 143
0021 120000      R     LCALL   L?0057
                                           ; SOURCE LINE # 144
                                           ; SOURCE LINE # 145
                                           ; SOURCE LINE # 146
0024         ?C0024:
0024 22                RET     
             ; FUNCTION _SPIWriteWord (END)

             ; FUNCTION _SPIReadByte (BEGIN)
                                           ; SOURCE LINE # 151
;---- Variable 'channel' assigned to Register 'R4' ----
0000 CC                XCH     A,R4
0001 EF                MOV     A,R7
0002 CC                XCH     A,R4
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 154
;---- Variable 'settingok' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 156
                                           ; SOURCE LINE # 157
0003 120000      R     LCALL   L?0053
0006 4404              ORL     A,#04H
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 159
0009 EC                MOV     A,R4
000A 7005              JNZ     ?C0025
                                           ; SOURCE LINE # 160
                                           ; SOURCE LINE # 161
000C 120000      R     LCALL   L?0055
                                           ; SOURCE LINE # 162
C51 COMPILER V7.50   OEM_SPI                                                               09/08/2020 15:56:25 PAGE 16  

                                           ; SOURCE LINE # 163
000F 8007              SJMP    ?C0026
0011         ?C0025:
                                           ; SOURCE LINE # 164
0011 EC                MOV     A,R4
0012 B40103            CJNE    A,#01H,?C0026
                                           ; SOURCE LINE # 165
                                           ; SOURCE LINE # 166
0015 120000      R     LCALL   L?0057
                                           ; SOURCE LINE # 167
                                           ; SOURCE LINE # 168
0018         ?C0026:
                                           ; SOURCE LINE # 170
0018 900000      E     MOV     DPTR,#SPIDATA
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
                                           ; SOURCE LINE # 171
001D         ?C0028:
001D 22                RET     
             ; FUNCTION _SPIReadByte (END)

             ; FUNCTION _spi_read_sensor (BEGIN)
                                           ; SOURCE LINE # 176
;---- Variable 'addr' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 177
                                           ; SOURCE LINE # 180
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 120000      R     LCALL   _SPIWriteByte
                                           ; SOURCE LINE # 181
0005 E4                CLR     A
0006 900000      E     MOV     DPTR,#WNCKR
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 182
000A FF                MOV     R7,A
000B 120000      R     LCALL   _SPIReadByte
;---- Variable 'temp' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 183
000E E4                CLR     A
000F 900000      E     MOV     DPTR,#WNCKR
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 184
                                           ; SOURCE LINE # 185
0013         ?C0029:
0013 22                RET     
             ; FUNCTION _spi_read_sensor (END)

             ; FUNCTION _spi_write_sensor (BEGIN)
                                           ; SOURCE LINE # 190
;---- Variable 'addr' assigned to Register 'R7' ----
;---- Variable 'data_in' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 191
                                           ; SOURCE LINE # 192
0000 900000      E     MOV     DPTR,#SPI_Mouse_ID
0003 E0                MOVX    A,@DPTR
0004 B48304            CJNE    A,#083H,?C0030
                                           ; SOURCE LINE # 193
                                           ; SOURCE LINE # 194
0007 EF                MOV     A,R7
0008 4480              ORL     A,#080H
000A FF                MOV     R7,A
                                           ; SOURCE LINE # 195
C51 COMPILER V7.50   OEM_SPI                                                               09/08/2020 15:56:25 PAGE 17  

000B         ?C0030:
                                           ; SOURCE LINE # 197
000B E4                CLR     A
000C FB                MOV     R3,A
000D 120000      R     LCALL   _SPIWriteWord
                                           ; SOURCE LINE # 198
0010 E4                CLR     A
0011 900000      E     MOV     DPTR,#WNCKR
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 199
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 200
0016 22                RET     
             ; FUNCTION _spi_write_sensor (END)

             ; FUNCTION Power_Up_Sequence (BEGIN)
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 206
                                           ; SOURCE LINE # 252
0000 22                RET     
             ; FUNCTION Power_Up_Sequence (END)

             ; FUNCTION Init_Avago (BEGIN)
                                           ; SOURCE LINE # 257
                                           ; SOURCE LINE # 258
                                           ; SOURCE LINE # 263
0000 22                RET     
             ; FUNCTION Init_Avago (END)

             ; FUNCTION Init_PIXART (BEGIN)
                                           ; SOURCE LINE # 268
                                           ; SOURCE LINE # 269
                                           ; SOURCE LINE # 279
0000 22                RET     
             ; FUNCTION Init_PIXART (END)

             ; FUNCTION Init_SPIMouseSensor (BEGIN)
                                           ; SOURCE LINE # 284
                                           ; SOURCE LINE # 285
                                           ; SOURCE LINE # 288
0000 120000      R     LCALL   Enable_SPIInterface
                                           ; SOURCE LINE # 290
0003 E4                CLR     A
0004 900000      E     MOV     DPTR,#SPI_Mouse_ID
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 292
;---- Variable 'index' assigned to Register 'R3' ----
0008 FB                MOV     R3,A
0009         ?C0035:
                                           ; SOURCE LINE # 293
                                           ; SOURCE LINE # 294
0009 E4                CLR     A
000A FF                MOV     R7,A
000B 120000      R     LCALL   _spi_read_sensor
000E 900000      E     MOV     DPTR,#SPI_Mouse_ID
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 295
0013 E0                MOVX    A,@DPTR
0014 6483              XRL     A,#083H
0016 600A              JZ      ?C0036
0018 E0                MOVX    A,@DPTR
C51 COMPILER V7.50   OEM_SPI                                                               09/08/2020 15:56:25 PAGE 18  

0019 6430              XRL     A,#030H
001B 6005              JZ      ?C0036
                                           ; SOURCE LINE # 296
                                           ; SOURCE LINE # 297
                                           ; SOURCE LINE # 298
                                           ; SOURCE LINE # 299
001D         ?C0037:
001D 0B                INC     R3
001E EB                MOV     A,R3
001F B403E7            CJNE    A,#03H,?C0035
0022         ?C0036:
                                           ; SOURCE LINE # 301
0022 900000      E     MOV     DPTR,#SPI_Mouse_ID
0025 E0                MOVX    A,@DPTR
0026 B48305            CJNE    A,#083H,?C0040
                                           ; SOURCE LINE # 302
                                           ; SOURCE LINE # 303
0029 120000      R     LCALL   Init_Avago
                                           ; SOURCE LINE # 304
002C 800A              SJMP    ?C0041
002E         ?C0040:
                                           ; SOURCE LINE # 305
002E 900000      E     MOV     DPTR,#SPI_Mouse_ID
0031 E0                MOVX    A,@DPTR
0032 B43003            CJNE    A,#030H,?C0041
                                           ; SOURCE LINE # 306
                                           ; SOURCE LINE # 307
0035 120000      R     LCALL   Init_PIXART
                                           ; SOURCE LINE # 308
0038         ?C0041:
                                           ; SOURCE LINE # 310
0038 020000      R     LJMP    ClearSPIMouseSensorBuf
             ; FUNCTION Init_SPIMouseSensor (END)

             ; FUNCTION CheckMotionPin (BEGIN)
                                           ; SOURCE LINE # 316
                                           ; SOURCE LINE # 317
                                           ; SOURCE LINE # 476
0000 22                RET     
             ; FUNCTION CheckMotionPin (END)

             ; FUNCTION EmulationSendMouseData (BEGIN)
                                           ; SOURCE LINE # 481
                                           ; SOURCE LINE # 482
                                           ; SOURCE LINE # 524
0000 22                RET     
             ; FUNCTION EmulationSendMouseData (END)

             ; FUNCTION ProcessLeftBtnPress (BEGIN)
                                           ; SOURCE LINE # 529
                                           ; SOURCE LINE # 530
                                           ; SOURCE LINE # 549
0000 22                RET     
             ; FUNCTION ProcessLeftBtnPress (END)

             ; FUNCTION ProcessLeftBtnRelease (BEGIN)
                                           ; SOURCE LINE # 554
                                           ; SOURCE LINE # 555
                                           ; SOURCE LINE # 573
0000 22                RET     
             ; FUNCTION ProcessLeftBtnRelease (END)

C51 COMPILER V7.50   OEM_SPI                                                               09/08/2020 15:56:25 PAGE 19  

             ; FUNCTION ClearSPIMouseSensorBuf (BEGIN)
                                           ; SOURCE LINE # 578
                                           ; SOURCE LINE # 579
                                           ; SOURCE LINE # 580
0000 E4                CLR     A
0001 900000      E     MOV     DPTR,#SPI_Mouse_Buf+02H
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 581
0005 900000      E     MOV     DPTR,#SPI_Mouse_Buf+01H
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 582
0009 900000      E     MOV     DPTR,#SPI_Mouse_Buf
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 583
000D 900000      E     MOV     DPTR,#SPI_Mouse_DeltaX
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 584
0011 900000      E     MOV     DPTR,#SPI_Mouse_DeltaY
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 585
0015 900000      E     MOV     DPTR,#SPI_Mouse_BYTE1
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 586
0019 900000      E     MOV     DPTR,#SPI_Mouse_XMovement
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 587
001D 900000      E     MOV     DPTR,#SPI_Mouse_YMovement
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 588
0021 900000      E     MOV     DPTR,#SPI_Mouse_Buf_Index
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 589
0025 900000      E     MOV     DPTR,#SPI_Mouse_Misc
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 590
0029 22                RET     
             ; FUNCTION ClearSPIMouseSensorBuf (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    429    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
