C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE CORE_SMBUS
OBJECT MODULE PLACED IN Code\CORE\CORE_SMBUS.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe Code\CORE\CORE_SMBUS.C LA WL(1) CD OT(9,SIZE) NOAREGS OR INCDIR(.\Code\CORE
                    -\INCLUDE\;.\Code\OEM\INCLUDE\;.\Code\CHIP\INCLUDE\)

line level    source

   1          /*----------------------------------------------------------------------------
   2           * TITLE: CORE_SMBUS.C - the System Management SMBus Protocol drivers.
   3           *
   4           *---------------------------------------------------------------------------*/
   5           
   6          #include <CORE_INCLUDE.H>
   7          #include <OEM_INCLUDE.H>
   8          
   9          //----------------------------------------------------------------------------
  10          // Read/write SMbus byte/word function  
  11          //----------------------------------------------------------------------------
  12          const sSMBus code asSMBus[]=
  13          {
  14                  { &HOCTL_A, &TRASLA_A, &HOCMD_A, &HOSTA_A, &D0REG_A, &D1REG_A,  &HOBDB_A,       &IER1,  &ISR1,  Int_SMBUS0,   &PE
             -CERC_A},
  15                  { &HOCTL_B, &TRASLA_B, &HOCMD_B, &HOSTA_B, &D0REG_B, &D1REG_B,  &HOBDB_B,       &IER1,  &ISR1,  Int_SMBUS1,   &PE
             -CERC_B},
  16                  { &HOCTL_C, &TRASLA_C, &HOCMD_C, &HOSTA_C, &D0REG_C, &D1REG_C,  &HOBDB_C,       &IER2,  &ISR2,  Int_SMBUS2,   &PEC
             -ERC_C},
  17                  { &HOCTL_D, &TRASLA_D, &HOCMD_D, &HOSTA_D, &D0REG_D, &D1REG_D,  &HOBDB_D,       &IER0,  &ISR0,  Int_SMBUS3,   &PEC
             -ERC_D}        
  18          };
  19          
  20          const sResetSMBusS code asResetSMBusS[]=
  21          {
  22                  { &HOSTA_A, &HOCTL2_A, &SMBPCTL_A, &GPCRB3, &GPCRB4, &GPDRB,    (BIT3+BIT4),   &SMBus1RecoverCunt },
  23                  { &HOSTA_B, &HOCTL2_B, &SMBPCTL_B, &GPCRC1, &GPCRC2, &GPDRC,    (BIT1+BIT2),   &SMBus2RecoverCunt },
  24                  { &HOSTA_C, &HOCTL2_C, &SMBPCTL_C, &GPCRF6, &GPCRF7, &GPDRF,    (BIT6+BIT7),   &SMBus3RecoverCunt },
  25                  { &HOSTA_D, &HOCTL2_D, &SMBPCTL_D, &GPCRH1, &GPCRH2, &GPDRH,    (BIT1+BIT2),   &SMBus4RecoverCunt }
  26          }; 
  27          
  28          //----------------------------------------------------------------------------
  29          //      
  30          //----------------------------------------------------------------------------
  31          void DelayInact(void) 
  32          {
  33   1          BYTE index;
  34   1          BYTE counter;
  35   1         for(index=0;index<200;index++)
  36   1         {
  37   2              counter++;
  38   2         }
  39   1      }
  40          
  41          //----------------------------------------------------------------------------
  42          // The function of reseting SMbus       
  43          //----------------------------------------------------------------------------
  44          void ResetSMBus(BYTE Channel)
  45          {
  46   1          #ifdef PECI_Support
                  if(Channel==SMbusCh3)
                  {
                      return;
                  }
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 2   

                  #endif
  52   1      
  53   1          SET_MASK(*asSMBus[Channel].SMBusCTL,HOCTL_KILL);
  54   1          CLEAR_MASK(*asSMBus[Channel].SMBusCTL,HOCTL_KILL);
  55   1              //RSTC3=0x0F;                                               // Reset all SMBus module
  56   1              *asResetSMBusS[Channel].SMBusSTA = 0xFE;        // clear bits
  57   1          *asResetSMBusS[Channel].SMBusPin0 = OUTPUT;
  58   1              *asResetSMBusS[Channel].SMBusPin1 = OUTPUT;
  59   1              DelayInact();
  60   1              *asResetSMBusS[Channel].GPIOReg |= asResetSMBusS[Channel].GPIOData;
  61   1              DelayInact();
  62   1          *asResetSMBusS[Channel].SMBusPin0 = ALT;
  63   1              *asResetSMBusS[Channel].SMBusPin1 = ALT;
  64   1              *asResetSMBusS[Channel].SMBusCTL2 = 0x02;
  65   1              *asResetSMBusS[Channel].SMBusPinCTL = 0x03;
  66   1              DelayInact();
  67   1              *asResetSMBusS[Channel].SMBusPinCTL = 0x07;
  68   1              *asResetSMBusS[Channel].SMBusCTL2 = 0x01;
  69   1      
  70   1          #ifdef SMBusServiceCenterFunc
  71   1          *asSSC[Channel].inusing=0x00;
  72   1          CLEAR_MASK(*asSMBus[Channel].SMBusIER, asSMBus[Channel].IERFlag);
  73   1          *asSMBus[Channel].SMBusISR = asSMBus[Channel].IERFlag;
  74   1          *asSSC[Channel].serviceflag=0x00;
  75   1          //Init_SMBus_Regs();
  76   1          
  77   1          if(DB_SMBusAck1==ACK_Start)     // For SMBus utility
  78   1          {
  79   2              DB_SMBusAddr=0x00;
  80   2              if(Channel==0x00)
  81   2              {
  82   3                      DB_SMBusFlag1=0x00;             
  83   3              }
  84   2              else if(Channel==0x01)
  85   2              {
  86   3                  DB_SMBusFlag2=0x00;
  87   3              }
  88   2              else if(Channel==0x02)
  89   2              {
  90   3                  DB_SMBusFlag3=0x00; 
  91   3              }                               
  92   2                                      
  93   2                  DB_SMBusACDID=0x00; 
  94   2              DB_SMBusAck1 = ACK_Error;   // For SMBus utility error ACK.
  95   2          }
  96   1          #endif
  97   1      }
  98          
  99          //----------------------------------------------------------------------------
 100          // SMbus read byte/word and write byte/word function    
 101          //----------------------------------------------------------------------------
 102          BYTE bRWSMBus(BYTE Channel,BYTE Protocol,BYTE Addr,BYTE Comd,XBYTE *Var,BYTE PECSupport)
 103          {       
 104   1              BYTE counter;
 105   1              BYTE error;
 106   1          BYTE status;
 107   1          BYTE resutl;
 108   1      
 109   1          if(CheckSMBusInterfaceCanbeUse(Channel, SMBus_AccessType_Fucn)==SMBus_CanNotUse)
 110   1          {
 111   2              resutl = FALSE;                             // SMBus interface can't be used.
 112   2          }
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 3   

 113   1          else
 114   1          {
 115   2              error = 0xEE;                               // Pre-set error
 116   2              resutl = FALSE;                             // Pre-set result is fail
 117   2          
 118   2              SMBCRC8_A=0x00;                             // Clear CRC variable
 119   2      
 120   2                  if (Protocol&0x80)                          // Write byte function
 121   2                  {   
 122   3                      if(PECSupport)    
 123   3                  {   
 124   4                      CalcCRC8(Addr);                     // To calculate crc8
 125   4                  }
 126   3                          *asSMBus[Channel].SMBusADR = Addr;      // set address with writing bit
 127   3                      if(PECSupport)    
 128   3                  {   
 129   4                      CalcCRC8(Comd);                     // To calculate crc8
 130   4                  }
 131   3                      *asSMBus[Channel].SMBusCMD=Comd;            // Set command
 132   3                          Protocol&=(~0x80);
 133   3                  if(PECSupport)    
 134   3                  {   
 135   4                      CalcCRC8(*Var);                     // To calculate crc8
 136   4                  }
 137   3                          *asSMBus[Channel].SMBusData0 = *Var;    // set data1
 138   3                          if(Protocol==SMbusRW)                           // write word function
 139   3                          {
 140   4                              if(PECSupport)    
 141   4                      {   
 142   5                          CalcCRC8(*(Var+0x01));          // To calculate crc8
 143   5                      }
 144   4                                  *asSMBus[Channel].SMBusData1 = *(Var+0x01);
 145   4                          }                                                           // set data2
 146   3                  }   
 147   2                  else                                                                // Read function
 148   2                  {   
 149   3                          *asSMBus[Channel].SMBusADR=Addr|0x01;       
 150   3                  *asSMBus[Channel].SMBusCMD=Comd;        // Set command
 151   3                  }                                                                   // set address with reading bit
 152   2      
 153   2      
 154   2                  *asSMBus[Channel].SMBusSTA=0xFE;                // clear bits
 155   2                  if(PECSupport)
 156   2              {
 157   3                  *asSMBus[Channel].SMBusPEC=SMBCRC8_A;
 158   3                      *asSMBus[Channel].SMBusCTL=(Protocol|HOCTL_SRT|HOCTL_PEC_EN);   // Start transaction
 159   3              }
 160   2              else
 161   2              {
 162   3                      *asSMBus[Channel].SMBusCTL=(Protocol|HOCTL_SRT);        // Start transaction
 163   3              }
 164   2      
 165   2                  TR1 = 0;                                            // disable timer1
 166   2              ET1 = 0;                                        // Disable timer1 interrupt
 167   2              _nop_();
 168   2              _nop_();
 169   2              _nop_();
 170   2              _nop_();
 171   2              TH1 = Timer_26ms>>8;                        // Set timer1 counter 26ms
 172   2              TL1 = Timer_26ms;                           // Set timer1 counter 26ms
 173   2              TF1 = 0;                                        // Clear overflow flag
 174   2              TR1 = 1;                                        // Enable timer1
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 4   

 175   2      
 176   2                  while (!TF1)
 177   2                  {
 178   3                  status = *asSMBus[Channel].SMBusSTA;    // Read SMBus Host Status
 179   3                  if(IS_MASK_SET(status, (HOSTA_FINTR+HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE )))
 180   3                  {
 181   4                      TR1=0;
 182   4                                  TF1=0;
 183   4                      ET1=1;                                  // Enable timer1 interrupt
 184   4                      break;
 185   4                  }
 186   3                  }
 187   2              
 188   2                  if(TF1)                                     // 26ms time-out and no any status bit is set.
 189   2                  {
 190   3                  TR1=0;
 191   3                          TF1=0;
 192   3                  ET1=1;                                  // Enable timer1 interrupt
 193   3                  ResetSMBus(Channel);
 194   3                  error = 0xEE;
 195   3                  }
 196   2              else
 197   2              {
 198   3                  if(IS_MASK_SET(status, (HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE)))
 199   3                  {
 200   4                      if(IS_MASK_SET(status, (HOSTA_BSER+HOSTA_FAIL)))
 201   4                      {
 202   5                          ResetSMBus(Channel);
 203   5                      }
 204   4                      error = 0xEE;
 205   4                  }
 206   3                  else                                    // Only Finish Interrupt bit is set.
 207   3                  {
 208   4                      error = 0x00;
 209   4                  }
 210   3              }
 211   2                                                          
 212   2                  if(error == 0xEE)                           // Fail
 213   2                  {
 214   3                          resutl = FALSE;
 215   3                  }
 216   2              else                                        // OK
 217   2              {
 218   3                      if ((*asSMBus[Channel].SMBusADR & 0x01 != 0x00)) 
 219   3                      {
 220   4                              *Var = *asSMBus[Channel].SMBusData0;    // read data1
 221   4                              if(Protocol==SMbusRW)
 222   4                              {
 223   5                                      *(Var+0x01) = *asSMBus[Channel].SMBusData1;
 224   5                              }                                                                   // read data2
 225   4                      }
 226   3                  resutl = TRUE;
 227   3              }
 228   2      
 229   2                  *asSMBus[Channel].SMBusSTA=0xFE;                // clear bits
 230   2          }
 231   1      
 232   1              return(resutl);
 233   1      }
 234          
 235          //----------------------------------------------------------------------------
 236          // Read SMbus block function    
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 5   

 237          //----------------------------------------------------------------------------
 238          BYTE bRSMBusBlock(BYTE Channel,BYTE Protocol,BYTE Addr,BYTE Comd,XBYTE *Var)
 239          {
 240   1              BYTE ack;
 241   1          BYTE bcount;
 242   1          BYTE status;
 243   1      
 244   1          if(CheckSMBusInterfaceCanbeUse(Channel, SMBus_AccessType_Fucn)==SMBus_CanNotUse)
 245   1          {
 246   2              ack = FALSE;                            // SMBus interface can't be used.
 247   2          }
 248   1          else
 249   1          {
 250   2                  ack = FALSE;                                                // pr-set flag
 251   2                  bcount = 0x00;                                      // clear byte counter
 252   2              
 253   2                  *asSMBus[Channel].SMBusADR=Addr|0x01;   // set address with reading bit     
 254   2                  *asSMBus[Channel].SMBusCMD=Comd;        // Set command
 255   2              *asSMBus[Channel].SMBusSTA=0xFE;            // clear bits
 256   2              *asSMBus[Channel].SMBusCTL=(Protocol|HOCTL_SRT);    // Start transaction
 257   2      
 258   2                  TR1 = 0;                                        // disable timer1
 259   2              ET1 = 0;                                    // Disable timer1 interrupt
 260   2              _nop_();
 261   2              _nop_();
 262   2              _nop_();
 263   2              _nop_();
 264   2              TH1 = Timer_26ms>>8;                    // Set timer1 counter 26ms
 265   2              TL1 = Timer_26ms;                       // Set timer1 counter 26ms
 266   2              TF1 = 0;                                    // Clear overflow flag
 267   2              TR1 = 1;                                    // Enable timer1
 268   2      
 269   2              while(!TF1)                             // Not time out
 270   2              {
 271   3                  status = *asSMBus[Channel].SMBusSTA;    // Read SMBus Host Status
 272   3                  if(IS_MASK_SET(status, (HOSTA_BDS+HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE )))
 273   3                  {
 274   4                      if(IS_MASK_SET(status, (HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE)))
 275   4                      {
 276   5                          if(IS_MASK_SET(status, (HOSTA_BSER+HOSTA_FAIL)))
 277   5                          {
 278   6                              ResetSMBus(Channel);
 279   6                          }
 280   5                          TR1 = 0;                            // disable timer1
 281   5                              TF1 = 0;                                // clear overflow flag
 282   5                              ET1 = 1;                                // Enable timer1 interrupt
 283   5                              ack = FALSE;
 284   5                          break;
 285   5                      }
 286   4                      else                            // Only Byte Done Status bit is set.
 287   4                      {
 288   5                              *Var = *asSMBus[Channel].SMBusBData;    // get first data
 289   5                              if(bcount ==0x00)
 290   5                              {
 291   6                                      bcount = *asSMBus[Channel].SMBusData0; // get the data of byte count 
 292   6                                      Hook_GetSMBusReadBlockByteCount(bcount);
 293   6                              }       
 294   5                  
 295   5                              bcount--;
 296   5                              Var++;
 297   5          
 298   5                              if(bcount == 0x01)
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 6   

 299   5                              {                                                   // set last byte flag
 300   6                                      SET_MASK(*asSMBus[Channel].SMBusCTL,HOCTL_LABY);
 301   6                              }
 302   5          
 303   5                              *asSMBus[Channel].SMBusSTA=0xFE;    // clear bits
 304   5      
 305   5                              if(bcount == 0x00)
 306   5                              {
 307   6                              TR1 = 0;                            // disable timer1
 308   6                                  TF1 = 0;                        // clear overflow flag
 309   6                                  ET1 = 1;                        // Enable timer1 interrupt
 310   6                              ack = TRUE;
 311   6                              break;                  // SMBus read block done.
 312   6                          }
 313   5                      }
 314   4                  }
 315   3              }
 316   2      
 317   2              if(TF1)                                 // time-out
 318   2              {
 319   3                  TR1 = 0;                                    // disable timer1
 320   3                      TF1 = 0;                                        // clear overflow flag
 321   3                      ET1 = 1;                                        // Enable timer1 interrupt
 322   3                          ResetSMBus(Channel);
 323   3                          ack = FALSE;
 324   3              }
 325   2      
 326   2                  CLEAR_MASK(*asSMBus[Channel].SMBusCTL,HOCTL_LABY);    // clear last byte flag
 327   2                  *asSMBus[Channel].SMBusSTA=0xFE;        // clear bits
 328   2          }
 329   1          
 330   1              return(ack);    
 331   1      }
 332          
 333          //----------------------------------------------------------------------------
 334          // Write SMbus block function   
 335          //----------------------------------------------------------------------------
 336          BYTE bWSMBusBlock(BYTE Channel,BYTE Protocol,BYTE Addr,BYTE Comd,XBYTE *Var,BYTE ByteCont,BYTE PECsupport)
 337          {       
 338   1              BYTE ack;
 339   1          BYTE BCTemp;
 340   1          BYTE status;
 341   1      
 342   1          if(CheckSMBusInterfaceCanbeUse(Channel, SMBus_AccessType_Fucn)==SMBus_CanNotUse)
 343   1          {
 344   2              ack = FALSE;                            // SMBus interface can't be used.
 345   2          }
 346   1          else
 347   1          {
 348   2                  ack = FALSE;                                                // pre-set flag
 349   2                  BCTemp = 0x00;                                      // clear byte count
 350   2      
 351   2              if(PECsupport)
 352   2              {   
 353   3                  SMBCRC8_A=0x00;
 354   3                  CalcCRC8(Addr);
 355   3                  CalcCRC8(Comd);
 356   3                  CalcCRC8(ByteCont);
 357   3                  CalcCRC8(*Var);
 358   3              }
 359   2          
 360   2                  Protocol&=(~0x80);                  
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 7   

 361   2                  *asSMBus[Channel].SMBusADR=Addr;        // set address with writing flag
 362   2              *asSMBus[Channel].SMBusCMD=Comd;            // Set command
 363   2              *asSMBus[Channel].SMBusData0=ByteCont;  // set byte count
 364   2              BCTemp=ByteCont;                            // sync byte count 
 365   2              *asSMBus[Channel].SMBusBData=*Var;          // set first data
 366   2              *asSMBus[Channel].SMBusSTA=0xFE;            // clear bits
 367   2                  if(PECsupport)
 368   2              {   
 369   3                  *asSMBus[Channel].SMBusCTL=(Protocol|HOCTL_SRT|HOCTL_PEC_EN);// Start transaction
 370   3              }
 371   2              else
 372   2              {
 373   3                  *asSMBus[Channel].SMBusCTL=(Protocol|HOCTL_SRT);// Start transaction
 374   3              }
 375   2      
 376   2                  TR1 = 0;                                        // disable timer1
 377   2              ET1 = 0;                                    // Disable timer1 interrupt
 378   2              _nop_();
 379   2              _nop_();
 380   2              _nop_();
 381   2              _nop_();
 382   2              TH1 = Timer_26ms>>8;                    // Set timer1 counter 26ms
 383   2              TL1 = Timer_26ms;                       // Set timer1 counter 26ms
 384   2              TF1 = 0;                                    // Clear overflow flag
 385   2              TR1 = 1;                                    // Enable timer1
 386   2      
 387   2              while(!TF1)                             // Not time out
 388   2              {
 389   3                  status = *asSMBus[Channel].SMBusSTA;    // Read SMBus Host Status
 390   3                  if(IS_MASK_SET(status, (HOSTA_BDS+HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE )))
 391   3                  {
 392   4                      if(IS_MASK_SET(status, (HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE)))
 393   4                      {
 394   5                          if(IS_MASK_SET(status, (HOSTA_BSER+HOSTA_FAIL)))
 395   5                          {
 396   6                              ResetSMBus(Channel);
 397   6                          }
 398   5                          TR1 = 0;                            // disable timer1
 399   5                              TF1 = 0;                                // clear overflow flag
 400   5                              ET1 = 1;                                // Enable timer1 interrupt
 401   5                              ack = FALSE;
 402   5                          break;
 403   5                      }
 404   4                      else                            // Only Byte Done Status bit is set.
 405   4                      {
 406   5                              BCTemp--;
 407   5                              Var++;                                      // point to next address of variable
 408   5      
 409   5                              if(BCTemp != 0x00)
 410   5                              {
 411   6                              if(PECsupport)
 412   6                              {
 413   7                                  *asSMBus[Channel].SMBusBData=*Var;
 414   7                                  CalcCRC8(*Var);
 415   7                                  if(BCTemp==0x01)    // last byte of byte count
 416   7                                  {
 417   8                                      *asSMBus[Channel].SMBusPEC = SMBCRC8_A;
 418   8                                  }
 419   7                              }
 420   6                              else
 421   6                              {
 422   7                                          *asSMBus[Channel].SMBusBData=*Var;
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 8   

 423   7                              }
 424   6                              *asSMBus[Channel].SMBusSTA=0xFE;    // clear bits
 425   6                              }
 426   5                          else                        // write block transaction done
 427   5                          {
 428   6                                  TR1 = 0;                        // disable timer1
 429   6                                  TF1 = 0;                        // clear overflow flag
 430   6                                  ET1 = 1;                        // Enable timer1 interrupt
 431   6                                  ack = TRUE;
 432   6                                  break;
 433   6                          }
 434   5                      }
 435   4                  }
 436   3              }
 437   2              
 438   2              if(TF1)                                 // time-out
 439   2              {
 440   3                  TR1 = 0;                                    // disable timer1
 441   3                      TF1 = 0;                                        // clear overflow flag
 442   3                      ET1 = 1;                                        // Enable timer1 interrupt
 443   3                          ResetSMBus(Channel);
 444   3                          ack = FALSE;
 445   3              }
 446   2              
 447   2                  *asSMBus[Channel].SMBusSTA=0xFE;        // clear bits
 448   2          }
 449   1          
 450   1              return(ack);
 451   1      } 
 452          
 453          //----------------------------------------------------------------------------
 454          // The function of SMbus send byte      
 455          //----------------------------------------------------------------------------
 456          BYTE bSMBusSendByte(BYTE Channel,BYTE Addr,BYTE SData)
 457          {
 458   1              BYTE error;
 459   1          BYTE result;
 460   1          BYTE status;
 461   1      
 462   1          if(CheckSMBusInterfaceCanbeUse(Channel, SMBus_AccessType_Fucn)==SMBus_CanNotUse)
 463   1          {
 464   2              result = FALSE;                             // SMBus interface can't be used.
 465   2          }
 466   1          else
 467   1          {
 468   2              error = 0xEE;                               // Pre-set error
 469   2              result = FALSE;                             // Pre-set result is fail
 470   2              
 471   2                  *asSMBus[Channel].SMBusADR = Addr;          // set address with writing bit
 472   2                  *asSMBus[Channel].SMBusCMD = SData;         // Set command
 473   2                  *asSMBus[Channel].SMBusSTA = 0xFE;          // clear bits
 474   2                  *asSMBus[Channel].SMBusCTL = (0x04|HOCTL_SRT);  // Start transaction
 475   2      
 476   2              TR1 = 0;                                    // Disable timer1
 477   2              ET1 = 0;                                        // Disable timer1 interrupt
 478   2              _nop_();
 479   2              _nop_();
 480   2              _nop_();
 481   2              _nop_();
 482   2              TH1 = Timer_26ms>>8;                        // Set timer1 counter 26ms
 483   2              TL1 = Timer_26ms;                           // Set timer1 counter 26ms
 484   2              TF1 = 0;                                        // Clear overflow flag
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 9   

 485   2              TR1 = 1;                                        // Enable timer1
 486   2      
 487   2                  while (!TF1)
 488   2                  { 
 489   3                  status = *asSMBus[Channel].SMBusSTA;    // Read SMBus Host Status
 490   3                  if(IS_MASK_SET(status, (HOSTA_FINTR+HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE )))
 491   3                  {
 492   4                      TR1=0;                              // Disable timer1
 493   4                                  TF1=0;                              // Clear overflow flag
 494   4                      ET1=1;                                  // Enable timer1 interrupt
 495   4                      break;
 496   4                  }
 497   3                  }
 498   2              
 499   2                  if(TF1)                                     // 26ms time-out and no any status bit is set.
 500   2                  {
 501   3                  TR1=0;
 502   3                          TF1=0;
 503   3                  ET1=1;                                  // Enable timer1 interrupt
 504   3                  ResetSMBus(Channel);
 505   3                  error = 0xEE;
 506   3                  }
 507   2              else
 508   2              {
 509   3                  if(IS_MASK_SET(status, (HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE)))
 510   3                  {
 511   4                      if(IS_MASK_SET(status, (HOSTA_BSER+HOSTA_FAIL)))
 512   4                      {
 513   5                          ResetSMBus(Channel);
 514   5                      }
 515   4                      error = 0xEE;
 516   4                  }
 517   3                  else                                    // Only Finish Interrupt bit is set.
 518   3                  {
 519   4                      error = 0x00;
 520   4                  }
 521   3              }
 522   2          
 523   2                  if(error == 0xEE)
 524   2                  {
 525   3                          result = FALSE;
 526   3                  }
 527   2              else
 528   2              {
 529   3                  result = TRUE;
 530   3              }
 531   2                  *asSMBus[Channel].SMBusSTA=0xFE;    // clear bits
 532   2          }
 533   1          
 534   1              return(result);
 535   1      }
 536          
 537          //----------------------------------------------------------------------------
 538          // The function of SMbus receive byte   
 539          //----------------------------------------------------------------------------
 540          BYTE bSMBusReceiveByte(BYTE Channel,BYTE Addr,XBYTE *Var)
 541          {
 542   1              BYTE error;
 543   1          BYTE result;
 544   1          BYTE status;
 545   1      
 546   1          if(CheckSMBusInterfaceCanbeUse(Channel, SMBus_AccessType_Fucn)==SMBus_CanNotUse)
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 10  

 547   1          {
 548   2              result = FALSE;                             // SMBus interface can't be used.
 549   2          }
 550   1          else
 551   1          {
 552   2              error = 0xEE;                               // Pre-set error
 553   2              result = FALSE;                             // Pre-set result is fail
 554   2              
 555   2                  *asSMBus[Channel].SMBusADR = (Addr|0x01);   // set address with writing bit
 556   2                  *asSMBus[Channel].SMBusSTA = 0xFE;              // clear bits
 557   2                  *asSMBus[Channel].SMBusCTL = (0x04|HOCTL_SRT);  // Start transaction
 558   2      
 559   2                  TR1 = 0;                                            // disable timer1
 560   2              ET1 = 0;                                        // Disable timer1 interrupt
 561   2              _nop_();
 562   2              _nop_();
 563   2              _nop_();
 564   2              _nop_();
 565   2              TH1 = Timer_26ms>>8;                        // Set timer1 counter 26ms
 566   2              TL1 = Timer_26ms;                           // Set timer1 counter 26ms
 567   2              TF1 = 0;                                        // Clear overflow flag
 568   2              TR1 = 1;                                        // Enable timer1
 569   2      
 570   2                  while (!TF1)
 571   2                  { 
 572   3                  status = *asSMBus[Channel].SMBusSTA;    // Read SMBus Host Status
 573   3                  if(IS_MASK_SET(status, (HOSTA_FINTR+HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE )))
 574   3                  {
 575   4                      TR1=0;
 576   4                                  TF1=0;
 577   4                      ET1=1;                                  // Enable timer1 interrupt
 578   4                      break;
 579   4                  }
 580   3                  }
 581   2              
 582   2                  if(TF1)                                     // 26ms time-out and no any status bit is set.
 583   2                  {
 584   3                  TR1=0;
 585   3                          TF1=0;
 586   3                  ET1=1;                                  // Enable timer1 interrupt
 587   3                  ResetSMBus(Channel);
 588   3                  error = 0xEE;
 589   3                  }
 590   2              else
 591   2              {
 592   3                  if(IS_MASK_SET(status, (HOSTA_DVER+HOSTA_BSER+HOSTA_FAIL+HOSTA_NACK+HOSTA_TMOE)))
 593   3                  {
 594   4                      if(IS_MASK_SET(status, (HOSTA_BSER+HOSTA_FAIL)))
 595   4                      {
 596   5                          ResetSMBus(Channel);
 597   5                      }
 598   4                      error = 0xEE;
 599   4                  }
 600   3                  else                                    // Only Finish Interrupt bit is set.
 601   3                  {
 602   4                      error = 0x00;
 603   4                  }
 604   3              }
 605   2               
 606   2                  if(error == 0xEE)
 607   2                  {
 608   3                          result = FALSE; 
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 11  

 609   3                  }   
 610   2              else
 611   2              {
 612   3                      *Var = *asSMBus[Channel].SMBusData0;    // read data
 613   3                      result = TRUE; 
 614   3              }
 615   2                  *asSMBus[Channel].SMBusSTA=0xFE;        // clear bits
 616   2          }
 617   1          
 618   1              return(result);
 619   1      }
 620          
 621          //----------------------------------------------------------------------------
 622          //
 623          //----------------------------------------------------------------------------
 624          void CalcCRC8(BYTE sourcebyte)
 625          {
 626   1          BYTE temp;
 627   1              SMBCRC8_A ^=sourcebyte;
 628   1          temp = SMBCRC8_A;
 629   1      
 630   1          if(IS_MASK_CLEAR(temp, BIT7))
 631   1          {
 632   2              temp = temp<<1;
 633   2              SMBCRC8_A ^= temp;
 634   2          }
 635   1          else
 636   1          {
 637   2              temp = temp<<1;
 638   2              SMBCRC8_A ^= 0x09;
 639   2              SMBCRC8_A ^= temp;
 640   2          }
 641   1          
 642   1          if(IS_MASK_CLEAR(temp, BIT7))
 643   1          {
 644   2              temp = temp<<1;
 645   2              SMBCRC8_A ^= temp;
 646   2          }
 647   1          else
 648   1          {
 649   2              temp = temp<<1;
 650   2              SMBCRC8_A ^= 0x07;
 651   2              SMBCRC8_A ^= temp;
 652   2          }
 653   1      }
 654          
 655          //----------------------------------------------------------------------------
 656          // The function of Checking SMbus clock and data pins are both high     
 657          //----------------------------------------------------------------------------
 658          BYTE CheckSMBusFree(BYTE channel)
 659          {
 660   1          BYTE pinstatus;
 661   1      
 662   1          pinstatus = *asResetSMBusS[channel].SMBusPinCTL;
 663   1      
 664   1          if((pinstatus&=0x03)==0x03) // Check BIT0 and BIT1
 665   1          {
 666   2              return(SMBus_Free);
 667   2          }
 668   1          else
 669   1          {
 670   2              return(SMBus_Busy);
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 12  

 671   2          }
 672   1      }
 673          
 674          //----------------------------------------------------------------------------
 675          // The function of Checking SMbus pins are all alt
 676          //----------------------------------------------------------------------------
 677          BYTE CheckSMBusInterfaceIsALT(BYTE channel)
 678          {
 679   1          if(((*asResetSMBusS[channel].SMBusPin0 & 0xFB)!=0x00)||((*asResetSMBusS[channel].SMBusPin1 & 0xFB)!=0x
             -00))
 680   1          {
 681   2              return(SMBusPin_GPIO);
 682   2          }
 683   1          else
 684   1          {
 685   2              return(SMBusPin_ALT);
 686   2          }
 687   1      }
 688          
 689          //----------------------------------------------------------------------------
 690          // The function of Checking SMbus pins are all alt
 691          //----------------------------------------------------------------------------
 692          BYTE CheckSMBusInterfaceCanbeUse(BYTE channel, BYTE accesstype)
 693          {
 694   1          BYTE checksmbus;
 695   1      
 696   1          checksmbus = SMBus_CanUse;                  // Pre-set smbus interface can be used
 697   1          
 698   1          #ifdef PECI_Support
                  if(channel==SMbusCh3)                       // If PECI function enable, return.
                  {
                      checksmbus = SMBus_CanNotUse;           // Interface can't be used
                      return(checksmbus);                     // return result
                  }
                  #endif
 705   1          
 706   1          if(CheckSMBusInterfaceIsALT(channel)==SMBusPin_GPIO)    // SMBus interface is GPIO function
 707   1          {
 708   2              checksmbus = SMBus_CanNotUse;           // Interface can't be used
 709   2          }
 710   1          else                                        // SMBus interface is ALT function
 711   1          {
 712   2              if(accesstype==SMBus_AccessType_Fucn)
 713   2              {
 714   3                  #ifdef SMBusServiceCenterFunc
 715   3                  WatiSMBusCHxFree(channel);          // Check smbus is in used or not.
 716   3                  #endif
 717   3              }
 718   2      
 719   2              if(CheckSMBusFree(channel)==SMBus_Busy)
 720   2              {
 721   3                  checksmbus = SMBus_CanNotUse;       // Interface can't be used
 722   3                  if( (*asResetSMBusS[channel].recoverCunt)++ >SMBus_BusyRecover)
 723   3                  {
 724   4                      ResetSMBus(channel);
 725   4                  }
 726   3              }
 727   2              else
 728   2              {
 729   3                  *asResetSMBusS[channel].recoverCunt=0x00;
 730   3                  checksmbus = SMBus_CanUse;          // smbus interface can be used
 731   3              }
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 13  

 732   2          }
 733   1      
 734   1          return(checksmbus);                         // return result
 735   1      }
 736          
 737          //----------------------------------------------------------------------------
 738          // To init. SMBus setting
 739          //----------------------------------------------------------------------------
 740          void Core_Init_SMBus(void)
 741          {
 742   1          SMBus_BusyRecover = 20;         // Reset SMBus interface if bus clock pin or data pin is low greater t
             -han SMBus_BusyRecover times.
 743   1      }
 744          
 745          /*-----------------------------------------------------------------------------
 746           * @subroutine - I2C_WriteStream
 747           * @function - I2C Write Stream data
 748           * @Upstream - By call
 749           * @input    - None
 750           * @return   - None
 751           * @note     - None
 752           *---------------------------------------------------------------------------*/
 753          BYTE I2C_WriteStream(BYTE I2C_Chn, BYTE I2C_Addr, XBYTE *Var, BYTE Count)
 754          {
 755   1          BYTE    i, j, len;
 756   1      
 757   1          len = 0;
 758   1          *asResetSMBusS[I2C_Chn].SMBusCTL2 = 0x03;
 759   1          *asSMBus[I2C_Chn].SMBusSTA = 0xFE;
 760   1          *asSMBus[I2C_Chn].SMBusADR = (I2C_Addr & 0xFE);
 761   1          *asSMBus[I2C_Chn].SMBusBData = *Var;
 762   1          *asSMBus[I2C_Chn].SMBusCTL = (_SMbusEXT | HOCTL_SRT);
 763   1          while(1)
 764   1          {
 765   2              i = 100;
 766   2              while(1)
 767   2              {
 768   3                  WNCKR = 0x00;   /* Delay 15.26 us */
 769   3                  j = *asSMBus[I2C_Chn].SMBusSTA;
 770   3                  if (i > 0)
 771   3                  {
 772   4                      i--;
 773   4                  }
 774   3                  else
 775   3                  {
 776   4                      *asSMBus[I2C_Chn].SMBusSTA = 0xFE;
 777   4                      return FALSE;
 778   4                  }
 779   3                  if ((j & HOSTA_BDS) != 0x00)
 780   3                  {
 781   4                      break;
 782   4                  }
 783   3                  if ((j & (HOSTA_BSER + HOSTA_FAIL)) != 0x00)
 784   3                  {
 785   4                      ResetSMBus(I2C_Chn);
 786   4                      return FALSE;
 787   4                  }
 788   3                  if ((j & (HOSTA_DVER + HOSTA_NACK + HOSTA_TMOE)) != 0x00)
 789   3                  {
 790   4                      *asSMBus[I2C_Chn].SMBusSTA = 0xFE;
 791   4                      return FALSE;
 792   4                  }
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 14  

 793   3              }
 794   2              len++;
 795   2              if (len == Count)
 796   2              {
 797   3                  break;
 798   3              }
 799   2              Var++;
 800   2              *asSMBus[I2C_Chn].SMBusBData = *Var;
 801   2              *asSMBus[I2C_Chn].SMBusSTA = 0xFE;
 802   2          }
 803   1      
 804   1          *asResetSMBusS[I2C_Chn].SMBusCTL2 = 0x01;
 805   1          *asSMBus[I2C_Chn].SMBusSTA = 0xFE;
 806   1          return TRUE;
 807   1      }
 808          /*-----------------------------------------------------------------------------
 809           * @subroutine - I2C_ReadStream
 810           * @function - I2C Read Stream data
 811           * @Upstream - By call
 812           * @input    - None
 813           * @return   - None
 814           * @note     - None
 815           *---------------------------------------------------------------------------*/
 816          BYTE I2C_ReadStream(BYTE I2C_Chn, BYTE I2C_Addr, XBYTE *Var, BYTE Count)
 817          {
 818   1          BYTE    i, j;
 819   1      
 820   1          *asResetSMBusS[I2C_Chn].SMBusCTL2 = 0x03;
 821   1          *asSMBus[I2C_Chn].SMBusSTA = 0xFE;
 822   1          *asSMBus[I2C_Chn].SMBusADR = (I2C_Addr | 0x01);
 823   1          *asSMBus[I2C_Chn].SMBusCTL = (_SMbusEXT | HOCTL_SRT);
 824   1          if (Count == 0x01)
 825   1          {
 826   2              SET_MASK(*asSMBus[I2C_Chn].SMBusCTL, HOCTL_LABY);
 827   2          }
 828   1          do
 829   1          {
 830   2              i = 100;
 831   2              while(1)
 832   2              {
 833   3                  WNCKR = 0x00;   /* Delay 15.26 us */
 834   3                  if (i > 0)
 835   3                  {
 836   4                      i--;
 837   4                  }
 838   3                  else
 839   3                  {
 840   4                      *asSMBus[I2C_Chn].SMBusSTA = 0xFE;
 841   4                      return FALSE;
 842   4                  }
 843   3                  j = *asSMBus[I2C_Chn].SMBusSTA;
 844   3                  if ((j & HOSTA_BDS) != 0x00)
 845   3                  {
 846   4                      break;
 847   4                  }
 848   3                  if ((j & (HOSTA_BSER + HOSTA_FAIL)) != 0x00)
 849   3                  {
 850   4                      ResetSMBus(I2C_Chn);
 851   4                      return FALSE;
 852   4                  }
 853   3                  if ((j & (HOSTA_DVER + HOSTA_NACK + HOSTA_TMOE)) != 0x00)
 854   3                  {
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 15  

 855   4                      *asSMBus[I2C_Chn].SMBusSTA = 0xFE;
 856   4                      return FALSE;
 857   4                  }
 858   3              }
 859   2              *Var = *asSMBus[I2C_Chn].SMBusBData;
 860   2              Count--;
 861   2              if (Count == 0x01)
 862   2              {
 863   3                  SET_MASK(*asSMBus[I2C_Chn].SMBusCTL, HOCTL_LABY);
 864   3              }
 865   2              Var++;
 866   2              *asSMBus[I2C_Chn].SMBusSTA = 0xFE;
 867   2          }
 868   1          while (Count > 0);
 869   1      
 870   1          *asResetSMBusS[I2C_Chn].SMBusCTL2 = 0x01;
 871   1          *asSMBus[I2C_Chn].SMBusSTA = 0xFE;
 872   1          CLEAR_MASK(*asSMBus[I2C_Chn].SMBusCTL, HOCTL_LABY);
 873   1          return TRUE;
 874   1      }
 875          
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 16  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com008F (BEGIN)
0000         L?0144:
0000 E0                MOVX    A,@DPTR
0001 FF                MOV     R7,A
0002 EE                MOV     A,R6
0003 75F015            MOV     B,#015H
0006 A4                MUL     AB
0007 2400        R     ADD     A,#LOW asSMBus+04H
0009 F582              MOV     DPL,A
000B E4                CLR     A
000C 3400        R     ADDC    A,#HIGH asSMBus+04H
000E         L?0145:
000E F583              MOV     DPH,A
0010 E4                CLR     A
0011 93                MOVC    A,@A+DPTR
0012 FC                MOV     R4,A
0013 7401              MOV     A,#01H
0015 93                MOVC    A,@A+DPTR
0016 F582              MOV     DPL,A
0018 8C83              MOV     DPH,R4
001A EF                MOV     A,R7
001B         L?0146:
001B F0                MOVX    @DPTR,A
001C EE                MOV     A,R6
001D         L?0147:
001D 75F015            MOV     B,#015H
0020 A4                MUL     AB
0021 2400        R     ADD     A,#LOW asSMBus+06H
0023 F582              MOV     DPL,A
0025 E4                CLR     A
0026 3400        R     ADDC    A,#HIGH asSMBus+06H
0028         L?0148:
0028 F583              MOV     DPH,A
002A E4                CLR     A
002B 93                MOVC    A,@A+DPTR
002C FE                MOV     R6,A
002D 7401              MOV     A,#01H
002F 93                MOVC    A,@A+DPTR
0030 F582              MOV     DPL,A
0032 8E83              MOV     DPH,R6
0034 22                RET     
0035         L?0149:
0035 4401              ORL     A,#01H
0037 FF                MOV     R7,A
0038         L?0150:
0038 E0                MOVX    A,@DPTR
0039 FE                MOV     R6,A
003A         L?0151:
003A 75F015            MOV     B,#015H
003D A4                MUL     AB
003E 2400        R     ADD     A,#LOW asSMBus+02H
0040 F582              MOV     DPL,A
0042 E4                CLR     A
0043 3400        R     ADDC    A,#HIGH asSMBus+02H
0045         L?0152:
0045 F583              MOV     DPH,A
0047         L?0153:
0047 E4                CLR     A
0048 93                MOVC    A,@A+DPTR
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 17  

0049 FC                MOV     R4,A
004A 7401              MOV     A,#01H
004C 93                MOVC    A,@A+DPTR
004D F582              MOV     DPL,A
004F 8C83              MOV     DPH,R4
0051 22                RET     
0052         L?0154:
0052 900000      R     MOV     DPTR,#Channel
0055         L?0155:
0055 E0                MOVX    A,@DPTR
0056         L?0156:
0056 75F015            MOV     B,#015H
0059 A4                MUL     AB
005A 2400        R     ADD     A,#LOW asSMBus
005C F582              MOV     DPL,A
005E E4                CLR     A
005F 3400        R     ADDC    A,#HIGH asSMBus
0061 22                RET     
0062         L?0157:
0062 900000      R     MOV     DPTR,#Var
0065 E0                MOVX    A,@DPTR
0066 FE                MOV     R6,A
0067 A3                INC     DPTR
0068 E0                MOVX    A,@DPTR
0069 F582              MOV     DPL,A
006B 8E83              MOV     DPH,R6
006D E0                MOVX    A,@DPTR
006E FF                MOV     R7,A
006F         L?0158:
006F E9                MOV     A,R1
0070         L?0159:
0070 75F015            MOV     B,#015H
0073 A4                MUL     AB
0074 2400        R     ADD     A,#LOW asSMBus+0CH
0076 F582              MOV     DPL,A
0078 E4                CLR     A
0079 3400        R     ADDC    A,#HIGH asSMBus+0CH
007B 22                RET     
007C         L?0160:
007C         L?0161:
007C E0                MOVX    A,@DPTR
007D FF                MOV     R7,A
007E         L?0162:
007E 75F015            MOV     B,#015H
0081 A4                MUL     AB
0082 2400        R     ADD     A,#LOW asSMBus+06H
0084 F582              MOV     DPL,A
0086 E4                CLR     A
0087 3400        R     ADDC    A,#HIGH asSMBus+06H
0089 22                RET     
008A         L?0163:
008A         L?0164:
008A E9                MOV     A,R1
008B         L?0165:
008B 75F00F            MOV     B,#0FH
008E A4                MUL     AB
008F 2400        R     ADD     A,#LOW asResetSMBusS+02H
0091 F582              MOV     DPL,A
0093 E4                CLR     A
0094 3400        R     ADDC    A,#HIGH asResetSMBusS+02H
0096 22                RET     
0097         L?0166:
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 18  

0097 E0                MOVX    A,@DPTR
0098         L?0167:
0098 75F015            MOV     B,#015H
009B A4                MUL     AB
009C 2400        R     ADD     A,#LOW asSMBus+08H
009E F582              MOV     DPL,A
00A0 E4                CLR     A
00A1 3400        R     ADDC    A,#HIGH asSMBus+08H
00A3 22                RET     
00A4         L?0168:
00A4         L?0169:
00A4 C28E              CLR     TR1
00A6 C28F              CLR     TF1
00A8 D2AB              SETB    ET1
00AA 22                RET     
00AB         L?0170:
00AB         L?0171:
00AB 758DB2            MOV     TH1,#0B2H
00AE 758B19            MOV     TL1,#019H
00B1 C28F              CLR     TF1
00B3 D28E              SETB    TR1
00B5 22                RET     
00B6         L?0172:
00B6         L?0173:
00B6 F583              MOV     DPH,A
00B8 E4                CLR     A
00B9 93                MOVC    A,@A+DPTR
00BA FA                MOV     R2,A
00BB 7401              MOV     A,#01H
00BD 93                MOVC    A,@A+DPTR
00BE F582              MOV     DPL,A
00C0 8A83              MOV     DPH,R2
00C2 22                RET     
00C3         L?0174:
00C3         L?0175:
00C3 900000      R     MOV     DPTR,#Var
00C6         L?0176:
00C6 E0                MOVX    A,@DPTR
00C7 FE                MOV     R6,A
00C8 A3                INC     DPTR
00C9 E0                MOVX    A,@DPTR
00CA F582              MOV     DPL,A
00CC 8E83              MOV     DPH,R6
00CE E0                MOVX    A,@DPTR
00CF FF                MOV     R7,A
00D0 22                RET     
00D1         L?0177:
00D1 E0                MOVX    A,@DPTR
00D2 FF                MOV     R7,A
00D3 EE                MOV     A,R6
00D4         L?0178:
00D4 75F015            MOV     B,#015H
00D7 A4                MUL     AB
00D8 2400        R     ADD     A,#LOW asSMBus+04H
00DA F582              MOV     DPL,A
00DC E4                CLR     A
00DD 3400        R     ADDC    A,#HIGH asSMBus+04H
00DF 22                RET     
00E0         L?0179:
00E0 F0                MOVX    @DPTR,A
00E1 EE                MOV     A,R6
00E2         L?0180:
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 19  

00E2 75F00F            MOV     B,#0FH
00E5 A4                MUL     AB
00E6 2400        R     ADD     A,#LOW asResetSMBusS+08H
00E8 F582              MOV     DPL,A
00EA E4                CLR     A
00EB 3400        R     ADDC    A,#HIGH asResetSMBusS+08H
00ED 22                RET     
00EE         L?0181:
00EE EE                MOV     A,R6
00EF         L?0182:
00EF 75F00F            MOV     B,#0FH
00F2 A4                MUL     AB
00F3 2400        R     ADD     A,#LOW asResetSMBusS+06H
00F5 F582              MOV     DPL,A
00F7 E4                CLR     A
00F8 3400        R     ADDC    A,#HIGH asResetSMBusS+06H
00FA 22                RET     
00FB         L?0183:
00FB EE                MOV     A,R6
00FC         L?0184:
00FC 75F00F            MOV     B,#0FH
00FF A4                MUL     AB
0100 2400        R     ADD     A,#LOW asResetSMBusS+04H
0102 F582              MOV     DPL,A
0104 E4                CLR     A
0105 3400        R     ADDC    A,#HIGH asResetSMBusS+04H
0107 22                RET     
0108         L?0185:
0108 E0                MOVX    A,@DPTR
0109 FE                MOV     R6,A
010A A3                INC     DPTR
010B E0                MOVX    A,@DPTR
010C         L?0186:
010C FF                MOV     R7,A
010D F582              MOV     DPL,A
010F 8E83              MOV     DPH,R6
0111 E0                MOVX    A,@DPTR
0112 FD                MOV     R5,A
0113 22                RET     
0114         L?0187:
0114 900000      R     MOV     DPTR,#Channel
0117 E0                MOVX    A,@DPTR
0118 75F015            MOV     B,#015H
011B A4                MUL     AB
011C 2400        R     ADD     A,#LOW asSMBus+0AH
011E F582              MOV     DPL,A
0120 E4                CLR     A
0121 3400        R     ADDC    A,#HIGH asSMBus+0AH
0123 22                RET     
0124         L?0188:
0124         L?0189:
0124 E4                CLR     A
0125 75F001            MOV     B,#01H
0128 020000      E     LJMP    ?C?IILDX
012B         L?0190:
012B FF                MOV     R7,A
012C         L?0191:
012C E0                MOVX    A,@DPTR
012D FC                MOV     R4,A
012E A3                INC     DPTR
012F E0                MOVX    A,@DPTR
0130 F582              MOV     DPL,A
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 20  

0132 8C83              MOV     DPH,R4
0134 22                RET     
0135         L?0192:
0135         L?0193:
0135 F583              MOV     DPH,A
0137 E4                CLR     A
0138 93                MOVC    A,@A+DPTR
0139 FE                MOV     R6,A
013A 7401              MOV     A,#01H
013C 93                MOVC    A,@A+DPTR
013D 22                RET     
013E         L?0194:
013E 75F015            MOV     B,#015H
0141 A4                MUL     AB
0142 2400        R     ADD     A,#LOW asSMBus+013H
0144 F582              MOV     DPL,A
0146 E4                CLR     A
0147 3400        R     ADDC    A,#HIGH asSMBus+013H
0149 22                RET     
014A         L?0195:
014A 75F00F            MOV     B,#0FH
014D A4                MUL     AB
014E 2400        R     ADD     A,#LOW asResetSMBusS+0DH
0150 F582              MOV     DPL,A
0152 E4                CLR     A
0153 3400        R     ADDC    A,#HIGH asResetSMBusS+0DH
0155 22                RET     
             ; FUNCTION Com008F (END)

             ; FUNCTION DelayInact (BEGIN)
                                           ; SOURCE LINE # 31
                                           ; SOURCE LINE # 32
                                           ; SOURCE LINE # 35
;---- Variable 'index' assigned to Register 'R7' ----
0000 E4                CLR     A
0001 FF                MOV     R7,A
0002         ?C0001:
                                           ; SOURCE LINE # 36
                                           ; SOURCE LINE # 37
0002 900000      R     MOV     DPTR,#counter
0005 E0                MOVX    A,@DPTR
0006 04                INC     A
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 38
0008 0F                INC     R7
0009 EF                MOV     A,R7
000A B4C8F5            CJNE    A,#0C8H,?C0001
                                           ; SOURCE LINE # 39
000D         ?C0004:
000D 22                RET     
             ; FUNCTION DelayInact (END)

             ; FUNCTION _ResetSMBus (BEGIN)
                                           ; SOURCE LINE # 44
;---- Variable 'Channel' assigned to Register 'R6' ----
0000 CE                XCH     A,R6
0001 EF                MOV     A,R7
0002 CE                XCH     A,R6
                                           ; SOURCE LINE # 45
                                           ; SOURCE LINE # 53
0003 EE                MOV     A,R6
0004 120000      R     LCALL   L?0156
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 21  

0007 120000      R     LCALL   L?0152
000A E0                MOVX    A,@DPTR
000B 4402              ORL     A,#02H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 54
000E E0                MOVX    A,@DPTR
000F 54FD              ANL     A,#0FDH
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 56
0012 EE                MOV     A,R6
0013 75F00F            MOV     B,#0FH
0016 A4                MUL     AB
0017 2400        R     ADD     A,#LOW asResetSMBusS
0019 F582              MOV     DPL,A
001B E4                CLR     A
001C 3400        R     ADDC    A,#HIGH asResetSMBusS
001E 120000      R     LCALL   L?0152
0021 74FE              MOV     A,#0FEH
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 57
0024 120000      R     LCALL   L?0181
0027 120000      R     LCALL   L?0152
002A 7440              MOV     A,#040H
                                           ; SOURCE LINE # 58
002C 120000      R     LCALL   L?0179
002F 120000      R     LCALL   L?0152
0032 7440              MOV     A,#040H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 59
0035 120000      R     LCALL   DelayInact
                                           ; SOURCE LINE # 60
0038 EE                MOV     A,R6
0039 75F00F            MOV     B,#0FH
003C A4                MUL     AB
003D 2400        R     ADD     A,#LOW asResetSMBusS+0AH
003F F582              MOV     DPL,A
0041 E4                CLR     A
0042 3400        R     ADDC    A,#HIGH asResetSMBusS+0AH
0044 120000      R     LCALL   L?0152
0047 C083              PUSH    DPH
0049 C082              PUSH    DPL
004B E0                MOVX    A,@DPTR
004C FF                MOV     R7,A
004D EE                MOV     A,R6
004E 75F00F            MOV     B,#0FH
0051 A4                MUL     AB
0052 2400        R     ADD     A,#LOW asResetSMBusS+0CH
0054 F582              MOV     DPL,A
0056 E4                CLR     A
0057 3400        R     ADDC    A,#HIGH asResetSMBusS+0CH
0059 F583              MOV     DPH,A
005B E4                CLR     A
005C 93                MOVC    A,@A+DPTR
005D FD                MOV     R5,A
005E EF                MOV     A,R7
005F 4D                ORL     A,R5
0060 D082              POP     DPL
0062 D083              POP     DPH
0064 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 61
0065 120000      R     LCALL   DelayInact
                                           ; SOURCE LINE # 62
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 22  

0068 120000      R     LCALL   L?0181
006B 120000      R     LCALL   L?0152
006E E4                CLR     A
                                           ; SOURCE LINE # 63
006F 120000      R     LCALL   L?0179
0072 120000      R     LCALL   L?0152
0075 E4                CLR     A
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 64
0077 EE                MOV     A,R6
0078 120000      R     LCALL   L?0165
007B 120000      R     LCALL   L?0152
007E 7402              MOV     A,#02H
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 65
0081 120000      R     LCALL   L?0183
0084 120000      R     LCALL   L?0152
0087 7403              MOV     A,#03H
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 66
008A 120000      R     LCALL   DelayInact
                                           ; SOURCE LINE # 67
008D 120000      R     LCALL   L?0183
0090 120000      R     LCALL   L?0152
0093 7407              MOV     A,#07H
0095 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 68
0096 EE                MOV     A,R6
0097 120000      R     LCALL   L?0165
009A 120000      R     LCALL   L?0152
009D 7401              MOV     A,#01H
009F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 71
00A0 75F00E            MOV     B,#0EH
00A3 EE                MOV     A,R6
00A4 900000      E     MOV     DPTR,#asSSC+06H
00A7 120000      E     LCALL   ?C?OFFXADD
00AA 120000      R     LCALL   L?0153
00AD E4                CLR     A
00AE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 72
00AF EE                MOV     A,R6
00B0 75F015            MOV     B,#015H
00B3 A4                MUL     AB
00B4 2400        R     ADD     A,#LOW asSMBus+0EH
00B6 F582              MOV     DPL,A
00B8 E4                CLR     A
00B9 3400        R     ADDC    A,#HIGH asSMBus+0EH
00BB 120000      R     LCALL   L?0152
00BE C083              PUSH    DPH
00C0 C082              PUSH    DPL
00C2 E0                MOVX    A,@DPTR
00C3 FF                MOV     R7,A
00C4 EE                MOV     A,R6
00C5 75F015            MOV     B,#015H
00C8 A4                MUL     AB
00C9 2400        R     ADD     A,#LOW asSMBus+012H
00CB F582              MOV     DPL,A
00CD E4                CLR     A
00CE 3400        R     ADDC    A,#HIGH asSMBus+012H
00D0 F583              MOV     DPH,A
00D2 E4                CLR     A
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 23  

00D3 93                MOVC    A,@A+DPTR
00D4 FD                MOV     R5,A
00D5 F4                CPL     A
00D6 FC                MOV     R4,A
00D7 EF                MOV     A,R7
00D8 5C                ANL     A,R4
00D9 D082              POP     DPL
00DB D083              POP     DPH
00DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 73
00DE EE                MOV     A,R6
00DF 75F015            MOV     B,#015H
00E2 A4                MUL     AB
00E3 2400        R     ADD     A,#LOW asSMBus+010H
00E5 F582              MOV     DPL,A
00E7 E4                CLR     A
00E8 3400        R     ADDC    A,#HIGH asSMBus+010H
00EA 120000      R     LCALL   L?0172
00ED ED                MOV     A,R5
00EE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 74
00EF 75F00E            MOV     B,#0EH
00F2 EE                MOV     A,R6
00F3 900000      E     MOV     DPTR,#asSSC+0AH
00F6 120000      E     LCALL   ?C?OFFXADD
00F9 120000      R     LCALL   L?0153
00FC E4                CLR     A
00FD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 77
00FE 900000      E     MOV     DPTR,#DB_SMBusAck1
0101 E0                MOVX    A,@DPTR
0102 F4                CPL     A
0103 702C              JNZ     ?C0011
                                           ; SOURCE LINE # 78
                                           ; SOURCE LINE # 79
0105 900000      E     MOV     DPTR,#DB_SMBusAddr
0108 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 80
0109 EE                MOV     A,R6
010A 7006              JNZ     ?C0006
                                           ; SOURCE LINE # 81
                                           ; SOURCE LINE # 82
010C 900000      E     MOV     DPTR,#DB_SMBusFlag1
010F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 83
0110 8014              SJMP    ?C0007
0112         ?C0006:
                                           ; SOURCE LINE # 84
0112 EE                MOV     A,R6
0113 B40107            CJNE    A,#01H,?C0008
                                           ; SOURCE LINE # 85
                                           ; SOURCE LINE # 86
0116 E4                CLR     A
0117 900000      E     MOV     DPTR,#DB_SMBusFlag2
011A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 87
011B 8009              SJMP    ?C0007
011D         ?C0008:
                                           ; SOURCE LINE # 88
011D EE                MOV     A,R6
011E B40205            CJNE    A,#02H,?C0007
                                           ; SOURCE LINE # 89
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 24  

                                           ; SOURCE LINE # 90
0121 E4                CLR     A
0122 900000      E     MOV     DPTR,#DB_SMBusFlag3
0125 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 91
0126         ?C0007:
                                           ; SOURCE LINE # 93
0126 E4                CLR     A
0127 900000      E     MOV     DPTR,#DB_SMBusACDID
012A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 94
012B 900000      E     MOV     DPTR,#DB_SMBusAck1
012E 7444              MOV     A,#044H
0130 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 95
                                           ; SOURCE LINE # 97
0131         ?C0011:
0131 22                RET     
             ; FUNCTION _ResetSMBus (END)

             ; FUNCTION _bRWSMBus (BEGIN)
                                           ; SOURCE LINE # 102
0000 900000      R     MOV     DPTR,#Protocol
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EB                MOV     A,R3
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#Channel
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 103
                                           ; SOURCE LINE # 109
000D 7D01              MOV     R5,#01H
000F 120000      R     LCALL   _CheckSMBusInterfaceCanbeUse
0012 EF                MOV     A,R7
0013 7007              JNZ     ?C0012
                                           ; SOURCE LINE # 110
                                           ; SOURCE LINE # 111
0015 900000      R     MOV     DPTR,#resutl
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 112
0019 020000      R     LJMP    ?C0013
001C         ?C0012:
                                           ; SOURCE LINE # 114
                                           ; SOURCE LINE # 115
001C 900000      R     MOV     DPTR,#error
001F 74EE              MOV     A,#0EEH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 116
0022 E4                CLR     A
0023 900000      R     MOV     DPTR,#resutl
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 118
0027 7800        E     MOV     R0,#LOW SMBCRC8_A
0029 F6                MOV     @R0,A
                                           ; SOURCE LINE # 120
002A 900000      R     MOV     DPTR,#Protocol
002D E0                MOVX    A,@DPTR
002E 20E703            JB      ACC.7,$ + 6H
0031 020000      R     LJMP    ?C0014
                                           ; SOURCE LINE # 121
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 25  

                                           ; SOURCE LINE # 122
0034 900000      R     MOV     DPTR,#PECSupport
0037 E0                MOVX    A,@DPTR
0038 6008              JZ      ?C0015
                                           ; SOURCE LINE # 123
                                           ; SOURCE LINE # 124
003A 900000      R     MOV     DPTR,#Addr
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F 120000      R     LCALL   _CalcCRC8
                                           ; SOURCE LINE # 125
0042         ?C0015:
                                           ; SOURCE LINE # 126
0042 900000      R     MOV     DPTR,#Addr
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 900000      R     MOV     DPTR,#Channel
004A E0                MOVX    A,@DPTR
004B 120000      R     LCALL   L?0151
004E EF                MOV     A,R7
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 127
0050 900000      R     MOV     DPTR,#PECSupport
0053 E0                MOVX    A,@DPTR
0054 6008              JZ      ?C0016
                                           ; SOURCE LINE # 128
                                           ; SOURCE LINE # 129
0056 900000      R     MOV     DPTR,#Comd
0059 E0                MOVX    A,@DPTR
005A FF                MOV     R7,A
005B 120000      R     LCALL   _CalcCRC8
                                           ; SOURCE LINE # 130
005E         ?C0016:
                                           ; SOURCE LINE # 131
005E 900000      R     MOV     DPTR,#Comd
0061 E0                MOVX    A,@DPTR
0062 FF                MOV     R7,A
0063 900000      R     MOV     DPTR,#Channel
0066 E0                MOVX    A,@DPTR
0067 120000      R     LCALL   L?0178
006A 120000      R     LCALL   L?0152
006D EF                MOV     A,R7
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 132
006F 900000      R     MOV     DPTR,#Protocol
0072 E0                MOVX    A,@DPTR
0073 547F              ANL     A,#07FH
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 133
0076 900000      R     MOV     DPTR,#PECSupport
0079 E0                MOVX    A,@DPTR
007A 6009              JZ      ?C0017
                                           ; SOURCE LINE # 134
                                           ; SOURCE LINE # 135
007C 900000      R     MOV     DPTR,#Var
007F 120000      R     LCALL   L?0176
0082 120000      R     LCALL   _CalcCRC8
                                           ; SOURCE LINE # 136
0085         ?C0017:
                                           ; SOURCE LINE # 137
0085 900000      R     MOV     DPTR,#Var
0088 120000      R     LCALL   L?0185
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 26  

008B 900000      R     MOV     DPTR,#Channel
008E 120000      R     LCALL   L?0166
0091 120000      R     LCALL   L?0172
0094 ED                MOV     A,R5
0095 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 138
0096 900000      R     MOV     DPTR,#Protocol
0099 E0                MOVX    A,@DPTR
009A 640C              XRL     A,#0CH
009C 703F              JNZ     ?C0020
                                           ; SOURCE LINE # 139
                                           ; SOURCE LINE # 140
009E 900000      R     MOV     DPTR,#PECSupport
00A1 E0                MOVX    A,@DPTR
00A2 600A              JZ      ?C0019
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 142
00A4 8F82              MOV     DPL,R7
00A6 8E83              MOV     DPH,R6
00A8 A3                INC     DPTR
00A9 E0                MOVX    A,@DPTR
00AA FF                MOV     R7,A
00AB 120000      R     LCALL   _CalcCRC8
                                           ; SOURCE LINE # 143
00AE         ?C0019:
                                           ; SOURCE LINE # 144
00AE 900000      R     MOV     DPTR,#Var
00B1 E0                MOVX    A,@DPTR
00B2 FE                MOV     R6,A
00B3 A3                INC     DPTR
00B4 E0                MOVX    A,@DPTR
00B5 F582              MOV     DPL,A
00B7 8E83              MOV     DPH,R6
00B9 A3                INC     DPTR
00BA E0                MOVX    A,@DPTR
00BB FF                MOV     R7,A
00BC 120000      R     LCALL   L?0187
00BF 120000      R     LCALL   L?0152
00C2 EF                MOV     A,R7
00C3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 145
                                           ; SOURCE LINE # 146
00C4 8017              SJMP    ?C0020
00C6         ?C0014:
                                           ; SOURCE LINE # 148
                                           ; SOURCE LINE # 149
00C6 900000      R     MOV     DPTR,#Addr
00C9 E0                MOVX    A,@DPTR
00CA 900000      R     MOV     DPTR,#Channel
00CD 120000      R     LCALL   L?0149
00D0 EF                MOV     A,R7
00D1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 150
00D2 900000      R     MOV     DPTR,#Comd
00D5 120000      R     LCALL   L?0177
00D8 120000      R     LCALL   L?0152
00DB EF                MOV     A,R7
00DC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 151
00DD         ?C0020:
                                           ; SOURCE LINE # 154
00DD 900000      R     MOV     DPTR,#Channel
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 27  

00E0 120000      R     LCALL   L?0160
00E3 120000      R     LCALL   L?0152
00E6 74FE              MOV     A,#0FEH
00E8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 155
00E9 900000      R     MOV     DPTR,#PECSupport
00EC E0                MOVX    A,@DPTR
00ED 601B              JZ      ?C0021
                                           ; SOURCE LINE # 156
                                           ; SOURCE LINE # 157
00EF 7800        E     MOV     R0,#LOW SMBCRC8_A
00F1 E6                MOV     A,@R0
00F2 FE                MOV     R6,A
00F3 900000      R     MOV     DPTR,#Channel
00F6 E0                MOVX    A,@DPTR
00F7 FD                MOV     R5,A
00F8 120000      R     LCALL   L?0194
00FB 120000      R     LCALL   L?0173
00FE EE                MOV     A,R6
00FF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 158
0100 900000      R     MOV     DPTR,#Protocol
0103 E0                MOVX    A,@DPTR
0104 44C0              ORL     A,#0C0H
0106 FE                MOV     R6,A
0107 ED                MOV     A,R5
                                           ; SOURCE LINE # 159
0108 8008              SJMP    ?C0137
010A         ?C0021:
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 162
010A 900000      R     MOV     DPTR,#Protocol
010D E0                MOVX    A,@DPTR
010E 4440              ORL     A,#040H
0110 FE                MOV     R6,A
0111 EF                MOV     A,R7
0112         ?C0137:
0112 120000      R     LCALL   L?0156
0115 120000      R     LCALL   L?0152
0118 EE                MOV     A,R6
0119 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 163
011A         ?C0022:
                                           ; SOURCE LINE # 165
011A C28E              CLR     TR1
                                           ; SOURCE LINE # 166
011C C2AB              CLR     ET1
                                           ; SOURCE LINE # 167
011E 00                NOP     
                                           ; SOURCE LINE # 168
011F 00                NOP     
                                           ; SOURCE LINE # 169
0120 00                NOP     
                                           ; SOURCE LINE # 170
0121 00                NOP     
                                           ; SOURCE LINE # 171
                                           ; SOURCE LINE # 172
                                           ; SOURCE LINE # 173
                                           ; SOURCE LINE # 174
0122 120000      R     LCALL   L?0170
0125         ?C0023:
                                           ; SOURCE LINE # 176
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 28  

0125 208F14            JB      TF1,?C0024
                                           ; SOURCE LINE # 177
                                           ; SOURCE LINE # 178
0128 900000      R     MOV     DPTR,#Channel
012B E0                MOVX    A,@DPTR
012C 120000      R     LCALL   L?0147
012F E0                MOVX    A,@DPTR
0130 900000      R     MOV     DPTR,#status
0133 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 179
0134 E0                MOVX    A,@DPTR
0135 547E              ANL     A,#07EH
0137 60EC              JZ      ?C0023
                                           ; SOURCE LINE # 180
                                           ; SOURCE LINE # 181
                                           ; SOURCE LINE # 182
                                           ; SOURCE LINE # 183
0139 120000      R     LCALL   L?0168
                                           ; SOURCE LINE # 184
                                           ; SOURCE LINE # 185
                                           ; SOURCE LINE # 186
013C         ?C0024:
                                           ; SOURCE LINE # 188
013C 308F0D            JNB     TF1,?C0026
                                           ; SOURCE LINE # 189
                                           ; SOURCE LINE # 190
                                           ; SOURCE LINE # 191
                                           ; SOURCE LINE # 192
013F 120000      R     LCALL   L?0168
                                           ; SOURCE LINE # 193
0142 900000      R     MOV     DPTR,#Channel
0145 E0                MOVX    A,@DPTR
0146 FF                MOV     R7,A
0147 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 194
                                           ; SOURCE LINE # 195
014A 8016              SJMP    ?C0138
014C         ?C0026:
                                           ; SOURCE LINE # 197
                                           ; SOURCE LINE # 198
014C 900000      R     MOV     DPTR,#status
014F E0                MOVX    A,@DPTR
0150 FF                MOV     R7,A
0151 547C              ANL     A,#07CH
0153 6015              JZ      ?C0028
                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 200
0155 EF                MOV     A,R7
0156 5418              ANL     A,#018H
0158 6008              JZ      ?C0029
                                           ; SOURCE LINE # 201
                                           ; SOURCE LINE # 202
015A 900000      R     MOV     DPTR,#Channel
015D E0                MOVX    A,@DPTR
015E FF                MOV     R7,A
015F 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 203
0162         ?C0029:
                                           ; SOURCE LINE # 204
0162         ?C0138:
0162 900000      R     MOV     DPTR,#error
0165 74EE              MOV     A,#0EEH
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 29  

0167 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 205
0168 8005              SJMP    ?C0027
016A         ?C0028:
                                           ; SOURCE LINE # 207
                                           ; SOURCE LINE # 208
016A E4                CLR     A
016B 900000      R     MOV     DPTR,#error
016E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 209
                                           ; SOURCE LINE # 210
016F         ?C0027:
                                           ; SOURCE LINE # 212
016F 900000      R     MOV     DPTR,#error
0172 E0                MOVX    A,@DPTR
0173 B4EE07            CJNE    A,#0EEH,?C0031
                                           ; SOURCE LINE # 213
                                           ; SOURCE LINE # 214
0176 E4                CLR     A
0177 900000      R     MOV     DPTR,#resutl
017A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 215
017B 803D              SJMP    ?C0032
017D         ?C0031:
                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 218
017D 900000      R     MOV     DPTR,#Channel
0180 E0                MOVX    A,@DPTR
0181 FF                MOV     R7,A
0182 120000      R     LCALL   L?0151
0185 E0                MOVX    A,@DPTR
0186 30E02B            JNB     ACC.0,?C0033
                                           ; SOURCE LINE # 219
                                           ; SOURCE LINE # 220
0189 EF                MOV     A,R7
018A 120000      R     LCALL   L?0167
018D 120000      R     LCALL   L?0148
0190 E0                MOVX    A,@DPTR
0191 FF                MOV     R7,A
0192 900000      R     MOV     DPTR,#Var
0195 E0                MOVX    A,@DPTR
0196 FC                MOV     R4,A
0197 A3                INC     DPTR
0198 E0                MOVX    A,@DPTR
0199 FD                MOV     R5,A
019A F582              MOV     DPL,A
019C 8C83              MOV     DPH,R4
019E EF                MOV     A,R7
019F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 221
01A0 900000      R     MOV     DPTR,#Protocol
01A3 E0                MOVX    A,@DPTR
01A4 B40C0D            CJNE    A,#0CH,?C0033
                                           ; SOURCE LINE # 222
                                           ; SOURCE LINE # 223
01A7 120000      R     LCALL   L?0187
01AA 120000      R     LCALL   L?0148
01AD E0                MOVX    A,@DPTR
01AE 8D82              MOV     DPL,R5
01B0 8C83              MOV     DPH,R4
01B2 A3                INC     DPTR
01B3 F0                MOVX    @DPTR,A
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 30  

                                           ; SOURCE LINE # 224
                                           ; SOURCE LINE # 225
01B4         ?C0033:
                                           ; SOURCE LINE # 226
01B4 900000      R     MOV     DPTR,#resutl
01B7 7401              MOV     A,#01H
01B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 227
01BA         ?C0032:
                                           ; SOURCE LINE # 229
01BA 900000      R     MOV     DPTR,#Channel
01BD E0                MOVX    A,@DPTR
01BE 120000      R     LCALL   L?0147
01C1 74FE              MOV     A,#0FEH
01C3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 230
01C4         ?C0013:
                                           ; SOURCE LINE # 232
01C4 900000      R     MOV     DPTR,#resutl
01C7 E0                MOVX    A,@DPTR
01C8 FF                MOV     R7,A
                                           ; SOURCE LINE # 233
01C9         ?C0035:
01C9 22                RET     
             ; FUNCTION _bRWSMBus (END)

             ; FUNCTION _bRSMBusBlock (BEGIN)
                                           ; SOURCE LINE # 238
0000 900000      R     MOV     DPTR,#Protocol
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EB                MOV     A,R3
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#Channel
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 239
                                           ; SOURCE LINE # 244
000D 7D01              MOV     R5,#01H
000F 120000      R     LCALL   _CheckSMBusInterfaceCanbeUse
0012 EF                MOV     A,R7
0013 7007              JNZ     ?C0036
                                           ; SOURCE LINE # 245
                                           ; SOURCE LINE # 246
0015 900000      R     MOV     DPTR,#ack
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 247
0019 020000      R     LJMP    ?C0037
001C         ?C0036:
                                           ; SOURCE LINE # 249
                                           ; SOURCE LINE # 250
001C E4                CLR     A
001D 900000      R     MOV     DPTR,#ack
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 251
0021 A3                INC     DPTR
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 253
0023 900000      R     MOV     DPTR,#Addr
0026 E0                MOVX    A,@DPTR
0027 900000      R     MOV     DPTR,#Channel
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 31  

002A 120000      R     LCALL   L?0149
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 254
002F 900000      R     MOV     DPTR,#Comd
                                           ; SOURCE LINE # 255
0032 120000      R     LCALL   L?0144
0035 74FE              MOV     A,#0FEH
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 256
0038 900000      R     MOV     DPTR,#Protocol
003B E0                MOVX    A,@DPTR
003C 4440              ORL     A,#040H
003E FF                MOV     R7,A
003F 120000      R     LCALL   L?0154
0042 120000      R     LCALL   L?0152
0045 EF                MOV     A,R7
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 258
0047 C28E              CLR     TR1
                                           ; SOURCE LINE # 259
0049 C2AB              CLR     ET1
                                           ; SOURCE LINE # 260
004B 00                NOP     
                                           ; SOURCE LINE # 261
004C 00                NOP     
                                           ; SOURCE LINE # 262
004D 00                NOP     
                                           ; SOURCE LINE # 263
004E 00                NOP     
                                           ; SOURCE LINE # 264
                                           ; SOURCE LINE # 265
                                           ; SOURCE LINE # 266
                                           ; SOURCE LINE # 267
004F 120000      R     LCALL   L?0170
0052         ?C0038:
                                           ; SOURCE LINE # 269
0052 308F03            JNB     TF1,$ + 6H
0055 020000      R     LJMP    ?C0039
                                           ; SOURCE LINE # 270
                                           ; SOURCE LINE # 271
0058 900000      R     MOV     DPTR,#Channel
005B 120000      R     LCALL   L?0160
005E 120000      R     LCALL   L?0152
0061 E0                MOVX    A,@DPTR
0062 FE                MOV     R6,A
;---- Variable 'status' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 272
0063 54FC              ANL     A,#0FCH
0065 60EB              JZ      ?C0038
                                           ; SOURCE LINE # 273
                                           ; SOURCE LINE # 274
0067 EE                MOV     A,R6
0068 547C              ANL     A,#07CH
006A 6013              JZ      ?C0041
                                           ; SOURCE LINE # 275
                                           ; SOURCE LINE # 276
006C EE                MOV     A,R6
006D 5418              ANL     A,#018H
006F 6003              JZ      ?C0042
                                           ; SOURCE LINE # 277
                                           ; SOURCE LINE # 278
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 32  

0071 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 279
0074         ?C0042:
                                           ; SOURCE LINE # 280
                                           ; SOURCE LINE # 281
                                           ; SOURCE LINE # 282
0074 120000      R     LCALL   L?0169
                                           ; SOURCE LINE # 283
0077 E4                CLR     A
0078 900000      R     MOV     DPTR,#ack
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 284
007C 020000      R     LJMP    ?C0039
                                           ; SOURCE LINE # 285
007F         ?C0041:
                                           ; SOURCE LINE # 287
                                           ; SOURCE LINE # 288
007F 900000      R     MOV     DPTR,#Channel
0082 E0                MOVX    A,@DPTR
0083 FF                MOV     R7,A
0084 120000      R     LCALL   L?0159
0087 120000      R     LCALL   L?0152
008A E0                MOVX    A,@DPTR
008B FE                MOV     R6,A
008C 900000      R     MOV     DPTR,#Var
008F 120000      R     LCALL   L?0191
0092 EE                MOV     A,R6
0093 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 289
0094 900000      R     MOV     DPTR,#bcount
0097 E0                MOVX    A,@DPTR
0098 7011              JNZ     ?C0044
                                           ; SOURCE LINE # 290
                                           ; SOURCE LINE # 291
009A EF                MOV     A,R7
009B 120000      R     LCALL   L?0167
009E 120000      R     LCALL   L?0148
00A1 E0                MOVX    A,@DPTR
00A2 900000      R     MOV     DPTR,#bcount
00A5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 292
00A6 E0                MOVX    A,@DPTR
00A7 FF                MOV     R7,A
00A8 120000      E     LCALL   _Hook_GetSMBusReadBlockByteCount
                                           ; SOURCE LINE # 293
00AB         ?C0044:
                                           ; SOURCE LINE # 295
00AB 900000      R     MOV     DPTR,#bcount
00AE E0                MOVX    A,@DPTR
00AF 14                DEC     A
00B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 296
00B1 900000      R     MOV     DPTR,#Var
00B4 120000      R     LCALL   L?0188
                                           ; SOURCE LINE # 298
00B7 900000      R     MOV     DPTR,#bcount
00BA E0                MOVX    A,@DPTR
00BB FF                MOV     R7,A
00BC B4010A            CJNE    A,#01H,?C0045
                                           ; SOURCE LINE # 299
                                           ; SOURCE LINE # 300
00BF 120000      R     LCALL   L?0154
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 33  

00C2 120000      R     LCALL   L?0152
00C5 E0                MOVX    A,@DPTR
00C6 4420              ORL     A,#020H
00C8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 301
00C9         ?C0045:
                                           ; SOURCE LINE # 303
00C9 900000      R     MOV     DPTR,#Channel
00CC E0                MOVX    A,@DPTR
00CD 120000      R     LCALL   L?0162
00D0 120000      R     LCALL   L?0152
00D3 74FE              MOV     A,#0FEH
00D5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 305
00D6 EF                MOV     A,R7
00D7 6003              JZ      $ + 5H
00D9 020000      R     LJMP    ?C0038
                                           ; SOURCE LINE # 306
                                           ; SOURCE LINE # 307
                                           ; SOURCE LINE # 308
                                           ; SOURCE LINE # 309
00DC 120000      R     LCALL   L?0169
                                           ; SOURCE LINE # 310
00DF 900000      R     MOV     DPTR,#ack
00E2 04                INC     A
00E3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 311
                                           ; SOURCE LINE # 312
                                           ; SOURCE LINE # 313
                                           ; SOURCE LINE # 314
                                           ; SOURCE LINE # 315
00E4         ?C0039:
                                           ; SOURCE LINE # 317
00E4 308F10            JNB     TF1,?C0047
                                           ; SOURCE LINE # 318
                                           ; SOURCE LINE # 319
                                           ; SOURCE LINE # 320
                                           ; SOURCE LINE # 321
00E7 120000      R     LCALL   L?0169
                                           ; SOURCE LINE # 322
00EA 900000      R     MOV     DPTR,#Channel
00ED E0                MOVX    A,@DPTR
00EE FF                MOV     R7,A
00EF 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 323
00F2 E4                CLR     A
00F3 900000      R     MOV     DPTR,#ack
00F6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 324
00F7         ?C0047:
                                           ; SOURCE LINE # 326
00F7 900000      R     MOV     DPTR,#Channel
00FA E0                MOVX    A,@DPTR
00FB FF                MOV     R7,A
00FC 120000      R     LCALL   L?0156
00FF 120000      R     LCALL   L?0152
0102 E0                MOVX    A,@DPTR
0103 54DF              ANL     A,#0DFH
0105 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 327
0106 EF                MOV     A,R7
0107 120000      R     LCALL   L?0147
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 34  

010A 74FE              MOV     A,#0FEH
010C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 328
010D         ?C0037:
                                           ; SOURCE LINE # 330
010D 900000      R     MOV     DPTR,#ack
0110 E0                MOVX    A,@DPTR
0111 FF                MOV     R7,A
                                           ; SOURCE LINE # 331
0112         ?C0048:
0112 22                RET     
             ; FUNCTION _bRSMBusBlock (END)

             ; FUNCTION _bWSMBusBlock (BEGIN)
                                           ; SOURCE LINE # 336
0000 900000      R     MOV     DPTR,#Protocol
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EB                MOV     A,R3
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#Channel
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 337
                                           ; SOURCE LINE # 342
000D 7D01              MOV     R5,#01H
000F 120000      R     LCALL   _CheckSMBusInterfaceCanbeUse
0012 EF                MOV     A,R7
0013 7007              JNZ     ?C0049
                                           ; SOURCE LINE # 343
                                           ; SOURCE LINE # 344
0015 900000      R     MOV     DPTR,#ack
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 345
0019 020000      R     LJMP    ?C0050
001C         ?C0049:
                                           ; SOURCE LINE # 347
                                           ; SOURCE LINE # 348
001C E4                CLR     A
001D 900000      R     MOV     DPTR,#ack
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 349
0021 A3                INC     DPTR
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 351
0023 900000      R     MOV     DPTR,#PECsupport
0026 E0                MOVX    A,@DPTR
0027 6022              JZ      ?C0051
                                           ; SOURCE LINE # 352
                                           ; SOURCE LINE # 353
0029 E4                CLR     A
002A 7800        E     MOV     R0,#LOW SMBCRC8_A
002C F6                MOV     @R0,A
                                           ; SOURCE LINE # 354
002D 900000      R     MOV     DPTR,#Addr
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 120000      R     LCALL   _CalcCRC8
                                           ; SOURCE LINE # 355
0035 900000      R     MOV     DPTR,#Comd
0038 E0                MOVX    A,@DPTR
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 35  

0039 FF                MOV     R7,A
003A 120000      R     LCALL   _CalcCRC8
                                           ; SOURCE LINE # 356
003D 900000      R     MOV     DPTR,#ByteCont
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 120000      R     LCALL   _CalcCRC8
                                           ; SOURCE LINE # 357
0045 120000      R     LCALL   L?0174
0048 120000      R     LCALL   _CalcCRC8
                                           ; SOURCE LINE # 358
004B         ?C0051:
                                           ; SOURCE LINE # 360
004B 900000      R     MOV     DPTR,#Protocol
004E E0                MOVX    A,@DPTR
004F 547F              ANL     A,#07FH
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 361
0052 A3                INC     DPTR
0053 E0                MOVX    A,@DPTR
0054 FF                MOV     R7,A
0055 900000      R     MOV     DPTR,#Channel
0058 120000      R     LCALL   L?0150
005B EF                MOV     A,R7
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 362
005D 900000      R     MOV     DPTR,#Comd
0060 120000      R     LCALL   L?0177
0063 120000      R     LCALL   L?0152
0066 EF                MOV     A,R7
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 363
0068 900000      R     MOV     DPTR,#ByteCont
006B E0                MOVX    A,@DPTR
006C FF                MOV     R7,A
006D EE                MOV     A,R6
006E 120000      R     LCALL   L?0167
0071 120000      R     LCALL   L?0152
0074 EF                MOV     A,R7
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 364
0076 900000      R     MOV     DPTR,#BCTemp
0079 EF                MOV     A,R7
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 365
007B 120000      R     LCALL   L?0174
007E 900000      R     MOV     DPTR,#Channel
0081 E0                MOVX    A,@DPTR
0082 FE                MOV     R6,A
0083 120000      R     LCALL   L?0159
0086 120000      R     LCALL   L?0152
0089 EF                MOV     A,R7
                                           ; SOURCE LINE # 366
008A 120000      R     LCALL   L?0146
008D 74FE              MOV     A,#0FEH
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 367
0090 900000      R     MOV     DPTR,#PECsupport
0093 E0                MOVX    A,@DPTR
0094 900000      R     MOV     DPTR,#Protocol
0097 6005              JZ      ?C0052
                                           ; SOURCE LINE # 368
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 36  

                                           ; SOURCE LINE # 369
0099 E0                MOVX    A,@DPTR
009A 44C0              ORL     A,#0C0H
                                           ; SOURCE LINE # 370
009C 8003              SJMP    ?C0139
009E         ?C0052:
                                           ; SOURCE LINE # 372
                                           ; SOURCE LINE # 373
009E E0                MOVX    A,@DPTR
009F 4440              ORL     A,#040H
00A1         ?C0139:
00A1 FF                MOV     R7,A
00A2 900000      R     MOV     DPTR,#Channel
00A5 120000      R     LCALL   L?0155
00A8 120000      R     LCALL   L?0152
00AB EF                MOV     A,R7
00AC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 374
00AD         ?C0053:
                                           ; SOURCE LINE # 376
00AD C28E              CLR     TR1
                                           ; SOURCE LINE # 377
00AF C2AB              CLR     ET1
                                           ; SOURCE LINE # 378
00B1 00                NOP     
                                           ; SOURCE LINE # 379
00B2 00                NOP     
                                           ; SOURCE LINE # 380
00B3 00                NOP     
                                           ; SOURCE LINE # 381
00B4 00                NOP     
                                           ; SOURCE LINE # 382
                                           ; SOURCE LINE # 383
                                           ; SOURCE LINE # 384
                                           ; SOURCE LINE # 385
00B5 120000      R     LCALL   L?0171
00B8         ?C0054:
                                           ; SOURCE LINE # 387
00B8 308F03            JNB     TF1,$ + 6H
00BB 020000      R     LJMP    ?C0055
                                           ; SOURCE LINE # 388
                                           ; SOURCE LINE # 389
00BE 900000      R     MOV     DPTR,#Channel
00C1 120000      R     LCALL   L?0161
00C4 120000      R     LCALL   L?0152
00C7 E0                MOVX    A,@DPTR
00C8 FE                MOV     R6,A
;---- Variable 'status' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 390
00C9 54FC              ANL     A,#0FCH
00CB 60EB              JZ      ?C0054
                                           ; SOURCE LINE # 391
                                           ; SOURCE LINE # 392
00CD EE                MOV     A,R6
00CE 547C              ANL     A,#07CH
00D0 6013              JZ      ?C0057
                                           ; SOURCE LINE # 393
                                           ; SOURCE LINE # 394
00D2 EE                MOV     A,R6
00D3 5418              ANL     A,#018H
00D5 6003              JZ      ?C0058
                                           ; SOURCE LINE # 395
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 37  

                                           ; SOURCE LINE # 396
00D7 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 397
00DA         ?C0058:
                                           ; SOURCE LINE # 398
                                           ; SOURCE LINE # 399
                                           ; SOURCE LINE # 400
00DA 120000      R     LCALL   L?0169
                                           ; SOURCE LINE # 401
00DD E4                CLR     A
00DE 900000      R     MOV     DPTR,#ack
00E1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 402
00E2 020000      R     LJMP    ?C0055
                                           ; SOURCE LINE # 403
00E5         ?C0057:
                                           ; SOURCE LINE # 405
                                           ; SOURCE LINE # 406
00E5 900000      R     MOV     DPTR,#BCTemp
00E8 E0                MOVX    A,@DPTR
00E9 14                DEC     A
00EA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 407
00EB 900000      R     MOV     DPTR,#Var
00EE 120000      R     LCALL   L?0188
                                           ; SOURCE LINE # 409
00F1 900000      R     MOV     DPTR,#BCTemp
00F4 E0                MOVX    A,@DPTR
00F5 6052              JZ      ?C0060
                                           ; SOURCE LINE # 410
                                           ; SOURCE LINE # 411
00F7 900000      R     MOV     DPTR,#PECsupport
00FA E0                MOVX    A,@DPTR
00FB 6030              JZ      ?C0061
                                           ; SOURCE LINE # 412
                                           ; SOURCE LINE # 413
00FD 900000      R     MOV     DPTR,#Var
0100 120000      R     LCALL   L?0185
0103 900000      R     MOV     DPTR,#Channel
0106 E0                MOVX    A,@DPTR
0107 120000      R     LCALL   L?0159
010A 120000      R     LCALL   L?0173
010D ED                MOV     A,R5
010E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 414
010F 8F82              MOV     DPL,R7
0111 8E83              MOV     DPH,R6
0113 E0                MOVX    A,@DPTR
0114 FF                MOV     R7,A
0115 120000      R     LCALL   _CalcCRC8
                                           ; SOURCE LINE # 415
0118 900000      R     MOV     DPTR,#BCTemp
011B E0                MOVX    A,@DPTR
011C 6401              XRL     A,#01H
011E 701C              JNZ     ?C0063
                                           ; SOURCE LINE # 416
                                           ; SOURCE LINE # 417
0120 7800        E     MOV     R0,#LOW SMBCRC8_A
0122 E6                MOV     A,@R0
0123 FF                MOV     R7,A
0124 900000      R     MOV     DPTR,#Channel
0127 E0                MOVX    A,@DPTR
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 38  

0128 120000      R     LCALL   L?0194
                                           ; SOURCE LINE # 418
                                           ; SOURCE LINE # 419
012B 800A              SJMP    ?C0140
012D         ?C0061:
                                           ; SOURCE LINE # 421
                                           ; SOURCE LINE # 422
012D 120000      R     LCALL   L?0175
0130 900000      R     MOV     DPTR,#Channel
0133 E0                MOVX    A,@DPTR
0134 120000      R     LCALL   L?0159
0137         ?C0140:
0137 120000      R     LCALL   L?0152
013A EF                MOV     A,R7
013B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 423
013C         ?C0063:
                                           ; SOURCE LINE # 424
013C 900000      R     MOV     DPTR,#Channel
013F E0                MOVX    A,@DPTR
0140 120000      R     LCALL   L?0147
0143 74FE              MOV     A,#0FEH
0145 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 425
0146 020000      R     LJMP    ?C0054
0149         ?C0060:
                                           ; SOURCE LINE # 427
                                           ; SOURCE LINE # 428
                                           ; SOURCE LINE # 429
                                           ; SOURCE LINE # 430
0149 120000      R     LCALL   L?0169
                                           ; SOURCE LINE # 431
014C 900000      R     MOV     DPTR,#ack
014F 7401              MOV     A,#01H
0151 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 432
                                           ; SOURCE LINE # 433
                                           ; SOURCE LINE # 434
                                           ; SOURCE LINE # 435
                                           ; SOURCE LINE # 436
0152         ?C0055:
                                           ; SOURCE LINE # 438
0152 308F10            JNB     TF1,?C0065
                                           ; SOURCE LINE # 439
                                           ; SOURCE LINE # 440
                                           ; SOURCE LINE # 441
                                           ; SOURCE LINE # 442
0155 120000      R     LCALL   L?0169
                                           ; SOURCE LINE # 443
0158 900000      R     MOV     DPTR,#Channel
015B E0                MOVX    A,@DPTR
015C FF                MOV     R7,A
015D 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 444
0160 E4                CLR     A
0161 900000      R     MOV     DPTR,#ack
0164 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 445
0165         ?C0065:
                                           ; SOURCE LINE # 447
0165 900000      R     MOV     DPTR,#Channel
0168 E0                MOVX    A,@DPTR
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 39  

0169 120000      R     LCALL   L?0147
016C 74FE              MOV     A,#0FEH
016E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 448
016F         ?C0050:
                                           ; SOURCE LINE # 450
016F 900000      R     MOV     DPTR,#ack
0172 E0                MOVX    A,@DPTR
0173 FF                MOV     R7,A
                                           ; SOURCE LINE # 451
0174         ?C0066:
0174 22                RET     
             ; FUNCTION _bWSMBusBlock (END)

             ; FUNCTION _bSMBusSendByte (BEGIN)
                                           ; SOURCE LINE # 456
0000 900000      R     MOV     DPTR,#Addr
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EB                MOV     A,R3
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#Channel
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 457
                                           ; SOURCE LINE # 462
000D 7D01              MOV     R5,#01H
000F 120000      R     LCALL   _CheckSMBusInterfaceCanbeUse
0012 EF                MOV     A,R7
0013 7007              JNZ     ?C0067
                                           ; SOURCE LINE # 463
                                           ; SOURCE LINE # 464
0015 900000      R     MOV     DPTR,#result
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 465
0019 020000      R     LJMP    ?C0068
001C         ?C0067:
                                           ; SOURCE LINE # 467
                                           ; SOURCE LINE # 468
;---- Variable 'error' assigned to Register 'R3' ----
001C 7BEE              MOV     R3,#0EEH
                                           ; SOURCE LINE # 469
001E E4                CLR     A
001F 900000      R     MOV     DPTR,#result
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 471
0023 900000      R     MOV     DPTR,#Addr
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 900000      R     MOV     DPTR,#Channel
002B 120000      R     LCALL   L?0150
002E EF                MOV     A,R7
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 472
0030 900000      R     MOV     DPTR,#SData
                                           ; SOURCE LINE # 473
0033 120000      R     LCALL   L?0144
0036 74FE              MOV     A,#0FEH
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 474
0039 900000      R     MOV     DPTR,#Channel
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 40  

003C 120000      R     LCALL   L?0155
003F 120000      R     LCALL   L?0148
0042 7444              MOV     A,#044H
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 476
0045 C28E              CLR     TR1
                                           ; SOURCE LINE # 477
0047 C2AB              CLR     ET1
                                           ; SOURCE LINE # 478
0049 00                NOP     
                                           ; SOURCE LINE # 479
004A 00                NOP     
                                           ; SOURCE LINE # 480
004B 00                NOP     
                                           ; SOURCE LINE # 481
004C 00                NOP     
                                           ; SOURCE LINE # 482
                                           ; SOURCE LINE # 483
                                           ; SOURCE LINE # 484
                                           ; SOURCE LINE # 485
004D 120000      R     LCALL   L?0171
0050         ?C0069:
                                           ; SOURCE LINE # 487
0050 208F14            JB      TF1,?C0070
                                           ; SOURCE LINE # 488
                                           ; SOURCE LINE # 489
0053 900000      R     MOV     DPTR,#Channel
0056 E0                MOVX    A,@DPTR
0057 120000      R     LCALL   L?0147
005A E0                MOVX    A,@DPTR
005B 900000      R     MOV     DPTR,#status
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 490
005F E0                MOVX    A,@DPTR
0060 547E              ANL     A,#07EH
0062 60EC              JZ      ?C0069
                                           ; SOURCE LINE # 491
                                           ; SOURCE LINE # 492
                                           ; SOURCE LINE # 493
                                           ; SOURCE LINE # 494
0064 120000      R     LCALL   L?0169
                                           ; SOURCE LINE # 495
                                           ; SOURCE LINE # 496
                                           ; SOURCE LINE # 497
0067         ?C0070:
                                           ; SOURCE LINE # 499
0067 308F0F            JNB     TF1,?C0072
                                           ; SOURCE LINE # 500
                                           ; SOURCE LINE # 501
                                           ; SOURCE LINE # 502
                                           ; SOURCE LINE # 503
006A 120000      R     LCALL   L?0169
                                           ; SOURCE LINE # 504
006D 900000      R     MOV     DPTR,#Channel
0070 E0                MOVX    A,@DPTR
0071 FF                MOV     R7,A
0072 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 505
0075 7BEE              MOV     R3,#0EEH
                                           ; SOURCE LINE # 506
0077 801C              SJMP    ?C0073
0079         ?C0072:
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 41  

                                           ; SOURCE LINE # 508
                                           ; SOURCE LINE # 509
0079 900000      R     MOV     DPTR,#status
007C E0                MOVX    A,@DPTR
007D FF                MOV     R7,A
007E 547C              ANL     A,#07CH
0080 6011              JZ      ?C0074
                                           ; SOURCE LINE # 510
                                           ; SOURCE LINE # 511
0082 EF                MOV     A,R7
0083 5418              ANL     A,#018H
0085 6008              JZ      ?C0075
                                           ; SOURCE LINE # 512
                                           ; SOURCE LINE # 513
0087 900000      R     MOV     DPTR,#Channel
008A E0                MOVX    A,@DPTR
008B FF                MOV     R7,A
008C 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 514
008F         ?C0075:
                                           ; SOURCE LINE # 515
008F 7BEE              MOV     R3,#0EEH
                                           ; SOURCE LINE # 516
0091 8002              SJMP    ?C0073
0093         ?C0074:
                                           ; SOURCE LINE # 518
                                           ; SOURCE LINE # 519
0093 E4                CLR     A
0094 FB                MOV     R3,A
                                           ; SOURCE LINE # 520
                                           ; SOURCE LINE # 521
0095         ?C0073:
                                           ; SOURCE LINE # 523
0095 EB                MOV     A,R3
0096 B4EE07            CJNE    A,#0EEH,?C0077
                                           ; SOURCE LINE # 524
                                           ; SOURCE LINE # 525
0099 E4                CLR     A
009A 900000      R     MOV     DPTR,#result
009D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 526
009E 8006              SJMP    ?C0078
00A0         ?C0077:
                                           ; SOURCE LINE # 528
                                           ; SOURCE LINE # 529
00A0 900000      R     MOV     DPTR,#result
00A3 7401              MOV     A,#01H
00A5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 530
00A6         ?C0078:
                                           ; SOURCE LINE # 531
00A6 900000      R     MOV     DPTR,#Channel
00A9 E0                MOVX    A,@DPTR
00AA 120000      R     LCALL   L?0147
00AD 74FE              MOV     A,#0FEH
00AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 532
00B0         ?C0068:
                                           ; SOURCE LINE # 534
00B0 900000      R     MOV     DPTR,#result
00B3 E0                MOVX    A,@DPTR
00B4 FF                MOV     R7,A
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 42  

                                           ; SOURCE LINE # 535
00B5         ?C0079:
00B5 22                RET     
             ; FUNCTION _bSMBusSendByte (END)

             ; FUNCTION _bSMBusReceiveByte (BEGIN)
                                           ; SOURCE LINE # 540
0000 900000      R     MOV     DPTR,#Addr
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EB                MOV     A,R3
000A F0                MOVX    @DPTR,A
000B 900000      R     MOV     DPTR,#Channel
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 541
                                           ; SOURCE LINE # 546
0010 7D01              MOV     R5,#01H
0012 120000      R     LCALL   _CheckSMBusInterfaceCanbeUse
0015 EF                MOV     A,R7
0016 7007              JNZ     ?C0080
                                           ; SOURCE LINE # 547
                                           ; SOURCE LINE # 548
0018 900000      R     MOV     DPTR,#result
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 549
001C 020000      R     LJMP    ?C0081
001F         ?C0080:
                                           ; SOURCE LINE # 551
                                           ; SOURCE LINE # 552
;---- Variable 'error' assigned to Register 'R3' ----
001F 7BEE              MOV     R3,#0EEH
                                           ; SOURCE LINE # 553
0021 E4                CLR     A
0022 900000      R     MOV     DPTR,#result
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 555
0026 900000      R     MOV     DPTR,#Addr
0029 E0                MOVX    A,@DPTR
002A 4401              ORL     A,#01H
002C FF                MOV     R7,A
002D 900000      R     MOV     DPTR,#Channel
0030 E0                MOVX    A,@DPTR
0031 FE                MOV     R6,A
0032 75F015            MOV     B,#015H
0035 A4                MUL     AB
0036 2400        R     ADD     A,#LOW asSMBus+02H
0038 F582              MOV     DPL,A
003A E4                CLR     A
003B 3400        R     ADDC    A,#HIGH asSMBus+02H
                                           ; SOURCE LINE # 556
003D 120000      R     LCALL   L?0145
0040 74FE              MOV     A,#0FEH
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 557
0043 900000      R     MOV     DPTR,#Channel
0046 120000      R     LCALL   L?0155
0049 120000      R     LCALL   L?0148
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 43  

004C 7444              MOV     A,#044H
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 559
004F C28E              CLR     TR1
                                           ; SOURCE LINE # 560
0051 C2AB              CLR     ET1
                                           ; SOURCE LINE # 561
0053 00                NOP     
                                           ; SOURCE LINE # 562
0054 00                NOP     
                                           ; SOURCE LINE # 563
0055 00                NOP     
                                           ; SOURCE LINE # 564
0056 00                NOP     
                                           ; SOURCE LINE # 565
                                           ; SOURCE LINE # 566
                                           ; SOURCE LINE # 567
                                           ; SOURCE LINE # 568
0057 120000      R     LCALL   L?0171
005A         ?C0082:
                                           ; SOURCE LINE # 570
005A 208F14            JB      TF1,?C0083
                                           ; SOURCE LINE # 571
                                           ; SOURCE LINE # 572
005D 900000      R     MOV     DPTR,#Channel
0060 E0                MOVX    A,@DPTR
0061 120000      R     LCALL   L?0147
0064 E0                MOVX    A,@DPTR
0065 900000      R     MOV     DPTR,#status
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 573
0069 E0                MOVX    A,@DPTR
006A 547E              ANL     A,#07EH
006C 60EC              JZ      ?C0082
                                           ; SOURCE LINE # 574
                                           ; SOURCE LINE # 575
                                           ; SOURCE LINE # 576
                                           ; SOURCE LINE # 577
006E 120000      R     LCALL   L?0169
                                           ; SOURCE LINE # 578
                                           ; SOURCE LINE # 579
                                           ; SOURCE LINE # 580
0071         ?C0083:
                                           ; SOURCE LINE # 582
0071 308F0F            JNB     TF1,?C0085
                                           ; SOURCE LINE # 583
                                           ; SOURCE LINE # 584
                                           ; SOURCE LINE # 585
                                           ; SOURCE LINE # 586
0074 120000      R     LCALL   L?0169
                                           ; SOURCE LINE # 587
0077 900000      R     MOV     DPTR,#Channel
007A E0                MOVX    A,@DPTR
007B FF                MOV     R7,A
007C 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 588
007F 7BEE              MOV     R3,#0EEH
                                           ; SOURCE LINE # 589
0081 801C              SJMP    ?C0086
0083         ?C0085:
                                           ; SOURCE LINE # 591
                                           ; SOURCE LINE # 592
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 44  

0083 900000      R     MOV     DPTR,#status
0086 E0                MOVX    A,@DPTR
0087 FF                MOV     R7,A
0088 547C              ANL     A,#07CH
008A 6011              JZ      ?C0087
                                           ; SOURCE LINE # 593
                                           ; SOURCE LINE # 594
008C EF                MOV     A,R7
008D 5418              ANL     A,#018H
008F 6008              JZ      ?C0088
                                           ; SOURCE LINE # 595
                                           ; SOURCE LINE # 596
0091 900000      R     MOV     DPTR,#Channel
0094 E0                MOVX    A,@DPTR
0095 FF                MOV     R7,A
0096 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 597
0099         ?C0088:
                                           ; SOURCE LINE # 598
0099 7BEE              MOV     R3,#0EEH
                                           ; SOURCE LINE # 599
009B 8002              SJMP    ?C0086
009D         ?C0087:
                                           ; SOURCE LINE # 601
                                           ; SOURCE LINE # 602
009D E4                CLR     A
009E FB                MOV     R3,A
                                           ; SOURCE LINE # 603
                                           ; SOURCE LINE # 604
009F         ?C0086:
                                           ; SOURCE LINE # 606
009F EB                MOV     A,R3
00A0 B4EE07            CJNE    A,#0EEH,?C0090
                                           ; SOURCE LINE # 607
                                           ; SOURCE LINE # 608
00A3 E4                CLR     A
00A4 900000      R     MOV     DPTR,#result
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 609
00A8 8018              SJMP    ?C0091
00AA         ?C0090:
                                           ; SOURCE LINE # 611
                                           ; SOURCE LINE # 612
00AA 900000      R     MOV     DPTR,#Channel
00AD 120000      R     LCALL   L?0166
00B0 120000      R     LCALL   L?0148
00B3 E0                MOVX    A,@DPTR
00B4 900000      R     MOV     DPTR,#Var
00B7 120000      R     LCALL   L?0190
00BA EF                MOV     A,R7
00BB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 613
00BC 900000      R     MOV     DPTR,#result
00BF 7401              MOV     A,#01H
00C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 614
00C2         ?C0091:
                                           ; SOURCE LINE # 615
00C2 900000      R     MOV     DPTR,#Channel
00C5 E0                MOVX    A,@DPTR
00C6 120000      R     LCALL   L?0147
00C9 74FE              MOV     A,#0FEH
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 45  

00CB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 616
00CC         ?C0081:
                                           ; SOURCE LINE # 618
00CC 900000      R     MOV     DPTR,#result
00CF E0                MOVX    A,@DPTR
00D0 FF                MOV     R7,A
                                           ; SOURCE LINE # 619
00D1         ?C0092:
00D1 22                RET     
             ; FUNCTION _bSMBusReceiveByte (END)

             ; FUNCTION _CalcCRC8 (BEGIN)
                                           ; SOURCE LINE # 624
;---- Variable 'sourcebyte' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 625
                                           ; SOURCE LINE # 627
0000 7800        E     MOV     R0,#LOW SMBCRC8_A
0002 E6                MOV     A,@R0
0003 6F                XRL     A,R7
0004 F6                MOV     @R0,A
                                           ; SOURCE LINE # 628
0005 E6                MOV     A,@R0
0006 FF                MOV     R7,A
;---- Variable 'temp' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 630
0007 20E707            JB      ACC.7,?C0093
                                           ; SOURCE LINE # 631
                                           ; SOURCE LINE # 632
000A 25E0              ADD     A,ACC
000C FF                MOV     R7,A
                                           ; SOURCE LINE # 633
000D 66                XRL     A,@R0
000E F6                MOV     @R0,A
                                           ; SOURCE LINE # 634
000F 800D              SJMP    ?C0094
0011         ?C0093:
                                           ; SOURCE LINE # 636
                                           ; SOURCE LINE # 637
0011 EF                MOV     A,R7
0012 25E0              ADD     A,ACC
0014 FF                MOV     R7,A
                                           ; SOURCE LINE # 638
0015 7800        E     MOV     R0,#LOW SMBCRC8_A
0017 E6                MOV     A,@R0
0018 6409              XRL     A,#09H
001A F6                MOV     @R0,A
                                           ; SOURCE LINE # 639
001B E6                MOV     A,@R0
001C 6F                XRL     A,R7
001D F6                MOV     @R0,A
                                           ; SOURCE LINE # 640
001E         ?C0094:
                                           ; SOURCE LINE # 642
001E EF                MOV     A,R7
001F 20E707            JB      ACC.7,?C0095
                                           ; SOURCE LINE # 643
                                           ; SOURCE LINE # 644
0022 25E0              ADD     A,ACC
                                           ; SOURCE LINE # 645
0024 7800        E     MOV     R0,#LOW SMBCRC8_A
0026 66                XRL     A,@R0
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 46  

0027 F6                MOV     @R0,A
                                           ; SOURCE LINE # 646
0028 22                RET     
0029         ?C0095:
                                           ; SOURCE LINE # 648
                                           ; SOURCE LINE # 649
0029 EF                MOV     A,R7
002A 25E0              ADD     A,ACC
002C FF                MOV     R7,A
                                           ; SOURCE LINE # 650
002D 7800        E     MOV     R0,#LOW SMBCRC8_A
002F E6                MOV     A,@R0
0030 6407              XRL     A,#07H
0032 F6                MOV     @R0,A
                                           ; SOURCE LINE # 651
0033 E6                MOV     A,@R0
0034 6F                XRL     A,R7
0035 F6                MOV     @R0,A
                                           ; SOURCE LINE # 652
                                           ; SOURCE LINE # 653
0036         ?C0097:
0036 22                RET     
             ; FUNCTION _CalcCRC8 (END)

             ; FUNCTION _CheckSMBusFree (BEGIN)
                                           ; SOURCE LINE # 658
;---- Variable 'channel' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 659
                                           ; SOURCE LINE # 662
0000 EF                MOV     A,R7
0001 120000      R     LCALL   L?0184
0004 120000      R     LCALL   L?0148
0007 E0                MOVX    A,@DPTR
;---- Variable 'pinstatus' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 664
0008 5403              ANL     A,#03H
000A FE                MOV     R6,A
000B BE0303            CJNE    R6,#03H,?C0098
                                           ; SOURCE LINE # 665
                                           ; SOURCE LINE # 666
000E 7F00              MOV     R7,#00H
0010 22                RET     
                                           ; SOURCE LINE # 667
0011         ?C0098:
                                           ; SOURCE LINE # 669
                                           ; SOURCE LINE # 670
0011 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 671
                                           ; SOURCE LINE # 672
0013         ?C0099:
0013 22                RET     
             ; FUNCTION _CheckSMBusFree (END)

             ; FUNCTION _CheckSMBusInterfaceIsALT (BEGIN)
                                           ; SOURCE LINE # 677
;---- Variable 'channel' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 678
                                           ; SOURCE LINE # 679
0000 EF                MOV     A,R7
0001 120000      R     LCALL   L?0182
0004 120000      R     LCALL   L?0152
0007 E0                MOVX    A,@DPTR
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 47  

0008 54FB              ANL     A,#0FBH
000A 700C              JNZ     ?C0102
000C EF                MOV     A,R7
000D 120000      R     LCALL   L?0180
0010 120000      R     LCALL   L?0148
0013 E0                MOVX    A,@DPTR
0014 54FB              ANL     A,#0FBH
0016 6003              JZ      ?C0101
0018         ?C0102:
                                           ; SOURCE LINE # 680
                                           ; SOURCE LINE # 681
0018 7F00              MOV     R7,#00H
001A 22                RET     
                                           ; SOURCE LINE # 682
001B         ?C0101:
                                           ; SOURCE LINE # 684
                                           ; SOURCE LINE # 685
001B 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 686
                                           ; SOURCE LINE # 687
001D         ?C0103:
001D 22                RET     
             ; FUNCTION _CheckSMBusInterfaceIsALT (END)

             ; FUNCTION _CheckSMBusInterfaceCanbeUse (BEGIN)
                                           ; SOURCE LINE # 692
;---- Variable 'accesstype' assigned to Register 'R5' ----
0000 900000      R     MOV     DPTR,#channel
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 693
                                           ; SOURCE LINE # 696
0005 A3                INC     DPTR
0006 7401              MOV     A,#01H
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 706
0009 120000      R     LCALL   _CheckSMBusInterfaceIsALT
000C EF                MOV     A,R7
000D 7006              JNZ     ?C0105
                                           ; SOURCE LINE # 707
                                           ; SOURCE LINE # 708
000F 900000      R     MOV     DPTR,#checksmbus
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 709
0013 804B              SJMP    ?C0106
0015         ?C0105:
                                           ; SOURCE LINE # 711
                                           ; SOURCE LINE # 712
0015 ED                MOV     A,R5
0016 B40108            CJNE    A,#01H,?C0107
                                           ; SOURCE LINE # 713
                                           ; SOURCE LINE # 715
0019 900000      R     MOV     DPTR,#channel
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E 120000      E     LCALL   _WatiSMBusCHxFree
                                           ; SOURCE LINE # 717
0021         ?C0107:
                                           ; SOURCE LINE # 719
0021 900000      R     MOV     DPTR,#channel
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 48  

0026 120000      R     LCALL   _CheckSMBusFree
0029 BF0123            CJNE    R7,#01H,?C0108
                                           ; SOURCE LINE # 720
                                           ; SOURCE LINE # 721
002C E4                CLR     A
002D 900000      R     MOV     DPTR,#checksmbus
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 722
0031 900000      R     MOV     DPTR,#channel
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 120000      R     LCALL   L?0195
0039 120000      R     LCALL   L?0152
003C E0                MOVX    A,@DPTR
003D FE                MOV     R6,A
003E 04                INC     A
003F F0                MOVX    @DPTR,A
0040 900000      E     MOV     DPTR,#SMBus_BusyRecover
0043 E0                MOVX    A,@DPTR
0044 FD                MOV     R5,A
0045 EE                MOV     A,R6
0046 D3                SETB    C
0047 9D                SUBB    A,R5
0048 4016              JC      ?C0106
                                           ; SOURCE LINE # 723
                                           ; SOURCE LINE # 724
004A 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 725
                                           ; SOURCE LINE # 726
004D 8011              SJMP    ?C0106
004F         ?C0108:
                                           ; SOURCE LINE # 728
                                           ; SOURCE LINE # 729
004F 900000      R     MOV     DPTR,#channel
0052 E0                MOVX    A,@DPTR
0053 120000      R     LCALL   L?0195
0056 120000      R     LCALL   L?0148
0059 E4                CLR     A
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 730
005B 900000      R     MOV     DPTR,#checksmbus
005E 04                INC     A
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 731
                                           ; SOURCE LINE # 732
0060         ?C0106:
                                           ; SOURCE LINE # 734
0060 900000      R     MOV     DPTR,#checksmbus
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
                                           ; SOURCE LINE # 735
0065         ?C0111:
0065 22                RET     
             ; FUNCTION _CheckSMBusInterfaceCanbeUse (END)

             ; FUNCTION Core_Init_SMBus (BEGIN)
                                           ; SOURCE LINE # 740
                                           ; SOURCE LINE # 741
                                           ; SOURCE LINE # 742
0000 900000      E     MOV     DPTR,#SMBus_BusyRecover
0003 7414              MOV     A,#014H
0005 F0                MOVX    @DPTR,A
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 49  

                                           ; SOURCE LINE # 743
0006 22                RET     
             ; FUNCTION Core_Init_SMBus (END)

             ; FUNCTION _I2C_WriteStream (BEGIN)
                                           ; SOURCE LINE # 753
0000 900000      R     MOV     DPTR,#Var
0003 EA                MOV     A,R2
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EB                MOV     A,R3
0007 F0                MOVX    @DPTR,A
;---- Variable 'I2C_Chn' assigned to Register 'R1' ----
0008 C9                XCH     A,R1
0009 EF                MOV     A,R7
000A C9                XCH     A,R1
;---- Variable 'I2C_Addr' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 754
                                           ; SOURCE LINE # 757
000B E4                CLR     A
000C 900000      R     MOV     DPTR,#len
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 758
0010 120000      R     LCALL   L?0163
0013 120000      R     LCALL   L?0148
0016 7403              MOV     A,#03H
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 759
0019 E9                MOV     A,R1
001A 120000      R     LCALL   L?0147
001D 74FE              MOV     A,#0FEH
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 760
0020 5D                ANL     A,R5
0021 FF                MOV     R7,A
0022 E9                MOV     A,R1
0023 120000      R     LCALL   L?0151
0026 EF                MOV     A,R7
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 761
0028 120000      R     LCALL   L?0157
002B 120000      R     LCALL   L?0152
002E EF                MOV     A,R7
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 762
0030 E9                MOV     A,R1
0031 120000      R     LCALL   L?0156
0034 120000      R     LCALL   L?0148
0037 745C              MOV     A,#05CH
0039 F0                MOVX    @DPTR,A
003A         ?C0113:
                                           ; SOURCE LINE # 763
                                           ; SOURCE LINE # 764
                                           ; SOURCE LINE # 765
003A 900000      R     MOV     DPTR,#i
003D 7464              MOV     A,#064H
003F F0                MOVX    @DPTR,A
0040         ?C0115:
                                           ; SOURCE LINE # 766
                                           ; SOURCE LINE # 767
                                           ; SOURCE LINE # 768
0040 E4                CLR     A
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 50  

0041 900000      E     MOV     DPTR,#WNCKR
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 769
0045 E9                MOV     A,R1
0046 120000      R     LCALL   L?0162
0049 120000      R     LCALL   L?0192
004C 120000      R     LCALL   L?0186
;---- Variable 'j' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 770
004F 900000      R     MOV     DPTR,#i
0052 E0                MOVX    A,@DPTR
0053 D3                SETB    C
0054 9400              SUBB    A,#00H
0056 4005              JC      ?C0117
                                           ; SOURCE LINE # 771
                                           ; SOURCE LINE # 772
0058 E0                MOVX    A,@DPTR
0059 14                DEC     A
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 773
005B 8004              SJMP    ?C0118
005D         ?C0117:
                                           ; SOURCE LINE # 775
                                           ; SOURCE LINE # 776
005D 8F82              MOV     DPL,R7
                                           ; SOURCE LINE # 777
005F 8020              SJMP    ?C0141
                                           ; SOURCE LINE # 778
0061         ?C0118:
                                           ; SOURCE LINE # 779
0061 ED                MOV     A,R5
0062 20E724            JB      ACC.7,?C0116
                                           ; SOURCE LINE # 780
                                           ; SOURCE LINE # 781
                                           ; SOURCE LINE # 782
0065         ?C0120:
                                           ; SOURCE LINE # 783
0065 ED                MOV     A,R5
0066 5418              ANL     A,#018H
0068 6009              JZ      ?C0121
                                           ; SOURCE LINE # 784
                                           ; SOURCE LINE # 785
006A CF                XCH     A,R7
006B E9                MOV     A,R1
006C CF                XCH     A,R7
006D 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 786
0070 7F00              MOV     R7,#00H
0072 22                RET     
                                           ; SOURCE LINE # 787
0073         ?C0121:
                                           ; SOURCE LINE # 788
0073 ED                MOV     A,R5
0074 5464              ANL     A,#064H
0076 60C8              JZ      ?C0115
                                           ; SOURCE LINE # 789
                                           ; SOURCE LINE # 790
0078 E9                MOV     A,R1
0079 120000      R     LCALL   L?0162
007C 120000      R     LCALL   L?0192
007F F582              MOV     DPL,A
0081         ?C0141:
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 51  

0081 8E83              MOV     DPH,R6
0083 74FE              MOV     A,#0FEH
0085 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 791
0086 7F00              MOV     R7,#00H
0088 22                RET     
                                           ; SOURCE LINE # 792
                                           ; SOURCE LINE # 793
0089         ?C0116:
                                           ; SOURCE LINE # 794
0089 900000      R     MOV     DPTR,#len
008C E0                MOVX    A,@DPTR
008D 04                INC     A
008E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 795
008F 900000      R     MOV     DPTR,#Count
0092 E0                MOVX    A,@DPTR
0093 FF                MOV     R7,A
0094 900000      R     MOV     DPTR,#len
0097 E0                MOVX    A,@DPTR
0098 6F                XRL     A,R7
0099 6018              JZ      ?C0114
                                           ; SOURCE LINE # 796
                                           ; SOURCE LINE # 797
                                           ; SOURCE LINE # 798
009B         ?C0123:
                                           ; SOURCE LINE # 799
009B 900000      R     MOV     DPTR,#Var
009E 120000      R     LCALL   L?0189
                                           ; SOURCE LINE # 800
00A1 120000      R     LCALL   L?0157
00A4 120000      R     LCALL   L?0152
00A7 EF                MOV     A,R7
00A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 801
00A9 E9                MOV     A,R1
00AA 120000      R     LCALL   L?0147
00AD 74FE              MOV     A,#0FEH
00AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 802
00B0 020000      R     LJMP    ?C0113
00B3         ?C0114:
                                           ; SOURCE LINE # 804
00B3 120000      R     LCALL   L?0163
00B6 120000      R     LCALL   L?0148
00B9 7401              MOV     A,#01H
00BB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 805
00BC E9                MOV     A,R1
00BD 120000      R     LCALL   L?0147
00C0 74FE              MOV     A,#0FEH
00C2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 806
00C3 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 807
00C5         ?C0119:
00C5 22                RET     
             ; FUNCTION _I2C_WriteStream (END)

             ; FUNCTION _I2C_ReadStream (BEGIN)
                                           ; SOURCE LINE # 816
0000 900000      R     MOV     DPTR,#Var
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 52  

0003 EA                MOV     A,R2
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EB                MOV     A,R3
0007 F0                MOVX    @DPTR,A
;---- Variable 'I2C_Chn' assigned to Register 'R1' ----
0008 C9                XCH     A,R1
0009 EF                MOV     A,R7
000A C9                XCH     A,R1
;---- Variable 'I2C_Addr' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 817
                                           ; SOURCE LINE # 820
000B 120000      R     LCALL   L?0164
000E 120000      R     LCALL   L?0148
0011 7403              MOV     A,#03H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 821
0014 E9                MOV     A,R1
0015 120000      R     LCALL   L?0147
0018 74FE              MOV     A,#0FEH
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 822
001B ED                MOV     A,R5
001C 4401              ORL     A,#01H
001E FF                MOV     R7,A
001F E9                MOV     A,R1
0020 120000      R     LCALL   L?0151
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 823
0025 E9                MOV     A,R1
0026 120000      R     LCALL   L?0156
0029 120000      R     LCALL   L?0193
002C FF                MOV     R7,A
002D F582              MOV     DPL,A
002F 8E83              MOV     DPH,R6
0031 745C              MOV     A,#05CH
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 824
0034 900000      R     MOV     DPTR,#Count
0037 E0                MOVX    A,@DPTR
0038 B40108            CJNE    A,#01H,?C0127
                                           ; SOURCE LINE # 825
                                           ; SOURCE LINE # 826
003B 8F82              MOV     DPL,R7
003D 8E83              MOV     DPH,R6
003F E0                MOVX    A,@DPTR
0040 4420              ORL     A,#020H
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 827
0043         ?C0127:
                                           ; SOURCE LINE # 829
                                           ; SOURCE LINE # 830
;---- Variable 'i' assigned to Register 'R7' ----
0043 7F64              MOV     R7,#064H
0045         ?C0128:
                                           ; SOURCE LINE # 831
                                           ; SOURCE LINE # 832
                                           ; SOURCE LINE # 833
0045 E4                CLR     A
0046 900000      E     MOV     DPTR,#WNCKR
0049 F0                MOVX    @DPTR,A
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 53  

                                           ; SOURCE LINE # 834
004A EF                MOV     A,R7
004B D3                SETB    C
004C 9400              SUBB    A,#00H
004E 4028              JC      ?C0142
                                           ; SOURCE LINE # 835
                                           ; SOURCE LINE # 836
0050 1F                DEC     R7
                                           ; SOURCE LINE # 837
                                           ; SOURCE LINE # 842
0051         ?C0131:
                                           ; SOURCE LINE # 843
0051 E9                MOV     A,R1
0052 120000      R     LCALL   L?0162
0055 120000      R     LCALL   L?0152
0058 E0                MOVX    A,@DPTR
0059 900000      R     MOV     DPTR,#j
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 844
005D E0                MOVX    A,@DPTR
005E FE                MOV     R6,A
005F 20E720            JB      ACC.7,?C0129
                                           ; SOURCE LINE # 845
                                           ; SOURCE LINE # 846
                                           ; SOURCE LINE # 847
0062         ?C0133:
                                           ; SOURCE LINE # 848
0062 EE                MOV     A,R6
0063 5418              ANL     A,#018H
0065 6009              JZ      ?C0134
                                           ; SOURCE LINE # 849
                                           ; SOURCE LINE # 850
0067 CF                XCH     A,R7
0068 E9                MOV     A,R1
0069 CF                XCH     A,R7
006A 120000      R     LCALL   _ResetSMBus
                                           ; SOURCE LINE # 851
006D 7F00              MOV     R7,#00H
006F 22                RET     
                                           ; SOURCE LINE # 852
0070         ?C0134:
                                           ; SOURCE LINE # 853
0070 900000      R     MOV     DPTR,#j
0073 E0                MOVX    A,@DPTR
0074 5464              ANL     A,#064H
0076 60CD              JZ      ?C0128
                                           ; SOURCE LINE # 854
                                           ; SOURCE LINE # 855
0078         ?C0142:
0078 E9                MOV     A,R1
0079 120000      R     LCALL   L?0147
007C 74FE              MOV     A,#0FEH
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 856
007F 7F00              MOV     R7,#00H
0081 22                RET     
                                           ; SOURCE LINE # 857
                                           ; SOURCE LINE # 858
0082         ?C0129:
                                           ; SOURCE LINE # 859
0082 120000      R     LCALL   L?0158
0085 120000      R     LCALL   L?0148
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 54  

0088 E0                MOVX    A,@DPTR
0089 900000      R     MOV     DPTR,#Var
008C 120000      R     LCALL   L?0190
008F EF                MOV     A,R7
0090 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 860
0091 900000      R     MOV     DPTR,#Count
0094 E0                MOVX    A,@DPTR
0095 14                DEC     A
0096 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 861
0097 E0                MOVX    A,@DPTR
0098 FF                MOV     R7,A
0099 B4010B            CJNE    A,#01H,?C0136
                                           ; SOURCE LINE # 862
                                           ; SOURCE LINE # 863
009C E9                MOV     A,R1
009D 120000      R     LCALL   L?0156
00A0 120000      R     LCALL   L?0152
00A3 E0                MOVX    A,@DPTR
00A4 4420              ORL     A,#020H
00A6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 864
00A7         ?C0136:
                                           ; SOURCE LINE # 865
00A7 900000      R     MOV     DPTR,#Var
00AA 120000      R     LCALL   L?0189
                                           ; SOURCE LINE # 866
00AD E9                MOV     A,R1
00AE 120000      R     LCALL   L?0162
00B1 F583              MOV     DPH,A
00B3 E4                CLR     A
00B4 93                MOVC    A,@A+DPTR
00B5 FC                MOV     R4,A
00B6 7401              MOV     A,#01H
00B8 93                MOVC    A,@A+DPTR
00B9 FD                MOV     R5,A
00BA F582              MOV     DPL,A
00BC 8C83              MOV     DPH,R4
00BE 74FE              MOV     A,#0FEH
00C0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 867
                                           ; SOURCE LINE # 868
00C1 EF                MOV     A,R7
00C2 D3                SETB    C
00C3 9400              SUBB    A,#00H
00C5 4003              JC      $ + 5H
00C7 020000      R     LJMP    ?C0127
                                           ; SOURCE LINE # 870
00CA 120000      R     LCALL   L?0164
00CD 120000      R     LCALL   L?0148
00D0 7401              MOV     A,#01H
00D2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 871
00D3 8D82              MOV     DPL,R5
00D5 8C83              MOV     DPH,R4
00D7 74FE              MOV     A,#0FEH
00D9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 872
00DA E9                MOV     A,R1
00DB 120000      R     LCALL   L?0156
00DE 120000      R     LCALL   L?0148
C51 COMPILER V7.50   CORE_SMBUS                                                            09/08/2020 15:56:19 PAGE 55  

00E1 E0                MOVX    A,@DPTR
00E2 54DF              ANL     A,#0DFH
00E4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 873
00E5 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 874
00E7         ?C0132:
00E7 22                RET     
             ; FUNCTION _I2C_ReadStream (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2804    ----
   CONSTANT SIZE    =    144    ----
   XDATA SIZE       =   ----      56
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
